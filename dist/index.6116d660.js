// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"fZl0R":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "69f74e7f31319ffd";
module.bundle.HMR_BUNDLE_ID = "6b8374836116d660";
"use strict";
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F1() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                } // Render the fancy html overlay
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
            document.body.appendChild(overlay);
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>\n          ").concat(stack, "\n        </pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>' + hint + '</div>';
            }).join(''), "\n        </div>\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') {
        reloadCSS();
        return;
    }
    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
    if (deps) {
        var fn = new Function('require', 'module', 'exports', asset.output);
        modules[asset.id] = [
            fn,
            deps
        ];
    } else if (bundle.parent) hmrApply(bundle.parent, asset);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    return getParents(module.bundle.root, id).some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"7sr9x":[function(require,module,exports) {
var global = arguments[3];
var Buffer = require("buffer").Buffer;
var process = require("process");
(function(global1, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define([
        'exports'
    ], factory) : (global1 = global1 || self, factory(global1.faceapi = global1.faceapi || {
    }));
})(this, function(exports) {
    'use strict';
    /**
   * @license
   * Copyright 2020 Google LLC. All Rights Reserved.
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   * =============================================================================
   */ var t6 = function(e, n) {
        return (t6 = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(t1, e1) {
            t1.__proto__ = e1;
        } || function(t1, e1) {
            for(var n1 in e1)e1.hasOwnProperty(n1) && (t1[n1] = e1[n1]);
        })(e, n);
    };
    function e(e1, n) {
        function r() {
            this.constructor = e1;
        }
        t6(e1, n), e1.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r);
    }
    function n10(t1, e1, n1, r) {
        return new (n1 || (n1 = Promise))(function(o, a) {
            function i(t2) {
                try {
                    u(r.next(t2));
                } catch (t3) {
                    a(t3);
                }
            }
            function s(t2) {
                try {
                    u(r.throw(t2));
                } catch (t3) {
                    a(t3);
                }
            }
            function u(t2) {
                t2.done ? o(t2.value) : new n1(function(e2) {
                    e2(t2.value);
                }).then(i, s);
            }
            u((r = r.apply(t1, e1 || [])).next());
        });
    }
    function r17(t1, e1) {
        var n1, r1, o, a, i = {
            label: 0,
            sent: function() {
                if (1 & o[0]) throw o[1];
                return o[1];
            },
            trys: [],
            ops: []
        };
        function s(a1) {
            return function(s1) {
                return (function(a2) {
                    if (n1) throw new TypeError("Generator is already executing.");
                    for(; i;)try {
                        if (n1 = 1, r1 && (o = 2 & a2[0] ? r1.return : a2[0] ? r1.throw || ((o = r1.return) && o.call(r1), 0) : r1.next) && !(o = o.call(r1, a2[1])).done) return o;
                        switch(r1 = 0, o && (a2 = [
                            2 & a2[0],
                            o.value
                        ]), a2[0]){
                            case 0:
                            case 1:
                                o = a2;
                                break;
                            case 4:
                                return i.label++, {
                                    value: a2[1],
                                    done: !1
                                };
                            case 5:
                                i.label++, r1 = a2[1], a2 = [
                                    0
                                ];
                                continue;
                            case 7:
                                a2 = i.ops.pop(), i.trys.pop();
                                continue;
                            default:
                                if (!(o = (o = i.trys).length > 0 && o[o.length - 1]) && (6 === a2[0] || 2 === a2[0])) {
                                    i = 0;
                                    continue;
                                }
                                if (3 === a2[0] && (!o || a2[1] > o[0] && a2[1] < o[3])) {
                                    i.label = a2[1];
                                    break;
                                }
                                if (6 === a2[0] && i.label < o[1]) {
                                    i.label = o[1], o = a2;
                                    break;
                                }
                                if (o && i.label < o[2]) {
                                    i.label = o[2], i.ops.push(a2);
                                    break;
                                }
                                o[2] && i.ops.pop(), i.trys.pop();
                                continue;
                        }
                        a2 = e1.call(t1, i);
                    } catch (t2) {
                        a2 = [
                            6,
                            t2
                        ], r1 = 0;
                    } finally{
                        n1 = o = 0;
                    }
                    if (5 & a2[0]) throw a2[1];
                    return {
                        value: a2[0] ? a2[1] : void 0,
                        done: !0
                    };
                })([
                    a1,
                    s1
                ]);
            };
        }
        return a = {
            next: s(0),
            throw: s(1),
            return: s(2)
        }, "function" == typeof Symbol && (a[Symbol.iterator] = function() {
            return this;
        }), a;
    }
    var o6 = function() {
        function t1(t2) {
            this.global = t2, this.flags = {
            }, this.flagRegistry = {
            }, this.urlFlags = {
            }, this.populateURLFlags();
        }
        return t1.prototype.setPlatform = function(t2, e1) {
            null != this.platform && console.warn("Platform " + this.platformName + " has already been set. Overwriting the platform with " + e1 + "."), this.platformName = t2, this.platform = e1;
        }, t1.prototype.registerFlag = function(t2, e1, n1) {
            if (this.flagRegistry[t2] = {
                evaluationFn: e1,
                setHook: n1
            }, null != this.urlFlags[t2]) {
                var r1 = this.urlFlags[t2];
                console.warn("Setting feature override from URL " + t2 + ": " + r1 + "."), this.set(t2, r1);
            }
        }, t1.prototype.get = function(t2) {
            return t2 in this.flags ? this.flags[t2] : (this.flags[t2] = this.evaluateFlag(t2), this.flags[t2]);
        }, t1.prototype.getNumber = function(t2) {
            return this.get(t2);
        }, t1.prototype.getBool = function(t2) {
            return this.get(t2);
        }, t1.prototype.getFlags = function() {
            return this.flags;
        }, Object.defineProperty(t1.prototype, "features", {
            get: function() {
                return this.flags;
            },
            enumerable: !0,
            configurable: !0
        }), t1.prototype.set = function(t2, e1) {
            if (null == this.flagRegistry[t2]) throw new Error("Cannot set flag " + t2 + " as it has not been registered.");
            this.flags[t2] = e1, null != this.flagRegistry[t2].setHook && this.flagRegistry[t2].setHook(e1);
        }, t1.prototype.evaluateFlag = function(t2) {
            if (null == this.flagRegistry[t2]) throw new Error("Cannot evaluate flag '" + t2 + "': no evaluation function found.");
            return this.flagRegistry[t2].evaluationFn();
        }, t1.prototype.setFlags = function(t2) {
            this.flags = Object.assign({
            }, t2);
        }, t1.prototype.reset = function() {
            this.flags = {
            }, this.urlFlags = {
            }, this.populateURLFlags();
        }, t1.prototype.populateURLFlags = function() {
            var t2 = this;
            if ((void 0) !== this.global && (void 0) !== this.global.location && (void 0) !== this.global.location.search) {
                var e1, n1, r2 = (e1 = this.global.location.search, n1 = {
                }, e1.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function(t3) {
                    for(var e2 = [], r3 = 1; r3 < arguments.length; r3++)e2[r3 - 1] = arguments[r3];
                    return a17(n1, e2[0], e2[1]), e2.join("=");
                }), n1);
                if ("tfjsflags" in r2) r2.tfjsflags.split(",").forEach(function(e2) {
                    var n2 = e2.split(":"), r3 = n2[0], o1 = n2[1];
                    t2.urlFlags[r3] = (function(t3, e3) {
                        if ("true" === (e3 = e3.toLowerCase()) || "false" === e3) return "true" === e3;
                        if ("" + +e3 === e3) return +e3;
                        throw new Error("Could not parse value flag value " + e3 + " for flag " + t3 + ".");
                    })(r3, o1);
                });
            }
        }, t1;
    }();
    function a17(t1, e2, n2) {
        t1[decodeURIComponent(e2)] = decodeURIComponent(n2 || "");
    }
    function i15() {
        return s;
    }
    var s = null;
    var u = new Map, c = new Map;
    function l(t1, e2) {
        var n2 = g(t1, e2);
        return u.get(n2);
    }
    function h(t1) {
        return c.get(t1);
    }
    function f(t1) {
        for(var e2 = u.entries(), n2 = [];;){
            var r3 = e2.next(), o1 = r3.done, a1 = r3.value;
            if (o1) break;
            var i1 = a1[0], s1 = a1[1];
            i1.split("_")[0] === t1 && n2.push(s1);
        }
        return n2;
    }
    function d2(t1) {
        var e2 = t1.kernelName, n2 = t1.backendName, r4 = g(e2, n2);
        if (u.has(r4)) throw new Error("The kernel '" + e2 + "' for backend '" + n2 + "' is already registered");
        u.set(r4, t1);
    }
    function p2(t1) {
        var e2 = t1.kernelName;
        c.has(e2) && console.warn("Overriding the gradient for '" + e2 + "'"), c.set(e2, t1);
    }
    function v2(t1, e2) {
        var n2 = g(t1, e2);
        if (!u.has(n2)) throw new Error("The kernel '" + t1 + "' for backend '" + e2 + "' is not registered");
        u.delete(n2);
    }
    function m2(t1) {
        if (!c.has(t1)) throw new Error("The gradient '" + t1 + "' for backend is not registered");
        c.delete(t1);
    }
    function g(t1, e2) {
        return e2 + "_" + t1;
    }
    function y(t1) {
        for(var e2 = t1.length, n2 = 0, r4 = 0; e2 > 0;)r4 = Math.random() * e2 | 0, n2 = t1[--e2], t1[e2] = t1[r4], t1[r4] = n2;
    }
    function x1(t1, e2, n2) {
        return Math.max(t1, Math.min(e2, n2));
    }
    function b(t1) {
        return t1 % 2 == 0 ? t1 : t1 + 1;
    }
    function w(t1) {
        for(var e2 = 0, n2 = 0; n2 < t1.length; n2++)e2 += t1[n2];
        return e2;
    }
    function C(t1, e2) {
        if (!t1) throw new Error("string" == typeof e2 ? e2 : e2());
    }
    function E(t1, e2, n2) {
        (void 0) === n2 && (n2 = ""), C(S(t1, e2), function() {
            return n2 + " Shapes " + t1 + " and " + e2 + " must match";
        });
    }
    function R(t1) {
        C(null != t1, function() {
            return "The input to the tensor constructor must be a non-null value.";
        });
    }
    function I(t1, e2, n2) {
        if ((void 0) === e2 && (e2 = []), (void 0) === n2 && (n2 = !1), null == e2 && (e2 = []), Array.isArray(t1) || V(t1) && !n2) for(var r4 = 0; r4 < t1.length; ++r4)I(t1[r4], e2, n2);
        else e2.push(t1);
        return e2;
    }
    function k(t1) {
        if (0 === t1.length) return 1;
        for(var e2 = t1[0], n2 = 1; n2 < t1.length; n2++)e2 *= t1[n2];
        return e2;
    }
    function S(t1, e2) {
        if (t1 === e2) return !0;
        if (null == t1 || null == e2) return !1;
        if (t1.length !== e2.length) return !1;
        for(var n2 = 0; n2 < t1.length; n2++)if (t1[n2] !== e2[n2]) return !1;
        return !0;
    }
    function A(t1) {
        return t1 % 1 == 0;
    }
    function D(t1) {
        if (null != Math.tanh) return Math.tanh(t1);
        if (t1 === 1 / 0) return 1;
        if (t1 === -1 / 0) return -1;
        var e2 = Math.exp(2 * t1);
        return (e2 - 1) / (e2 + 1);
    }
    function T(t1) {
        var e2 = Math.ceil(Math.sqrt(t1));
        return [
            e2,
            Math.ceil(t1 / e2)
        ];
    }
    function N(t1, e2) {
        return e2 <= t1.length ? t1 : t1 + " ".repeat(e2 - t1.length);
    }
    function F(t1, e2, n2) {
        return (void 0) === e2 && (e2 = function(t2) {
            return 0;
        }), new Promise(function(r4, o2) {
            var a2 = 0, i2 = function() {
                if (t1()) r4();
                else {
                    a2++;
                    var s2 = e2(a2);
                    null != n2 && a2 >= n2 ? o2() : setTimeout(i2, s2);
                }
            };
            i2();
        });
    }
    function _(t1, e2) {
        for(var n2 = 1, r4 = -1, o2 = 0; o2 < t1.length; ++o2)if (t1[o2] >= 0) n2 *= t1[o2];
        else if (-1 === t1[o2]) {
            if (-1 !== r4) throw Error("Shapes can only have 1 implicit size. Found -1 at dim " + r4 + " and dim " + o2);
            r4 = o2;
        } else if (t1[o2] < 0) throw Error("Shapes can not be < 0. Found " + t1[o2] + " at dim " + o2);
        if (-1 === r4) {
            if (e2 > 0 && e2 !== n2) throw Error("Size(" + e2 + ") must match the product of shape " + t1);
            return t1;
        }
        if (0 === n2) throw Error("Cannot infer the missing size in [" + t1 + "] when there are 0 elements");
        if (e2 % n2 != 0) throw Error("The implicit shape can't be a fractional number. Got " + e2 + " / " + n2);
        var a2 = t1.slice();
        return a2[r4] = e2 / n2, a2;
    }
    function O(t1, e2) {
        var n2 = e2.length;
        return C((t1 = null == t1 ? e2.map(function(t2, e3) {
            return e3;
        }) : [].concat(t1)).every(function(t2) {
            return t2 >= -n2 && t2 < n2;
        }), function() {
            return "All values in axis param must be in range [-" + n2 + ", " + n2 + ") but got axis " + t1;
        }), C(t1.every(function(t2) {
            return A(t2);
        }), function() {
            return "All values in axis param must be integers but got axis " + t1;
        }), t1.map(function(t2) {
            return t2 < 0 ? n2 + t2 : t2;
        });
    }
    function M(t1, e2) {
        for(var n2 = [], r4 = [], o2 = null != e2 && Array.isArray(e2) && 0 === e2.length, a2 = null == e2 || o2 ? null : O(e2, t1).sort(), i2 = 0, s3 = 0; s3 < t1.length; ++s3){
            if (null != a2) {
                if (a2[i2] === s3 && 1 !== t1[s3]) throw new Error("Can't squeeze axis " + s3 + " since its dim '" + t1[s3] + "' is not 1");
                (null == a2[i2] || a2[i2] > s3) && 1 === t1[s3] && (n2.push(t1[s3]), r4.push(s3)), a2[i2] <= s3 && i2++;
            }
            1 !== t1[s3] && (n2.push(t1[s3]), r4.push(s3));
        }
        return {
            newShape: n2,
            keptDims: r4
        };
    }
    function B(t1, e2) {
        var n2 = null;
        if (null == t1 || "float32" === t1) n2 = new Float32Array(e2);
        else if ("int32" === t1) n2 = new Int32Array(e2);
        else {
            if ("bool" !== t1) throw new Error("Unknown data type " + t1);
            n2 = new Uint8Array(e2);
        }
        return n2;
    }
    function P(t1, e2) {
        var n2 = null;
        if (null == t1 || "float32" === t1) n2 = new Float32Array(e2);
        else if ("int32" === t1) n2 = new Int32Array(e2);
        else if ("bool" === t1) n2 = new Uint8Array(e2);
        else {
            if ("string" !== t1) throw new Error("Unknown data type " + t1);
            n2 = new Array(e2);
        }
        return n2;
    }
    function L(t1, e2) {
        for(var n2 = 0; n2 < t1.length; n2++){
            var r4 = t1[n2];
            if (isNaN(r4) || !isFinite(r4)) throw Error("A tensor of type " + e2 + " being uploaded contains " + r4 + ".");
        }
    }
    function W(t1) {
        return "bool" === t1 || "complex64" === t1 || "float32" === t1 || "int32" === t1 || "string" === t1;
    }
    function U(t1, e2) {
        return "complex64" !== e2 && ("float32" !== e2 || "complex64" === t1) && ("int32" !== e2 || "float32" === t1 || "complex64" === t1) && ("bool" !== e2 || "bool" !== t1);
    }
    function V(t1) {
        return t1 instanceof Float32Array || t1 instanceof Int32Array || t1 instanceof Uint8Array;
    }
    function z(t1) {
        if ("float32" === t1 || "int32" === t1) return 4;
        if ("complex64" === t1) return 8;
        if ("bool" === t1) return 1;
        throw new Error("Unknown dtype " + t1);
    }
    function G(t1) {
        if (null == t1) return 0;
        var e2 = 0;
        return t1.forEach(function(t2) {
            return e2 += t2.length;
        }), e2;
    }
    function H(t1) {
        return "string" == typeof t1 || t1 instanceof String;
    }
    function q4(t1) {
        return "boolean" == typeof t1;
    }
    function K(t1) {
        return "number" == typeof t1;
    }
    function j(t1) {
        return Array.isArray(t1) ? j(t1[0]) : t1 instanceof Float32Array ? "float32" : t1 instanceof Int32Array || t1 instanceof Uint8Array ? "int32" : K(t1) ? "float32" : H(t1) ? "string" : q4(t1) ? "bool" : "float32";
    }
    function X(t1) {
        return !!(t1 && t1.constructor && t1.call && t1.apply);
    }
    function Y(t1, e2) {
        for(var n2 = e2; n2 < t1; ++n2)if (t1 % n2 == 0) return n2;
        return t1;
    }
    function $(t1) {
        var e2 = t1.length;
        if (e2 < 2) return [];
        var n2 = new Array(e2 - 1);
        n2[e2 - 2] = t1[e2 - 1];
        for(var r5 = e2 - 3; r5 >= 0; --r5)n2[r5] = n2[r5 + 1] * t1[r5 + 1];
        return n2;
    }
    function Q(t1, e2, n2) {
        if ("string" === e2) throw new Error("Cannot convert a string[] to a TypedArray");
        if (Array.isArray(t1) && (t1 = I(t1)), n2 && L(t1, e2), (function(t2, e3) {
            return t2 instanceof Float32Array && "float32" === e3 || t2 instanceof Int32Array && "int32" === e3 || t2 instanceof Uint8Array && "bool" === e3;
        })(t1, e2)) return t1;
        if (null == e2 || "float32" === e2 || "complex64" === e2) return new Float32Array(t1);
        if ("int32" === e2) return new Int32Array(t1);
        if ("bool" === e2) {
            for(var r5 = new Uint8Array(t1.length), o2 = 0; o2 < r5.length; ++o2)0 !== Math.round(t1[o2]) && (r5[o2] = 1);
            return r5;
        }
        throw new Error("Unknown data type " + e2);
    }
    function J(t1, e2) {
        if (0 === t1.length) return e2[0];
        var n2 = t1.reduce(function(t2, e3) {
            return t2 * e3;
        });
        if (0 === n2) return [];
        if (n2 !== e2.length) throw new Error("[" + t1 + "] does not match the input size.");
        return (function t2(e3, n3, r6) {
            var o3 = new Array;
            if (1 === n3.length) for(var a2 = n3[0], i2 = 0; i2 < a2; i2++)o3[i2] = r6[e3 + i2];
            else {
                a2 = n3[0];
                var s3 = n3.slice(1), u1 = s3.reduce(function(t3, e4) {
                    return t3 * e4;
                });
                for(i2 = 0; i2 < a2; i2++)o3[i2] = t2(e3 + i2 * u1, s3, r6);
            }
            return o3;
        })(0, t1, e2);
    }
    function Z(t1, e2) {
        for(var n2 = tt(t1, e2), r6 = 0; r6 < n2.length; r6++)n2[r6] = 1;
        return n2;
    }
    function tt(t1, e2) {
        if (null == e2 || "float32" === e2 || "complex64" === e2) return new Float32Array(t1);
        if ("int32" === e2) return new Int32Array(t1);
        if ("bool" === e2) return new Uint8Array(t1);
        throw new Error("Unknown data type " + e2);
    }
    function et() {
        return i15().platform.now();
    }
    function nt(t1) {
        t1.forEach(function(e2) {
            C(Number.isInteger(e2) && e2 >= 0, function() {
                return "Tensor must have a shape comprised of positive integers but got shape [" + t1 + "].";
            });
        });
    }
    function rt(t1, e2) {
        return (void 0) === e2 && (e2 = "utf-8"), e2 = e2 || "utf-8", i15().platform.encode(t1, e2);
    }
    function ot(t1, e2) {
        return (void 0) === e2 && (e2 = "utf-8"), e2 = e2 || "utf-8", i15().platform.decode(t1, e2);
    }
    function at(t1, e2, n2) {
        if (0 === e2) return 0;
        if (1 === e2) return t1[0];
        for(var r6 = t1[t1.length - 1], o3 = 0; o3 < t1.length - 1; ++o3)r6 += n2[o3] * t1[o3];
        return r6;
    }
    function it(t1, e2, n2) {
        if (0 === e2) return [];
        if (1 === e2) return [
            t1
        ];
        for(var r6 = new Array(e2), o3 = 0; o3 < r6.length - 1; ++o3)r6[o3] = Math.floor(t1 / n2[o3]), t1 -= r6[o3] * n2[o3];
        return r6[r6.length - 1] = t1, r6;
    }
    var st = Object.freeze({
        shuffle: y,
        clamp: x1,
        nearestLargerEven: b,
        sum: w,
        randUniform: function(t1, e2) {
            var n2 = Math.random();
            return e2 * n2 + (1 - n2) * t1;
        },
        distSquared: function(t1, e2) {
            for(var n2 = 0, r6 = 0; r6 < t1.length; r6++){
                var o3 = Number(t1[r6]) - Number(e2[r6]);
                n2 += o3 * o3;
            }
            return n2;
        },
        assert: C,
        assertShapesMatch: E,
        assertNonNull: R,
        flatten: I,
        sizeFromShape: k,
        isScalarShape: function(t1) {
            return 0 === t1.length;
        },
        arraysEqual: S,
        isInt: A,
        tanh: D,
        sizeToSquarishShape: T,
        createShuffledIndices: function(t1) {
            for(var e2 = new Uint32Array(t1), n2 = 0; n2 < t1; ++n2)e2[n2] = n2;
            return y(e2), e2;
        },
        rightPad: N,
        repeatedTry: F,
        inferFromImplicitShape: _,
        parseAxisParam: O,
        squeezeShape: M,
        getTypedArrayFromDType: B,
        getArrayFromDType: P,
        checkConversionForErrors: L,
        isValidDtype: W,
        hasEncodingLoss: U,
        isTypedArray: V,
        bytesPerElement: z,
        bytesFromStringArray: G,
        isString: H,
        isBoolean: q4,
        isNumber: K,
        inferDtype: j,
        isFunction: X,
        nearestDivisor: Y,
        computeStrides: $,
        toTypedArray: Q,
        toNestedArray: J,
        makeOnesTypedArray: Z,
        makeZerosTypedArray: tt,
        now: et,
        assertNonNegativeIntegerDimensions: nt,
        fetch: function(t1, e2) {
            return i15().platform.fetch(t1, e2);
        },
        encodeString: rt,
        decodeString: ot,
        locToIndex: at,
        indexToLoc: it
    }), ut = function() {
        function t1(t2, e2) {
            this.backendTimer = t2, this.logger = e2, null == e2 && (this.logger = new ct);
        }
        return t1.prototype.profileKernel = function(t2, e2, n2) {
            var r6, o4 = this, a2 = this.backendTimer.time(function() {
                r6 = n2();
            });
            return r6.forEach(function(n3) {
                n3.data().then(function(r7) {
                    !function(t3, e3, n4) {
                        if ("float32" !== e3) return !1;
                        for(var r8 = 0; r8 < t3.length; r8++){
                            var o5 = t3[r8];
                            if (isNaN(o5) || !isFinite(o5)) return console.warn("Found " + o5 + " in the result of '" + n4 + "'"), !0;
                        }
                    }(r7, n3.dtype, t2), a2.then(function(a3) {
                        var i2 = "";
                        null != a3.getExtraProfileInfo && (i2 = a3.getExtraProfileInfo()), o4.logger.logKernelProfile(t2, n3, r7, a3.kernelMs, e2, i2);
                    });
                });
            }), r6;
        }, t1;
    }();
    var ct = function() {
        function t1() {
        }
        return t1.prototype.logKernelProfile = function(t2, e2, n2, r6, o4, a2) {
            var i2 = "number" == typeof r6 ? N(r6 + "ms", 9) : r6.error, s4 = N(t2, 25), u2 = e2.rank, c1 = e2.size, l1 = N(e2.shape.toString(), 14), h1 = "";
            for(var f1 in o4){
                var d1 = o4[f1].shape || e2.shape, p1 = d1.length;
                h1 += f1 + ": " + p1 + "D " + (p1 > 0 ? d1 : "") + " ";
            }
            console.log("%c" + s4 + "\t%c" + i2 + "\t%c" + u2 + "D " + l1 + "\t%c" + c1 + "\t%c" + h1 + "\t%c" + a2, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
        }, t1;
    }();
    var lt = 20, ht = 3, ft = 7;
    function dt(t1, e2, n2, r6) {
        var o4 = $(e2), a2 = function(t2, e3, n3, r7) {
            var o6 = k(e3), a3 = r7[r7.length - 1], i2 = new Array(a3).fill(0), s4 = e3.length, u2 = "complex64" === n3 ? mt(t2) : t2;
            if (s4 > 1) for(var c1 = 0; c1 < o6 / a3; c1++)for(var l1 = c1 * a3, h1 = 0; h1 < a3; h1++)i2[h1] = Math.max(i2[h1], pt(u2[l1 + h1], 0, n3).length);
            return i2;
        }(t1, e2, n2, o4), i2 = e2.length, s4 = function t2(e3, n3, r7, o6, a3, i3) {
            (void 0) === i3 && (i3 = !0);
            var s5 = "complex64" === r7 ? 2 : 1, u2 = n3[0], c1 = n3.length;
            if (0 === c1) return "complex64" === r7 ? [
                pt(mt(e3)[0], 0, r7)
            ] : "bool" === r7 ? [
                vt(e3[0])
            ] : [
                e3[0].toString()
            ];
            if (1 === c1) {
                if (u2 > lt) {
                    var l1 = ht * s5, h1 = Array.from(e3.slice(0, l1)), f1 = Array.from(e3.slice((u2 - ht) * s5, u2 * s5));
                    return "complex64" === r7 && (h1 = mt(h1), f1 = mt(f1)), [
                        "[" + h1.map(function(t3, e4) {
                            return pt(t3, a3[e4], r7);
                        }).join(", ") + ", ..., " + f1.map(function(t3, e4) {
                            return pt(t3, a3[u2 - ht + e4], r7);
                        }).join(", ") + "]"
                    ];
                }
                return [
                    "[" + ("complex64" === r7 ? mt(e3) : Array.from(e3)).map(function(t3, e4) {
                        return pt(t3, a3[e4], r7);
                    }).join(", ") + "]"
                ];
            }
            var d2 = n3.slice(1), p2 = o6.slice(1), v1 = o6[0] * s5, m1 = [];
            if (u2 > lt) {
                for(var g1 = 0; g1 < ht; g1++){
                    var y1 = (x2 = g1 * v1) + v1;
                    m1.push.apply(m1, t2(e3.slice(x2, y1), d2, r7, p2, a3, !1));
                }
                m1.push("...");
                for(g1 = u2 - ht; g1 < u2; g1++){
                    y1 = (x2 = g1 * v1) + v1;
                    m1.push.apply(m1, t2(e3.slice(x2, y1), d2, r7, p2, a3, g1 === u2 - 1));
                }
            } else for(g1 = 0; g1 < u2; g1++){
                var x2;
                y1 = (x2 = g1 * v1) + v1;
                m1.push.apply(m1, t2(e3.slice(x2, y1), d2, r7, p2, a3, g1 === u2 - 1));
            }
            var b1 = 2 === c1 ? "," : "";
            m1[0] = "[" + m1[0] + b1;
            for(g1 = 1; g1 < m1.length - 1; g1++)m1[g1] = " " + m1[g1] + b1;
            var w1 = ",\n";
            for(g1 = 2; g1 < c1; g1++)w1 += "\n";
            return m1[m1.length - 1] = " " + m1[m1.length - 1] + "]" + (i3 ? "" : w1), m1;
        }(t1, e2, n2, o4, a2), u2 = [
            "Tensor"
        ];
        return r6 && (u2.push("  dtype: " + n2), u2.push("  rank: " + i2), u2.push("  shape: [" + e2 + "]"), u2.push("  values:")), u2.push(s4.map(function(t3) {
            return "    " + t3;
        }).join("\n")), u2.join("\n");
    }
    function pt(t1, e2, n2) {
        return N(Array.isArray(t1) ? parseFloat(t1[0].toFixed(ft)) + " + " + parseFloat(t1[1].toFixed(ft)) + "j" : H(t1) ? "'" + t1 + "'" : "bool" === n2 ? vt(t1) : parseFloat(t1.toFixed(ft)).toString(), e2);
    }
    function vt(t1) {
        return 0 === t1 ? "false" : "true";
    }
    function mt(t1) {
        for(var e2 = [], n2 = 0; n2 < t1.length; n2 += 2)e2.push([
            t1[n2],
            t1[n2 + 1]
        ]);
        return e2;
    }
    var gt = function() {
        function t1(t2, e2, n2) {
            var r6 = this;
            if (this.dtype = e2, this.shape = t2.slice(), this.size = k(t2), null != n2) {
                var o4 = n2.length;
                C(o4 === this.size, function() {
                    return "Length of values '" + o4 + "' does not match the size inferred by the shape '" + r6.size + "'.";
                });
            }
            if ("complex64" === e2) throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
            this.values = n2 || P(e2, this.size), this.strides = $(t2);
        }
        return t1.prototype.set = function(t2) {
            for(var e2 = this, n2 = [], r6 = 1; r6 < arguments.length; r6++)n2[r6 - 1] = arguments[r6];
            0 === n2.length && (n2 = [
                0
            ]), C(n2.length === this.rank, function() {
                return "The number of provided coordinates (" + n2.length + ") must match the rank (" + e2.rank + ")";
            });
            var o6 = this.locToIndex(n2);
            this.values[o6] = t2;
        }, t1.prototype.get = function() {
            for(var t2 = [], e2 = 0; e2 < arguments.length; e2++)t2[e2] = arguments[e2];
            0 === t2.length && (t2 = [
                0
            ]);
            for(var n2 = 0, r6 = 0, o6 = t2; r6 < o6.length; r6++){
                var a2 = o6[r6];
                if (a2 < 0 || a2 >= this.shape[n2]) {
                    var i2 = "Requested out of range element at " + t2 + ".   Buffer shape=" + this.shape;
                    throw new Error(i2);
                }
                n2++;
            }
            for(var s4 = t2[t2.length - 1], u2 = 0; u2 < t2.length - 1; ++u2)s4 += this.strides[u2] * t2[u2];
            return this.values[s4];
        }, t1.prototype.locToIndex = function(t2) {
            if (0 === this.rank) return 0;
            if (1 === this.rank) return t2[0];
            for(var e2 = t2[t2.length - 1], n2 = 0; n2 < t2.length - 1; ++n2)e2 += this.strides[n2] * t2[n2];
            return e2;
        }, t1.prototype.indexToLoc = function(t2) {
            if (0 === this.rank) return [];
            if (1 === this.rank) return [
                t2
            ];
            for(var e2 = new Array(this.shape.length), n2 = 0; n2 < e2.length - 1; ++n2)e2[n2] = Math.floor(t2 / this.strides[n2]), t2 -= e2[n2] * this.strides[n2];
            return e2[e2.length - 1] = t2, e2;
        }, Object.defineProperty(t1.prototype, "rank", {
            get: function() {
                return this.shape.length;
            },
            enumerable: !0,
            configurable: !0
        }), t1.prototype.toTensor = function() {
            return yt().makeTensor(this.values, this.shape, this.dtype);
        }, t1;
    }(), yt = null, xt = null, bt = null;
    var wt = function() {
        function t1(t2, e2, n2, r6) {
            this.kept = !1, this.isDisposedInternal = !1, this.shape = t2.slice(), this.dtype = e2 || "float32", this.size = k(t2), this.strides = $(t2), this.dataId = n2, this.id = r6, this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
        }
        return t1.prototype.flatten = function() {
            return this.throwIfDisposed(), this.as1D();
        }, t1.prototype.asScalar = function() {
            return this.throwIfDisposed(), C(1 === this.size, function() {
                return "The array must have only 1 element.";
            }), this.reshape([]);
        }, t1.prototype.as1D = function() {
            return this.throwIfDisposed(), this.reshape([
                this.size
            ]);
        }, t1.prototype.as2D = function(t2, e2) {
            return this.throwIfDisposed(), this.reshape([
                t2,
                e2
            ]);
        }, t1.prototype.as3D = function(t2, e2, n2) {
            return this.throwIfDisposed(), this.reshape([
                t2,
                e2,
                n2
            ]);
        }, t1.prototype.as4D = function(t2, e2, n2, r6) {
            return this.throwIfDisposed(), this.reshape([
                t2,
                e2,
                n2,
                r6
            ]);
        }, t1.prototype.as5D = function(t2, e2, n2, r6, o6) {
            return this.throwIfDisposed(), this.reshape([
                t2,
                e2,
                n2,
                r6,
                o6
            ]);
        }, t1.prototype.asType = function(t2) {
            return this.throwIfDisposed(), xt.cast(this, t2);
        }, Object.defineProperty(t1.prototype, "rank", {
            get: function() {
                return this.shape.length;
            },
            enumerable: !0,
            configurable: !0
        }), t1.prototype.buffer = function() {
            return n10(this, void 0, void 0, function() {
                var t2;
                return r17(this, function(e2) {
                    switch(e2.label){
                        case 0:
                            return [
                                4,
                                this.data()
                            ];
                        case 1:
                            return t2 = e2.sent(), [
                                2,
                                xt.buffer(this.shape, this.dtype, t2)
                            ];
                    }
                });
            });
        }, t1.prototype.bufferSync = function() {
            return xt.buffer(this.shape, this.dtype, this.dataSync());
        }, t1.prototype.array = function() {
            return n10(this, void 0, void 0, function() {
                var t2;
                return r17(this, function(e2) {
                    switch(e2.label){
                        case 0:
                            return [
                                4,
                                this.data()
                            ];
                        case 1:
                            return t2 = e2.sent(), [
                                2,
                                J(this.shape, t2)
                            ];
                    }
                });
            });
        }, t1.prototype.arraySync = function() {
            return J(this.shape, this.dataSync());
        }, t1.prototype.data = function() {
            return n10(this, void 0, void 0, function() {
                var t2, e2;
                return r17(this, function(n2) {
                    switch(n2.label){
                        case 0:
                            return this.throwIfDisposed(), t2 = yt().read(this.dataId), "string" !== this.dtype ? [
                                3,
                                2
                            ] : [
                                4,
                                t2
                            ];
                        case 1:
                            e2 = n2.sent();
                            try {
                                return [
                                    2,
                                    e2.map(function(t3) {
                                        return ot(t3);
                                    })
                                ];
                            } catch (t3) {
                                throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
                            }
                            n2.label = 2;
                        case 2:
                            return [
                                2,
                                t2
                            ];
                    }
                });
            });
        }, t1.prototype.dataSync = function() {
            this.throwIfDisposed();
            var t2 = yt().readSync(this.dataId);
            if ("string" === this.dtype) try {
                return t2.map(function(t3) {
                    return ot(t3);
                });
            } catch (t3) {
                throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
            }
            return t2;
        }, t1.prototype.bytes = function() {
            return n10(this, void 0, void 0, function() {
                var t2;
                return r17(this, function(e2) {
                    switch(e2.label){
                        case 0:
                            return this.throwIfDisposed(), [
                                4,
                                yt().read(this.dataId)
                            ];
                        case 1:
                            return t2 = e2.sent(), "string" === this.dtype ? [
                                2,
                                t2
                            ] : [
                                2,
                                new Uint8Array(t2.buffer)
                            ];
                    }
                });
            });
        }, t1.prototype.dispose = function() {
            this.isDisposed || (yt().disposeTensor(this), this.isDisposedInternal = !0);
        }, Object.defineProperty(t1.prototype, "isDisposed", {
            get: function() {
                return this.isDisposedInternal;
            },
            enumerable: !0,
            configurable: !0
        }), t1.prototype.throwIfDisposed = function() {
            if (this.isDisposed) throw new Error("Tensor is disposed.");
        }, t1.prototype.toFloat = function() {
            return this.asType("float32");
        }, t1.prototype.toInt = function() {
            return this.asType("int32");
        }, t1.prototype.toBool = function() {
            return this.asType("bool");
        }, t1.prototype.print = function(t2) {
            return (void 0) === t2 && (t2 = !1), xt.print(this, t2);
        }, t1.prototype.reshape = function(t2) {
            return this.throwIfDisposed(), xt.reshape(this, t2);
        }, t1.prototype.reshapeAs = function(t2) {
            return this.throwIfDisposed(), this.reshape(t2.shape);
        }, t1.prototype.expandDims = function(t2) {
            return (void 0) === t2 && (t2 = 0), xt.expandDims(this, t2);
        }, t1.prototype.cumsum = function(t2, e2, n2) {
            return (void 0) === t2 && (t2 = 0), (void 0) === e2 && (e2 = !1), (void 0) === n2 && (n2 = !1), xt.cumsum(this, t2, e2, n2);
        }, t1.prototype.squeeze = function(t2) {
            return this.throwIfDisposed(), xt.squeeze(this, t2);
        }, t1.prototype.clone = function() {
            return this.throwIfDisposed(), xt.clone(this);
        }, t1.prototype.oneHot = function(t2, e2, n2) {
            return this.throwIfDisposed(), xt.oneHot(this, t2, e2, n2);
        }, t1.prototype.toString = function(t2) {
            return (void 0) === t2 && (t2 = !1), dt(this.dataSync(), this.shape, this.dtype, t2);
        }, t1.prototype.tile = function(t2) {
            return this.throwIfDisposed(), xt.tile(this, t2);
        }, t1.prototype.gather = function(t2, e2) {
            return (void 0) === e2 && (e2 = 0), this.throwIfDisposed(), xt.gather(this, t2, e2);
        }, t1.prototype.matMul = function(t2, e2, n2) {
            return (void 0) === e2 && (e2 = !1), (void 0) === n2 && (n2 = !1), this.throwIfDisposed(), xt.matMul(this, t2, e2, n2);
        }, t1.prototype.dot = function(t2) {
            return this.throwIfDisposed(), xt.dot(this, t2);
        }, t1.prototype.norm = function(t2, e2, n2) {
            return (void 0) === t2 && (t2 = "euclidean"), (void 0) === e2 && (e2 = null), (void 0) === n2 && (n2 = !1), this.throwIfDisposed(), xt.norm(this, t2, e2, n2);
        }, t1.prototype.slice = function(t2, e2) {
            return this.throwIfDisposed(), xt.slice(this, t2, e2);
        }, t1.prototype.reverse = function(t2) {
            return this.throwIfDisposed(), xt.reverse(this, t2);
        }, t1.prototype.concat = function(e2, n2) {
            return (void 0) === n2 && (n2 = 0), this.throwIfDisposed(), e2 instanceof t1 && (e2 = [
                e2
            ]), xt.concat([
                this
            ].concat(e2), n2);
        }, t1.prototype.split = function(t2, e2) {
            return (void 0) === e2 && (e2 = 0), this.throwIfDisposed(), xt.split(this, t2, e2);
        }, t1.prototype.stack = function(t2, e2) {
            return (void 0) === e2 && (e2 = 0), xt.stack([
                this,
                t2
            ], e2);
        }, t1.prototype.unstack = function(t2) {
            return (void 0) === t2 && (t2 = 0), xt.unstack(this, t2);
        }, t1.prototype.pad = function(t2, e2) {
            return (void 0) === e2 && (e2 = 0), xt.pad(this, t2, e2);
        }, t1.prototype.batchNormalization = function(t2, e2, n2, r6, o6) {
            return (void 0) === n2 && (n2 = 0.001), bt("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"), this.batchNorm(t2, e2, o6, r6, n2);
        }, t1.prototype.batchNorm = function(t2, e2, n2, r6, o6) {
            return (void 0) === o6 && (o6 = 0.001), this.throwIfDisposed(), xt.batchNorm(this, t2, e2, n2, r6, o6);
        }, t1.prototype.all = function(t2, e2) {
            return (void 0) === t2 && (t2 = null), (void 0) === e2 && (e2 = !1), this.throwIfDisposed(), xt.all(this, t2, e2);
        }, t1.prototype.any = function(t2, e2) {
            return (void 0) === t2 && (t2 = null), (void 0) === e2 && (e2 = !1), this.throwIfDisposed(), xt.any(this, t2, e2);
        }, t1.prototype.logSumExp = function(t2, e2) {
            return (void 0) === t2 && (t2 = null), (void 0) === e2 && (e2 = !1), this.throwIfDisposed(), xt.logSumExp(this, t2, e2);
        }, t1.prototype.sum = function(t2, e2) {
            return (void 0) === t2 && (t2 = null), (void 0) === e2 && (e2 = !1), this.throwIfDisposed(), xt.sum(this, t2, e2);
        }, t1.prototype.prod = function(t2, e2) {
            return (void 0) === t2 && (t2 = null), (void 0) === e2 && (e2 = !1), this.throwIfDisposed(), xt.prod(this, t2, e2);
        }, t1.prototype.mean = function(t2, e2) {
            return (void 0) === t2 && (t2 = null), (void 0) === e2 && (e2 = !1), this.throwIfDisposed(), xt.mean(this, t2, e2);
        }, t1.prototype.min = function(t2, e2) {
            return (void 0) === t2 && (t2 = null), (void 0) === e2 && (e2 = !1), this.throwIfDisposed(), xt.min(this, t2, e2);
        }, t1.prototype.max = function(t2, e2) {
            return (void 0) === t2 && (t2 = null), (void 0) === e2 && (e2 = !1), this.throwIfDisposed(), xt.max(this, t2, e2);
        }, t1.prototype.argMin = function(t2) {
            return (void 0) === t2 && (t2 = null), this.throwIfDisposed(), xt.argMin(this, t2);
        }, t1.prototype.argMax = function(t2) {
            return (void 0) === t2 && (t2 = null), this.throwIfDisposed(), xt.argMax(this, t2);
        }, t1.prototype.cast = function(t2) {
            return this.throwIfDisposed(), xt.cast(this, t2);
        }, t1.prototype.add = function(t2) {
            return this.throwIfDisposed(), xt.add(this, t2);
        }, t1.prototype.addStrict = function(t2) {
            return this.throwIfDisposed(), xt.addStrict(this, t2);
        }, t1.prototype.atan2 = function(t2) {
            return this.throwIfDisposed(), xt.atan2(this, t2);
        }, t1.prototype.sub = function(t2) {
            return this.throwIfDisposed(), xt.sub(this, t2);
        }, t1.prototype.subStrict = function(t2) {
            return this.throwIfDisposed(), xt.subStrict(this, t2);
        }, t1.prototype.pow = function(t2) {
            return this.throwIfDisposed(), xt.pow(this, t2);
        }, t1.prototype.powStrict = function(t2) {
            return this.throwIfDisposed(), xt.powStrict(this, t2);
        }, t1.prototype.mul = function(t2) {
            return this.throwIfDisposed(), xt.mul(this, t2);
        }, t1.prototype.mulStrict = function(t2) {
            return this.throwIfDisposed(), xt.mulStrict(this, t2);
        }, t1.prototype.div = function(t2) {
            return this.throwIfDisposed(), xt.div(this, t2);
        }, t1.prototype.divNoNan = function(t2) {
            return this.throwIfDisposed(), xt.divNoNan(this, t2);
        }, t1.prototype.floorDiv = function(t2) {
            return this.throwIfDisposed(), xt.floorDiv(this, t2);
        }, t1.prototype.divStrict = function(t2) {
            return this.throwIfDisposed(), xt.divStrict(this, t2);
        }, t1.prototype.minimum = function(t2) {
            return this.throwIfDisposed(), xt.minimum(this, t2);
        }, t1.prototype.minimumStrict = function(t2) {
            return this.throwIfDisposed(), xt.minimumStrict(this, t2);
        }, t1.prototype.maximum = function(t2) {
            return this.throwIfDisposed(), xt.maximum(this, t2);
        }, t1.prototype.maximumStrict = function(t2) {
            return this.throwIfDisposed(), xt.maximumStrict(this, t2);
        }, t1.prototype.mod = function(t2) {
            return this.throwIfDisposed(), xt.mod(this, t2);
        }, t1.prototype.modStrict = function(t2) {
            return this.throwIfDisposed(), xt.modStrict(this, t2);
        }, t1.prototype.squaredDifferenceStrict = function(t2) {
            return this.throwIfDisposed(), xt.squaredDifferenceStrict(this, t2);
        }, t1.prototype.transpose = function(t2) {
            return this.throwIfDisposed(), xt.transpose(this, t2);
        }, t1.prototype.notEqual = function(t2) {
            return this.throwIfDisposed(), xt.notEqual(this, t2);
        }, t1.prototype.notEqualStrict = function(t2) {
            return this.throwIfDisposed(), xt.notEqualStrict(this, t2);
        }, t1.prototype.less = function(t2) {
            return this.throwIfDisposed(), xt.less(this, t2);
        }, t1.prototype.lessStrict = function(t2) {
            return this.throwIfDisposed(), xt.lessStrict(this, t2);
        }, t1.prototype.equal = function(t2) {
            return this.throwIfDisposed(), xt.equal(this, t2);
        }, t1.prototype.equalStrict = function(t2) {
            return this.throwIfDisposed(), xt.equalStrict(this, t2);
        }, t1.prototype.lessEqual = function(t2) {
            return this.throwIfDisposed(), xt.lessEqual(this, t2);
        }, t1.prototype.lessEqualStrict = function(t2) {
            return this.throwIfDisposed(), xt.lessEqualStrict(this, t2);
        }, t1.prototype.greater = function(t2) {
            return this.throwIfDisposed(), xt.greater(this, t2);
        }, t1.prototype.greaterStrict = function(t2) {
            return this.throwIfDisposed(), xt.greaterStrict(this, t2);
        }, t1.prototype.greaterEqual = function(t2) {
            return this.throwIfDisposed(), xt.greaterEqual(this, t2);
        }, t1.prototype.greaterEqualStrict = function(t2) {
            return this.throwIfDisposed(), xt.greaterEqualStrict(this, t2);
        }, t1.prototype.logicalAnd = function(t2) {
            return this.throwIfDisposed(), xt.logicalAnd(this, t2);
        }, t1.prototype.logicalOr = function(t2) {
            return this.throwIfDisposed(), xt.logicalOr(this, t2);
        }, t1.prototype.logicalNot = function() {
            return this.throwIfDisposed(), xt.logicalNot(this);
        }, t1.prototype.logicalXor = function(t2) {
            return this.throwIfDisposed(), xt.logicalXor(this, t2);
        }, t1.prototype.where = function(t2, e2) {
            return this.throwIfDisposed(), xt.where(t2, this, e2);
        }, t1.prototype.neg = function() {
            return this.throwIfDisposed(), xt.neg(this);
        }, t1.prototype.ceil = function() {
            return this.throwIfDisposed(), xt.ceil(this);
        }, t1.prototype.floor = function() {
            return this.throwIfDisposed(), xt.floor(this);
        }, t1.prototype.sign = function() {
            return this.throwIfDisposed(), xt.sign(this);
        }, t1.prototype.isNaN = function() {
            return this.throwIfDisposed(), xt.isNaN(this);
        }, t1.prototype.isInf = function() {
            return this.throwIfDisposed(), xt.isInf(this);
        }, t1.prototype.isFinite = function() {
            return this.throwIfDisposed(), xt.isFinite(this);
        }, t1.prototype.exp = function() {
            return this.throwIfDisposed(), xt.exp(this);
        }, t1.prototype.expm1 = function() {
            return this.throwIfDisposed(), xt.expm1(this);
        }, t1.prototype.log = function() {
            return this.throwIfDisposed(), xt.log(this);
        }, t1.prototype.log1p = function() {
            return this.throwIfDisposed(), xt.log1p(this);
        }, t1.prototype.sqrt = function() {
            return this.throwIfDisposed(), xt.sqrt(this);
        }, t1.prototype.rsqrt = function() {
            return this.throwIfDisposed(), xt.rsqrt(this);
        }, t1.prototype.square = function() {
            return this.throwIfDisposed(), xt.square(this);
        }, t1.prototype.reciprocal = function() {
            return this.throwIfDisposed(), xt.reciprocal(this);
        }, t1.prototype.abs = function() {
            return this.throwIfDisposed(), xt.abs(this);
        }, t1.prototype.clipByValue = function(t2, e2) {
            return this.throwIfDisposed(), xt.clipByValue(this, t2, e2);
        }, t1.prototype.relu = function() {
            return this.throwIfDisposed(), xt.relu(this);
        }, t1.prototype.relu6 = function() {
            return this.throwIfDisposed(), xt.relu6(this);
        }, t1.prototype.elu = function() {
            return this.throwIfDisposed(), xt.elu(this);
        }, t1.prototype.selu = function() {
            return this.throwIfDisposed(), xt.selu(this);
        }, t1.prototype.leakyRelu = function(t2) {
            return (void 0) === t2 && (t2 = 0.2), this.throwIfDisposed(), xt.leakyRelu(this, t2);
        }, t1.prototype.prelu = function(t2) {
            return this.throwIfDisposed(), xt.prelu(this, t2);
        }, t1.prototype.sigmoid = function() {
            return this.throwIfDisposed(), xt.sigmoid(this);
        }, t1.prototype.logSigmoid = function() {
            return this.throwIfDisposed(), xt.logSigmoid(this);
        }, t1.prototype.softplus = function() {
            return this.throwIfDisposed(), xt.softplus(this);
        }, t1.prototype.zerosLike = function() {
            return this.throwIfDisposed(), xt.zerosLike(this);
        }, t1.prototype.onesLike = function() {
            return this.throwIfDisposed(), xt.onesLike(this);
        }, t1.prototype.sin = function() {
            return this.throwIfDisposed(), xt.sin(this);
        }, t1.prototype.cos = function() {
            return this.throwIfDisposed(), xt.cos(this);
        }, t1.prototype.tan = function() {
            return this.throwIfDisposed(), xt.tan(this);
        }, t1.prototype.asin = function() {
            return this.throwIfDisposed(), xt.asin(this);
        }, t1.prototype.acos = function() {
            return this.throwIfDisposed(), xt.acos(this);
        }, t1.prototype.atan = function() {
            return this.throwIfDisposed(), xt.atan(this);
        }, t1.prototype.sinh = function() {
            return this.throwIfDisposed(), xt.sinh(this);
        }, t1.prototype.cosh = function() {
            return this.throwIfDisposed(), xt.cosh(this);
        }, t1.prototype.tanh = function() {
            return this.throwIfDisposed(), xt.tanh(this);
        }, t1.prototype.asinh = function() {
            return this.throwIfDisposed(), xt.asinh(this);
        }, t1.prototype.acosh = function() {
            return this.throwIfDisposed(), xt.acosh(this);
        }, t1.prototype.atanh = function() {
            return this.throwIfDisposed(), xt.atanh(this);
        }, t1.prototype.erf = function() {
            return this.throwIfDisposed(), xt.erf(this);
        }, t1.prototype.round = function() {
            return this.throwIfDisposed(), xt.round(this);
        }, t1.prototype.step = function(t2) {
            return (void 0) === t2 && (t2 = 0), this.throwIfDisposed(), xt.step(this, t2);
        }, t1.prototype.softmax = function(t2) {
            return (void 0) === t2 && (t2 = -1), this.throwIfDisposed(), xt.softmax(this, t2);
        }, t1.prototype.logSoftmax = function(t2) {
            return (void 0) === t2 && (t2 = -1), this.throwIfDisposed(), xt.logSoftmax(this, t2);
        }, t1.prototype.resizeBilinear = function(t2, e2) {
            return (void 0) === e2 && (e2 = !1), this.throwIfDisposed(), xt.image.resizeBilinear(this, t2, e2);
        }, t1.prototype.resizeNearestNeighbor = function(t2, e2) {
            return (void 0) === e2 && (e2 = !1), this.throwIfDisposed(), xt.image.resizeNearestNeighbor(this, t2, e2);
        }, t1.prototype.conv1d = function(t2, e2, n2, r6, o6, a3) {
            return (void 0) === r6 && (r6 = "NWC"), (void 0) === o6 && (o6 = 1), this.throwIfDisposed(), xt.conv1d(this, t2, e2, n2, r6, o6, a3);
        }, t1.prototype.conv2d = function(t2, e2, n2, r6, o6, a3) {
            return (void 0) === r6 && (r6 = "NHWC"), (void 0) === o6 && (o6 = [
                1,
                1
            ]), this.throwIfDisposed(), xt.conv2d(this, t2, e2, n2, r6, o6, a3);
        }, t1.prototype.conv2dTranspose = function(t2, e2, n2, r6, o6) {
            return this.throwIfDisposed(), xt.conv2dTranspose(this, t2, e2, n2, r6, o6);
        }, t1.prototype.depthwiseConv2D = function(t2, e2, n2, r6, o6, a3) {
            return (void 0) === r6 && (r6 = "NHWC"), (void 0) === o6 && (o6 = [
                1,
                1
            ]), this.throwIfDisposed(), xt.depthwiseConv2d(this, t2, e2, n2, r6, o6, a3);
        }, t1.prototype.separableConv2d = function(t2, e2, n2, r6, o6, a3) {
            return (void 0) === o6 && (o6 = [
                1,
                1
            ]), (void 0) === a3 && (a3 = "NHWC"), this.throwIfDisposed(), xt.separableConv2d(this, t2, e2, n2, r6, o6, a3);
        }, t1.prototype.avgPool = function(t2, e2, n2, r6) {
            return this.throwIfDisposed(), xt.avgPool(this, t2, e2, n2, r6);
        }, t1.prototype.maxPool = function(t2, e2, n2, r6) {
            return this.throwIfDisposed(), xt.maxPool(this, t2, e2, n2, r6);
        }, t1.prototype.localResponseNormalization = function(t2, e2, n2, r6) {
            return (void 0) === t2 && (t2 = 5), (void 0) === e2 && (e2 = 1), (void 0) === n2 && (n2 = 1), (void 0) === r6 && (r6 = 0.5), xt.localResponseNormalization(this, t2, e2, n2, r6);
        }, t1.prototype.pool = function(t2, e2, n2, r6, o6) {
            return this.throwIfDisposed(), xt.pool(this, t2, e2, n2, r6, o6);
        }, t1.prototype.variable = function(t2, e2, n2) {
            return (void 0) === t2 && (t2 = !0), this.throwIfDisposed(), yt().makeVariable(this, t2, e2, n2);
        }, t1.prototype.unsortedSegmentSum = function(t2, e2) {
            return this.throwIfDisposed(), xt.unsortedSegmentSum(this, t2, e2);
        }, t1.prototype.batchToSpaceND = function(t2, e2) {
            return this.throwIfDisposed(), xt.batchToSpaceND(this, t2, e2);
        }, t1.prototype.spaceToBatchND = function(t2, e2) {
            return this.throwIfDisposed(), xt.spaceToBatchND(this, t2, e2);
        }, t1.prototype.topk = function(t2, e2) {
            return (void 0) === t2 && (t2 = 1), (void 0) === e2 && (e2 = !0), this.throwIfDisposed(), xt.topk(this, t2, e2);
        }, t1.prototype.stridedSlice = function(t2, e2, n2, r6, o6, a3, i3, s4) {
            return (void 0) === r6 && (r6 = 0), (void 0) === o6 && (o6 = 0), (void 0) === a3 && (a3 = 0), (void 0) === i3 && (i3 = 0), (void 0) === s4 && (s4 = 0), this.throwIfDisposed(), xt.stridedSlice(this, t2, e2, n2, r6, o6, a3, i3, s4);
        }, t1.prototype.depthToSpace = function(t2, e2) {
            return this.throwIfDisposed(), xt.depthToSpace(this, t2, e2);
        }, t1.prototype.fft = function() {
            return this.throwIfDisposed(), xt.spectral.fft(this);
        }, t1.prototype.ifft = function() {
            return this.throwIfDisposed(), xt.spectral.ifft(this);
        }, t1.prototype.rfft = function() {
            return this.throwIfDisposed(), xt.spectral.rfft(this);
        }, t1.prototype.irfft = function() {
            return this.throwIfDisposed(), xt.spectral.irfft(this);
        }, t1;
    }();
    Object.defineProperty(wt, Symbol.hasInstance, {
        value: function(t1) {
            return !!t1 && null != t1.dataId && null != t1.shape && null != t1.dtype;
        }
    });
    var Ct, Et, Rt, It, kt, St = function(t1) {
        function n2(e2, n3, r6, o6) {
            var a3 = t1.call(this, e2.shape, e2.dtype, e2.dataId, o6) || this;
            return a3.trainable = n3, a3.name = r6, a3;
        }
        return e(n2, t1), n2.prototype.assign = function(t2) {
            if (t2.dtype !== this.dtype) throw new Error("dtype of the new value (" + t2.dtype + ") and previous value (" + this.dtype + ") must match");
            if (!S(t2.shape, this.shape)) throw new Error("shape of the new value (" + t2.shape + ") and previous value (" + this.shape + ") must match");
            yt().disposeTensor(this), this.dataId = t2.dataId, yt().incRef(this, null);
        }, n2.prototype.dispose = function() {
            yt().disposeVariable(this), this.isDisposedInternal = !0;
        }, n2;
    }(wt);
    Object.defineProperty(St, Symbol.hasInstance, {
        value: function(t1) {
            return t1 instanceof wt && null != t1.assign && t1.assign instanceof Function;
        }
    }), (function(t1) {
        t1.R0 = "R0", t1.R1 = "R1", t1.R2 = "R2", t1.R3 = "R3", t1.R4 = "R4", t1.R5 = "R5", t1.R6 = "R6";
    })(Ct || (Ct = {
    })), (function(t1) {
        t1.float32 = "float32", t1.int32 = "int32", t1.bool = "int32", t1.complex64 = "complex64";
    })(Et || (Et = {
    })), (function(t1) {
        t1.float32 = "float32", t1.int32 = "int32", t1.bool = "bool", t1.complex64 = "complex64";
    })(Rt || (Rt = {
    })), (function(t1) {
        t1.float32 = "float32", t1.int32 = "float32", t1.bool = "float32", t1.complex64 = "complex64";
    })(It || (It = {
    })), (function(t1) {
        t1.float32 = "complex64", t1.int32 = "complex64", t1.bool = "complex64", t1.complex64 = "complex64";
    })(kt || (kt = {
    }));
    var At = {
        float32: It,
        int32: Et,
        bool: Rt,
        complex64: kt
    };
    function Dt(t1, e2) {
        if ("string" === t1 || "string" === e2) {
            if ("string" === t1 && "string" === e2) return "string";
            throw new Error("Can not upcast " + t1 + " with " + e2);
        }
        return At[t1][e2];
    }
    function Tt(t1) {
        return Dt(t1, "int32");
    }
    function Nt(t1, e2) {
        if (t1.dtype === e2.dtype) return [
            t1,
            e2
        ];
        var n2 = Dt(t1.dtype, e2.dtype);
        return [
            t1.cast(n2),
            e2.cast(n2)
        ];
    }
    function Ft(t1, e2) {
        C(t1.dtype === e2.dtype, function() {
            return "The dtypes of the first(" + t1.dtype + ") and second(" + e2.dtype + ") input must match";
        });
    }
    function _t(t1) {
        var e2 = [];
        return (function t2(e3, n2, r6) {
            if (null == e3) return;
            if (e3 instanceof wt) return void n2.push(e3);
            if (o7 = e3, !Array.isArray(o7) && "object" != typeof o7) return;
            var o7;
            var a3 = e3;
            for(var i3 in a3){
                var s4 = a3[i3];
                r6.has(s4) || (r6.add(s4), t2(s4, n2, r6));
            }
        })(t1, e2, new Set), e2;
    }
    var Ot, Mt = Object.freeze({
        makeTypesMatch: Nt,
        assertTypesMatch: Ft,
        isTensorInList: function(t1, e2) {
            return e2.some(function(e3) {
                return e3.id === t1.id;
            });
        },
        getTensorsInContainer: _t
    }), Bt = function() {
        function t1() {
            this.registeredVariables = {
            }, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = new WeakMap, this.profiling = !1, this.activeProfile = {
                newBytes: 0,
                newTensors: 0,
                peakBytes: 0,
                kernels: [],
                result: null
            };
        }
        return t1.prototype.dispose = function() {
            for(var t2 in this.registeredVariables)this.registeredVariables[t2].dispose();
        }, t1;
    }(), Pt = function() {
        function t1(t2) {
            this.ENV = t2, this.registry = {
            }, this.registryFactory = {
            }, this.pendingBackendInitId = 0, this.state = new Bt;
        }
        return t1.prototype.ready = function() {
            return n10(this, void 0, void 0, function() {
                var t2, e2, n2;
                return r17(this, function(r6) {
                    switch(r6.label){
                        case 0:
                            if (null != this.pendingBackendInit) return [
                                2,
                                this.pendingBackendInit.then(function() {
                                })
                            ];
                            if (null != this.backendInstance) return [
                                2
                            ];
                            t2 = this.getSortedBackends(), e2 = 0, r6.label = 1;
                        case 1:
                            return e2 < t2.length ? (n2 = t2[e2], [
                                4,
                                this.initializeBackend(n2).success
                            ]) : [
                                3,
                                5
                            ];
                        case 2:
                            return r6.sent() ? [
                                4,
                                this.setBackend(n2)
                            ] : [
                                3,
                                4
                            ];
                        case 3:
                            return r6.sent(), [
                                2
                            ];
                        case 4:
                            return e2++, [
                                3,
                                1
                            ];
                        case 5:
                            throw new Error("Could not initialize any backends, all backend initializations failed.");
                    }
                });
            });
        }, Object.defineProperty(t1.prototype, "backend", {
            get: function() {
                if (null != this.pendingBackendInit) throw new Error("Backend '" + this.backendName + "' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");
                if (null == this.backendInstance) {
                    var t2 = this.initializeBackendsAndReturnBest(), e2 = t2.name;
                    if (t2.asyncInit) throw new Error("The highest priority backend '" + e2 + "' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");
                    this.setBackend(e2);
                }
                return this.backendInstance;
            },
            enumerable: !0,
            configurable: !0
        }), t1.prototype.backendNames = function() {
            return Object.keys(this.registryFactory);
        }, t1.prototype.findBackend = function(t3) {
            if (!(t3 in this.registry)) {
                if (!(t3 in this.registryFactory)) return null;
                if (this.initializeBackend(t3).asyncInit) return null;
            }
            return this.registry[t3];
        }, t1.prototype.findBackendFactory = function(t3) {
            return t3 in this.registryFactory ? this.registryFactory[t3].factory : null;
        }, t1.prototype.registerBackend = function(t3, e3, n2) {
            return (void 0) === n2 && (n2 = 1), t3 in this.registryFactory ? (console.warn(t3 + " backend was already registered. Reusing existing backend factory."), !1) : (this.registryFactory[t3] = {
                factory: e3,
                priority: n2
            }, !0);
        }, t1.prototype.setBackend = function(t3) {
            return n10(this, void 0, void 0, function() {
                var e3, n2, o7;
                return r17(this, function(r6) {
                    switch(r6.label){
                        case 0:
                            if (null == this.registryFactory[t3]) throw new Error("Backend name '" + t3 + "' not found in registry");
                            return this.backendName = t3, null != this.registry[t3] ? [
                                3,
                                4
                            ] : (this.backendInstance = null, e3 = this.initializeBackend(t3), n2 = e3.success, e3.asyncInit ? [
                                4,
                                n2
                            ] : [
                                3,
                                2
                            ]);
                        case 1:
                            return o7 = r6.sent(), [
                                3,
                                3
                            ];
                        case 2:
                            o7 = n2, r6.label = 3;
                        case 3:
                            if (!o7) return [
                                2,
                                !1
                            ];
                            r6.label = 4;
                        case 4:
                            return this.backendInstance = this.registry[t3], this.setupRegisteredKernels(), this.profiler = new ut(this.backendInstance), [
                                2,
                                !0
                            ];
                    }
                });
            });
        }, t1.prototype.setupRegisteredKernels = function() {
            var t3 = this;
            f(this.backendName).forEach(function(e3) {
                null != e3.setupFunc && e3.setupFunc(t3.backendInstance);
            });
        }, t1.prototype.disposeRegisteredKernels = function(t3) {
            var e3 = this;
            f(t3).forEach(function(n2) {
                null != n2.disposeFunc && n2.disposeFunc(e3.registry[t3]);
            });
        }, t1.prototype.initializeBackend = function(t3) {
            var e3 = this, n2 = this.registryFactory[t3];
            if (null == n2) throw new Error("Cannot initialize backend " + t3 + ", no registration found.");
            try {
                var r6 = n2.factory();
                if (Promise.resolve(r6) === r6) {
                    var o7 = ++this.pendingBackendInitId, a3 = r6.then(function(n3) {
                        return !(o7 < e3.pendingBackendInitId) && (e3.registry[t3] = n3, e3.pendingBackendInit = null, !0);
                    }).catch(function(n3) {
                        return !(o7 < e3.pendingBackendInitId) && (e3.pendingBackendInit = null, console.warn("Initialization of backend " + t3 + " failed"), console.warn(n3.stack || n3.message), !1);
                    });
                    return this.pendingBackendInit = a3, {
                        success: a3,
                        asyncInit: !0
                    };
                }
                return this.registry[t3] = r6, {
                    success: !0,
                    asyncInit: !1
                };
            } catch (e4) {
                return console.warn("Initialization of backend " + t3 + " failed"), console.warn(e4.stack || e4.message), {
                    success: !1,
                    asyncInit: !1
                };
            }
        }, t1.prototype.removeBackend = function(t3) {
            if (!(t3 in this.registryFactory)) throw new Error(t3 + " backend not found in registry");
            this.backendName === t3 && null != this.pendingBackendInit && this.pendingBackendInitId++, t3 in this.registry && (this.disposeRegisteredKernels(t3), this.registry[t3].dispose(), delete this.registry[t3]), delete this.registryFactory[t3], this.backendName === t3 && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
        }, t1.prototype.getSortedBackends = function() {
            var t3 = this;
            if (0 === Object.keys(this.registryFactory).length) throw new Error("No backend found in registry.");
            return Object.keys(this.registryFactory).sort(function(e3, n2) {
                return t3.registryFactory[n2].priority - t3.registryFactory[e3].priority;
            });
        }, t1.prototype.initializeBackendsAndReturnBest = function() {
            for(var t3 = this.getSortedBackends(), e3 = 0; e3 < t3.length; e3++){
                var n2 = t3[e3], r6 = this.initializeBackend(n2), o8 = r6.success, a4 = r6.asyncInit;
                if (a4 || o8) return {
                    name: n2,
                    asyncInit: a4
                };
            }
            throw new Error("Could not initialize any backends, all backend initializations failed.");
        }, t1.prototype.moveData = function(t3, e3) {
            var n3 = this.state.tensorInfo.get(e3), r7 = n3.backend, o9 = this.readSync(e3);
            r7.disposeData(e3), n3.backend = t3, t3.move(e3, o9, n3.shape, n3.dtype), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
        }, t1.prototype.tidy = function(t3, e3) {
            var n3, r7 = this, o9 = null;
            if (null == e3) {
                if ("function" != typeof t3) throw new Error("Please provide a function to tidy()");
                e3 = t3;
            } else {
                if ("string" != typeof t3 && !(t3 instanceof String)) throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
                if ("function" != typeof e3) throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
                o9 = t3;
            }
            return this.scopedRun(function() {
                return r7.startScope(o9);
            }, function() {
                return r7.endScope(n3);
            }, function() {
                return (n3 = e3()) instanceof Promise && console.error("Cannot return a Promise inside of tidy."), n3;
            });
        }, t1.prototype.scopedRun = function(t3, e3, n3) {
            t3();
            try {
                var r7 = n3();
                return e3(), r7;
            } catch (t4) {
                throw e3(), t4;
            }
        }, t1.prototype.nextTensorId = function() {
            return t1.nextTensorId++;
        }, t1.prototype.nextVariableId = function() {
            return t1.nextVariableId++;
        }, t1.prototype.clone = function(t3) {
            var e3 = this.makeTensorFromDataId(t3.dataId, t3.shape, t3.dtype), n3 = {
                x: t3
            };
            return this.addTapeNode(this.state.activeScope.name, n3, [
                e3
            ], function(t4) {
                return {
                    x: function() {
                        return t4.toFloat();
                    }
                };
            }, []), e3;
        }, t1.prototype.runKernel = function(t3, e3, n3, r7, o9) {
            return this.runKernelFunc(null, e3, null, t3, n3, r7, o9);
        }, t1.prototype.shouldCheckForMemLeaks = function() {
            return this.ENV.getBool("IS_TEST");
        }, t1.prototype.checkKernelForMemLeak = function(t3, e3, n3) {
            var r7 = this.backend.numDataIds(), o9 = 0;
            n3.forEach(function(t4) {
                o9 += "complex64" === t4.dtype ? 3 : 1;
            });
            var a5 = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], i3 = r7 - e3 - o9 - a5;
            if (i3 > 0) throw new Error("Backend '" + this.backendName + "' has an internal memory leak (" + i3 + " data ids) after running '" + t3 + "'");
        }, t1.prototype.runKernelFunc = function(t3, e3, n3, r7, o9, a5, i3) {
            var s5, u2 = this;
            (void 0) === a5 && (a5 = []), (void 0) === i3 && (i3 = []);
            var c1 = [], h2 = this.isTapeOn();
            null == r7 && (r7 = null != this.state.activeScope ? this.state.activeScope.name : "");
            var f2, d2 = function(t4) {
                h2 && (c1 = t4.map(function(t5) {
                    return u2.keep(u2.clone(t5));
                }));
            }, p2 = this.state.numBytes, v1 = this.state.numTensors;
            this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
            var m1, g2 = l(r7, this.backendName);
            return f2 = null != g2 ? function() {
                var t4 = u2.backend.numDataIds();
                m1 = g2.kernelFunc({
                    inputs: e3,
                    attrs: o9,
                    backend: u2.backend
                });
                var n4 = Array.isArray(m1) ? m1 : [
                    m1
                ];
                u2.shouldCheckForMemLeaks() && u2.checkKernelForMemLeak(r7, t4, n4);
                var s6 = n4.map(function(t5) {
                    var e4 = t5.dataId, n5 = t5.shape, r8 = t5.dtype;
                    return u2.makeTensorFromDataId(e4, n5, r8);
                }), c2 = s6.filter(function(t5, e4) {
                    return i3[e4];
                });
                return d2((a5 || []).slice().concat(c2)), s6;
            } : function() {
                var e4 = u2.backend.numDataIds();
                m1 = u2.tidy(function() {
                    return t3(u2.backend, d2);
                });
                var n4 = Array.isArray(m1) ? m1 : [
                    m1
                ];
                return u2.shouldCheckForMemLeaks() && u2.checkKernelForMemLeak(r7, e4, n4), n4;
            }, this.scopedRun(function() {
                return u2.state.kernelDepth++;
            }, function() {
                return u2.state.kernelDepth--;
            }, function() {
                s5 = u2.ENV.getBool("DEBUG") ? u2.profiler.profileKernel(r7, e3, function() {
                    return f2();
                }) : f2();
            }), h2 && this.addTapeNode(r7, e3, s5, n3, c1), this.state.profiling && this.state.activeProfile.kernels.push({
                name: r7,
                bytesAdded: this.state.numBytes - p2,
                totalBytesSnapshot: this.state.numBytes,
                tensorsAdded: this.state.numTensors - v1,
                totalTensorsSnapshot: this.state.numTensors,
                inputShapes: Object.keys(e3).map(function(t4) {
                    return e3[t4].shape;
                }),
                outputShapes: s5.map(function(t4) {
                    return t4.shape;
                })
            }), Array.isArray(m1) ? s5 : s5[0];
        }, t1.prototype.makeTensor = function(t3, e3, n3, r7) {
            if (null == t3) throw new Error("Values passed to engine.makeTensor() are null");
            n3 = n3 || "float32", r7 = r7 || this.backend;
            var o9 = t3;
            "string" === n3 && H(t3[0]) && (o9 = t3.map(function(t4) {
                return rt(t4);
            }));
            var a5 = r7.write(o9, e3, n3), i3 = new wt(e3, n3, a5, this.nextTensorId());
            if (this.incRef(i3, r7), "string" === n3) {
                var s5 = this.state.tensorInfo.get(a5), u2 = G(o9);
                this.state.numBytes += u2 - s5.bytes, s5.bytes = u2;
            }
            return i3;
        }, t1.prototype.makeTensorFromDataId = function(t3, e3, n3, r7) {
            var o9 = new wt(e3, n3 = n3 || "float32", t3, this.nextTensorId());
            return this.incRef(o9, r7), o9;
        }, t1.prototype.makeVariable = function(t3, e3, n3, r7) {
            (void 0) === e3 && (e3 = !0), n3 = n3 || this.nextVariableId().toString(), null != r7 && r7 !== t3.dtype && (t3 = t3.asType(r7));
            var o9 = new St(t3, e3, n3, this.nextTensorId());
            if (null != this.state.registeredVariables[o9.name]) throw new Error("Variable with name " + o9.name + " was already registered");
            return this.state.registeredVariables[o9.name] = o9, this.incRef(o9, this.backend), o9;
        }, t1.prototype.incRef = function(t3, e3) {
            var n3 = this.state.tensorInfo.has(t3.dataId) ? this.state.tensorInfo.get(t3.dataId).refCount : 0;
            if (this.state.numTensors++, "string" === t3.dtype && this.state.numStringTensors++, 0 === n3) {
                this.state.numDataBuffers++;
                var r7 = 0;
                "complex64" !== t3.dtype && "string" !== t3.dtype && (r7 = t3.size * z(t3.dtype)), this.state.tensorInfo.set(t3.dataId, {
                    backend: e3 || this.backend,
                    dtype: t3.dtype,
                    shape: t3.shape,
                    bytes: r7,
                    refCount: 0
                }), this.state.numBytes += r7;
            }
            this.state.tensorInfo.get(t3.dataId).refCount++, t3 instanceof St || this.track(t3);
        }, t1.prototype.disposeTensor = function(t3) {
            if (this.state.tensorInfo.has(t3.dataId)) {
                this.state.numTensors--, "string" === t3.dtype && this.state.numStringTensors--;
                var e3 = this.state.tensorInfo.get(t3.dataId);
                e3.refCount <= 1 ? ("complex64" !== t3.dtype && (this.state.numBytes -= e3.bytes), this.state.numDataBuffers--, e3.backend.disposeData(t3.dataId), this.state.tensorInfo.delete(t3.dataId)) : this.state.tensorInfo.get(t3.dataId).refCount--;
            }
        }, t1.prototype.disposeVariables = function() {
            for(var t3 in this.state.registeredVariables){
                var e4 = this.state.registeredVariables[t3];
                this.disposeVariable(e4);
            }
        }, t1.prototype.disposeVariable = function(t3) {
            this.disposeTensor(t3), null != this.state.registeredVariables[t3.name] && delete this.state.registeredVariables[t3.name];
        }, t1.prototype.memory = function() {
            var t3 = this.backend.memory();
            return t3.numTensors = this.state.numTensors, t3.numDataBuffers = this.state.numDataBuffers, t3.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (t3.unreliable = !0, null == t3.reasons && (t3.reasons = []), t3.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), t3;
        }, t1.prototype.profile = function(t3) {
            return n10(this, void 0, void 0, function() {
                var e5, n3;
                return r17(this, function(r8) {
                    return this.state.profiling = !0, e5 = this.state.numBytes, n3 = this.state.numTensors, this.state.activeProfile.kernels = [], this.state.activeProfile.result = t3(), this.state.profiling = !1, this.state.activeProfile.peakBytes = Math.max.apply(Math, this.state.activeProfile.kernels.map(function(t4) {
                        return t4.totalBytesSnapshot;
                    })), this.state.activeProfile.newBytes = this.state.numBytes - e5, this.state.activeProfile.newTensors = this.state.numTensors - n3, [
                        2,
                        this.state.activeProfile
                    ];
                });
            });
        }, t1.prototype.isTapeOn = function() {
            return this.state.gradientDepth > 0 && 0 === this.state.kernelDepth;
        }, t1.prototype.addTapeNode = function(t3, e5, n3, r8, o9) {
            var a5 = this, i3 = {
                id: this.state.nextTapeNodeId++,
                kernelName: t3,
                inputs: e5,
                outputs: n3,
                saved: o9
            }, s6 = h(t3);
            null != s6 && (r8 = s6.gradFunc), null != r8 && (i3.gradient = function(t4) {
                return t4 = t4.map(function(t5, e6) {
                    if (null == t5) {
                        var r9 = n3[e6], o10 = tt(r9.size, r9.dtype);
                        return a5.makeTensor(o10, r9.shape, r9.dtype);
                    }
                    return t5;
                }), r8(t4.length > 1 ? t4 : t4[0], o9);
            }), this.state.activeTape.push(i3);
        }, t1.prototype.keep = function(t3) {
            return t3.kept = !0, t3;
        }, t1.prototype.startTape = function() {
            0 === this.state.gradientDepth && (this.state.activeTape = []), this.state.gradientDepth++;
        }, t1.prototype.endTape = function() {
            this.state.gradientDepth--;
        }, t1.prototype.startScope = function(t3) {
            var e5 = {
                track: [],
                name: "unnamed scope",
                id: this.state.nextScopeId++
            };
            t3 && (e5.name = t3), this.state.scopeStack.push(e5), this.state.activeScope = e5;
        }, t1.prototype.endScope = function(t3) {
            for(var e5 = this, n3 = _t(t3), r8 = new Set(n3.map(function(t4) {
                return t4.id;
            })), o9 = 0; o9 < this.state.activeScope.track.length; o9++){
                var a5 = this.state.activeScope.track[o9];
                a5.kept || r8.has(a5.id) || a5.dispose();
            }
            var i3 = this.state.scopeStack.pop();
            this.state.activeScope = 0 === this.state.scopeStack.length ? null : this.state.scopeStack[this.state.scopeStack.length - 1], n3.forEach(function(t4) {
                t4.kept || t4.scopeId !== i3.id || e5.track(t4);
            });
        }, t1.prototype.gradients = function(t3, e5, n3, r8) {
            var o9 = this;
            if ((void 0) === r8 && (r8 = !1), C(e5.length > 0, function() {
                return "gradients() received an empty list of xs.";
            }), null != n3 && "float32" !== n3.dtype) throw new Error("dy must have 'float32' dtype, but has '" + n3.dtype + "'");
            var a6 = this.scopedRun(function() {
                return o9.startTape();
            }, function() {
                return o9.endTape();
            }, function() {
                return o9.tidy("forward", t3);
            });
            C(a6 instanceof wt, function() {
                return "The result y returned by f() must be a tensor.";
            });
            var i3 = function(t4, e6, n4) {
                for(var r10 = {
                }, o11 = {
                }, a7 = 0; a7 < e6.length; a7++)r10[e6[a7].id] = !0;
                for(a7 = 0; a7 < t4.length; a7++){
                    var i4 = (p3 = t4[a7]).inputs;
                    for(var s6 in i4){
                        for(var u3 = i4[s6], c1 = !1, l2 = 0; l2 < e6.length; l2++)if (r10[u3.id]) {
                            p3.outputs.forEach(function(t5) {
                                return r10[t5.id] = !0;
                            }), c1 = !0, o11[p3.id] = !0;
                            break;
                        }
                        if (c1) break;
                    }
                }
                var h2 = {
                };
                h2[n4.id] = !0;
                var f2 = {
                };
                for(a7 = t4.length - 1; a7 >= 0; a7--)for(i4 = (p3 = t4[a7]).inputs, l2 = 0; l2 < p3.outputs.length; l2++)if (h2[p3.outputs[l2].id]) {
                    for(var s6 in i4)h2[i4[s6].id] = !0, f2[p3.id] = !0;
                    break;
                }
                var d2 = [];
                for(a7 = 0; a7 < t4.length; a7++){
                    var p3;
                    if (o11[(p3 = t4[a7]).id] && f2[p3.id]) {
                        var v1 = {
                        };
                        for(var s6 in p3.inputs){
                            var m1 = p3.inputs[s6];
                            r10[m1.id] && (v1[s6] = m1);
                        }
                        var g2 = Object.assign({
                        }, p3);
                        g2.inputs = v1, g2.outputs = p3.outputs, d2.push(g2);
                    }
                }
                return d2;
            }(this.state.activeTape, e5, a6);
            if (!r8 && 0 === i3.length && e5.length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
            return this.tidy("backward", function() {
                var t4, r10, s7 = {
                };
                s7[a6.id] = null == n3 ? (t4 = a6.shape, r10 = Z(k(t4), "float32"), Lt.makeTensor(r10, t4, "float32")) : n3, (function(t5, e6, n4) {
                    for(var r11 = function(r12) {
                        var o11 = e6[r12], a7 = [];
                        if (o11.outputs.forEach(function(e7) {
                            var n5 = t5[e7.id];
                            null != n5 ? a7.push(n5) : a7.push(null);
                        }), null == o11.gradient) throw new Error("Cannot compute gradient: gradient function not found for " + o11.kernelName + ".");
                        var i5 = o11.gradient(a7), s8 = function(e7) {
                            if (!(e7 in i5)) throw new Error("Cannot backprop through input " + e7 + ". Available gradients found: " + Object.keys(i5) + ".");
                            var r13 = n4(function() {
                                return i5[e7]();
                            });
                            if ("float32" !== r13.dtype) throw new Error("Error in gradient for op " + o11.kernelName + ". The gradient of input " + e7 + " must have 'float32' dtype, but has '" + r13.dtype + "'");
                            var a8 = o11.inputs[e7];
                            if (!S(r13.shape, a8.shape)) throw new Error("Error in gradient for op " + o11.kernelName + ". The gradient of input '" + e7 + "' has shape '" + r13.shape + "', which does not match the shape of the input '" + a8.shape + "'");
                            if (null == t5[a8.id]) t5[a8.id] = r13;
                            else {
                                var s9 = t5[a8.id];
                                t5[a8.id] = s9.add(r13), s9.dispose();
                            }
                        };
                        for(var u4 in o11.inputs)s8(u4);
                    }, o11 = e6.length - 1; o11 >= 0; o11--)r11(o11);
                })(s7, i3, function(t5) {
                    return o9.tidy(t5);
                });
                var u4 = e5.map(function(t5) {
                    return s7[t5.id];
                });
                return 0 === o9.state.gradientDepth && (o9.state.activeTape.forEach(function(t5) {
                    for(var e6 = 0, n4 = t5.saved; e6 < n4.length; e6++)n4[e6].dispose();
                }), o9.state.activeTape = null), {
                    value: a6,
                    grads: u4
                };
            });
        }, t1.prototype.customGrad = function(t3) {
            var e5 = this;
            return C(X(t3), function() {
                return "The f passed in customGrad(f) must be a function.";
            }), function() {
                for(var n3, r8 = [], o9 = 0; o9 < arguments.length; o9++)r8[o9] = arguments[o9];
                C(r8.every(function(t4) {
                    return t4 instanceof wt;
                }), function() {
                    return "The args passed in customGrad(f)(x1, x2,...) must all be tensors";
                });
                var a6 = {
                };
                return r8.forEach(function(t4, e6) {
                    a6[e6] = t4;
                }), e5.runKernelFunc(function(e6, o11) {
                    return C((n3 = t3.apply(void 0, r8.concat([
                        o11
                    ]))).value instanceof wt, function() {
                        return "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor";
                    }), C(X(n3.gradFunc), function() {
                        return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.";
                    }), n3.value;
                }, a6, function(t4, e6) {
                    var o11 = n3.gradFunc(t4, e6), a7 = Array.isArray(o11) ? o11 : [
                        o11
                    ];
                    C(a7.length === r8.length, function() {
                        return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).";
                    }), C(a7.every(function(t5) {
                        return t5 instanceof wt;
                    }), function() {
                        return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.";
                    });
                    var i3 = {
                    };
                    return a7.forEach(function(t5, e7) {
                        i3[e7] = function() {
                            return t5;
                        };
                    }), i3;
                });
            };
        }, t1.prototype.readSync = function(t3) {
            return this.state.tensorInfo.get(t3).backend.readSync(t3);
        }, t1.prototype.read = function(t3) {
            return this.state.tensorInfo.get(t3).backend.read(t3);
        }, t1.prototype.time = function(t3) {
            return n10(this, void 0, void 0, function() {
                var e5, n3;
                return r17(this, function(r8) {
                    switch(r8.label){
                        case 0:
                            return e5 = et(), [
                                4,
                                this.backend.time(t3)
                            ];
                        case 1:
                            return (n3 = r8.sent()).wallMs = et() - e5, [
                                2,
                                n3
                            ];
                    }
                });
            });
        }, t1.prototype.track = function(t3) {
            return null != this.state.activeScope && (t3.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(t3)), t3;
        }, Object.defineProperty(t1.prototype, "registeredVariables", {
            get: function() {
                return this.state.registeredVariables;
            },
            enumerable: !0,
            configurable: !0
        }), t1.prototype.reset = function() {
            for(var t3 in this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new Bt, this.registry)this.disposeRegisteredKernels(t3), this.registry[t3].dispose(), delete this.registry[t3];
            this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
        }, t1.nextTensorId = 0, t1.nextVariableId = 0, t1;
    }();
    var Lt = function() {
        var t1 = function() {
            if (null == Ot) {
                var t3 = void 0;
                if ("undefined" != typeof window) t3 = window;
                else if ("undefined" != typeof global) t3 = global;
                else if ("undefined" != typeof process) t3 = process;
                else {
                    if ("undefined" == typeof self) throw new Error("Could not find a global object");
                    t3 = self;
                }
                Ot = t3;
            }
            return Ot;
        }();
        if (null == t1._tfengine) {
            var e5 = new o6(t1);
            t1._tfengine = new Pt(e5);
        }
        return (function(t4) {
            s = t4;
        })(t1._tfengine.ENV), yt = function() {
            return t1._tfengine;
        }, t1._tfengine;
    }();
    function Wt() {
        return "undefined" != typeof window && null != window.document || "undefined" != typeof WorkerGlobalScope;
    }
    var Ut = i15();
    Ut.registerFlag("DEBUG", function() {
        return !1;
    }, function(t1) {
        t1 && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
    }), Ut.registerFlag("IS_BROWSER", function() {
        return Wt();
    }), Ut.registerFlag("IS_NODE", function() {
        return "undefined" != typeof process && (void 0) !== process.versions && (void 0) !== process.versions.node;
    }), Ut.registerFlag("IS_CHROME", function() {
        return "undefined" != typeof navigator && null != navigator && null != navigator.userAgent && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
    }), Ut.registerFlag("PROD", function() {
        return !1;
    }), Ut.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", function() {
        return Ut.getBool("DEBUG");
    }), Ut.registerFlag("DEPRECATION_WARNINGS_ENABLED", function() {
        return !0;
    }), Ut.registerFlag("IS_TEST", function() {
        return !1;
    });
    var Vt, zt, Gt, Ht = {
    }, qt = {
        alpha: !1,
        antialias: !1,
        premultipliedAlpha: !1,
        preserveDrawingBuffer: !1,
        depth: !1,
        stencil: !1,
        failIfMajorPerformanceCaveat: !0
    };
    function Kt(t1, e6) {
        Ht[t1] = e6;
    }
    function jt(t1) {
        t1 in Ht || (Ht[t1] = (function(t4) {
            if (1 !== t4 && 2 !== t4) throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
            var e6 = function(t5) {
                if ("undefined" != typeof OffscreenCanvas && 2 === t5) return new OffscreenCanvas(300, 150);
                if ("undefined" != typeof document) return document.createElement("canvas");
                throw new Error("Cannot create a canvas in this context");
            }(t4);
            if (e6.addEventListener("webglcontextlost", function(e7) {
                e7.preventDefault(), delete Ht[t4];
            }, !1), 1 === t4) return e6.getContext("webgl", qt) || e6.getContext("experimental-webgl", qt);
            return e6.getContext("webgl2", qt);
        })(t1));
        var e6 = Ht[t1];
        return e6.isContextLost() ? (delete Ht[t1], jt(t1)) : (e6.disable(e6.DEPTH_TEST), e6.disable(e6.STENCIL_TEST), e6.disable(e6.BLEND), e6.disable(e6.DITHER), e6.disable(e6.POLYGON_OFFSET_FILL), e6.disable(e6.SAMPLE_COVERAGE), e6.enable(e6.SCISSOR_TEST), e6.enable(e6.CULL_FACE), e6.cullFace(e6.BACK), Ht[t1]);
    }
    function Xt(t1, e6) {
        return [
            e6,
            t1
        ];
    }
    function Yt(t1) {
        var e6 = k(t1);
        return T(Math.ceil(e6 / 4));
    }
    function $t(t1, e6) {
        return [
            Math.max(1, Math.ceil(e6 / 2)),
            Math.max(1, Math.ceil(t1 / 2))
        ];
    }
    function Qt(t1, e6) {
        var n3, r8, o9, a6, s7, u4, c2, l3, h2, f2 = t1;
        return 2 === i15().getNumber("WEBGL_VERSION") ? (n3 = f2.R32F, r8 = f2.R16F, o9 = f2.RGBA16F, a6 = f2.RGBA32F, s7 = f2.RED, u4 = 4, c2 = 1, l3 = f2.HALF_FLOAT, h2 = f2.FLOAT) : (n3 = t1.RGBA, r8 = t1.RGBA, o9 = t1.RGBA, a6 = f2.RGBA, s7 = t1.RGBA, u4 = 4, c2 = 4, l3 = null != e6 ? e6.HALF_FLOAT_OES : null, h2 = t1.FLOAT), {
            internalFormatFloat: n3,
            internalFormatHalfFloat: r8,
            internalFormatPackedHalfFloat: o9,
            internalFormatPackedFloat: a6,
            textureFormatFloat: s7,
            downloadTextureFormat: t1.RGBA,
            downloadUnpackNumChannels: u4,
            defaultNumChannels: c2,
            textureTypeHalfFloat: l3,
            textureTypeFloat: h2
        };
    }
    function Jt(t1, e6, n3) {
        var r8 = n3();
        return e6 && (function(t4) {
            var e7 = t4.getError();
            if (e7 !== t4.NO_ERROR) throw new Error("WebGL Error: " + ne(t4, e7));
        })(t1), r8;
    }
    !function(t1) {
        t1[t1.DENSE = 0] = "DENSE", t1[t1.SHARED_BATCH = 1] = "SHARED_BATCH";
    }(Vt || (Vt = {
    })), (function(t1) {
        t1[t1.RENDER = 0] = "RENDER", t1[t1.UPLOAD = 1] = "UPLOAD", t1[t1.PIXELS = 2] = "PIXELS", t1[t1.DOWNLOAD = 3] = "DOWNLOAD";
    })(zt || (zt = {
    })), (function(t1) {
        t1[t1.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", t1[t1.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", t1[t1.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", t1[t1.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", t1[t1.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
    })(Gt || (Gt = {
    }));
    var Zt = 0.0000000596, te = 65504;
    function ee(t1) {
        return !!(i15().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || 0 === t1 || Zt < Math.abs(t1) && Math.abs(t1) < te);
    }
    function ne(t1, e6) {
        switch(e6){
            case t1.NO_ERROR:
                return "NO_ERROR";
            case t1.INVALID_ENUM:
                return "INVALID_ENUM";
            case t1.INVALID_VALUE:
                return "INVALID_VALUE";
            case t1.INVALID_OPERATION:
                return "INVALID_OPERATION";
            case t1.INVALID_FRAMEBUFFER_OPERATION:
                return "INVALID_FRAMEBUFFER_OPERATION";
            case t1.OUT_OF_MEMORY:
                return "OUT_OF_MEMORY";
            case t1.CONTEXT_LOST_WEBGL:
                return "CONTEXT_LOST_WEBGL";
            default:
                return "Unknown error code " + e6;
        }
    }
    function re(t1, e6, n3) {
        return ke(t1, e6, function() {
            return t1.getExtension(n3);
        }, 'Extension "' + n3 + '" not supported on this browser.');
    }
    function oe(t1, e6, n3) {
        var r8 = ke(t1, e6, function() {
            return t1.createShader(t1.VERTEX_SHADER);
        }, "Unable to create vertex WebGLShader.");
        if (Jt(t1, e6, function() {
            return t1.shaderSource(r8, n3);
        }), Jt(t1, e6, function() {
            return t1.compileShader(r8);
        }), !1 === t1.getShaderParameter(r8, t1.COMPILE_STATUS)) throw console.log(t1.getShaderInfoLog(r8)), new Error("Failed to compile vertex shader.");
        return r8;
    }
    function ae(t1, e6, n3) {
        var r8 = ke(t1, e6, function() {
            return t1.createShader(t1.FRAGMENT_SHADER);
        }, "Unable to create fragment WebGLShader.");
        if (Jt(t1, e6, function() {
            return t1.shaderSource(r8, n3);
        }), Jt(t1, e6, function() {
            return t1.compileShader(r8);
        }), !1 === t1.getShaderParameter(r8, t1.COMPILE_STATUS)) throw (function(t4, e7) {
            var n4 = ue.exec(e7);
            if (null == n4) return console.log("Couldn't parse line number in error: " + e7), void console.log(t4);
            for(var r10 = +n4[1], o9 = t4.split("\n"), a6 = o9.length.toString().length + 2, i3 = o9.map(function(t5, e8) {
                return N((e8 + 1).toString(), a6) + t5;
            }), s7 = 0, u4 = 0; u4 < i3.length; u4++)s7 = Math.max(i3[u4].length, s7);
            var c2 = i3.slice(0, r10 - 1), l3 = i3.slice(r10 - 1, r10), h2 = i3.slice(r10);
            console.log(c2.join("\n")), console.log(e7.split("\n")[0]), console.log("%c " + N(l3[0], s7), "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(h2.join("\n"));
        })(n3, t1.getShaderInfoLog(r8)), new Error("Failed to compile fragment shader.");
        return r8;
    }
    var ie, se, ue = /ERROR: [0-9]+:([0-9]+):/g;
    function ce(t1, e6) {
        return ke(t1, e6, function() {
            return t1.createProgram();
        }, "Unable to create WebGLProgram.");
    }
    function le(t1, e6, n3) {
        if (Jt(t1, e6, function() {
            return t1.linkProgram(n3);
        }), !1 === t1.getProgramParameter(n3, t1.LINK_STATUS)) throw console.log(t1.getProgramInfoLog(n3)), new Error("Failed to link vertex and fragment shaders.");
    }
    function he(t1, e6, n3) {
        if (Jt(t1, e6, function() {
            return t1.validateProgram(n3);
        }), !1 === t1.getProgramParameter(n3, t1.VALIDATE_STATUS)) throw console.log(t1.getProgramInfoLog(n3)), new Error("Shader program validation failed.");
    }
    function fe(t1, e6, n3) {
        var r8 = ke(t1, e6, function() {
            return t1.createBuffer();
        }, "Unable to create WebGLBuffer");
        return Jt(t1, e6, function() {
            return t1.bindBuffer(t1.ARRAY_BUFFER, r8);
        }), Jt(t1, e6, function() {
            return t1.bufferData(t1.ARRAY_BUFFER, n3, t1.STATIC_DRAW);
        }), r8;
    }
    function de(t1, e6, n3) {
        var r8 = ke(t1, e6, function() {
            return t1.createBuffer();
        }, "Unable to create WebGLBuffer");
        return Jt(t1, e6, function() {
            return t1.bindBuffer(t1.ELEMENT_ARRAY_BUFFER, r8);
        }), Jt(t1, e6, function() {
            return t1.bufferData(t1.ELEMENT_ARRAY_BUFFER, n3, t1.STATIC_DRAW);
        }), r8;
    }
    function pe(t1, e6) {
        return ke(t1, e6, function() {
            return t1.createTexture();
        }, "Unable to create WebGLTexture.");
    }
    function ve(t1, e6) {
        var n3 = i15().getNumber("WEBGL_MAX_TEXTURE_SIZE");
        if (t1 <= 0 || e6 <= 0) {
            var r8 = "[" + t1 + "x" + e6 + "]";
            throw new Error("Requested texture size " + r8 + " is invalid.");
        }
        if (t1 > n3 || e6 > n3) {
            r8 = "[" + t1 + "x" + e6 + "]";
            throw new Error("Requested texture size " + r8 + " greater than WebGL maximum on this browser / GPU " + ("[" + n3 + "x" + n3 + "]") + ".");
        }
    }
    function me(t1, e6) {
        return ke(t1, e6, function() {
            return t1.createFramebuffer();
        }, "Unable to create WebGLFramebuffer.");
    }
    function ge(t1, e6, n3, r10, o9, a6, i3, s7) {
        var u4 = t1.getAttribLocation(n3, r10);
        return -1 !== u4 && (Jt(t1, e6, function() {
            return t1.bindBuffer(t1.ARRAY_BUFFER, o9);
        }), Jt(t1, e6, function() {
            return t1.vertexAttribPointer(u4, a6, t1.FLOAT, !1, i3, s7);
        }), Jt(t1, e6, function() {
            return t1.enableVertexAttribArray(u4);
        }), !0);
    }
    function ye(t1, e6, n3, r10) {
        Se(t1, r10), Jt(t1, e6, function() {
            return t1.activeTexture(t1.TEXTURE0 + r10);
        }), Jt(t1, e6, function() {
            return t1.bindTexture(t1.TEXTURE_2D, n3);
        });
    }
    function xe(t1, e6, n3, r10) {
        return ke(t1, e6, function() {
            return t1.getUniformLocation(n3, r10);
        }, 'uniform "' + r10 + '" not present in program.');
    }
    function be(t1, e6, n3) {
        return t1.getUniformLocation(e6, n3);
    }
    function we(t1, e6, n3, r10, o9, a6) {
        Jt(t1, e6, function() {
            return ye(t1, e6, r10, a6);
        }), Jt(t1, e6, function() {
            return t1.uniform1i(o9, a6);
        });
    }
    function Ce(t1, e6, n3, r10) {
        Jt(t1, e6, function() {
            return t1.bindFramebuffer(t1.FRAMEBUFFER, r10);
        }), Jt(t1, e6, function() {
            return t1.framebufferTexture2D(t1.FRAMEBUFFER, t1.COLOR_ATTACHMENT0, t1.TEXTURE_2D, n3, 0);
        });
    }
    function Ee(t1, e6, n3) {
        Jt(t1, e6, function() {
            return t1.bindFramebuffer(t1.FRAMEBUFFER, n3);
        }), Jt(t1, e6, function() {
            return t1.framebufferTexture2D(t1.FRAMEBUFFER, t1.COLOR_ATTACHMENT0, t1.TEXTURE_2D, null, 0);
        });
    }
    function Re(t1) {
        var e6 = t1.checkFramebufferStatus(t1.FRAMEBUFFER);
        if (e6 !== t1.FRAMEBUFFER_COMPLETE) throw new Error("Error binding framebuffer: " + Ie(t1, e6));
    }
    function Ie(t1, e6) {
        switch(e6){
            case t1.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
            case t1.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
            case t1.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
            case t1.FRAMEBUFFER_UNSUPPORTED:
                return "FRAMEBUFFER_UNSUPPORTED";
            default:
                return "unknown error " + e6;
        }
    }
    function ke(t1, e6, n3, r10) {
        var o9 = Jt(t1, e6, function() {
            return n3();
        });
        if (null == o9) throw new Error(r10);
        return o9;
    }
    function Se(t1, e6) {
        var n3 = t1.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, r10 = e6 + t1.TEXTURE0;
        if (r10 < t1.TEXTURE0 || r10 > n3) throw new Error("textureUnit must be in " + ("[gl.TEXTURE0, gl.TEXTURE" + n3 + "]") + ".");
    }
    function Ae(t1, e6) {
        return (void 0) === e6 && (e6 = 2), k(t1.slice(0, t1.length - e6));
    }
    function De(t1) {
        if (0 === t1.length) throw Error("Cannot get rows and columns of an empty shape array.");
        return [
            t1.length > 1 ? t1[t1.length - 2] : 1,
            t1[t1.length - 1]
        ];
    }
    function Te(t1) {
        var e6 = [
            1,
            1,
            1
        ];
        return 0 === t1.length || 1 === t1.length && 1 === t1[0] || (e6 = [
            Ae(t1)
        ].concat(De(t1))), e6;
    }
    function Ne(t1, e6) {
        var n3;
        (void 0) === e6 && (e6 = !1);
        var r10 = i15().getNumber("WEBGL_MAX_TEXTURE_SIZE");
        if (e6 && (r10 *= 2, 1 === (t1 = t1.map(function(e7, n4) {
            return n4 >= t1.length - 2 ? b(t1[n4]) : t1[n4];
        })).length && (t1 = [
            2,
            t1[0]
        ])), 2 !== t1.length) {
            var o9 = M(t1);
            t1 = o9.newShape;
        }
        var a6 = k(t1);
        if (t1.length <= 1 && a6 <= r10) return [
            1,
            a6
        ];
        if (2 === t1.length && t1[0] <= r10 && t1[1] <= r10) return t1;
        if (3 === t1.length && t1[0] * t1[1] <= r10 && t1[2] <= r10) return [
            t1[0] * t1[1],
            t1[2]
        ];
        if (3 === t1.length && t1[0] <= r10 && t1[1] * t1[2] <= r10) return [
            t1[0],
            t1[1] * t1[2]
        ];
        if (4 === t1.length && t1[0] * t1[1] * t1[2] <= r10 && t1[3] <= r10) return [
            t1[0] * t1[1] * t1[2],
            t1[3]
        ];
        if (4 === t1.length && t1[0] <= r10 && t1[1] * t1[2] * t1[3] <= r10) return [
            t1[0],
            t1[1] * t1[2] * t1[3]
        ];
        if (e6) {
            var s7 = Ae(t1), u4 = 2, c2 = 2;
            return t1.length && (u4 = (n3 = De(t1))[0], c2 = n3[1]), T(a6 = s7 * (u4 / 2) * (c2 / 2)).map(function(t4) {
                return 2 * t4;
            });
        }
        return T(a6);
    }
    function Fe(t1) {
        return t1 % 2 == 0;
    }
    function _e(t1, e6) {
        if (S(t1 = t1.slice(-2), e6 = e6.slice(-2))) return !0;
        if (!t1.length || !e6.length) return !0;
        if (0 === t1[0] || 0 === t1[1] || 0 === e6[0] || 0 === e6[1]) return !0;
        if (t1.length !== e6.length) {
            var n3 = t1.slice(-1)[0], r10 = e6.slice(-1)[0];
            if (n3 === r10) return !0;
            if (Fe(n3) && Fe(r10) && (1 === t1[0] || 1 === e6[0])) return !0;
        }
        return t1[1] === e6[1] && Fe(t1[0]) && Fe(e6[0]);
    }
    function Oe(t1) {
        if (null == ie) {
            var e6 = jt(t1);
            ie = e6.getParameter(e6.MAX_TEXTURE_SIZE);
        }
        return ie;
    }
    function Me(t1) {
        if (null == se) {
            var e7 = jt(t1);
            se = e7.getParameter(e7.MAX_TEXTURE_IMAGE_UNITS);
        }
        return Math.min(16, se);
    }
    function Be(t1) {
        if (0 === t1) return 0;
        var e8 = jt(t1);
        return Pe(e8, "EXT_disjoint_timer_query_webgl2") && 2 === t1 ? 2 : Pe(e8, "EXT_disjoint_timer_query") ? 1 : 0;
    }
    function Pe(t1, e8) {
        return null != t1.getExtension(e8);
    }
    function Le(t1) {
        try {
            if (null != jt(t1)) return !0;
        } catch (t4) {
            return !1;
        }
        return !1;
    }
    function We(t1) {
        if (0 === t1) return !1;
        var e8 = jt(t1);
        if (1 === t1) {
            if (!Pe(e8, "OES_texture_float")) return !1;
        } else if (!Pe(e8, "EXT_color_buffer_float")) return !1;
        return Ve(e8);
    }
    function Ue(t1) {
        if (0 === t1) return !1;
        var e8 = jt(t1);
        if (1 !== t1) {
            if (Pe(e8, "EXT_color_buffer_float")) return Ve(e8);
            if (Pe(e8, "EXT_color_buffer_half_float")) {
                var n4 = e8.getExtension("EXT_color_buffer_half_float");
                return (function(t4, e9) {
                    var n5 = Qt(t4, e9), r11 = t4.createTexture();
                    t4.bindTexture(t4.TEXTURE_2D, r11);
                    t4.texImage2D(t4.TEXTURE_2D, 0, n5.internalFormatHalfFloat, 1, 1, 0, n5.textureFormatFloat, n5.textureTypeHalfFloat, null);
                    var o11 = t4.createFramebuffer();
                    t4.bindFramebuffer(t4.FRAMEBUFFER, o11), t4.framebufferTexture2D(t4.FRAMEBUFFER, t4.COLOR_ATTACHMENT0, t4.TEXTURE_2D, r11, 0);
                    var a6 = t4.checkFramebufferStatus(t4.FRAMEBUFFER) === t4.FRAMEBUFFER_COMPLETE;
                    return t4.bindTexture(t4.TEXTURE_2D, null), t4.bindFramebuffer(t4.FRAMEBUFFER, null), t4.deleteTexture(r11), t4.deleteFramebuffer(o11), a6;
                })(e8, n4);
            }
            return !1;
        }
        return !!Pe(e8, "OES_texture_float") && !!Pe(e8, "WEBGL_color_buffer_float") && Ve(e8);
    }
    function Ve(t1) {
        var e8 = Qt(t1), n5 = t1.createTexture();
        t1.bindTexture(t1.TEXTURE_2D, n5);
        t1.texImage2D(t1.TEXTURE_2D, 0, e8.internalFormatFloat, 1, 1, 0, e8.textureFormatFloat, e8.textureTypeFloat, null);
        var r11 = t1.createFramebuffer();
        t1.bindFramebuffer(t1.FRAMEBUFFER, r11), t1.framebufferTexture2D(t1.FRAMEBUFFER, t1.COLOR_ATTACHMENT0, t1.TEXTURE_2D, n5, 0);
        var o11 = t1.checkFramebufferStatus(t1.FRAMEBUFFER) === t1.FRAMEBUFFER_COMPLETE;
        return t1.bindTexture(t1.TEXTURE_2D, null), t1.bindFramebuffer(t1.FRAMEBUFFER, null), t1.deleteTexture(n5), t1.deleteFramebuffer(r11), o11;
    }
    function ze(t1) {
        return 2 === t1 && null != jt(t1).fenceSync;
    }
    var Ge = Object.freeze({
        callAndCheck: Jt,
        canBeRepresented: ee,
        getWebGLErrorMessage: ne,
        getExtensionOrThrow: re,
        createVertexShader: oe,
        createFragmentShader: ae,
        createProgram: ce,
        linkProgram: le,
        validateProgram: he,
        createStaticVertexBuffer: fe,
        createStaticIndexBuffer: de,
        getNumChannels: function() {
            return 2 === i15().getNumber("WEBGL_VERSION") ? 1 : 4;
        },
        createTexture: pe,
        validateTextureSize: ve,
        createFramebuffer: me,
        bindVertexBufferToProgramAttribute: ge,
        bindTextureUnit: ye,
        unbindTextureUnit: function(t1, e8, n5) {
            Se(t1, n5), Jt(t1, e8, function() {
                return t1.activeTexture(t1.TEXTURE0 + n5);
            }), Jt(t1, e8, function() {
                return t1.bindTexture(t1.TEXTURE_2D, null);
            });
        },
        getProgramUniformLocationOrThrow: xe,
        getProgramUniformLocation: be,
        bindTextureToProgramUniformSampler: we,
        bindCanvasToFramebuffer: function(t1, e8) {
            Jt(t1, e8, function() {
                return t1.bindFramebuffer(t1.FRAMEBUFFER, null);
            }), Jt(t1, e8, function() {
                return t1.viewport(0, 0, t1.canvas.width, t1.canvas.height);
            }), Jt(t1, e8, function() {
                return t1.scissor(0, 0, t1.canvas.width, t1.canvas.height);
            });
        },
        bindColorTextureToFramebuffer: Ce,
        unbindColorTextureFromFramebuffer: Ee,
        validateFramebuffer: Re,
        getFramebufferErrorMessage: Ie,
        getBatchDim: Ae,
        getRowsCols: De,
        getShapeAs3D: Te,
        getTextureShapeFromLogicalShape: Ne,
        isReshapeFree: _e,
        getWebGLMaxTextureSize: Oe,
        resetMaxTextureSize: function() {
            ie = null;
        },
        resetMaxTexturesInShader: function() {
            se = null;
        },
        getMaxTexturesInShader: Me,
        getWebGLDisjointQueryTimerVersion: Be,
        hasExtension: Pe,
        isWebGLVersionEnabled: Le,
        isCapableOfRenderingToFloatTexture: We,
        isDownloadFloatTextureEnabled: Ue,
        isWebGLFenceEnabled: ze
    }), He = i15();
    function qe() {
        i15().set("PROD", !0);
    }
    function Ke() {
        i15().set("DEBUG", !0);
    }
    function je() {
        i15().set("DEPRECATION_WARNINGS_ENABLED", !1), console.warn("TensorFlow.js deprecation warnings have been disabled.");
    }
    function Xe(t1) {
        i15().getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(t1 + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
    }
    function Ye() {
        Lt.disposeVariables();
    }
    function $e() {
        return Lt;
    }
    function Qe() {
        return Lt.memory();
    }
    function Je(t1) {
        return Lt.profile(t1);
    }
    function Ze(t1, e8) {
        return Lt.tidy(t1, e8);
    }
    function tn(t1) {
        _t(t1).forEach(function(t4) {
            return t4.dispose();
        });
    }
    function en(t1) {
        return Lt.keep(t1);
    }
    function nn(t1) {
        return Lt.time(t1);
    }
    function rn(t1) {
        return Lt.setBackend(t1);
    }
    function on() {
        return Lt.ready();
    }
    function an() {
        return Lt.backendName;
    }
    function sn(t1) {
        Lt.removeBackend(t1);
    }
    function un(t1) {
        return Lt.findBackend(t1);
    }
    function cn(t1) {
        return Lt.findBackendFactory(t1);
    }
    function ln(t1, e8, n5) {
        return (void 0) === n5 && (n5 = 1), Lt.registerBackend(t1, e8, n5);
    }
    function hn() {
        return Lt.backend;
    }
    function fn(t1, e8) {
        i15().setPlatform(t1, e8);
    }
    function dn() {
        for(var t1 = [], e8 = 0; e8 < arguments.length; e8++)t1[e8] = arguments[e8];
        i15().getBool("IS_TEST") || console.warn.apply(console, t1);
    }
    function pn(t1, e8) {
        var n5 = t1;
        if (V(t1)) return "string" === e8 ? [] : [
            t1.length
        ];
        if (!Array.isArray(t1)) return [];
        for(var r11 = []; Array.isArray(n5) || V(n5) && "string" !== e8;)r11.push(n5.length), n5 = n5[0];
        return Array.isArray(t1) && i15().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && (function t4(e9, n6, r12) {
            if (r12 = r12 || [], !Array.isArray(e9) && !V(e9)) return void C(0 === n6.length, function() {
                return "Element arr[" + r12.join("][") + "] is a primitive, but should be an array/TypedArray of " + n6[0] + " elements";
            });
            C(n6.length > 0, function() {
                return "Element arr[" + r12.join("][") + "] should be a primitive, but is an array of " + e9.length + " elements";
            }), C(e9.length === n6[0], function() {
                return "Element arr[" + r12.join("][") + "] should have " + n6[0] + " elements, but has " + e9.length + " elements";
            });
            for(var o11 = n6.slice(1), a6 = 0; a6 < e9.length; ++a6)t4(e9[a6], o11, r12.concat(a6));
        })(t1, r11, []), r11;
    }
    function vn(t1, e8, n5, r11) {
        if (null != t1 && ("numeric" !== t1 && t1 !== e8 || "numeric" === t1 && "string" === e8)) throw new Error("Argument '" + n5 + "' passed to '" + r11 + "' must be " + t1 + " tensor, but got " + e8 + " tensor");
    }
    function mn(t1, e8, n5, r11) {
        if ((void 0) === r11 && (r11 = "numeric"), t1 instanceof wt) return vn(r11, t1.dtype, e8, n5), t1;
        var o11 = j(t1);
        if ("string" !== o11 && [
            "bool",
            "int32",
            "float32"
        ].indexOf(r11) >= 0 && (o11 = r11), vn(r11, o11, e8, n5), null == t1 || !V(t1) && !Array.isArray(t1) && "number" != typeof t1 && "boolean" != typeof t1 && "string" != typeof t1) {
            var a6 = null == t1 ? "null" : t1.constructor.name;
            throw new Error("Argument '" + e8 + "' passed to '" + n5 + "' must be a Tensor or TensorLike, but got '" + a6 + "'");
        }
        var s8 = pn(t1, o11);
        V(t1) || Array.isArray(t1) || (t1 = [
            t1
        ]);
        var u5 = "string" !== o11 ? Q(t1, o11, i15().getBool("DEBUG")) : I(t1, [], !0);
        return Lt.makeTensor(u5, s8, o11);
    }
    function gn(t1, e8, n5, r11) {
        if ((void 0) === r11 && (r11 = "numeric"), !Array.isArray(t1)) throw new Error("Argument " + e8 + " passed to " + n5 + " must be a `Tensor[]` or `TensorLike[]`");
        return t1.map(function(t4, r12) {
            return mn(t4, e8 + "[" + r12 + "]", n5);
        }, r11);
    }
    function yn(t1, e8) {
        for(var n5 = 0; n5 < t1.length; ++n5)if (t1[t1.length - n5 - 1] !== e8 - 1 - n5) return !1;
        return !0;
    }
    function xn(t1, e8, n5) {
        for(var r11 = t1.length + e8.length, o11 = [], a7 = 0, i3 = 0, s8 = 0; s8 < r11; s8++)-1 === n5.indexOf(s8) ? o11.push(t1[a7++]) : o11.push(e8[i3++]);
        return o11;
    }
    function bn(t1, e8) {
        for(var n5 = [], r11 = t1.length, o11 = 0; o11 < r11; o11++)-1 === e8.indexOf(o11) && n5.push(t1[o11]);
        return [
            n5,
            e8.map(function(e9) {
                return t1[e9];
            })
        ];
    }
    function wn(t1, e8) {
        return xn(t1, e8.map(function(t4) {
            return 1;
        }), e8);
    }
    function Cn(t1, e8, n5) {
        C(yn(e8, n5), function() {
            return t1 + " supports only inner-most axes for now. Got axes " + e8 + " and rank-" + n5 + " input.";
        });
    }
    function En(t1, e8) {
        if (yn(t1, e8)) return null;
        for(var n5 = [], r11 = 0; r11 < e8; ++r11)-1 === t1.indexOf(r11) && n5.push(r11);
        return t1.forEach(function(t4) {
            return n5.push(t4);
        }), n5;
    }
    function Rn(t1) {
        return t1.map(function(t4, e8) {
            return [
                e8,
                t4
            ];
        }).sort(function(t4, e8) {
            return t4[1] - e8[1];
        }).map(function(t4) {
            return t4[0];
        });
    }
    function In(t1, e8) {
        for(var n5 = [], r11 = e8 - t1; r11 < e8; ++r11)n5.push(r11);
        return n5;
    }
    function kn(t1, e8) {
        var n5 = t1[0].length;
        t1.forEach(function(t4, e9) {
            C(t4.length === n5, function() {
                return "Error in concat" + n5 + "D: rank of tensors[" + e9 + "] must be the same as the rank of the rest (" + n5 + ")";
            });
        }), C(e8 >= 0 && e8 < n5, function() {
            return "Error in concat" + n5 + "D: axis must be between 0 and " + (n5 - 1) + ".";
        });
        var r11 = t1[0];
        t1.forEach(function(t4, o11) {
            for(var a7 = 0; a7 < n5; a7++)C(a7 === e8 || t4[a7] === r11[a7], function() {
                return "Error in concat" + n5 + "D: Shape of tensors[" + o11 + "] (" + t4 + ") does not match the shape of the rest (" + r11 + ") along the non-concatenated axis " + o11 + ".";
            });
        });
    }
    function Sn(t1, e8) {
        for(var n5 = t1[0].slice(), r11 = 1; r11 < t1.length; r11++)n5[e8] += t1[r11][e8];
        return n5;
    }
    function An(t1) {
        var e8 = Object.keys(t1);
        if (1 !== e8.length) throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with " + e8.length + " keys.");
        var n5 = e8[0], r11 = t1[n5];
        n5.endsWith("_") && (n5 = n5.substring(0, n5.length - 1));
        var o11 = function() {
            for(var t4 = [], e9 = 0; e9 < arguments.length; e9++)t4[e9] = arguments[e9];
            Lt.startScope(n5);
            try {
                var o12 = r11.apply(void 0, t4);
                return o12 instanceof Promise && console.error("Cannot return a Promise inside of tidy."), Lt.endScope(o12), o12;
            } catch (t5) {
                throw Lt.endScope(null), t5;
            }
        };
        return Object.defineProperty(o11, "name", {
            value: n5,
            configurable: !0
        }), o11;
    }
    He.registerFlag("HAS_WEBGL", function() {
        return He.getNumber("WEBGL_VERSION") > 0;
    }), He.registerFlag("WEBGL_VERSION", function() {
        return Le(2) ? 2 : Le(1) ? 1 : 0;
    }), He.registerFlag("WEBGL_BUFFER_SUPPORTED", function() {
        return 2 === He.get("WEBGL_VERSION");
    }), He.registerFlag("WEBGL_CPU_FORWARD", function() {
        return !0;
    }), He.registerFlag("WEBGL_FORCE_F16_TEXTURES", function() {
        return !1;
    }), He.registerFlag("WEBGL_PACK", function() {
        return He.getBool("HAS_WEBGL");
    }), He.registerFlag("WEBGL_PACK_NORMALIZATION", function() {
        return He.getBool("WEBGL_PACK");
    }), He.registerFlag("WEBGL_PACK_CLIP", function() {
        return He.getBool("WEBGL_PACK");
    }), He.registerFlag("WEBGL_PACK_DEPTHWISECONV", function() {
        return !1;
    }), He.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", function() {
        return He.getBool("WEBGL_PACK");
    }), He.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", function() {
        return He.getBool("WEBGL_PACK");
    }), He.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", function() {
        return He.getBool("WEBGL_PACK");
    }), He.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", function() {
        return He.getBool("WEBGL_PACK");
    }), He.registerFlag("WEBGL_PACK_REDUCE", function() {
        return He.getBool("WEBGL_PACK");
    }), He.registerFlag("WEBGL_LAZILY_UNPACK", function() {
        return He.getBool("WEBGL_PACK");
    }), He.registerFlag("WEBGL_CONV_IM2COL", function() {
        return He.getBool("WEBGL_PACK");
    }), He.registerFlag("WEBGL_MAX_TEXTURE_SIZE", function() {
        return Oe(He.getNumber("WEBGL_VERSION"));
    }), He.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", function() {
        return Me(He.getNumber("WEBGL_VERSION"));
    }), He.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", function() {
        var t1 = He.getNumber("WEBGL_VERSION");
        return 0 === t1 ? 0 : Be(t1);
    }), He.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", function() {
        var t1;
        return He.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && (t1 = navigator.userAgent || navigator.vendor || window.opera, !(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t1) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t1.substr(0, 4))));
    }), He.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", function() {
        return We(He.getNumber("WEBGL_VERSION"));
    }), He.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", function() {
        return !He.getBool("WEBGL_FORCE_F16_TEXTURES") && He.getBool("WEBGL_RENDER_FLOAT32_CAPABLE");
    }), He.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", function() {
        return Ue(He.getNumber("WEBGL_VERSION"));
    }), He.registerFlag("WEBGL_FENCE_API_ENABLED", function() {
        return ze(He.getNumber("WEBGL_VERSION"));
    }), He.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", function() {
        return He.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0;
    }), bt = Xe;
    var Dn = An({
        complex_: function(t1, e8) {
            var n5 = mn(t1, "real", "complex"), r11 = mn(e8, "imag", "complex");
            return E(n5.shape, r11.shape, "real and imag shapes, " + n5.shape + " and " + r11.shape + ", must match in call to tf.complex()."), Lt.runKernelFunc(function(t4) {
                return t4.complex(n5, r11);
            }, {
                $real: n5,
                $imag: r11
            });
        }
    }), Tn = An({
        real_: function(t1) {
            var e8 = mn(t1, "input", "real");
            return Lt.runKernelFunc(function(t4) {
                return t4.real(e8);
            }, {
                $input: e8
            });
        }
    }), Nn = An({
        imag_: function(t1) {
            var e8 = mn(t1, "input", "imag");
            return Lt.runKernelFunc(function(t4) {
                return t4.imag(e8);
            }, {
                $input: e8
            });
        }
    });
    function Fn(t1, e8, n5) {
        return _n(t1, e8, pn(t1, n5), n5);
    }
    function _n(t1, e8, n5, r11) {
        if (null == r11 && (r11 = j(t1)), "complex64" === r11) throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
        if (!V(t1) && !Array.isArray(t1) && "number" != typeof t1 && "boolean" != typeof t1 && "string" != typeof t1) throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
        if (null != e8) {
            nt(e8);
            var o11 = k(e8), a7 = k(n5);
            C(o11 === a7, function() {
                return "Based on the provided shape, [" + e8 + "], the tensor should have " + o11 + " values but has " + a7;
            });
            for(var s8 = 0; s8 < n5.length; ++s8){
                var u5 = n5[s8], c3 = s8 !== n5.length - 1 || u5 !== k(e8.slice(s8));
                C(n5[s8] === e8[s8] || !c3, function() {
                    return "Error creating a new Tensor. Inferred shape (" + n5 + ") does not match the provided shape (" + e8 + "). ";
                });
            }
        }
        return V(t1) || Array.isArray(t1) || (t1 = [
            t1
        ]), e8 = e8 || n5, t1 = "string" !== r11 ? Q(t1, r11, i15().getBool("DEBUG")) : I(t1, [], !0), Lt.makeTensor(t1, e8, r11);
    }
    function On(t1, e8) {
        if ((V(t1) && "string" !== e8 || Array.isArray(t1)) && "complex64" !== e8) throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
        if ("string" === e8 && V(t1) && !(t1 instanceof Uint8Array)) throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
        return _n(t1, [], [], e8);
    }
    function Mn(t1, e8) {
        R(t1);
        var n5 = pn(t1, e8);
        if (1 !== n5.length) throw new Error("tensor1d() requires values to be a flat/TypedArray");
        return _n(t1, null, n5, e8);
    }
    function Bn(t1, e8, n5) {
        if (R(t1), null != e8 && 2 !== e8.length) throw new Error("tensor2d() requires shape to have two numbers");
        var r11 = pn(t1, n5);
        if (2 !== r11.length && 1 !== r11.length) throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
        if (1 === r11.length && null == e8) throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
        return _n(t1, e8, r11, n5);
    }
    function Pn(t1, e8, n5) {
        if (R(t1), null != e8 && 3 !== e8.length) throw new Error("tensor3d() requires shape to have three numbers");
        var r11 = pn(t1, n5);
        if (3 !== r11.length && 1 !== r11.length) throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
        if (1 === r11.length && null == e8) throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
        return _n(t1, e8, r11, n5);
    }
    function Ln(t1, e8, n5) {
        if (R(t1), null != e8 && 4 !== e8.length) throw new Error("tensor4d() requires shape to have four numbers");
        var r11 = pn(t1, n5);
        if (4 !== r11.length && 1 !== r11.length) throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
        if (1 === r11.length && null == e8) throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
        return _n(t1, e8, r11, n5);
    }
    function Wn(t1, e8, n5) {
        if (R(t1), null != e8 && 5 !== e8.length) throw new Error("tensor5d() requires shape to have five numbers");
        var r11 = pn(t1, n5);
        if (5 !== r11.length && 1 !== r11.length) throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
        if (1 === r11.length && null == e8) throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
        return _n(t1, e8, r11, n5);
    }
    function Un(t1, e8, n5) {
        if (R(t1), null != e8 && 6 !== e8.length) throw new Error("tensor6d() requires shape to have six numbers");
        var r11 = pn(t1, n5);
        if (6 !== r11.length && 1 !== r11.length) throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
        if (1 === r11.length && null == e8) throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
        return _n(t1, e8 = e8 || r11, r11, n5);
    }
    function Vn(t1, e8, n5, r11) {
        return (void 0) === e8 && (e8 = !0), Lt.makeVariable(t1, e8, n5, r11);
    }
    function zn(t1, e8) {
        if ((void 0) === e8 && (e8 = "float32"), "complex64" === e8) {
            var n5 = zn(t1, "float32"), r11 = Gn(t1, "float32");
            return Dn(n5, r11);
        }
        var o12 = Z(k(t1), e8);
        return Lt.makeTensor(o12, t1, e8);
    }
    function Gn(t1, e8) {
        if ((void 0) === e8 && (e8 = "float32"), "complex64" === e8) {
            var n6 = Gn(t1, "float32"), r12 = Gn(t1, "float32");
            return Dn(n6, r12);
        }
        var o12 = tt(k(t1), e8);
        return Lt.makeTensor(o12, t1, e8);
    }
    function Hn(t1, e8, n7) {
        return Lt.runKernelFunc(function(r13) {
            return r13.fill(t1, e8, n7);
        }, {
        });
    }
    function qn(t1, e8, n7) {
        if (n7 <= 0) throw new Error("The number of values should be positive.");
        return Lt.runKernelFunc(function(r13) {
            return r13.linspace(t1, e8, n7);
        }, {
        });
    }
    function Kn(t1, e8, n7, r13) {
        if ((void 0) === n7 && (n7 = 1), (void 0) === r13 && (r13 = "float32"), 0 === n7) throw new Error("Cannot have a step of zero");
        if (t1 === e8 || t1 < e8 && n7 < 0 || e8 < t1 && n7 > 1) return Gn([
            0
        ], r13);
        var o12 = tt(Math.abs(Math.ceil((e8 - t1) / n7)), r13);
        e8 < t1 && 1 === n7 && (n7 = -1), o12[0] = t1;
        for(var a8 = 1; a8 < o12.length; a8++)o12[a8] = o12[a8 - 1] + n7;
        return Mn(o12, r13);
    }
    var jn = An({
        onesLike_: function(t1) {
            var e8 = mn(t1, "x", "onesLike");
            if ("complex64" === e8.dtype) {
                var n7 = jn(Tn(e8)), r13 = Xn(Nn(e8));
                return Dn(n7, r13);
            }
            return Lt.runKernelFunc(function(t4) {
                return t4.onesLike(e8);
            }, {
                $x: e8
            }, function(t4, e9) {
                return {
                    $x: function() {
                        return Xn(t4);
                    }
                };
            });
        }
    }), Xn = An({
        zerosLike_: function(t1) {
            var e8 = mn(t1, "x", "zerosLike");
            return Lt.runKernelFunc(function(t4) {
                return t4.zerosLike(e8);
            }, {
                $x: e8
            }, function(t4, e9) {
                return {
                    $x: function() {
                        return Xn(t4);
                    }
                };
            });
        }
    });
    var Yn = An({
        concat_: function(t1, e8) {
            (void 0) === e8 && (e8 = 0), C(t1.length >= 1, function() {
                return "Pass at least one tensor to concat";
            });
            var n8 = gn(t1, "tensors", "concat");
            "complex64" === n8[0].dtype && n8.forEach(function(t4) {
                if ("complex64" !== t4.dtype) throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype " + t4.dtype + ". ");
            }), e8 = O(e8, n8[0].shape)[0];
            var r14 = Sn(n8.map(function(t4) {
                return t4.shape;
            }), e8);
            if (0 === k(r14)) return Fn([], r14);
            if (1 === (n8 = n8.filter(function(t4) {
                return t4.size > 0;
            })).length) return n8[0];
            var o12 = n8.map(function(t4) {
                return t4.shape;
            });
            kn(o12, e8);
            var a8 = n8, i3 = {
                axis: e8
            };
            return Lt.runKernelFunc(function(t4) {
                return t4.concat(n8, e8);
            }, a8, function(t4) {
                var n9 = o12.map(function(t5) {
                    return t5[e8];
                });
                return tr(t4, n9, e8).map(function(t5) {
                    return function() {
                        return t5;
                    };
                });
            }, "Concat", i3);
        }
    }), $n = An({
        concat1d_: function(t1) {
            return Yn(t1, 0);
        }
    }), Qn = An({
        concat2d_: function(t1, e8) {
            return Yn(t1, e8);
        }
    }), Jn = An({
        concat3d_: function(t1, e8) {
            return Yn(t1, e8);
        }
    }), Zn = An({
        concat4d_: function(t1, e8) {
            return Yn(t1, e8);
        }
    }), tr = An({
        split_: function(t1, e8, n8) {
            (void 0) === n8 && (n8 = 0);
            var r14, o12 = mn(t1, "x", "split");
            return n8 = O(n8, o12.shape)[0], "number" == typeof e8 ? (C(o12.shape[n8] % e8 == 0, function() {
                return "Number of splits must evenly divide the axis.";
            }), r14 = new Array(e8).fill(o12.shape[n8] / e8)) : (C(o12.shape[n8] === e8.reduce(function(t4, e9) {
                return t4 + e9;
            }), function() {
                return "The sum of sizes must match the size of the axis dimension.";
            }), r14 = e8), Lt.runKernelFunc(function(t4) {
                return t4.split(o12, r14, n8);
            }, {
                $x: o12
            }, function(t4) {
                return {
                    $x: function() {
                        return Yn(t4, n8);
                    }
                };
            });
        }
    });
    function er(t1, e8) {
        return t1(e8 = {
            exports: {
            }
        }, e8.exports), e8.exports;
    }
    var nr = er(function(t1) {
        !function(t4, e8, n8) {
            function r14(t5) {
                var e9, n9 = this, r15 = (e9 = 4022871197, function(t6) {
                    t6 = t6.toString();
                    for(var n10 = 0; n10 < t6.length; n10++){
                        var r16 = 0.02519603282416938 * (e9 += t6.charCodeAt(n10));
                        r16 -= e9 = r16 >>> 0, e9 = (r16 *= e9) >>> 0, e9 += 4294967296 * (r16 -= e9);
                    }
                    return 0.00000000023283064365386963 * (e9 >>> 0);
                });
                n9.next = function() {
                    var t6 = 2091639 * n9.s0 + 0.00000000023283064365386963 * n9.c;
                    return n9.s0 = n9.s1, n9.s1 = n9.s2, n9.s2 = t6 - (n9.c = 0 | t6);
                }, n9.c = 1, n9.s0 = r15(" "), n9.s1 = r15(" "), n9.s2 = r15(" "), n9.s0 -= r15(t5), n9.s0 < 0 && (n9.s0 += 1), n9.s1 -= r15(t5), n9.s1 < 0 && (n9.s1 += 1), n9.s2 -= r15(t5), n9.s2 < 0 && (n9.s2 += 1), r15 = null;
            }
            function o12(t5, e9) {
                return e9.c = t5.c, e9.s0 = t5.s0, e9.s1 = t5.s1, e9.s2 = t5.s2, e9;
            }
            function a8(t5, e9) {
                var n9 = new r14(t5), a9 = e9 && e9.state, i3 = n9.next;
                return i3.int32 = function() {
                    return 4294967296 * n9.next() | 0;
                }, i3.double = function() {
                    return i3() + 0.00000000000000011102230246251565 * (2097152 * i3() | 0);
                }, i3.quick = i3, a9 && ("object" == typeof a9 && o12(a9, n9), i3.state = function() {
                    return o12(n9, {
                    });
                }), i3;
            }
            e8 && e8.exports ? e8.exports = a8 : n8 && n8.amd ? n8(function() {
                return a8;
            }) : this.alea = a8;
        }(0, t1, !1);
    }), rr = er(function(t1) {
        !function(t4, e8, n8) {
            function r14(t5) {
                var e9 = this, n9 = "";
                e9.x = 0, e9.y = 0, e9.z = 0, e9.w = 0, e9.next = function() {
                    var t6 = e9.x ^ e9.x << 11;
                    return e9.x = e9.y, e9.y = e9.z, e9.z = e9.w, e9.w ^= e9.w >>> 19 ^ t6 ^ t6 >>> 8;
                }, t5 === (0 | t5) ? e9.x = t5 : n9 += t5;
                for(var r15 = 0; r15 < n9.length + 64; r15++)e9.x ^= 0 | n9.charCodeAt(r15), e9.next();
            }
            function o12(t5, e9) {
                return e9.x = t5.x, e9.y = t5.y, e9.z = t5.z, e9.w = t5.w, e9;
            }
            function a8(t5, e9) {
                var n9 = new r14(t5), a9 = e9 && e9.state, i3 = function() {
                    return (n9.next() >>> 0) / 4294967296;
                };
                return i3.double = function() {
                    do var t7 = ((n9.next() >>> 11) + (n9.next() >>> 0) / 4294967296) / 2097152;
                    while (0 === t7)
                    return t7;
                }, i3.int32 = n9.next, i3.quick = i3, a9 && ("object" == typeof a9 && o12(a9, n9), i3.state = function() {
                    return o12(n9, {
                    });
                }), i3;
            }
            e8 && e8.exports ? e8.exports = a8 : n8 && n8.amd ? n8(function() {
                return a8;
            }) : this.xor128 = a8;
        }(0, t1, !1);
    }), or = er(function(t1) {
        !function(t4, e8, n8) {
            function r14(t5) {
                var e9 = this, n9 = "";
                e9.next = function() {
                    var t7 = e9.x ^ e9.x >>> 2;
                    return e9.x = e9.y, e9.y = e9.z, e9.z = e9.w, e9.w = e9.v, (e9.d = e9.d + 362437 | 0) + (e9.v = e9.v ^ e9.v << 4 ^ t7 ^ t7 << 1) | 0;
                }, e9.x = 0, e9.y = 0, e9.z = 0, e9.w = 0, e9.v = 0, t5 === (0 | t5) ? e9.x = t5 : n9 += t5;
                for(var r15 = 0; r15 < n9.length + 64; r15++)e9.x ^= 0 | n9.charCodeAt(r15), r15 == n9.length && (e9.d = e9.x << 10 ^ e9.x >>> 4), e9.next();
            }
            function o12(t5, e9) {
                return e9.x = t5.x, e9.y = t5.y, e9.z = t5.z, e9.w = t5.w, e9.v = t5.v, e9.d = t5.d, e9;
            }
            function a8(t5, e9) {
                var n9 = new r14(t5), a9 = e9 && e9.state, i3 = function() {
                    return (n9.next() >>> 0) / 4294967296;
                };
                return i3.double = function() {
                    do var t7 = ((n9.next() >>> 11) + (n9.next() >>> 0) / 4294967296) / 2097152;
                    while (0 === t7)
                    return t7;
                }, i3.int32 = n9.next, i3.quick = i3, a9 && ("object" == typeof a9 && o12(a9, n9), i3.state = function() {
                    return o12(n9, {
                    });
                }), i3;
            }
            e8 && e8.exports ? e8.exports = a8 : n8 && n8.amd ? n8(function() {
                return a8;
            }) : this.xorwow = a8;
        }(0, t1, !1);
    }), ar = er(function(t1) {
        !function(t4, e8, n8) {
            function r14(t5) {
                var e9 = this;
                e9.next = function() {
                    var t7, n9, r15 = e9.x, o12 = e9.i;
                    return t7 = r15[o12], n9 = (t7 ^= t7 >>> 7) ^ t7 << 24, n9 ^= (t7 = r15[o12 + 1 & 7]) ^ t7 >>> 10, n9 ^= (t7 = r15[o12 + 3 & 7]) ^ t7 >>> 3, n9 ^= (t7 = r15[o12 + 4 & 7]) ^ t7 << 7, t7 = r15[o12 + 7 & 7], n9 ^= (t7 ^= t7 << 13) ^ t7 << 9, r15[o12] = n9, e9.i = o12 + 1 & 7, n9;
                }, (function(t7, e10) {
                    var n9, r15 = [];
                    if (e10 === (0 | e10)) r15[0] = e10;
                    else for(e10 = "" + e10, n9 = 0; n9 < e10.length; ++n9)r15[7 & n9] = r15[7 & n9] << 15 ^ e10.charCodeAt(n9) + r15[n9 + 1 & 7] << 13;
                    for(; r15.length < 8;)r15.push(0);
                    for(n9 = 0; n9 < 8 && 0 === r15[n9]; ++n9);
                    for(8 == n9 ? r15[7] = -1 : r15[n9], t7.x = r15, t7.i = 0, n9 = 256; n9 > 0; --n9)t7.next();
                })(e9, t5);
            }
            function o12(t5, e9) {
                return e9.x = t5.x.slice(), e9.i = t5.i, e9;
            }
            function a8(t5, e9) {
                null == t5 && (t5 = +new Date);
                var n9 = new r14(t5), a9 = e9 && e9.state, i3 = function() {
                    return (n9.next() >>> 0) / 4294967296;
                };
                return i3.double = function() {
                    do var t7 = ((n9.next() >>> 11) + (n9.next() >>> 0) / 4294967296) / 2097152;
                    while (0 === t7)
                    return t7;
                }, i3.int32 = n9.next, i3.quick = i3, a9 && (a9.x && o12(a9, n9), i3.state = function() {
                    return o12(n9, {
                    });
                }), i3;
            }
            e8 && e8.exports ? e8.exports = a8 : n8 && n8.amd ? n8(function() {
                return a8;
            }) : this.xorshift7 = a8;
        }(0, t1, !1);
    }), ir = er(function(t1) {
        !function(t4, e8, n8) {
            function r14(t5) {
                var e9 = this;
                e9.next = function() {
                    var t7, n9, r15 = e9.w, o12 = e9.X, a8 = e9.i;
                    return e9.w = r15 = r15 + 1640531527 | 0, n9 = o12[a8 + 34 & 127], t7 = o12[a8 = a8 + 1 & 127], n9 ^= n9 << 13, t7 ^= t7 << 17, n9 ^= n9 >>> 15, t7 ^= t7 >>> 12, n9 = o12[a8] = n9 ^ t7, e9.i = a8, n9 + (r15 ^ r15 >>> 16) | 0;
                }, (function(t7, e10) {
                    var n9, r15, o12, a8, i3, s10 = [], u6 = 128;
                    for(e10 === (0 | e10) ? (r15 = e10, e10 = null) : (e10 += "\0", r15 = 0, u6 = Math.max(u6, e10.length)), o12 = 0, a8 = -32; a8 < u6; ++a8)e10 && (r15 ^= e10.charCodeAt((a8 + 32) % e10.length)), 0 === a8 && (i3 = r15), r15 ^= r15 << 10, r15 ^= r15 >>> 15, r15 ^= r15 << 4, r15 ^= r15 >>> 13, a8 >= 0 && (i3 = i3 + 1640531527 | 0, o12 = 0 == (n9 = s10[127 & a8] ^= r15 + i3) ? o12 + 1 : 0);
                    for(o12 >= 128 && (s10[127 & (e10 && e10.length || 0)] = -1), o12 = 127, a8 = 512; a8 > 0; --a8)r15 = s10[o12 + 34 & 127], n9 = s10[o12 = o12 + 1 & 127], r15 ^= r15 << 13, n9 ^= n9 << 17, r15 ^= r15 >>> 15, n9 ^= n9 >>> 12, s10[o12] = r15 ^ n9;
                    t7.w = i3, t7.X = s10, t7.i = o12;
                })(e9, t5);
            }
            function o12(t5, e9) {
                return e9.i = t5.i, e9.w = t5.w, e9.X = t5.X.slice(), e9;
            }
            function a8(t5, e9) {
                null == t5 && (t5 = +new Date);
                var n9 = new r14(t5), a9 = e9 && e9.state, i3 = function() {
                    return (n9.next() >>> 0) / 4294967296;
                };
                return i3.double = function() {
                    do var t7 = ((n9.next() >>> 11) + (n9.next() >>> 0) / 4294967296) / 2097152;
                    while (0 === t7)
                    return t7;
                }, i3.int32 = n9.next, i3.quick = i3, a9 && (a9.X && o12(a9, n9), i3.state = function() {
                    return o12(n9, {
                    });
                }), i3;
            }
            e8 && e8.exports ? e8.exports = a8 : n8 && n8.amd ? n8(function() {
                return a8;
            }) : this.xor4096 = a8;
        }(0, t1, !1);
    }), sr = er(function(t1) {
        !function(t4, e8, n8) {
            function r14(t5) {
                var e9 = this, n9 = "";
                e9.next = function() {
                    var t7 = e9.b, n10 = e9.c, r15 = e9.d, o12 = e9.a;
                    return t7 = t7 << 25 ^ t7 >>> 7 ^ n10, n10 = n10 - r15 | 0, r15 = r15 << 24 ^ r15 >>> 8 ^ o12, o12 = o12 - t7 | 0, e9.b = t7 = t7 << 20 ^ t7 >>> 12 ^ n10, e9.c = n10 = n10 - r15 | 0, e9.d = r15 << 16 ^ n10 >>> 16 ^ o12, e9.a = o12 - t7 | 0;
                }, e9.a = 0, e9.b = 0, e9.c = -1640531527, e9.d = 1367130551, t5 === Math.floor(t5) ? (e9.a = t5 / 4294967296 | 0, e9.b = 0 | t5) : n9 += t5;
                for(var r15 = 0; r15 < n9.length + 20; r15++)e9.b ^= 0 | n9.charCodeAt(r15), e9.next();
            }
            function o12(t5, e9) {
                return e9.a = t5.a, e9.b = t5.b, e9.c = t5.c, e9.d = t5.d, e9;
            }
            function a8(t5, e9) {
                var n9 = new r14(t5), a9 = e9 && e9.state, i3 = function() {
                    return (n9.next() >>> 0) / 4294967296;
                };
                return i3.double = function() {
                    do var t7 = ((n9.next() >>> 11) + (n9.next() >>> 0) / 4294967296) / 2097152;
                    while (0 === t7)
                    return t7;
                }, i3.int32 = n9.next, i3.quick = i3, a9 && ("object" == typeof a9 && o12(a9, n9), i3.state = function() {
                    return o12(n9, {
                    });
                }), i3;
            }
            e8 && e8.exports ? e8.exports = a8 : n8 && n8.amd ? n8(function() {
                return a8;
            }) : this.tychei = a8;
        }(0, t1, !1);
    }), ur = er(function(t1) {
        !function(e8, n8) {
            var r14, o12 = this, a8 = 256, i3 = 6, s10 = "random", u6 = n8.pow(a8, i3), c4 = n8.pow(2, 52), l3 = 2 * c4, h2 = a8 - 1;
            function f2(t4, h3, f3) {
                var g3 = [], y2 = v3(function t5(e9, n9) {
                    var r15, o13 = [], a9 = typeof e9;
                    if (n9 && "object" == a9) for(r15 in e9)try {
                        o13.push(t5(e9[r15], n9 - 1));
                    } catch (t7) {
                    }
                    return o13.length ? o13 : "string" == a9 ? e9 : e9 + "\0";
                }((h3 = 1 == h3 ? {
                    entropy: !0
                } : h3 || {
                }).entropy ? [
                    t4,
                    m3(e8)
                ] : null == t4 ? function() {
                    try {
                        var t7;
                        return r14 && (t7 = r14.randomBytes) ? t7 = t7(a8) : (t7 = new Uint8Array(a8), (o12.crypto || o12.msCrypto).getRandomValues(t7)), m3(t7);
                    } catch (t8) {
                        var n9 = o12.navigator, i5 = n9 && n9.plugins;
                        return [
                            +new Date,
                            o12,
                            i5,
                            o12.screen,
                            m3(e8)
                        ];
                    }
                }() : t4, 3), g3), x3 = new d3(g3), b1 = function() {
                    for(var t7 = x3.g(i3), e9 = u6, n10 = 0; t7 < c4;)t7 = (t7 + n10) * a8, e9 *= a8, n10 = x3.g(1);
                    for(; t7 >= l3;)t7 /= 2, e9 /= 2, n10 >>>= 1;
                    return (t7 + n10) / e9;
                };
                return b1.int32 = function() {
                    return 0 | x3.g(4);
                }, b1.quick = function() {
                    return x3.g(4) / 4294967296;
                }, b1.double = b1, v3(m3(x3.S), e8), (h3.pass || f3 || function(t7, e9, r15, o13) {
                    return o13 && (o13.S && p4(o13, x3), t7.state = function() {
                        return p4(x3, {
                        });
                    }), r15 ? (n8[s10] = t7, e9) : t7;
                })(b1, y2, "global" in h3 ? h3.global : this == n8, h3.state);
            }
            function d3(t4) {
                var e9, n10 = t4.length, r15 = this, o13 = 0, i6 = r15.i = r15.j = 0, s11 = r15.S = [];
                for(n10 || (t4 = [
                    n10++
                ]); o13 < a8;)s11[o13] = o13++;
                for(o13 = 0; o13 < a8; o13++)s11[o13] = s11[i6 = h2 & i6 + t4[o13 % n10] + (e9 = s11[o13])], s11[i6] = e9;
                (r15.g = function(t5) {
                    for(var e10, n11 = 0, o14 = r15.i, i7 = r15.j, s12 = r15.S; t5--;)e10 = s12[o14 = h2 & o14 + 1], n11 = n11 * a8 + s12[h2 & (s12[o14] = s12[i7 = h2 & i7 + e10]) + (s12[i7] = e10)];
                    return r15.i = o14, r15.j = i7, n11;
                })(a8);
            }
            function p4(t4, e9) {
                return e9.i = t4.i, e9.j = t4.j, e9.S = t4.S.slice(), e9;
            }
            function v3(t4, e9) {
                for(var n10, r15 = t4 + "", o13 = 0; o13 < r15.length;)e9[h2 & o13] = h2 & (n10 ^= 19 * e9[h2 & o13]) + r15.charCodeAt(o13++);
                return m3(e9);
            }
            function m3(t4) {
                return String.fromCharCode.apply(0, t4);
            }
            if (n8["seed" + s10] = f2, v3(n8.random(), e8), t1.exports) {
                t1.exports = f2;
                try {
                    r14 = require("crypto");
                } catch (t4) {
                }
            }
        }([], Math);
    });
    ur.alea = nr, ur.xor128 = rr, ur.xorwow = or, ur.xorshift7 = ar, ur.xor4096 = ir, ur.tychei = sr;
    var cr = ur.alea, lr = function() {
        function t1(t4, e8, n8, r14, o12) {
            this.mean = t4, this.stdDev = e8, this.dtype = n8, this.nextVal = NaN, this.truncated = r14, this.truncated && (this.upper = this.mean + 2 * this.stdDev, this.lower = this.mean - 2 * this.stdDev);
            var a8 = o12 || Math.random();
            this.random = cr(a8.toString());
        }
        return t1.prototype.nextValue = function() {
            if (!isNaN(this.nextVal)) {
                var t4 = this.nextVal;
                return this.nextVal = NaN, t4;
            }
            for(var e8, n8, r14 = !1; !r14;){
                var o12 = void 0, a8 = void 0, i3 = void 0;
                do i3 = (o12 = 2 * this.random() - 1) * o12 + (a8 = 2 * this.random() - 1) * a8;
                while (i3 >= 1 || 0 === i3)
                var s10 = Math.sqrt(-2 * Math.log(i3) / i3);
                e8 = this.mean + this.stdDev * o12 * s10, n8 = this.mean + this.stdDev * a8 * s10, this.truncated && !this.isValidTruncated(e8) || (r14 = !0);
            }
            return this.truncated && !this.isValidTruncated(n8) || (this.nextVal = this.convertValue(n8)), this.convertValue(e8);
        }, t1.prototype.convertValue = function(t5) {
            return null == this.dtype || "float32" === this.dtype ? t5 : Math.round(t5);
        }, t1.prototype.isValidTruncated = function(t5) {
            return t5 <= this.upper && t5 >= this.lower;
        }, t1;
    }(), hr = function() {
        function t1(t5, e8, n8, r14) {
            this.alpha = t5, this.beta = 1 / e8, this.dtype = n8;
            var o13 = r14 || Math.random();
            this.randu = cr(o13.toString()), this.randn = new lr(0, 1, n8, !1, this.randu()), this.d = t5 < 1 ? t5 + 2 / 3 : t5 - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);
        }
        return t1.prototype.nextValue = function() {
            for(var t5, e8, n8, r14, o13, a9;;){
                do r14 = this.randn.nextValue(), a9 = 1 + this.c * r14;
                while (a9 <= 0)
                if (a9 *= a9 * a9, e8 = 1 - 0.331 * (t5 = r14 * r14) * t5, n8 = 0.5 * t5 + this.d * (1 - a9 + Math.log(a9)), (o13 = this.randu()) < e8 || Math.log(o13) < n8) break;
            }
            return a9 = 1 / this.beta * this.d * a9, this.alpha < 1 && (a9 *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(a9);
        }, t1.prototype.convertValue = function(t5) {
            return "float32" === this.dtype ? t5 : Math.round(t5);
        }, t1;
    }(), fr = function() {
        function t1(t5, e8, n8, r14) {
            var o13 = this;
            if ((void 0) === t5 && (t5 = 0), (void 0) === e8 && (e8 = 1), this.canReturnFloat = function() {
                return null == o13.dtype || "float32" === o13.dtype;
            }, this.min = t5, this.range = e8 - t5, this.dtype = n8, null == r14 && (r14 = Math.random()), "number" == typeof r14 && (r14 = r14.toString()), !this.canReturnFloat() && this.range <= 1) throw new Error("The difference between " + t5 + " - " + e8 + " <= 1 and dtype is not float");
            this.random = cr(r14);
        }
        return t1.prototype.convertValue = function(t5) {
            return this.canReturnFloat() ? t5 : Math.round(t5);
        }, t1.prototype.nextValue = function() {
            return this.convertValue(this.min + this.range * this.random());
        }, t1;
    }();
    function dr(t1, e8, n8) {
        return (void 0) === e8 && (e8 = "float32"), e8 = e8 || "float32", nt(t1), new gt(t1, e8, n8);
    }
    function pr(t1, e8) {
        (void 0) === e8 && (e8 = !1), console.log(t1.toString(e8));
    }
    var vr = An({
        batchToSpaceND_: function(t1, e8, n8) {
            var r14 = mn(t1, "x", "batchToSpaceND"), o13 = e8.reduce(function(t5, e9) {
                return t5 * e9;
            });
            return C(r14.rank >= 1 + e8.length, function() {
                return "input rank is " + r14.rank + " but should be > than blockShape.length " + e8.length;
            }), C(n8.length === e8.length, function() {
                return "crops.length is " + n8.length + " but should be equal to blockShape.length  " + e8.length;
            }), C(r14.shape[0] % o13 == 0, function() {
                return "input tensor batch is " + r14.shape[0] + " but is not divisible by the product of the elements of blockShape " + e8.join(" * ") + " === " + o13;
            }), Lt.runKernelFunc(function(t5) {
                return t5.batchToSpaceND(r14, e8, n8);
            }, {
                $x: r14
            }, function(t5) {
                return {
                    $x: function() {
                        return t5.spaceToBatchND(e8, n8);
                    }
                };
            });
        }
    }), mr = An({
        broadcastTo_: function(t1, e8) {
            var n8 = mn(t1, "broadcastTo", "x"), r14 = n8.shape;
            if (e8.some(function(t5) {
                return !(t5 > 0) || t5 % 1 != 0;
            })) throw new Error("broadcastTo(): Invalid broadcast shape [" + e8 + "].");
            if (e8.length < n8.rank) throw new Error("broadcastTo(): shape.length=" + e8.length + " < input.rank=" + n8.rank + ".");
            if (e8.length > n8.rank) {
                for(var o13 = n8.shape.slice(); o13.length < e8.length;)o13.unshift(1);
                n8 = n8.reshape(o13);
            }
            for(var a9 = Array.from(e8), i6 = e8.length - 1; i6 >= 0; i6--)if (n8.shape[i6] === e8[i6]) a9[i6] = 1;
            else if (1 !== n8.shape[i6]) throw new Error("broadcastTo(): [" + r14 + "] cannot be broadcast to [" + e8 + "].");
            var s11 = a9.map(function(t5, e9) {
                return t5 > 1 ? e9 : -1;
            }).filter(function(t5) {
                return t5 >= 0;
            });
            return 0 === s11.length ? n8.clone() : Lt.runKernelFunc(function(t5) {
                return t5.tile(n8, a9);
            }, {
                input: n8
            }, function(t5) {
                return {
                    input: function() {
                        return t5.sum(s11, !0);
                    }
                };
            });
        }
    }), gr = An({
        cast_: function(t1, e8) {
            var n8 = mn(t1, "x", "cast");
            if (!W(e8)) throw new Error("Failed to cast to unknown dtype " + e8);
            if ("string" === e8 && "string" !== n8.dtype || "string" !== e8 && "string" === n8.dtype) throw new Error("Only strings can be casted to strings");
            var r14 = {
                dtype: e8
            };
            return Lt.runKernelFunc(function(t5) {
                return t5.cast(n8, e8);
            }, {
                x: n8
            }, function(t5) {
                return {
                    x: function() {
                        return t5.clone();
                    }
                };
            }, "Cast", r14);
        }
    }), yr = An({
        clone_: function(t1) {
            var e8 = mn(t1, "x", "clone", null);
            return Lt.runKernelFunc(function() {
                return Lt.makeTensorFromDataId(e8.dataId, e8.shape, e8.dtype);
            }, {
                $x: e8
            }, function(t5) {
                return {
                    $x: function() {
                        return t5.toFloat();
                    }
                };
            });
        }
    }), xr = An({
        cumsum_: function(t1, e8, n8, r14) {
            (void 0) === e8 && (e8 = 0), (void 0) === n8 && (n8 = !1), (void 0) === r14 && (r14 = !1);
            var o14 = mn(t1, "x", "cumsum"), a9 = En([
                e8 |= 0
            ], o14.rank), i6 = o14;
            null != a9 && (i6 = o14.transpose(a9));
            var s11 = In(1, o14.rank)[0], u6 = Lt.runKernelFunc(function(t5) {
                return t5.cumsum(i6, s11, n8, r14);
            }, {
                permutedX: i6
            }, function(t5) {
                return {
                    permutedX: function() {
                        return t5.cumsum(e8, n8, !r14);
                    }
                };
            });
            return null != a9 && (u6 = u6.transpose(a9)), u6;
        }
    }), br = An({
        depthToSpace_: function(t1, e8, n8) {
            (void 0) === n8 && (n8 = "NHWC");
            var r14 = mn(t1, "x", "depthToSpace"), o14 = "NHWC" === n8 ? r14.shape[1] : r14.shape[2], a9 = "NHWC" === n8 ? r14.shape[2] : r14.shape[3], i6 = "NHWC" === n8 ? r14.shape[3] : r14.shape[1];
            return C(o14 * e8 >= 0, function() {
                return "Negative dimension size caused by overflow when multiplying\n      " + o14 + " and " + e8 + "  for depthToSpace with input shape\n      " + r14.shape;
            }), C(a9 * e8 >= 0, function() {
                return "Negative dimension size caused by overflow when multiplying\n      " + a9 + " and " + e8 + " for depthToSpace with input shape\n          " + r14.shape;
            }), C(i6 % (e8 * e8) == 0, function() {
                return "Dimension size must be evenly divisible by " + e8 * e8 + " but is " + i6 + " for depthToSpace with input shape " + r14.shape;
            }), Lt.runKernelFunc(function(t5) {
                return t5.depthToSpace(r14, e8, n8);
            }, {
                $x: r14
            });
        }
    }), wr = An({
        expandDims_: function(t1, e8) {
            (void 0) === e8 && (e8 = 0);
            var n8 = mn(t1, "x", "expandDims", null);
            C(e8 <= n8.rank, function() {
                return "Axis must be <= rank of the tensor";
            });
            var r14 = n8.shape.slice();
            return e8 < 0 && (C(-(n8.rank + 1) <= e8, function() {
                return "Axis must be in the interval [" + -(n8.rank + 1) + ", " + n8.rank + "]";
            }), e8 = n8.rank + e8 + 1), r14.splice(e8, 0, 1), Or(n8, r14);
        }
    }), Cr = An({
        eye_: function(t1, e8, n8, r14) {
            (void 0) === r14 && (r14 = "float32"), null == e8 && (e8 = t1);
            for(var o14 = dr([
                t1,
                e8
            ], r14), a9 = t1 <= e8 ? t1 : e8, i6 = 0; i6 < a9; ++i6)o14.set(1, i6, i6);
            var s11 = o14.toTensor().as2D(t1, e8);
            if (null == n8) return s11;
            if (1 === n8.length) return Lr(wr(s11, 0), [
                n8[0],
                1,
                1
            ]);
            if (2 === n8.length) return Lr(wr(wr(s11, 0), 0), [
                n8[0],
                n8[1],
                1,
                1
            ]);
            if (3 === n8.length) return Lr(wr(wr(wr(s11, 0), 0), 0), [
                n8[0],
                n8[1],
                n8[2],
                1,
                1
            ]);
            throw new Error("eye() currently supports only 1D and 2D batchShapes, but received " + n8.length + "D.");
        }
    }), Er = An({
        multinomial_: function(t1, e8, n8, r14) {
            (void 0) === r14 && (r14 = !1);
            var o14 = mn(t1, "logits", "multinomial"), a9 = o14.size, i6 = o14.rank;
            if (a9 < 2) throw new Error("Error in multinomial: you need at least 2 outcomes, but got " + a9 + ".");
            if (i6 > 2) throw new Error("Rank of probabilities must be 1 or 2, but is " + i6);
            n8 = n8 || Math.random();
            var s11 = 1 === i6 ? o14.as2D(1, -1) : o14, u6 = Lt.runKernelFunc(function(t5) {
                return t5.multinomial(s11, r14, e8, n8);
            }, {
                logits2D: s11
            });
            return 1 === i6 ? u6.as1D() : u6;
        }
    }), Rr = An({
        oneHot_: function(t1, e8, n8, r14) {
            if ((void 0) === n8 && (n8 = 1), (void 0) === r14 && (r14 = 0), e8 < 2) throw new Error("Error in oneHot: depth must be >=2, but it is " + e8);
            var o14 = mn(t1, "indices", "oneHot", "int32"), a9 = o14.shape.concat([
                e8
            ]);
            return o14 = o14.flatten(), Lt.runKernelFunc(function(t5) {
                return t5.oneHot(o14, e8, n8, r14);
            }, {
                $indices: o14
            }, function(t5) {
                return {
                    $indices: function() {
                        return Gn(o14.shape, "float32");
                    }
                };
            }).reshape(a9);
        }
    }), Ir = An({
        pad_: function(t1, e8, n8) {
            (void 0) === n8 && (n8 = 0);
            var r14 = mn(t1, "x", "pad");
            if (0 === r14.rank) throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
            var o14 = {
                paddings: e8,
                constantValue: n8
            };
            return Lt.runKernelFunc(function(t5) {
                return t5.pad(r14, e8, n8);
            }, {
                x: r14
            }, function(t5) {
                var n10 = e8.map(function(t7) {
                    return t7[0];
                });
                return {
                    x: function() {
                        return t5.slice(n10, r14.shape);
                    }
                };
            }, "PadV2", o14);
        }
    }), kr = An({
        pad1d_: function(t1, e8, n8) {
            return (void 0) === n8 && (n8 = 0), C(2 === e8.length, function() {
                return "Invalid number of paddings. Must be length of 2.";
            }), Ir(t1, [
                e8
            ], n8);
        }
    }), Sr = An({
        pad2d_: function(t1, e8, n8) {
            return (void 0) === n8 && (n8 = 0), C(2 === e8.length && 2 === e8[0].length && 2 === e8[1].length, function() {
                return "Invalid number of paddings. Must be length of 2 each.";
            }), Ir(t1, e8, n8);
        }
    }), Ar = An({
        pad3d_: function(t1, e8, n8) {
            return (void 0) === n8 && (n8 = 0), C(3 === e8.length && 2 === e8[0].length && 2 === e8[1].length && 2 === e8[2].length, function() {
                return "Invalid number of paddings. Must be length of 2 each.";
            }), Ir(t1, e8, n8);
        }
    }), Dr = An({
        pad4d_: function(t1, e8, n8) {
            return (void 0) === n8 && (n8 = 0), C(4 === e8.length && 2 === e8[0].length && 2 === e8[1].length && 2 === e8[2].length && 2 === e8[3].length, function() {
                return "Invalid number of paddings. Must be length of 2 each.";
            }), Ir(t1, e8, n8);
        }
    }), Tr = An({
        rand_: function(t1, e8, n8) {
            var r14 = k(t1), o14 = null;
            if (null == n8 || "float32" === n8) o14 = new Float32Array(r14);
            else if ("int32" === n8) o14 = new Int32Array(r14);
            else {
                if ("bool" !== n8) throw new Error("Unknown data type " + n8);
                o14 = new Uint8Array(r14);
            }
            for(var a9 = 0; a9 < r14; a9++)o14[a9] = e8();
            return Lt.makeTensor(o14, t1, n8);
        }
    }), Nr = An({
        randomNormal_: function(t1, e8, n8, r14, o14) {
            if ((void 0) === e8 && (e8 = 0), (void 0) === n8 && (n8 = 1), null != r14 && "bool" === r14) throw new Error("Unsupported data type " + r14);
            for(var a9 = new lr(e8, n8, r14, !1, o14), i6 = dr(t1, r14), s11 = 0; s11 < i6.values.length; s11++)i6.values[s11] = a9.nextValue();
            return i6.toTensor();
        }
    }), Fr = An({
        randomGamma_: function(t1, e8, n8, r14, o14) {
            if ((void 0) === n8 && (n8 = 1), (void 0) === r14 && (r14 = "float32"), null == n8 && (n8 = 1), null == r14 && (r14 = "float32"), "float32" !== r14 && "int32" !== r14) throw new Error("Unsupported data type " + r14);
            for(var a9 = new hr(e8, n8, r14, o14), i6 = dr(t1, r14), s11 = 0; s11 < i6.values.length; s11++)i6.values[s11] = a9.nextValue();
            return i6.toTensor();
        }
    }), _r = An({
        randomUniform_: function(t1, e8, n8, r14, o14) {
            (void 0) === e8 && (e8 = 0), (void 0) === n8 && (n8 = 1), (void 0) === r14 && (r14 = "float32");
            for(var a9 = dr(t1, r14), i6 = new fr(e8, n8, null, o14), s11 = 0; s11 < a9.values.length; s11++)a9.values[s11] = i6.nextValue();
            return a9.toTensor();
        }
    }), Or = An({
        reshape_: function(t1, e8) {
            var n8 = mn(t1, "x", "reshape", null);
            e8 = _(e8, n8.size), C(n8.size === k(e8), function() {
                return "new shape and old shape must have the same number of elements.";
            });
            var r14 = {
                shape: e8
            };
            return Lt.runKernelFunc(function(t5) {
                return t5.reshape(n8, e8);
            }, {
                x: n8
            }, function(t5) {
                return {
                    x: function() {
                        return t5.reshape(n8.shape);
                    }
                };
            }, "Reshape", r14);
        }
    }), Mr = An({
        spaceToBatchND_: function(t1, e8, n8) {
            var r14 = mn(t1, "x", "spaceToBatchND");
            return C(r14.rank >= 1 + e8.length, function() {
                return "input rank " + r14.rank + " should be > than [blockShape] " + e8.length;
            }), C(n8.length === e8.length, function() {
                return "paddings.shape[0] " + n8.length + " must be equal to [blockShape] " + e8.length;
            }), C(r14.shape.reduce(function(t5, r15, o14) {
                return o14 > 0 && o14 <= e8.length ? t5 && (r15 + n8[o14 - 1][0] + n8[o14 - 1][1]) % e8[o14 - 1] == 0 : t5;
            }, !0), function() {
                return "input spatial dimensions " + r14.shape.slice(1) + " with paddings " + n8.toString() + " must be divisible by blockShapes " + e8.toString();
            }), Lt.runKernelFunc(function(t5) {
                return t5.spaceToBatchND(r14, e8, n8);
            }, {
                $x: r14
            }, function(t5) {
                return {
                    $x: function() {
                        return t5.batchToSpaceND(e8, n8);
                    }
                };
            });
        }
    }), Br = An({
        squeeze_: function(t1, e8) {
            var n8 = mn(t1, "x", "squeeze");
            return Or(n8, M(n8.shape, e8).newShape);
        }
    }), Pr = An({
        stack_: function(t1, e8) {
            (void 0) === e8 && (e8 = 0);
            var n8 = gn(t1, "tensors", "stack");
            if (C(n8.length >= 1, function() {
                return "Pass at least one tensor to tf.stack";
            }), 1 === n8.length) return n8[0].expandDims(e8);
            var r14 = n8[0].rank, o14 = n8[0].shape, a9 = n8[0].dtype;
            C(e8 <= r14, function() {
                return "Axis must be <= rank of the tensor";
            }), n8.forEach(function(t5) {
                E(o14, t5.shape, "All tensors passed to stack must have matching shapes");
            }), n8.forEach(function(t5) {
                C(a9 === t5.dtype, function() {
                    return "All tensors passed to stack must have matching dtypes";
                });
            });
            var i6 = n8.map(function(t5) {
                return t5.expandDims(e8);
            });
            return Yn(i6, e8);
        }
    }), Lr = An({
        tile_: function(t1, e8) {
            var n8 = mn(t1, "x", "tile", null);
            C(n8.rank === e8.length, function() {
                return "Error in transpose: rank of input " + n8.rank + " must match length of reps " + e8 + ".";
            });
            var r14 = [
                n8
            ], o14 = {
                reps: e8
            };
            return Lt.runKernelFunc(function(t5, r15) {
                var o15 = t5.tile(n8, e8);
                return r15([
                    n8
                ]), o15;
            }, {
                x: n8
            }, function(t5, n10) {
                var r15 = n10[0];
                return {
                    x: function() {
                        var n11 = Xn(r15);
                        if (1 === r15.rank) for(var o15 = 0; o15 < e8[0]; ++o15)n11 = n11.add(t5.slice([
                            o15 * r15.shape[0]
                        ], [
                            r15.shape[0]
                        ]));
                        else if (2 === r15.rank) for(o15 = 0; o15 < e8[0]; ++o15)for(var a9 = 0; a9 < e8[1]; ++a9)n11 = n11.add(t5.slice([
                            o15 * r15.shape[0],
                            a9 * r15.shape[1]
                        ], [
                            r15.shape[0],
                            r15.shape[1]
                        ]));
                        else if (3 === r15.rank) for(o15 = 0; o15 < e8[0]; ++o15)for(a9 = 0; a9 < e8[1]; ++a9)for(var i6 = 0; i6 < e8[2]; ++i6)n11 = n11.add(t5.slice([
                            o15 * r15.shape[0],
                            a9 * r15.shape[1],
                            i6 * r15.shape[2]
                        ], [
                            r15.shape[0],
                            r15.shape[1],
                            r15.shape[2]
                        ]));
                        else {
                            if (4 !== r15.rank) throw new Error("Gradient for tile operation is not implemented for rank-" + r15.rank + " tensors yet.");
                            for(o15 = 0; o15 < e8[0]; ++o15)for(a9 = 0; a9 < e8[1]; ++a9)for(i6 = 0; i6 < e8[2]; ++i6)for(var s11 = 0; s11 < e8[3]; ++s11)n11 = n11.add(t5.slice([
                                o15 * r15.shape[0],
                                a9 * r15.shape[1],
                                i6 * r15.shape[2],
                                s11 * r15.shape[3]
                            ], [
                                r15.shape[0],
                                r15.shape[1],
                                r15.shape[2],
                                r15.shape[3]
                            ]));
                        }
                        return n11;
                    }
                };
            }, "Tile", o14, r14);
        }
    }), Wr = An({
        truncatedNormal_: function(t1, e8, n8, r14, o14) {
            if ((void 0) === e8 && (e8 = 0), (void 0) === n8 && (n8 = 1), null != r14 && "bool" === r14) throw new Error("Unsupported data type " + r14);
            for(var a9 = new lr(e8, n8, r14, !0, o14), i6 = dr(t1, r14), s12 = 0; s12 < i6.values.length; s12++)i6.values[s12] = a9.nextValue();
            return i6.toTensor();
        }
    }), Ur = An({
        unstack_: function(t1, e8) {
            (void 0) === e8 && (e8 = 0), e8 = e8 || 0;
            var n8 = mn(t1, "x", "unstack");
            C(e8 >= -n8.shape.length && e8 < n8.shape.length, function() {
                return "Axis = " + e8 + " is not in [-" + n8.shape.length + ", " + n8.shape.length + ")";
            }), e8 < 0 && (e8 += n8.shape.length);
            var r14 = {
                axis: e8
            };
            return Lt.runKernelFunc(function(t5) {
                return t5.unstack(n8, e8);
            }, {
                x: n8
            }, function(t5) {
                return {
                    x: function() {
                        return Pr(t5, e8);
                    }
                };
            }, "Unpack", r14);
        }
    }), Vr = function(t1, e8) {
        return n10(this, void 0, void 0, function() {
            var n8, o14, a9, i6, s12, u6, c4, l3, h2, f2;
            return r17(this, function(r14) {
                switch(r14.label){
                    case 0:
                        return n8 = mn(t1, "x", "setdiff1d"), o14 = mn(e8, "y", "setdiff1d"), C(n8.dtype === o14.dtype, function() {
                            return "x and y should have the same dtype, but got x (" + n8.dtype + ") and y (" + o14.dtype + ").";
                        }), C(1 === n8.rank, function() {
                            return "x should be 1D tensor, but got x (" + n8.shape + ").";
                        }), C(1 === o14.rank, function() {
                            return "y should be 1D tensor, but got y (" + o14.shape + ").";
                        }), [
                            4,
                            n8.data()
                        ];
                    case 1:
                        return a9 = r14.sent(), [
                            4,
                            o14.data()
                        ];
                    case 2:
                        for(i6 = r14.sent(), s12 = new Set(i6), u6 = 0, h2 = 0; h2 < a9.length; h2++)s12.has(a9[h2]) || u6++;
                        for(c4 = new gt([
                            u6
                        ], n8.dtype), l3 = new gt([
                            u6
                        ], "int32"), h2 = 0, f2 = 0; h2 < a9.length; h2++)s12.has(a9[h2]) || (c4.values[f2] = a9[h2], l3.values[f2] = h2, f2++);
                        return [
                            2,
                            [
                                c4.toTensor(),
                                l3.toTensor()
                            ]
                        ];
                }
            });
        });
    };
    function zr(t1, e8, n8, r14) {
        (void 0) === r14 && (r14 = !0);
        var o14 = [];
        if (r14) (o14 = o14.concat(e8.slice(0))).push(t1[0] / n8), o14 = o14.concat(t1.slice(1));
        else {
            o14 = o14.concat(t1[0]);
            for(var a9 = e8.length, i6 = 0; i6 < a9; ++i6)o14 = o14.concat([
                t1[i6 + 1] / e8[i6],
                e8[i6]
            ]);
            o14 = o14.concat(t1.slice(a9 + 1));
        }
        return o14;
    }
    function Gr(t1, e8, n8) {
        (void 0) === n8 && (n8 = !0);
        var r14 = [];
        if (n8) {
            r14.push(e8);
            for(var o14 = e8 + 1; o14 < t1; ++o14)o14 <= 2 * e8 ? (r14.push(o14), r14.push(o14 - (e8 + 1))) : r14.push(o14);
        } else {
            var a10 = [], i7 = [];
            for(o14 = 1; o14 < t1; ++o14)o14 >= 2 * e8 + 1 || o14 % 2 == 1 ? i7.push(o14) : a10.push(o14);
            r14.push.apply(r14, a10), r14.push(0), r14.push.apply(r14, i7);
        }
        return r14;
    }
    function Hr(t1, e8, n8, r14) {
        (void 0) === r14 && (r14 = !0);
        var o15 = [];
        r14 ? o15.push(t1[0] / n8) : o15.push(t1[0] * n8);
        for(var a11 = 1; a11 < t1.length; ++a11)a11 <= e8.length ? r14 ? o15.push(e8[a11 - 1] * t1[a11]) : o15.push(t1[a11] / e8[a11 - 1]) : o15.push(t1[a11]);
        return o15;
    }
    function qr(t1, e8) {
        for(var n8 = [
            0
        ], r14 = 0; r14 < e8; ++r14)n8.push(t1[r14][0]);
        return n8;
    }
    function Kr(t1, e8, n8) {
        for(var r14 = t1.slice(0, 1), o15 = 0; o15 < n8; ++o15)r14.push(t1[o15 + 1] - e8[o15][0] - e8[o15][1]);
        return r14;
    }
    function jr(t1, e8) {
        if (t1.rank < 1) throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was " + t1.rank + ".");
        if (e8.rank < 1) throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was " + e8.rank + ".");
        if ("int32" !== e8.dtype) throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was " + e8.dtype + ".");
        if (e8.shape[e8.rank - 1] > t1.rank) throw new Error("index innermost dimension length must be <= tensor rank; saw: " + e8.shape[e8.rank - 1] + " vs. " + t1.rank);
        if (0 === t1.size) throw new Error("Requested more than 0 entries, but input is empty. Input shape: " + t1.shape + ".");
        for(var n8 = e8.shape, r14 = n8[n8.length - 1], o15 = 1, a11 = 0; a11 < n8.length - 1; ++a11)o15 *= n8[a11];
        var i8 = t1.shape, s12 = n8.slice();
        s12.pop();
        var u6 = 1;
        for(a11 = r14; a11 < t1.rank; ++a11)u6 *= i8[a11], s12.push(i8[a11]);
        var c4 = $(t1.shape).map(function(t5) {
            return t5 / u6;
        }).concat([
            1
        ]).slice(0, r14);
        return [
            s12,
            o15,
            u6,
            c4
        ];
    }
    var Xr = Object.freeze({
        prepareAndValidate: jr
    }), Yr = 30;
    function $r(t1) {
        return t1 <= Yr ? t1 : Y(t1, Math.floor(Math.sqrt(t1)));
    }
    function Qr(t1, e8, n8) {
        var r14 = e8.rank > 1 ? e8.shape[e8.rank - 1] : 1, o15 = e8.rank > 1 ? e8.rank - 1 : 1, a11 = "Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: " + n8.shape + ", indices.shape: " + e8.shape + ", shape: " + t1 + ", sliceDim: " + r14 + ", and batchDim: " + o15 + ".";
        if (n8.rank < o15) throw new Error(a11 + " update.rank < " + o15 + ". ");
        if (t1.length < r14 + (n8.rank - o15)) throw new Error(a11 + " Output shape length < " + (r14 + (n8.rank - o15)));
        if (n8.rank !== o15 + t1.length - r14) throw new Error(a11 + " update.rank != " + (o15 + t1.length - r14));
        for(var i8 = 0; i8 < o15; ++i8)if (n8.shape[i8] !== e8.shape[i8]) throw new Error(a11 + " updates.shape[" + i8 + "] (" + n8.shape[i8] + ") != indices.shape[" + i8 + "] (" + e8.shape[i8] + ").");
        for(i8 = 0; i8 < n8.rank - o15; ++i8)if (n8.shape[i8 + o15] !== t1[i8 + r14]) throw new Error(a11 + " updates.shape[" + (i8 + o15) + "] (" + n8.shape[i8 + o15] + ") != shape[" + (i8 + o15) + "] (" + t1[i8 + o15] + ")");
    }
    function Jr(t1, e8, n8) {
        if (e8.rank < 1) throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was " + e8.rank + ".");
        if (t1.rank < 1) throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was " + t1.rank + ".");
        if ("int32" !== e8.dtype) throw new Error("The dtype of 'indices' should be int32, but got dtype: " + e8.dtype);
        if (n8.length < 1) throw new Error("Output rank must be greater or equal to 1, but got shape: " + n8);
        if (0 === n8.length) {
            if (0 === e8.size) throw new Error("Indices specified for empty output. indices shape: " + e8.shape);
            if (0 === t1.size) throw new Error("Updates specified for empty output. updates shape: " + t1.shape);
        }
        Qr(n8, e8, t1);
    }
    function Zr(t1, e8, n8) {
        for(var r14 = e8.shape.length, o15 = r14 > 1 ? e8.shape[r14 - 1] : 1, a11 = n8.length, i8 = 1, s12 = o15; s12 < a11; ++s12)i8 *= n8[s12];
        var u6 = o15 < 1 ? 1 : o15;
        return {
            sliceRank: o15,
            numUpdates: k(e8.shape) / u6,
            sliceSize: i8,
            strides: $(n8.slice(0, o15)).concat([
                1
            ]),
            outputSize: k(n8)
        };
    }
    var to = Object.freeze({
        validateUpdateShape: Qr,
        validateInput: Jr,
        calculateShapes: Zr
    });
    function eo(t1, e8, n8) {
        C(t1.rank === e8.length, function() {
            return "Error in slice" + t1.rank + "D: Length of begin " + e8 + " must match the rank of the array (" + t1.rank + ").";
        }), C(t1.rank === n8.length, function() {
            return "Error in slice" + t1.rank + "D: Length of size " + n8 + " must match the rank of the array (" + t1.rank + ").";
        });
        for(var r14 = function(r15) {
            C(e8[r15] + n8[r15] <= t1.shape[r15], function() {
                return "Error in slice" + t1.rank + "D: begin[" + r15 + "] + size[" + r15 + "] (" + (e8[r15] + n8[r15]) + ") would overflow input.shape[" + r15 + "] (" + t1.shape[r15] + ")";
            });
        }, o15 = 0; o15 < t1.rank; ++o15)r14(o15);
    }
    function no(t1) {
        for(var e8 = [], n8 = 0; t1 > 0;)1 & t1 && e8.push(n8), t1 /= 2, n8++;
        return e8;
    }
    function ro(t1, e8, n8) {
        for(var r14 = [], o15 = 0; o15 < t1.length; o15++)r14[o15] = Math.ceil((e8[o15] - t1[o15]) / n8[o15]);
        return r14;
    }
    function oo(t1, e8, n8, r14, o15) {
        var a11 = e8[o15], i8 = n8[o15] || 1;
        (t1 & 1 << o15 || null == a11) && (a11 = i8 > 0 ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);
        var s12 = r14[o15];
        return a11 < 0 && (a11 += s12), a11 = x1(0, a11, s12 - 1);
    }
    function ao(t1, e8, n8, r14, o15) {
        var a11 = e8[o15], i8 = n8[o15] || 1;
        (t1 & 1 << o15 || null == a11) && (a11 = i8 > 0 ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER);
        var s12 = r14[o15];
        return a11 < 0 && (a11 += s12), a11 = i8 > 0 ? x1(0, a11, s12) : x1(-1, a11, s12 - 1);
    }
    function io(t1, e8, n8) {
        for(var r14 = n8.length, o15 = 0; o15 < n8.length; o15++)if (n8[o15] > 1) {
            r14 = o15;
            break;
        }
        for(o15 = r14 + 1; o15 < n8.length; o15++)if (e8[o15] > 0 || n8[o15] !== t1[o15]) return !1;
        return !0;
    }
    function so(t1, e8) {
        for(var n8 = t1.length > 0 ? t1[t1.length - 1] : 1, r14 = 0; r14 < t1.length - 1; r14++)n8 += t1[r14] * e8[r14];
        return n8;
    }
    var uo = Object.freeze({
        assertParamsValid: eo,
        maskToAxes: no,
        computeOutShape: ro,
        startForAxis: oo,
        stopForAxis: ao,
        isSliceContinous: io,
        computeFlatOffset: so
    });
    function co(t1) {
        return C(X(t1), function() {
            return "The f passed in grad(f) must be a function";
        }), function(e8, n8) {
            var r14 = mn(e8, "x", "tf.grad", null), o15 = null != n8 ? mn(n8, "dy", "tf.grad") : null;
            return Lt.tidy(function() {
                var e9 = Lt.gradients(function() {
                    return t1(r14);
                }, [
                    r14
                ], o15), n10 = e9.value, a11 = e9.grads;
                return null != o15 && E(n10.shape, o15.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), mo(a11), a11[0];
            });
        };
    }
    function lo(t1) {
        return C(X(t1), function() {
            return "The f passed in grads(f) must be a function";
        }), function(e8, n8) {
            C(Array.isArray(e8), function() {
                return "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s";
            });
            var r14 = gn(e8, "args", "tf.grads", null), o15 = null != n8 ? mn(n8, "dy", "tf.grads") : null;
            return Lt.tidy(function() {
                var e9 = Lt.gradients(function() {
                    return t1.apply(void 0, r14);
                }, r14, o15), n10 = e9.value, a11 = e9.grads;
                return null != o15 && E(n10.shape, o15.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), mo(a11), a11;
            });
        };
    }
    function ho(t1) {
        return C(X(t1), function() {
            return "The f passed in valueAndGrad(f) must be a function";
        }), function(e8, n8) {
            C(e8 instanceof wt, function() {
                return "The x passed in valueAndGrad(f)(x) must be a tensor";
            }), C(null == n8 || n8 instanceof wt, function() {
                return "The dy passed in valueAndGrad(f)(x, dy) must be a tensor";
            });
            var r14 = Lt.gradients(function() {
                return t1(e8);
            }, [
                e8
            ], n8), o15 = r14.grads, a11 = r14.value;
            return mo(o15), {
                grad: o15[0],
                value: a11
            };
        };
    }
    function fo(t1) {
        return C(X(t1), function() {
            return "The f passed in valueAndGrads(f) must be a function";
        }), function(e8, n8) {
            C(Array.isArray(e8) && e8.every(function(t5) {
                return t5 instanceof wt;
            }), function() {
                return "The args passed in valueAndGrads(f)(args) must be array of tensors";
            }), C(null == n8 || n8 instanceof wt, function() {
                return "The dy passed in valueAndGrads(f)(args, dy) must be a tensor";
            });
            var r14 = Lt.gradients(function() {
                return t1.apply(void 0, e8);
            }, e8, n8);
            return null != n8 && E(r14.value.shape, n8.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), mo(r14.grads), r14;
        };
    }
    function po(t1, e8) {
        C(X(t1), function() {
            return "The f passed in variableGrads(f) must be a function";
        }), C(null == e8 || Array.isArray(e8) && e8.every(function(t5) {
            return t5 instanceof St;
        }), function() {
            return "The varList passed in variableGrads(f, varList) must be an array of variables";
        });
        var n8 = null != e8;
        if (!n8) for(var r14 in e8 = [], Lt.registeredVariables)e8.push(Lt.registeredVariables[r14]);
        var o15 = n8 ? e8.filter(function(t5) {
            return !t5.trainable;
        }) : null, a11 = e8.length;
        C((e8 = e8.filter(function(t5) {
            return t5.trainable;
        })).length > 0, function() {
            return "variableGrads() expects at least one of the input variables to be trainable, but none of the " + a11 + " variables is trainable.";
        });
        var i8 = Lt.gradients(t1, e8, null, !0), s12 = i8.value, u6 = i8.grads;
        C(u6.some(function(t5) {
            return null != t5;
        }), function() {
            return "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().";
        }), C(0 === s12.rank, function() {
            return "The f passed in variableGrads(f) must return a scalar, but it returned a rank-" + s12.rank + " tensor";
        });
        var c4 = {
        };
        return e8.forEach(function(t5, e9) {
            null != u6[e9] && (c4[t5.name] = u6[e9]);
        }), null != o15 && o15.forEach(function(t5) {
            return c4[t5.name] = null;
        }), {
            value: s12,
            grads: c4
        };
    }
    function vo(t1) {
        return Lt.customGrad(t1);
    }
    function mo(t1) {
        if (t1.filter(function(t5) {
            return null == t5;
        }).length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.");
    }
    var go = An({
        softmax_: function(t1, e8) {
            (void 0) === e8 && (e8 = -1);
            var n8 = mn(t1, "logits", "softmax", "float32");
            if (-1 === e8 && (e8 = n8.rank - 1), e8 !== n8.rank - 1) throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank " + n8.rank + " and dim was " + e8);
            return Lt.runKernelFunc(function(t5, r14) {
                var o15 = t5.softmax(n8, e8);
                return r14([
                    o15
                ]), o15;
            }, {
                logits: n8
            }, function(t5, n10) {
                var r14 = n10[0], o15 = t5.mul(r14);
                return {
                    logits: function() {
                        return o15.sub(o15.sum([
                            e8
                        ], !0).mul(r14));
                    }
                };
            }, "Softmax", {
                dim: e8
            }, [], [
                !0
            ]);
        }
    }), yo = An({
        logSoftmax_: function(t1, e8) {
            (void 0) === e8 && (e8 = -1);
            var n8 = mn(t1, "logits", "logSoftmax");
            if (-1 === e8 && (e8 = n8.rank - 1), e8 !== n8.rank - 1) throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank " + n8.rank + " and axis was " + e8);
            return vo(function(t5, n10) {
                var r14 = t5.max(e8, !0), o15 = t5.sub(r14), a11 = o15.toFloat().sub(o15.exp().sum(e8, !0).log());
                n10([
                    a11
                ]);
                return {
                    value: a11,
                    gradFunc: function(t7, n11) {
                        var r15 = n11[0].exp();
                        return t7.sub(t7.sum(e8, !0).mul(r15));
                    }
                };
            })(n8);
        }
    }), xo = function() {
        function t1(t5, e8) {
            this.backend = t5, this.dataMover = e8, this.data = new WeakMap, this.dataIdsCount = 0;
        }
        return t1.prototype.get = function(t5) {
            return this.data.has(t5) || this.dataMover.moveData(this.backend, t5), this.data.get(t5);
        }, t1.prototype.set = function(t5, e8) {
            this.dataIdsCount++, this.data.set(t5, e8);
        }, t1.prototype.has = function(t5) {
            return this.data.has(t5);
        }, t1.prototype.delete = function(t5) {
            return this.dataIdsCount--, this.data.delete(t5);
        }, t1.prototype.numDataIds = function() {
            return this.dataIdsCount;
        }, t1;
    }(), bo = function() {
        function t1() {
        }
        return t1.prototype.time = function(t5) {
            return wo("time");
        }, t1.prototype.read = function(t5) {
            return wo("read");
        }, t1.prototype.readSync = function(t5) {
            return wo("readSync");
        }, t1.prototype.numDataIds = function() {
            return wo("numDataIds");
        }, t1.prototype.disposeData = function(t5) {
            return wo("disposeData");
        }, t1.prototype.write = function(t5, e8, n8) {
            return wo("write");
        }, t1.prototype.move = function(t5, e8, n8, r14) {
            return wo("move");
        }, t1.prototype.memory = function() {
            return wo("memory");
        }, t1.prototype.floatPrecision = function() {
            return wo("floatPrecision");
        }, t1.prototype.epsilon = function() {
            return 32 === this.floatPrecision() ? 0.0000001 : 0.0001;
        }, t1.prototype.batchMatMul = function(t5, e8, n8, r14) {
            return wo("batchMatMul");
        }, t1.prototype.fusedBatchMatMul = function(t5) {
            t5.a, t5.b, t5.transposeA, t5.transposeB, t5.bias, t5.activation, t5.preluActivationWeights;
            return wo("fusedBatchMatMul");
        }, t1.prototype.slice = function(t5, e8, n8) {
            return wo("slice");
        }, t1.prototype.stridedSlice = function(t5, e8, n8, r14) {
            return wo("stridedSlice");
        }, t1.prototype.unstack = function(t5, e8) {
            return wo("unstack");
        }, t1.prototype.reverse = function(t5, e8) {
            return wo("reverse");
        }, t1.prototype.concat = function(t5, e8) {
            return wo("concat");
        }, t1.prototype.neg = function(t5) {
            return wo("neg");
        }, t1.prototype.add = function(t5, e8) {
            return wo("add");
        }, t1.prototype.addN = function(t5) {
            return wo("addN");
        }, t1.prototype.subtract = function(t5, e8) {
            return wo("subtract");
        }, t1.prototype.multiply = function(t5, e8) {
            return wo("multiply");
        }, t1.prototype.realDivide = function(t5, e8) {
            return wo("realDivide");
        }, t1.prototype.floorDiv = function(t5, e8) {
            return wo("floorDiv");
        }, t1.prototype.sum = function(t5, e8) {
            return wo("sum");
        }, t1.prototype.prod = function(t5, e8) {
            return wo("prod");
        }, t1.prototype.unsortedSegmentSum = function(t5, e8, n8) {
            return wo("unsortedSegmentSum");
        }, t1.prototype.argMin = function(t5, e8) {
            return wo("argMin");
        }, t1.prototype.argMax = function(t5, e8) {
            return wo("argMax");
        }, t1.prototype.equal = function(t5, e8) {
            return wo("equal");
        }, t1.prototype.notEqual = function(t5, e8) {
            return wo("notEqual");
        }, t1.prototype.less = function(t5, e8) {
            return wo("less");
        }, t1.prototype.lessEqual = function(t5, e8) {
            return wo("lessEqual");
        }, t1.prototype.greater = function(t5, e8) {
            return wo("greater");
        }, t1.prototype.greaterEqual = function(t5, e8) {
            return wo("greaterEqual");
        }, t1.prototype.logicalNot = function(t5) {
            return wo("logicalNot");
        }, t1.prototype.logicalAnd = function(t5, e8) {
            return wo("logicalAnd");
        }, t1.prototype.logicalOr = function(t5, e8) {
            return wo("logicalOr");
        }, t1.prototype.where = function(t5) {
            return wo("where");
        }, t1.prototype.select = function(t5, e8, n8) {
            return wo("select");
        }, t1.prototype.topk = function(t5, e8, n8) {
            return wo("topk");
        }, t1.prototype.min = function(t5, e8) {
            return wo("min");
        }, t1.prototype.minimum = function(t5, e8) {
            return wo("minimum");
        }, t1.prototype.mod = function(t5, e8) {
            return wo("mod");
        }, t1.prototype.max = function(t5, e8) {
            return wo("max");
        }, t1.prototype.maximum = function(t5, e8) {
            return wo("maximum");
        }, t1.prototype.all = function(t5, e8) {
            return wo("all");
        }, t1.prototype.any = function(t5, e8) {
            return wo("any");
        }, t1.prototype.squaredDifference = function(t5, e8) {
            return wo("squaredDifference");
        }, t1.prototype.ceil = function(t5) {
            return wo("ceil");
        }, t1.prototype.floor = function(t5) {
            return wo("floor");
        }, t1.prototype.round = function(t5) {
            return wo("round");
        }, t1.prototype.sign = function(t5) {
            return wo("sign");
        }, t1.prototype.isNaN = function(t5) {
            return wo("isNaN");
        }, t1.prototype.isInf = function(t5) {
            return wo("isInf");
        }, t1.prototype.isFinite = function(t5) {
            return wo("isFinite");
        }, t1.prototype.pow = function(t5, e8) {
            return wo("pow");
        }, t1.prototype.exp = function(t5) {
            return wo("exp");
        }, t1.prototype.expm1 = function(t5) {
            return wo("expm1");
        }, t1.prototype.softmax = function(t5, e8) {
            return wo("softmax");
        }, t1.prototype.log = function(t5) {
            return wo("log");
        }, t1.prototype.log1p = function(t5) {
            return wo("log1p");
        }, t1.prototype.sqrt = function(t5) {
            return wo("sqrt");
        }, t1.prototype.rsqrt = function(t5) {
            return wo("rsqrt");
        }, t1.prototype.square = function(t5) {
            return wo("square");
        }, t1.prototype.reciprocal = function(t5) {
            return wo("reciprocal");
        }, t1.prototype.relu = function(t5) {
            return wo("relu");
        }, t1.prototype.relu6 = function(t5) {
            return wo("relu6");
        }, t1.prototype.prelu = function(t5, e8) {
            return wo("prelu");
        }, t1.prototype.elu = function(t5) {
            return wo("elu");
        }, t1.prototype.eluDer = function(t5, e8) {
            return wo("eluDer");
        }, t1.prototype.selu = function(t5) {
            return wo("selu");
        }, t1.prototype.int = function(t5) {
            return wo("int");
        }, t1.prototype.clip = function(t5, e8, n8) {
            return wo("clip");
        }, t1.prototype.abs = function(t5) {
            return wo("abs");
        }, t1.prototype.complexAbs = function(t5) {
            return wo("complexAbs");
        }, t1.prototype.sigmoid = function(t5) {
            return wo("sigmoid");
        }, t1.prototype.softplus = function(t5) {
            return wo("softplus");
        }, t1.prototype.sin = function(t5) {
            return wo("sin");
        }, t1.prototype.cos = function(t5) {
            return wo("cos");
        }, t1.prototype.tan = function(t5) {
            return wo("tan");
        }, t1.prototype.asin = function(t5) {
            return wo("asin");
        }, t1.prototype.acos = function(t5) {
            return wo("acos");
        }, t1.prototype.atan = function(t5) {
            return wo("atan");
        }, t1.prototype.atan2 = function(t5, e8) {
            return wo("atan2");
        }, t1.prototype.sinh = function(t5) {
            return wo("sinh");
        }, t1.prototype.cosh = function(t5) {
            return wo("cosh");
        }, t1.prototype.tanh = function(t5) {
            return wo("tanh");
        }, t1.prototype.asinh = function(t5) {
            return wo("asinh");
        }, t1.prototype.acosh = function(t5) {
            return wo("acosh");
        }, t1.prototype.atanh = function(t5) {
            return wo("atanh");
        }, t1.prototype.erf = function(t5) {
            return wo("erf");
        }, t1.prototype.step = function(t5, e8) {
            return wo("step");
        }, t1.prototype.fusedConv2d = function(t5) {
            t5.input, t5.filter, t5.convInfo, t5.bias, t5.activation, t5.preluActivationWeights;
            return wo("fusedConv2d");
        }, t1.prototype.conv2d = function(t5, e8, n8) {
            return wo("conv2d");
        }, t1.prototype.conv2dDerInput = function(t5, e8, n8) {
            return wo("conv2dDerInput");
        }, t1.prototype.conv2dDerFilter = function(t5, e8, n8) {
            return wo("conv2dDerFilter");
        }, t1.prototype.fusedDepthwiseConv2D = function(t5) {
            t5.input, t5.filter, t5.convInfo, t5.bias, t5.activation, t5.preluActivationWeights;
            return wo("fusedDepthwiseConv2D");
        }, t1.prototype.depthwiseConv2D = function(t5, e8, n8) {
            return wo("depthwiseConv2D");
        }, t1.prototype.depthwiseConv2DDerInput = function(t5, e8, n8) {
            return wo("depthwiseConv2DDerInput");
        }, t1.prototype.depthwiseConv2DDerFilter = function(t5, e8, n8) {
            return wo("depthwiseConv2DDerFilter");
        }, t1.prototype.conv3d = function(t5, e8, n8) {
            return wo("conv3d");
        }, t1.prototype.conv3dDerInput = function(t5, e8, n8) {
            return wo("conv3dDerInput");
        }, t1.prototype.conv3dDerFilter = function(t5, e8, n8) {
            return wo("conv3dDerFilter");
        }, t1.prototype.maxPool = function(t5, e8) {
            return wo("maxPool");
        }, t1.prototype.maxPoolBackprop = function(t5, e8, n8, r14) {
            return wo("maxPoolBackprop");
        }, t1.prototype.avgPool = function(t5, e8) {
            return wo("avgPool");
        }, t1.prototype.avgPoolBackprop = function(t5, e8, n8) {
            return wo("avgPoolBackprop");
        }, t1.prototype.avgPool3d = function(t5, e8) {
            return wo("avgPool3d");
        }, t1.prototype.avgPool3dBackprop = function(t5, e8, n8) {
            return wo("avgPool3dBackprop");
        }, t1.prototype.maxPool3d = function(t5, e8) {
            return wo("maxPool3d");
        }, t1.prototype.maxPool3dBackprop = function(t5, e8, n8, r14) {
            return wo("maxPool3dBackprop");
        }, t1.prototype.reshape = function(t5, e8) {
            return wo("reshape");
        }, t1.prototype.cast = function(t5, e8) {
            return wo("cast");
        }, t1.prototype.tile = function(t5, e8) {
            return wo("tile");
        }, t1.prototype.pad = function(t5, e8, n8) {
            return wo("pad");
        }, t1.prototype.transpose = function(t5, e8) {
            return wo("transpose");
        }, t1.prototype.gather = function(t5, e8, n8) {
            return wo("gather");
        }, t1.prototype.gatherND = function(t5, e8) {
            return wo("gatherND");
        }, t1.prototype.scatterND = function(t5, e8, n8) {
            return wo("scatterND");
        }, t1.prototype.batchToSpaceND = function(t5, e8, n8) {
            return wo("batchToSpaceND");
        }, t1.prototype.spaceToBatchND = function(t5, e8, n8) {
            return wo("spaceToBatchND");
        }, t1.prototype.resizeBilinear = function(t5, e8, n8, r14) {
            return wo("resizeBilinear");
        }, t1.prototype.resizeBilinearBackprop = function(t5, e8, n8) {
            return wo("resizeBilinearBackprop");
        }, t1.prototype.resizeNearestNeighbor = function(t5, e8, n8, r14) {
            return wo("resizeNearestNeighbor");
        }, t1.prototype.resizeNearestNeighborBackprop = function(t5, e8, n8) {
            return wo("resizeNearestNeighborBackprop");
        }, t1.prototype.batchNormalization = function(t5, e8, n8, r14, o15, a11) {
            return wo("batchNormalization");
        }, t1.prototype.localResponseNormalization4D = function(t5, e8, n8, r14, o15) {
            return wo("localResponseNormalization4D");
        }, t1.prototype.LRNGrad = function(t5, e8, n8, r14, o15, a11, i8) {
            return wo("LRNGrad");
        }, t1.prototype.multinomial = function(t5, e8, n8, r14) {
            return wo("multinomial");
        }, t1.prototype.oneHot = function(t5, e8, n8, r14) {
            return wo("oneHot");
        }, t1.prototype.cumsum = function(t5, e8, n8, r14) {
            return wo("cumsum");
        }, t1.prototype.nonMaxSuppression = function(t5, e8, n8, r14, o15) {
            return wo("nonMaxSuppression");
        }, t1.prototype.fft = function(t5) {
            return wo("fft");
        }, t1.prototype.ifft = function(t5) {
            return wo("ifft");
        }, t1.prototype.complex = function(t5, e8) {
            return wo("complex");
        }, t1.prototype.real = function(t5) {
            return wo("real");
        }, t1.prototype.imag = function(t5) {
            return wo("imag");
        }, t1.prototype.cropAndResize = function(t5, e8, n8, r14, o15, a11) {
            return wo("cropAndResize");
        }, t1.prototype.depthToSpace = function(t5, e8, n8) {
            return wo("depthToSpace");
        }, t1.prototype.split = function(t5, e8, n8) {
            return wo("split");
        }, t1.prototype.sparseToDense = function(t5, e8, n8, r14) {
            return wo("sparseToDense");
        }, t1.prototype.diag = function(t5) {
            return wo("diag");
        }, t1.prototype.fill = function(t5, e8, n8) {
            return wo("fill");
        }, t1.prototype.onesLike = function(t5) {
            return wo("onesLike");
        }, t1.prototype.zerosLike = function(t5) {
            return wo("zerosLike");
        }, t1.prototype.linspace = function(t5, e8, n8) {
            return wo("linspace");
        }, t1.prototype.dispose = function() {
            return wo("dispose");
        }, t1;
    }();
    function wo(t1) {
        throw new Error("'" + t1 + "' not yet implemented or not found in the registry. Did you forget to import the kernel?");
    }
    function Co(t1, e8) {
        for(var n8 = t1.length, r14 = [], o15 = 0; o15 < n8; o15++){
            var a11 = n8 - 1 - o15, i8 = t1[a11] || 1;
            (e8[e8.length - 1 - o15] || 1) > 1 && 1 === i8 && r14.unshift(a11);
        }
        return r14;
    }
    function Eo(t1, e8) {
        for(var n8 = [], r14 = 0; r14 < e8.length; r14++){
            var o15 = t1[t1.length - r14 - 1], a12 = e8.length - r14 - 1, i9 = e8[a12];
            (null == o15 || 1 === o15 && i9 > 1) && n8.unshift(a12);
        }
        return n8;
    }
    function Ro(t1, e8) {
        for(var n8 = [], r14 = Math.max(t1.length, e8.length), o16 = 0; o16 < r14; o16++){
            var a13 = t1[t1.length - o16 - 1];
            null == a13 && (a13 = 1);
            var i10 = e8[e8.length - o16 - 1];
            if (null == i10 && (i10 = 1), 1 === a13) n8.unshift(i10);
            else if (1 === i10) n8.unshift(a13);
            else {
                if (a13 !== i10) throw Error("Operands could not be broadcast together with shapes " + t1 + " and " + e8 + ".");
                n8.unshift(a13);
            }
        }
        return n8;
    }
    function Io(t1, e8, n8, r14, o16, a14, i11) {
        (void 0) === i11 && (i11 = "channelsLast");
        var s12, u6 = To(e8), c4 = u6[0], l3 = u6[1];
        if ("channelsLast" === i11) s12 = [
            c4,
            l3,
            t1[3],
            t1[3]
        ];
        else {
            if ("channelsFirst" !== i11) throw new Error("Unknown dataFormat " + i11);
            s12 = [
                c4,
                l3,
                t1[1],
                t1[1]
            ];
        }
        return So(t1, s12, n8, r14, o16, a14, !1, i11);
    }
    function ko(t1, e8, n8, r14, o16, a14, i11) {
        (void 0) === i11 && (i11 = "NDHWC");
        var s12, u6, c4 = No(e8), l3 = c4[0], h2 = c4[1], f2 = c4[2];
        if ("NDHWC" === i11) u6 = "channelsLast", s12 = [
            l3,
            h2,
            f2,
            t1[4],
            t1[4]
        ];
        else {
            if ("NCDHW" !== i11) throw new Error("Unknown dataFormat " + i11);
            u6 = "channelsFirst", s12 = [
                l3,
                h2,
                f2,
                t1[1],
                t1[1]
            ];
        }
        return Ao(t1, s12, n8, r14, o16, !1, u6, a14);
    }
    function So(t1, e8, n8, r14, o16, a14, i11, s12) {
        (void 0) === i11 && (i11 = !1), (void 0) === s12 && (s12 = "channelsLast");
        var u6 = [
            -1,
            -1,
            -1,
            -1
        ], c4 = u6[0], l3 = u6[1], h2 = u6[2], f2 = u6[3];
        if ("channelsLast" === s12) c4 = t1[0], l3 = t1[1], h2 = t1[2], f2 = t1[3];
        else {
            if ("channelsFirst" !== s12) throw new Error("Unknown dataFormat " + s12);
            c4 = t1[0], f2 = t1[1], l3 = t1[2], h2 = t1[3];
        }
        var d3, p4 = e8[0], v3 = e8[1], m3 = e8[3], g3 = To(n8), y2 = g3[0], x3 = g3[1], b1 = To(r14), w1 = b1[0], E1 = b1[1], R1 = Fo(p4, w1), I1 = Fo(v3, E1), k1 = function(t5, e9, n10, r15, o17, a15, i12, s13) {
            var u7, c5, l4;
            if ("number" == typeof t5) {
                u7 = {
                    top: t5,
                    bottom: t5,
                    left: t5,
                    right: t5,
                    type: 0 === t5 ? "VALID" : "NUMBER"
                };
                var h3 = function(t7, e10, n11, r17, o18) {
                    null == r17 && (r17 = Do(t7, e10, n11));
                    var a16 = t7[0], i13 = t7[1], s14 = _o((a16 - e10 + 2 * r17) / n11 + 1, o18);
                    C(A(s14), function() {
                        return "The output # of rows (" + s14 + ") must be an integer. Change the stride and/or zero pad parameters";
                    });
                    var u8 = _o((i13 - e10 + 2 * r17) / n11 + 1, o18);
                    return C(A(u8), function() {
                        return "The output # of columns (" + u8 + ") must be an integer. Change the stride and/or zero pad parameters";
                    }), [
                        s14,
                        u8
                    ];
                }([
                    e9,
                    n10
                ], a15, r15, t5, s13);
                c5 = h3[0], l4 = h3[1];
            } else if ("same" === t5) {
                c5 = Math.ceil(e9 / r15), l4 = Math.ceil(n10 / o17);
                var f3 = Math.max(0, (c5 - 1) * r15 + a15 - e9), d4 = Math.max(0, (l4 - 1) * o17 + i12 - n10), p5 = Math.floor(f3 / 2), v4 = f3 - p5, m4 = Math.floor(d4 / 2);
                u7 = {
                    top: p5,
                    bottom: v4,
                    left: m4,
                    right: d4 - m4,
                    type: "SAME"
                };
            } else {
                if ("valid" !== t5) throw Error("Unknown padding parameter: " + t5);
                u7 = {
                    top: 0,
                    bottom: 0,
                    left: 0,
                    right: 0,
                    type: "VALID"
                }, c5 = Math.ceil((e9 - a15 + 1) / r15), l4 = Math.ceil((n10 - i12 + 1) / o17);
            }
            return {
                padInfo: u7,
                outHeight: c5,
                outWidth: l4
            };
        }(o16, l3, h2, y2, x3, R1, I1, a14), S1 = k1.padInfo, D1 = k1.outHeight, T1 = k1.outWidth, N1 = i11 ? m3 * f2 : m3;
        return "channelsFirst" === s12 ? d3 = [
            c4,
            N1,
            D1,
            T1
        ] : "channelsLast" === s12 && (d3 = [
            c4,
            D1,
            T1,
            N1
        ]), {
            batchSize: c4,
            dataFormat: s12,
            inHeight: l3,
            inWidth: h2,
            inChannels: f2,
            outHeight: D1,
            outWidth: T1,
            outChannels: N1,
            padInfo: S1,
            strideHeight: y2,
            strideWidth: x3,
            filterHeight: p4,
            filterWidth: v3,
            effectiveFilterHeight: R1,
            effectiveFilterWidth: I1,
            dilationHeight: w1,
            dilationWidth: E1,
            inShape: t1,
            outShape: d3,
            filterShape: e8
        };
    }
    function Ao(t1, e8, n8, r14, o16, a14, i11, s12) {
        (void 0) === a14 && (a14 = !1), (void 0) === i11 && (i11 = "channelsLast");
        var u6 = [
            -1,
            -1,
            -1,
            -1,
            -1
        ], c4 = u6[0], l3 = u6[1], h2 = u6[2], f2 = u6[3], d3 = u6[4];
        if ("channelsLast" === i11) c4 = t1[0], l3 = t1[1], h2 = t1[2], f2 = t1[3], d3 = t1[4];
        else {
            if ("channelsFirst" !== i11) throw new Error("Unknown dataFormat " + i11);
            c4 = t1[0], d3 = t1[1], l3 = t1[2], h2 = t1[3], f2 = t1[4];
        }
        var p4, v3 = e8[0], m3 = e8[1], g3 = e8[2], y2 = e8[4], x3 = No(n8), b1 = x3[0], w1 = x3[1], E1 = x3[2], R1 = No(r14), I1 = R1[0], k1 = R1[1], S1 = R1[2], D1 = Fo(v3, I1), T1 = Fo(m3, k1), N1 = Fo(g3, S1), F1 = function(t5, e9, n10, r15, o17, a15, i12, s13, u7, c5, l4) {
            var h4, f4, d5, p6;
            if ("number" == typeof t5) {
                h4 = {
                    top: t5,
                    bottom: t5,
                    left: t5,
                    right: t5,
                    front: t5,
                    back: t5,
                    type: 0 === t5 ? "VALID" : "NUMBER"
                };
                var v5 = function(t7, e10, n11, r17, o18, a16) {
                    null == o18 && (o18 = Do(t7, e10, r17));
                    var i13 = t7[0], s14 = t7[1], u8 = t7[2], c6 = _o((i13 - e10 + 2 * o18) / r17 + 1, a16);
                    C(A(c6), function() {
                        return "The output # of depths (" + c6 + ") must be an integer. Change the stride and/or zero pad parameters";
                    });
                    var l5 = _o((s14 - e10 + 2 * o18) / r17 + 1, a16);
                    C(A(l5), function() {
                        return "The output # of rows (" + l5 + ") must be an integer. Change the stride and/or zero pad parameters";
                    });
                    var h5 = _o((u8 - e10 + 2 * o18) / r17 + 1, a16);
                    return C(A(h5), function() {
                        return "The output # of columns (" + h5 + ") must be an integer. Change the stride and/or zero pad parameters";
                    }), [
                        c6,
                        l5,
                        h5,
                        n11
                    ];
                }([
                    e9,
                    n10,
                    r15,
                    1
                ], s13, 1, o17, t5, l4);
                f4 = v5[0], d5 = v5[1], p6 = v5[2];
            } else if ("same" === t5) {
                f4 = Math.ceil(e9 / o17), d5 = Math.ceil(n10 / a15), p6 = Math.ceil(r15 / i12);
                var m5 = (f4 - 1) * o17 + s13 - e9, g4 = (d5 - 1) * a15 + u7 - n10, y3 = (p6 - 1) * i12 + c5 - r15, x4 = Math.floor(m5 / 2), b2 = m5 - x4, w2 = Math.floor(g4 / 2), E2 = g4 - w2, R2 = Math.floor(y3 / 2);
                h4 = {
                    top: w2,
                    bottom: E2,
                    left: R2,
                    right: y3 - R2,
                    front: x4,
                    back: b2,
                    type: "SAME"
                };
            } else {
                if ("valid" !== t5) throw Error("Unknown padding parameter: " + t5);
                h4 = {
                    top: 0,
                    bottom: 0,
                    left: 0,
                    right: 0,
                    front: 0,
                    back: 0,
                    type: "VALID"
                }, f4 = Math.ceil((e9 - s13 + 1) / o17), d5 = Math.ceil((n10 - u7 + 1) / a15), p6 = Math.ceil((r15 - c5 + 1) / i12);
            }
            return {
                padInfo: h4,
                outDepth: f4,
                outHeight: d5,
                outWidth: p6
            };
        }(o16, l3, h2, f2, b1, w1, E1, D1, T1, N1, s12), _1 = F1.padInfo, O1 = F1.outDepth, M1 = F1.outHeight, B1 = F1.outWidth, P1 = a14 ? y2 * d3 : y2;
        return "channelsFirst" === i11 ? p4 = [
            c4,
            P1,
            O1,
            M1,
            B1
        ] : "channelsLast" === i11 && (p4 = [
            c4,
            O1,
            M1,
            B1,
            P1
        ]), {
            batchSize: c4,
            dataFormat: i11,
            inDepth: l3,
            inHeight: h2,
            inWidth: f2,
            inChannels: d3,
            outDepth: O1,
            outHeight: M1,
            outWidth: B1,
            outChannels: P1,
            padInfo: _1,
            strideDepth: b1,
            strideHeight: w1,
            strideWidth: E1,
            filterDepth: v3,
            filterHeight: m3,
            filterWidth: g3,
            effectiveFilterDepth: D1,
            effectiveFilterHeight: T1,
            effectiveFilterWidth: N1,
            dilationDepth: I1,
            dilationHeight: k1,
            dilationWidth: S1,
            inShape: t1,
            outShape: p4,
            filterShape: e8
        };
    }
    function Do(t1, e8, n8, r14) {
        (void 0) === r14 && (r14 = 1);
        var o16 = Fo(e8, r14);
        return Math.floor((t1[0] * (n8 - 1) - n8 + o16) / 2);
    }
    function To(t1) {
        return "number" == typeof t1 ? [
            t1,
            t1,
            t1
        ] : 2 === t1.length ? [
            t1[0],
            t1[1],
            1
        ] : t1;
    }
    function No(t1) {
        return "number" == typeof t1 ? [
            t1,
            t1,
            t1
        ] : t1;
    }
    function Fo(t1, e8) {
        return e8 <= 1 ? t1 : t1 + (t1 - 1) * (e8 - 1);
    }
    function _o(t1, e8) {
        if (!e8) return t1;
        switch(e8){
            case "round":
                return Math.round(t1);
            case "ceil":
                return Math.ceil(t1);
            case "floor":
                return Math.floor(t1);
            default:
                throw new Error("Unknown roundingMode " + e8);
        }
    }
    function Oo(t1) {
        var e8 = To(t1), n8 = e8[0], r14 = e8[1], o16 = e8[2];
        return 1 === n8 && 1 === r14 && 1 === o16;
    }
    function Mo(t1, e8) {
        return Oo(t1) || Oo(e8);
    }
    function Bo(t1) {
        if ("NHWC" === t1) return "channelsLast";
        if ("NCHW" === t1) return "channelsFirst";
        throw new Error("Unknown dataFormat " + t1);
    }
    function Po(t1, e8, n8) {
        if ("complex64" === e8) {
            if ("complex64" === t1.dtype) return t1.clone();
            var r14 = Gn(t1.shape), o16 = t1.toFloat(), a14 = n8.complex(o16, r14);
            return r14.dispose(), o16.dispose(), a14;
        }
        if (!U(t1.dtype, e8)) return Lt.makeTensorFromDataId(t1.dataId, t1.shape, e8);
        if ("complex64" === t1.dtype) {
            var i11 = n8.real(t1);
            a14 = i11.cast(e8);
            return i11.dispose(), a14;
        }
        if ("int32" === e8) return n8.int(t1);
        if ("bool" === e8) {
            var s12 = On(0, t1.dtype);
            a14 = n8.notEqual(t1, s12);
            return s12.dispose(), a14;
        }
        throw new Error("Error in Cast: failed to cast " + t1.dtype + " to " + e8);
    }
    function Lo(t1, e8) {
        return Lt.makeTensorFromDataId(t1.dataId, e8, t1.dtype);
    }
    function Wo(t1, e8, n8) {
        var r15 = (e8 - t1) / (n8 - 1), o17 = tt(n8, "float32");
        o17[0] = t1;
        for(var a15 = 1; a15 < o17.length; a15++)o17[a15] = o17[a15 - 1] + r15;
        return Mn(o17, "float32");
    }
    var Uo = Object.freeze({
        castTensor: Po,
        reshapeTensor: Lo,
        linspaceImpl: Wo,
        upcastType: Dt,
        axesAreInnerMostDims: yn,
        combineLocations: xn,
        computeOutAndReduceShapes: bn,
        expandShapeToKeepDim: wn,
        assertAxesAreInnerMostDims: Cn,
        getAxesPermutation: En,
        getUndoAxesPermutation: Rn,
        getInnerMostAxes: In,
        getBroadcastDims: Co,
        getReductionAxes: Eo,
        assertAndGetBroadcastShape: Ro,
        assertParamsConsistent: kn,
        computeOutShape: Sn,
        computePool2DInfo: Io,
        computePool3DInfo: ko,
        computeConv2DInfo: So,
        computeConv3DInfo: Ao,
        computeDefaultPad: Do,
        tupleValuesAreOne: Oo,
        eitherStridesOrDilationsAreOne: Mo,
        convertConv2DDataFormat: Bo,
        PARALLELIZE_THRESHOLD: Yr,
        computeOptimalWindowSize: $r
    });
    function Vo(t1, e8) {
        if (t1.length !== e8.length) throw new Error("Cannot merge real and imag arrays of different lengths. real:" + t1.length + ", imag: " + e8.length + ".");
        for(var n8 = new Float32Array(2 * t1.length), r15 = 0; r15 < n8.length; r15 += 2)n8[r15] = t1[r15 / 2], n8[r15 + 1] = e8[r15 / 2];
        return n8;
    }
    function zo(t1, e8) {
        return {
            real: t1[2 * e8],
            imag: t1[2 * e8 + 1]
        };
    }
    function Go(t1, e8, n8, r15) {
        t1[2 * r15] = e8, t1[2 * r15 + 1] = n8;
    }
    function Ho(t1, e8, n8) {
        var r15 = (n8 ? 2 : -2) * Math.PI * (t1 / e8);
        return {
            real: Math.cos(r15),
            imag: Math.sin(r15)
        };
    }
    function qo(t1, e8, n8) {
        var r15 = function(t5, e9, n10) {
            return (function(t7, e10, n11) {
                var r17 = 0, o17 = t7.length, a15 = 0, i12 = !1;
                for(; r17 < o17;){
                    var s13 = n11(e10, t7[a15 = r17 + (o17 - r17 >>> 1)]);
                    s13 > 0 ? r17 = a15 + 1 : (o17 = a15, i12 = !s13);
                }
                return i12 ? r17 : -r17 - 1;
            })(t5, e9, n10 || Ko);
        }(t1, e8, n8), o17 = r15 < 0 ? -(r15 + 1) : r15;
        t1.splice(o17, 0, e8);
    }
    function Ko(t1, e8) {
        return t1 > e8 ? 1 : t1 < e8 ? -1 : 0;
    }
    function jo(t1, e8, n8, r15, o17) {
        return Yo(t1, e8, n8, r15, o17, 0).selectedIndices;
    }
    function Xo(t1, e8, n8, r15, o17, a15) {
        var i12 = Yo(t1, e8, n8, r15, o17, a15);
        return i12.numValidOutputs.dispose(), {
            selectedIndices: i12.selectedIndices,
            selectedScores: i12.selectedScores
        };
    }
    function Yo(t1, e8, n8, r15, o17, a15, i12, s14) {
        (void 0) === s14 && (s14 = !1);
        for(var u6 = Array.from(e8).map(function(t5, e9) {
            return {
                score: t5,
                boxIndex: e9,
                suppressBeginIndex: 0
            };
        }).filter(function(t5) {
            return t5.score > o17;
        }).sort(Jo), c4 = a15 > 0 ? -0.5 / a15 : 0, l3 = [], h2 = []; l3.length < n8 && u6.length > 0;){
            var f2 = u6.pop(), d3 = f2.score, p4 = f2.boxIndex, v3 = f2.suppressBeginIndex;
            if (d3 < o17) break;
            for(var m3 = !1, g3 = l3.length - 1; g3 >= v3; --g3){
                var y2 = $o(t1, p4, l3[g3]);
                if (y2 >= r15) {
                    m3 = !0;
                    break;
                }
                if (f2.score = f2.score * Qo(r15, c4, y2), f2.score <= o17) break;
            }
            f2.suppressBeginIndex = l3.length, m3 || (f2.score === d3 ? (l3.push(p4), h2.push(f2.score)) : f2.score > o17 && qo(u6, f2, Jo));
        }
        var x3 = l3.length;
        return s14 && (l3.fill(0, x3), h2.fill(0, x3)), {
            selectedIndices: Mn(l3, "int32"),
            selectedScores: Mn(h2, "float32"),
            numValidOutputs: On(x3, "int32")
        };
    }
    function $o(t1, e8, n8) {
        var r15 = t1.subarray(4 * e8, 4 * e8 + 4), o17 = t1.subarray(4 * n8, 4 * n8 + 4), a15 = Math.min(r15[0], r15[2]), i12 = Math.min(r15[1], r15[3]), s14 = Math.max(r15[0], r15[2]), u6 = Math.max(r15[1], r15[3]), c4 = Math.min(o17[0], o17[2]), l3 = Math.min(o17[1], o17[3]), h2 = Math.max(o17[0], o17[2]), f4 = Math.max(o17[1], o17[3]), d5 = (s14 - a15) * (u6 - i12), p6 = (h2 - c4) * (f4 - l3);
        if (d5 <= 0 || p6 <= 0) return 0;
        var v6 = Math.max(a15, c4), m6 = Math.max(i12, l3), g5 = Math.min(s14, h2), y4 = Math.min(u6, f4), x3 = Math.max(g5 - v6, 0) * Math.max(y4 - m6, 0);
        return x3 / (d5 + p6 - x3);
    }
    function Qo(t1, e8, n8) {
        var r15 = Math.exp(e8 * n8 * n8);
        return n8 <= t1 ? r15 : 0;
    }
    function Jo(t1, e8) {
        return t1.score - e8.score || t1.score === e8.score && e8.boxIndex - t1.boxIndex;
    }
    function Zo(t1, e8, n8) {
        var r15 = new Array(t1.rank).fill(0), o17 = t1.shape.slice();
        return e8.map(function(e9) {
            o17[n8] = e9;
            var a15 = t1.slice(r15, o17);
            return r15[n8] += e9, a15;
        });
    }
    function ta(t1, e8) {
        for(var n8 = new Array(t1.rank), r15 = 0; r15 < n8.length; r15++)n8[r15] = t1.shape[r15] * e8[r15];
        var o17 = dr(n8, t1.dtype);
        for(r15 = 0; r15 < o17.values.length; ++r15){
            for(var a15 = o17.indexToLoc(r15), i12 = new Array(t1.rank), s14 = 0; s14 < i12.length; s14++)i12[s14] = a15[s14] % t1.shape[s14];
            var u6 = t1.locToIndex(i12);
            o17.values[r15] = t1.values[u6];
        }
        return o17.toTensor();
    }
    function ea(t1, e8, n8, r15, o17) {
        for(var a16 = e8[e8.length - 1], i13 = [
            t1.length / a16,
            a16
        ], s15 = i13[0], u7 = i13[1], c4 = B(n8, s15 * r15), l3 = B("int32", s15 * r15), h2 = 0; h2 < s15; h2++){
            for(var f4 = h2 * u7, d5 = t1.subarray(f4, f4 + u7), p6 = [], v6 = 0; v6 < d5.length; v6++)p6.push({
                value: d5[v6],
                index: v6
            });
            p6.sort(function(t5, e9) {
                return e9.value - t5.value;
            });
            var m6 = h2 * r15, g5 = c4.subarray(m6, m6 + r15), y4 = l3.subarray(m6, m6 + r15);
            for(v6 = 0; v6 < r15; v6++)g5[v6] = p6[v6].value, y4[v6] = p6[v6].index;
        }
        var x3 = e8.slice();
        return x3[x3.length - 1] = r15, [
            Fn(c4, x3, n8),
            Fn(l3, x3, "int32")
        ];
    }
    function na(t1, e8) {
        for(var n8 = [], r15 = 0; r15 < e8.length; r15++)e8[r15] && n8.push(r15);
        var o17 = dr(t1, "int32"), a16 = dr([
            n8.length,
            t1.length
        ], "int32");
        for(r15 = 0; r15 < n8.length; r15++){
            var i13 = o17.indexToLoc(n8[r15]), s15 = r15 * t1.length;
            a16.values.set(i13, s15);
        }
        return a16.toTensor();
    }
    var ra = function(t1, e8) {
        this.outputShape = [], this.outputShape = t1, this.variableNames = e8.map(function(t5, e9) {
            return "T" + e9;
        });
        var n8 = [];
        this.variableNames.forEach(function(t5) {
            n8.push("float v" + t5 + " = get" + t5 + "AtOutCoords();");
        });
        var r15 = this.variableNames.map(function(t5) {
            return "v" + t5;
        }).join(" + ");
        this.userCode = "\n      void main() {\n        " + n8.join("\n        ") + "\n\n        float result = " + r15 + ";\n        setOutput(result);\n      }\n    ";
    }, oa = function(t1, e8) {
        this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t1, this.variableNames = e8.map(function(t5, e9) {
            return "T" + e9;
        });
        var n8 = [];
        this.variableNames.forEach(function(t5) {
            n8.push("vec4 v" + t5 + " = get" + t5 + "AtOutCoords();");
        });
        var r15 = this.variableNames.map(function(t5) {
            return "v" + t5;
        }).join(" + ");
        this.userCode = "\n      void main() {\n        " + n8.join("\n        ") + "\n\n        vec4 result = " + r15 + ";\n        setOutput(result);\n      }\n    ";
    }, aa = function(t1, e8, n8) {
        this.variableNames = [
            "A"
        ];
        var r15 = t1.windowSize, o17 = t1.batchSize, a16 = t1.inSize, i14 = Math.ceil(a16 / r15);
        n8 || this.variableNames.push("bestIndicesA"), this.outputShape = [
            o17,
            i14
        ];
        var s16 = "max" === e8 ? ">" : "<", u7 = n8 ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
        this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + r15 + ";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < " + r15 + "; i++) {\n          int inIdx = " + u7 + ";\n          float candidate = getA(batch, inIdx);\n          if (candidate " + s16 + " bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    ";
    };
    function ia(t1, e8) {
        return [
            "x",
            "y",
            "z",
            "w",
            "u",
            "v"
        ].slice(0, e8).map(function(e9) {
            return t1 + "." + e9;
        });
    }
    function sa(t1, e8) {
        return 1 === e8 ? [
            t1
        ] : ia(t1, e8);
    }
    function ua() {
        var t1, e8, n8, r15, o17, a16, s16, u7, c4, l3;
        return 2 === i15().getNumber("WEBGL_VERSION") ? (t1 = "#version 300 es", e8 = "in", n8 = "out", r15 = "in", o17 = "texture", a16 = "outputColor", s16 = "out vec4 outputColor;", u7 = "\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ", c4 = "", l3 = "\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    ") : (t1 = "", e8 = "attribute", n8 = "varying", r15 = "varying", o17 = "texture2D", a16 = "gl_FragColor", s16 = "", u7 = "\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ", c4 = "\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ", l3 = "\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "), {
            version: t1,
            attribute: e8,
            varyingVs: n8,
            varyingFs: r15,
            texture2D: o17,
            output: a16,
            defineOutput: s16,
            defineSpecialNaN: u7,
            defineSpecialInf: c4,
            defineRound: l3
        };
    }
    function ca(t1, e8, n8) {
        (void 0) === n8 && (n8 = "index");
        var r15 = $(e8);
        return r15.map(function(e9, o17) {
            return "int " + t1[o17] + " = " + n8 + " / " + e9 + "; " + (o17 === r15.length - 1 ? "int " + t1[o17 + 1] + " = " + n8 + " - " + t1[o17] + " * " + e9 : "index -= " + t1[o17] + " * " + e9) + ";";
        }).join("");
    }
    function la(t1) {
        var e8 = $(t1).map(function(t5) {
            return t5.toString();
        });
        return "\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * " + e8[0] + " + coords.y * " + e8[1] + " + coords.z;\n  }\n";
    }
    var ha = "\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";
    function fa(t1, e8, n8, r15) {
        var o17 = [];
        t1.forEach(function(t5) {
            var e9 = k(t5.shapeInfo.logicalShape);
            t5.shapeInfo.isUniform ? o17.push("uniform float " + t5.name + (e9 > 1 ? "[" + e9 + "]" : "") + ";") : (o17.push("uniform sampler2D " + t5.name + ";"), o17.push("uniform int offset" + t5.name + ";"));
        });
        var a16, i14, s16 = o17.join("\n"), u7 = t1.map(function(t5) {
            return (function(t7, e9, n10) {
                (void 0) === n10 && (n10 = !1);
                var r17 = "";
                r17 += n10 ? pa(t7) : da(t7);
                var o18 = t7.shapeInfo.logicalShape, a17 = e9.logicalShape;
                o18.length <= a17.length && (r17 += n10 ? (function(t8, e10) {
                    var n11, r18 = t8.name, o19 = r18.charAt(0).toUpperCase() + r18.slice(1), a18 = "get" + o19 + "AtOutCoords", i15 = t8.shapeInfo.logicalShape.length, s17 = e10.logicalShape.length, u8 = Co(t8.shapeInfo.logicalShape, e10.logicalShape), c4 = wa(s17), l3 = s17 - i15, h2 = [
                        "x",
                        "y",
                        "z",
                        "w",
                        "u",
                        "v"
                    ];
                    n11 = 0 === i15 ? "" : s17 < 2 && u8.length >= 1 ? "coords = 0;" : u8.map(function(t9) {
                        return "coords." + h2[t9 + l3] + " = 0;";
                    }).join("\n");
                    var f5 = "";
                    f5 = s17 < 2 && i15 > 0 ? "coords" : t8.shapeInfo.logicalShape.map(function(t9, e11) {
                        return "coords." + h2[e11 + l3];
                    }).join(", ");
                    var d6 = "return outputValue;", p7 = 1 === k(t8.shapeInfo.logicalShape), v7 = 1 === k(e10.logicalShape);
                    if (1 !== i15 || p7 || v7) {
                        if (p7 && !v7) d6 = 1 === s17 ? "\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      " : "\n        return vec4(outputValue.x);\n      ";
                        else if (u8.length) {
                            var m7 = i15 - 2, g6 = i15 - 1;
                            u8.indexOf(m7) > -1 && u8.indexOf(g6) > -1 ? d6 = "return vec4(outputValue.x);" : u8.indexOf(m7) > -1 ? d6 = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : u8.indexOf(g6) > -1 && (d6 = "return vec4(outputValue.xx, outputValue.zz);");
                        }
                    } else d6 = "\n      return vec4(outputValue.xy, outputValue.xy);\n    ";
                    return "\n    vec4 " + a18 + "() {\n      " + c4 + " coords = getOutputCoords();\n      " + n11 + "\n      vec4 outputValue = get" + o19 + "(" + f5 + ");\n      " + d6 + "\n    }\n  ";
                })(t7, e9) : (function(t8, e10) {
                    var n11 = t8.name, r18 = n11.charAt(0).toUpperCase() + n11.slice(1), o19 = "get" + r18 + "AtOutCoords", a18 = e10.texShape, i15 = t8.shapeInfo.texShape, s17 = t8.shapeInfo.logicalShape.length, u8 = e10.logicalShape.length;
                    if (!t8.shapeInfo.isUniform && s17 === u8 && null == t8.shapeInfo.flatOffset && S(i15, a18)) return "\n      float " + o19 + "() {\n        return sampleTexture(" + n11 + ", resultUV);\n      }\n    ";
                    var c4, l3 = wa(u8), h2 = Co(t8.shapeInfo.logicalShape, e10.logicalShape), f5 = u8 - s17, d6 = [
                        "x",
                        "y",
                        "z",
                        "w",
                        "u",
                        "v"
                    ];
                    c4 = 0 === s17 ? "" : u8 < 2 && h2.length >= 1 ? "coords = 0;" : h2.map(function(t9) {
                        return "coords." + d6[t9 + f5] + " = 0;";
                    }).join("\n");
                    var p7 = "";
                    p7 = u8 < 2 && s17 > 0 ? "coords" : t8.shapeInfo.logicalShape.map(function(t9, e11) {
                        return "coords." + d6[e11 + f5];
                    }).join(", ");
                    return "\n    float " + o19 + "() {\n      " + l3 + " coords = getOutputCoords();\n      " + c4 + "\n      return get" + r18 + "(" + p7 + ");\n    }\n  ";
                })(t7, e9));
                return r17;
            })(t5, e8, r15);
        }).join("\n"), c4 = e8.texShape, l3 = ua(), h2 = function(t5) {
            return "\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return " + t5.texture2D + "(textureSampler, uv).r;\n    }\n  ";
        }(l3), f5 = function(t5) {
            return t5.version + "\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    " + t5.varyingFs + " vec2 resultUV;\n    " + t5.defineOutput + "\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    " + t5.defineSpecialNaN + "\n    " + t5.defineSpecialInf + "\n    " + t5.defineRound + "\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    " + va + "\n    " + ma + "\n    " + ga + "\n  ";
        }(l3);
        return e8.isPacked ? (a16 = (function(t5, e9) {
            switch(t5.length){
                case 0:
                    return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
                case 1:
                    return (function(t7, e10) {
                        var n10 = [
                            Math.ceil(e10[0] / 2),
                            Math.ceil(e10[1] / 2)
                        ];
                        if (1 === n10[0]) return "\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * " + n10[1] + ".0);\n      }\n    ";
                        if (1 === n10[1]) return "\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * " + n10[0] + ".0);\n      }\n    ";
                        return "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n10[0] + ", " + n10[1] + "));\n      return 2 * (resTexRC.x * " + n10[1] + " + resTexRC.y);\n    }\n  ";
                    })(0, e9);
                case 2:
                    return (function(t7, e10) {
                        var n10 = [
                            Math.ceil(e10[0] / 2),
                            Math.ceil(e10[1] / 2)
                        ];
                        if (S(t7, e10)) return "\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(" + n10[0] + ", " + n10[1] + "));\n      }\n    ";
                        var r17 = Math.ceil(t7[1] / 2);
                        return "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n10[0] + ", " + n10[1] + "));\n\n      int index = resTexRC.x * " + n10[1] + " + resTexRC.y;\n      int r = 2 * (index / " + r17 + ");\n      int c = imod(index, " + r17 + ") * 2;\n\n      return ivec2(r, c);\n    }\n  ";
                    })(t5, e9);
                case 3:
                    return n11 = t5, r18 = e9, o18 = [
                        Math.ceil(r18[0] / 2),
                        Math.ceil(r18[1] / 2)
                    ], a18 = Math.ceil(n11[2] / 2), i16 = a18 * Math.ceil(n11[1] / 2), "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + o18[0] + ", " + o18[1] + "));\n      int index = resTexRC.x * " + o18[1] + " + resTexRC.y;\n\n      int b = index / " + i16 + ";\n      index -= b * " + i16 + ";\n\n      int r = 2 * (index / " + a18 + ");\n      int c = imod(index, " + a18 + ") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";
                default:
                    return (function(t7, e10) {
                        for(var n11 = [
                            Math.ceil(e10[0] / 2),
                            Math.ceil(e10[1] / 2)
                        ], r18 = Math.ceil(t7[t7.length - 1] / 2), o18 = r18 * Math.ceil(t7[t7.length - 2] / 2), a18 = o18, i16 = "", s17 = "b, r, c", u8 = 2; u8 < t7.length - 1; u8++)a18 *= t7[t7.length - u8 - 1], i16 = "\n      int b" + u8 + " = index / " + a18 + ";\n      index -= b" + u8 + " * " + a18 + ";\n    " + i16, s17 = "b" + u8 + ", " + s17;
                        return "\n    ivec" + t7.length + " getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n11[0] + ", " + n11[1] + "));\n      int index = resTexRC.x * " + n11[1] + " + resTexRC.y;\n\n      " + i16 + "\n\n      int b = index / " + o18 + ";\n      index -= b * " + o18 + ";\n\n      int r = 2 * (index / " + r18 + ");\n      int c = imod(index, " + r18 + ") * 2;\n\n      return ivec" + t7.length + "(" + s17 + ");\n    }\n  ";
                    })(t5, e9);
            }
            var n11, r18, o18, a18, i16;
        })(e8.logicalShape, c4), i14 = (function(t5) {
            return "\n    void setOutput(vec4 val) {\n      " + t5.output + " = val;\n    }\n  ";
        })(l3)) : (a16 = (function(t5, e9) {
            switch(t5.length){
                case 0:
                    return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
                case 1:
                    return (function(t7, e10) {
                        if (1 === e10[0]) return "\n      int getOutputCoords() {\n        return int(resultUV.x * " + e10[1] + ".0);\n      }\n    ";
                        if (1 === e10[1]) return "\n      int getOutputCoords() {\n        return int(resultUV.y * " + e10[0] + ".0);\n      }\n    ";
                        return "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + e10[0] + ", " + e10[1] + "));\n      return resTexRC.x * " + e10[1] + " + resTexRC.y;\n    }\n  ";
                    })(0, e9);
                case 2:
                    return (function(t7, e10) {
                        if (S(t7, e10)) return "\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(" + e10[0] + ", " + e10[1] + "));\n      }\n    ";
                        if (1 === t7[1]) return "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + e10[0] + ", " + e10[1] + "));\n        int index = resTexRC.x * " + e10[1] + " + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ";
                        if (1 === t7[0]) return "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + e10[0] + ", " + e10[1] + "));\n        int index = resTexRC.x * " + e10[1] + " + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ";
                        return "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + e10[0] + ", " + e10[1] + "));\n      int index = resTexRC.x * " + e10[1] + " + resTexRC.y;\n      int r = index / " + t7[1] + ";\n      int c = index - r * " + t7[1] + ";\n      return ivec2(r, c);\n    }\n  ";
                    })(t5, e9);
                case 3:
                    return n11 = e9, r18 = ca([
                        "r",
                        "c",
                        "d"
                    ], t5), "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n11[0] + ", " + n11[1] + "));\n      int index = resTexRC.x * " + n11[1] + " + resTexRC.y;\n      " + r18 + "\n      return ivec3(r, c, d);\n    }\n  ";
                case 4:
                    return (function(t7, e10) {
                        var n11 = ca([
                            "r",
                            "c",
                            "d",
                            "d2"
                        ], t7);
                        return "\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + e10[0] + ", " + e10[1] + "));\n      int index = resTexRC.x * " + e10[1] + " + resTexRC.y;\n      " + n11 + "\n      return ivec4(r, c, d, d2);\n    }\n  ";
                    })(t5, e9);
                case 5:
                    return (function(t7, e10) {
                        var n11 = ca([
                            "r",
                            "c",
                            "d",
                            "d2",
                            "d3"
                        ], t7);
                        return "\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(" + e10[0] + ",\n                             " + e10[1] + "));\n\n      int index = resTexRC.x * " + e10[1] + " + resTexRC.y;\n\n      " + n11 + "\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  ";
                    })(t5, e9);
                case 6:
                    return (function(t7, e10) {
                        var n11 = ca([
                            "r",
                            "c",
                            "d",
                            "d2",
                            "d3",
                            "d4"
                        ], t7);
                        return "\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + e10[0] + ", " + e10[1] + "));\n      int index = resTexRC.x * " + e10[1] + " + resTexRC.y;\n\n      " + n11 + "\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  ";
                    })(t5, e9);
                default:
                    throw new Error(t5.length + "-D output sampling is not yet supported");
            }
            var n11, r18;
        })(e8.logicalShape, c4), i14 = (function(t5) {
            return "\n    void setOutput(float val) {\n      " + t5.output + " = vec4(val, 0, 0, 0);\n    }\n  ";
        })(l3)), r15 && (f5 += ya), [
            f5,
            h2,
            i14,
            s16,
            a16,
            u7,
            n8
        ].join("\n");
    }
    function da(t1) {
        var e8 = t1.shapeInfo.logicalShape;
        switch(e8.length){
            case 0:
                return (function(t5) {
                    var e9 = t5.name, n8 = "get" + e9.charAt(0).toUpperCase() + e9.slice(1);
                    if (t5.shapeInfo.isUniform) return "float " + n8 + "() {return " + e9 + ";}";
                    var r15 = t5.shapeInfo.texShape, o17 = r15[0], a16 = r15[1];
                    if (1 === o17 && 1 === a16) return "\n      float " + n8 + "() {\n        return sampleTexture(" + e9 + ", halfCR);\n      }\n    ";
                    var i14 = t5.shapeInfo.texShape, s16 = i14[0], u7 = i14[1], c4 = xa(e9);
                    return "\n    float " + n8 + "() {\n      vec2 uv = uvFromFlat(" + s16 + ", " + u7 + ", " + c4 + ");\n      return sampleTexture(" + e9 + ", uv);\n    }\n  ";
                })(t1);
            case 1:
                return (function(t5) {
                    var e9 = t5.name, n8 = "get" + e9.charAt(0).toUpperCase() + e9.slice(1);
                    if (t5.shapeInfo.isUniform) return "\n      float " + n8 + "(int index) {\n        " + ba(t5) + "\n      }\n    ";
                    var r15 = t5.shapeInfo.texShape, o17 = r15[0], a16 = r15[1];
                    if (1 === a16 && 1 === o17) return "\n      float " + n8 + "(int index) {\n        return sampleTexture(" + e9 + ", halfCR);\n      }\n    ";
                    var i14 = xa(e9);
                    if (1 === a16) return "\n      float " + n8 + "(int index) {\n        vec2 uv = vec2(0.5, (float(index + " + i14 + ") + 0.5) / " + o17 + ".0);\n        return sampleTexture(" + e9 + ", uv);\n      }\n    ";
                    if (1 === o17) return "\n      float " + n8 + "(int index) {\n        vec2 uv = vec2((float(index + " + i14 + ") + 0.5) / " + a16 + ".0, 0.5);\n        return sampleTexture(" + e9 + ", uv);\n      }\n    ";
                    return "\n    float " + n8 + "(int index) {\n      vec2 uv = uvFromFlat(" + o17 + ", " + a16 + ", index + " + i14 + ");\n      return sampleTexture(" + e9 + ", uv);\n    }\n  ";
                })(t1);
            case 2:
                return (function(t5) {
                    var e9 = t5.shapeInfo.logicalShape, n8 = t5.name, r15 = "get" + n8.charAt(0).toUpperCase() + n8.slice(1), o17 = t5.shapeInfo.texShape;
                    if (null != o17 && S(e9, o17)) {
                        var a16 = o17[0], i14 = o17[1];
                        return "\n    float " + r15 + "(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(" + i14 + ".0, " + a16 + ".0);\n      return sampleTexture(" + n8 + ", uv);\n    }\n  ";
                    }
                    var s16 = M(e9), u7 = s16.newShape, c4 = s16.keptDims, l3 = u7;
                    if (l3.length < e9.length) {
                        var h2 = Ca(t5, l3);
                        return "\n      " + da(h2) + "\n      float " + r15 + "(int row, int col) {\n        return " + r15 + "(" + Ea([
                            "row",
                            "col"
                        ], c4) + ");\n      }\n    ";
                    }
                    if (t5.shapeInfo.isUniform) return "\n      float " + r15 + "(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(" + e9[1] + ", 1)));\n        " + ba(t5) + "\n      }\n    ";
                    var f5 = o17[0], d6 = o17[1], p7 = xa(n8);
                    if (1 === d6) return "\n    float " + r15 + "(int row, int col) {\n      float index = dot(vec3(row, col, " + p7 + "), vec3(" + e9[1] + ", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / " + f5 + ".0);\n      return sampleTexture(" + n8 + ", uv);\n    }\n  ";
                    if (1 === f5) return "\n    float " + r15 + "(int row, int col) {\n      float index = dot(vec3(row, col, " + p7 + "), vec3(" + e9[1] + ", 1, 1));\n      vec2 uv = vec2((index + 0.5) / " + d6 + ".0, 0.5);\n      return sampleTexture(" + n8 + ", uv);\n    }\n  ";
                    return "\n  float " + r15 + "(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * " + e9[1] + " + col + " + p7 + ";\n    vec2 uv = uvFromFlat(" + f5 + ", " + d6 + ", index);\n    return sampleTexture(" + n8 + ", uv);\n  }\n";
                })(t1);
            case 3:
                return (function(t5) {
                    var e9 = t5.shapeInfo.logicalShape, n8 = t5.name, r15 = "get" + n8.charAt(0).toUpperCase() + n8.slice(1), o17 = e9[1] * e9[2], a18 = e9[2], i16 = M(e9), s16 = i16.newShape, u7 = i16.keptDims, c4 = s16;
                    if (c4.length < e9.length) {
                        var l3 = Ca(t5, c4);
                        return "\n        " + da(l3) + "\n        float " + r15 + "(int row, int col, int depth) {\n          return " + r15 + "(" + Ea([
                            "row",
                            "col",
                            "depth"
                        ], u7) + ");\n        }\n      ";
                    }
                    if (t5.shapeInfo.isUniform) return "\n      float " + r15 + "(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(" + o17 + ", " + a18 + ", 1)));\n        " + ba(t5) + "\n      }\n    ";
                    var h4 = t5.shapeInfo.texShape, f5 = h4[0], d6 = h4[1], p7 = t5.shapeInfo.flatOffset;
                    if (d6 === o17 && null == p7) return "\n        float " + r15 + "(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(" + a18 + ", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(" + d6 + ".0, " + f5 + ".0);\n          return sampleTexture(" + n8 + ", uv);\n        }\n      ";
                    if (d6 === a18 && null == p7) return "\n    float " + r15 + "(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(" + e9[1] + ", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + d6 + ".0, " + f5 + ".0);\n      return sampleTexture(" + n8 + ", uv);\n    }\n  ";
                    var v7 = xa(n8);
                    return "\n      float " + r15 + "(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * " + o17 + " + col * " + a18 + " + depth + " + v7 + ";\n        vec2 uv = uvFromFlat(" + f5 + ", " + d6 + ", index);\n        return sampleTexture(" + n8 + ", uv);\n      }\n  ";
                })(t1);
            case 4:
                return (function(t5) {
                    var e9 = t5.shapeInfo.logicalShape, n8 = t5.name, r15 = "get" + n8.charAt(0).toUpperCase() + n8.slice(1), o17 = e9[3], a18 = e9[2] * o17, i16 = e9[1] * a18, s16 = M(e9), u7 = s16.newShape, c4 = s16.keptDims;
                    if (u7.length < e9.length) {
                        var l4 = Ca(t5, u7);
                        return "\n      " + da(l4) + "\n      float " + r15 + "(int row, int col, int depth, int depth2) {\n        return " + r15 + "(" + Ea([
                            "row",
                            "col",
                            "depth",
                            "depth2"
                        ], c4) + ");\n      }\n    ";
                    }
                    if (t5.shapeInfo.isUniform) return "\n      float " + r15 + "(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(" + i16 + ", " + a18 + ", " + o17 + ", 1)));\n        " + ba(t5) + "\n      }\n    ";
                    var h4 = t5.shapeInfo.flatOffset, f5 = t5.shapeInfo.texShape, d6 = f5[0], p7 = f5[1];
                    if (p7 === i16 && null == h4) return "\n      float " + r15 + "(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(" + a18 + ", " + o17 + ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + p7 + ".0, " + d6 + ".0);\n        return sampleTexture(" + n8 + ", uv);\n      }\n    ";
                    if (p7 === o17 && null == h4) return "\n      float " + r15 + "(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(" + e9[1] * e9[2] + ", " + e9[2] + ", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + p7 + ".0, " + d6 + ".0);\n        return sampleTexture(" + n8 + ", uv);\n      }\n    ";
                    var v7 = xa(n8);
                    return "\n    float " + r15 + "(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + i16 + " + col * " + a18 + " +\n          depth * " + o17 + " + depth2;\n      vec2 uv = uvFromFlat(" + d6 + ", " + p7 + ", index + " + v7 + ");\n      return sampleTexture(" + n8 + ", uv);\n    }\n  ";
                })(t1);
            case 5:
                return (function(t5) {
                    var e9 = t5.shapeInfo.logicalShape, n8 = t5.name, r15 = "get" + n8.charAt(0).toUpperCase() + n8.slice(1), o17 = e9[4], a18 = e9[3] * o17, i16 = e9[2] * a18, s16 = e9[1] * i16, u7 = M(e9), c4 = u7.newShape, l5 = u7.keptDims;
                    if (c4.length < e9.length) {
                        var h4 = Ca(t5, c4);
                        return "\n      " + da(h4) + "\n      float " + r15 + "(int row, int col, int depth, int depth2, int depth3) {\n        return " + r15 + "(" + Ea([
                            "row",
                            "col",
                            "depth",
                            "depth2",
                            "depth3"
                        ], l5) + ");\n      }\n    ";
                    }
                    if (t5.shapeInfo.isUniform) return "\n      float " + r15 + "(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + s16 + ", " + i16 + ", " + a18 + ", " + o17 + ")) +\n          depth3;\n        " + ba(t5) + "\n      }\n    ";
                    var f5 = t5.shapeInfo.flatOffset, d6 = t5.shapeInfo.texShape, p7 = d6[0], v7 = d6[1];
                    if (v7 === s16 && null == f5) return "\n      float " + r15 + "(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(" + i16 + ", " + a18 + ", " + o17 + ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + v7 + ".0, " + p7 + ".0);\n        return sampleTexture(" + n8 + ", uv);\n      }\n    ";
                    if (v7 === o17 && null == f5) return "\n      float " + r15 + "(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + e9[1] * e9[2] * e9[3] + ",\n               " + e9[2] * e9[3] + ", " + e9[3] + ", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + v7 + ".0, " + p7 + ".0);\n        return sampleTexture(" + n8 + ", uv);\n      }\n    ";
                    var m8 = xa(n8);
                    return "\n    float " + r15 + "(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + s16 + " + col * " + i16 + " + depth * " + a18 + " +\n          depth2 * " + o17 + " + depth3 + " + m8 + ";\n      vec2 uv = uvFromFlat(" + p7 + ", " + v7 + ", index);\n      return sampleTexture(" + n8 + ", uv);\n    }\n  ";
                })(t1);
            case 6:
                return (function(t5) {
                    var e9 = t5.shapeInfo.logicalShape, n8 = t5.name, r15 = "get" + n8.charAt(0).toUpperCase() + n8.slice(1), o17 = M(e9), a18 = o17.newShape, i16 = o17.keptDims;
                    if (a18.length < e9.length) {
                        var s16 = Ca(t5, a18);
                        return "\n      " + da(s16) + "\n      float " + r15 + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return " + r15 + "(" + Ea([
                            "row",
                            "col",
                            "depth",
                            "depth2",
                            "depth3",
                            "depth4"
                        ], i16) + ");\n      }\n    ";
                    }
                    var u7 = e9[5], c4 = e9[4] * u7, l5 = e9[3] * c4, h5 = e9[2] * l5, f5 = e9[1] * h5;
                    if (t5.shapeInfo.isUniform) return "\n      float " + r15 + "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + f5 + ", " + h5 + ", " + l5 + ", " + c4 + ")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(" + u7 + ", 1)));\n        " + ba(t5) + "\n      }\n    ";
                    var d6 = t5.shapeInfo.flatOffset, p7 = t5.shapeInfo.texShape, v7 = p7[0], m8 = p7[1];
                    if (m8 === f5 && null == d6) return "\n      float " + r15 + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(" + h5 + ", " + l5 + ", " + c4 + ", " + u7 + ")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + m8 + ".0, " + v7 + ".0);\n        return sampleTexture(" + n8 + ", uv);\n      }\n    ";
                    if (m8 === u7 && null == d6) return "\n      float " + r15 + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(" + e9[1] * e9[2] * e9[3] * e9[4] + ",\n               " + e9[2] * e9[3] * e9[4] + ",\n               " + e9[3] * e9[4] + ",\n               " + e9[4] + ")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + m8 + ".0, " + v7 + ".0);\n        return sampleTexture(" + n8 + ", uv);\n      }\n    ";
                    var g7 = xa(n8);
                    return "\n    float " + r15 + "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + f5 + " + col * " + h5 + " + depth * " + l5 + " +\n          depth2 * " + c4 + " + depth3 * " + u7 + " + depth4 + " + g7 + ";\n      vec2 uv = uvFromFlat(" + v7 + ", " + m8 + ", index);\n      return sampleTexture(" + n8 + ", uv);\n    }\n  ";
                })(t1);
            default:
                throw new Error(e8.length + "-D input sampling is not yet supported");
        }
    }
    function pa(t1) {
        var e8, n8, r15;
        switch(t1.shapeInfo.logicalShape.length){
            case 0:
                return e8 = t1.name, n8 = "get" + e8.charAt(0).toUpperCase() + e8.slice(1), r15 = ua(), "\n    vec4 " + n8 + "() {\n      return " + r15.texture2D + "(" + e8 + ", halfCR);\n    }\n  ";
            case 1:
                return (function(t5) {
                    var e9 = t5.name, n11 = "get" + e9.charAt(0).toUpperCase() + e9.slice(1), r18 = t5.shapeInfo.texShape, o17 = [
                        Math.ceil(r18[0] / 2),
                        Math.ceil(r18[1] / 2)
                    ], a18 = ua();
                    return "\n    vec4 " + n11 + "(int index) {\n      vec2 uv = packedUVfrom1D(\n        " + o17[0] + ", " + o17[1] + ", index);\n      return " + a18.texture2D + "(" + e9 + ", uv);\n    }\n  ";
                })(t1);
            case 2:
                return (function(t5) {
                    var e9 = t5.shapeInfo.logicalShape, n11 = t5.name, r18 = "get" + n11.charAt(0).toUpperCase() + n11.slice(1), o17 = t5.shapeInfo.texShape, a18 = o17[0], i16 = o17[1], s17 = ua();
                    if (null != o17 && S(e9, o17)) return "\n      vec4 " + r18 + "(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(" + i16 + ".0, " + a18 + ".0);\n\n        return " + s17.texture2D + "(" + n11 + ", uv);\n      }\n    ";
                    var u7 = [
                        Math.ceil(o17[0] / 2),
                        Math.ceil(o17[1] / 2)
                    ], c4 = Math.ceil(e9[1] / 2);
                    return "\n    vec4 " + r18 + "(int row, int col) {\n      vec2 uv = packedUVfrom2D(" + c4 + ", " + u7[0] + ", " + u7[1] + ", row, col);\n      return " + s17.texture2D + "(" + n11 + ", uv);\n    }\n  ";
                })(t1);
            case 3:
                return (function(t5) {
                    var e9 = t5.shapeInfo.logicalShape, n11 = t5.name, r18 = "get" + n11.charAt(0).toUpperCase() + n11.slice(1), o17 = t5.shapeInfo.texShape, a18 = [
                        Math.ceil(o17[0] / 2),
                        Math.ceil(o17[1] / 2)
                    ];
                    if (1 === e9[0]) {
                        var i16 = e9.slice(1), s17 = Ca(t5, i16);
                        return "\n        " + pa(s17) + "\n        vec4 " + r18 + "(int b, int row, int col) {\n          return " + r18 + "(" + Ea([
                            "b",
                            "row",
                            "col"
                        ], [
                            1,
                            2
                        ]) + ");\n        }\n      ";
                    }
                    var u7 = a18[0], c4 = a18[1], l5 = Math.ceil(e9[2] / 2), h5 = l5 * Math.ceil(e9[1] / 2), f5 = ua();
                    return "\n    vec4 " + r18 + "(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        " + u7 + ", " + c4 + ", " + h5 + ", " + l5 + ", b, row, col);\n      return " + f5.texture2D + "(" + n11 + ", uv);\n    }\n  ";
                })(t1);
            default:
                return (function(t5) {
                    for(var e9 = t5.shapeInfo.logicalShape, n11 = e9.length, r18 = t5.name, o17 = "get" + r18.charAt(0).toUpperCase() + r18.slice(1), a18 = t5.shapeInfo.texShape, i17 = [
                        Math.ceil(a18[0] / 2),
                        Math.ceil(a18[1] / 2)
                    ], s18 = i17[0], u7 = i17[1], c4 = Math.ceil(e9[n11 - 1] / 2), l5 = c4 * Math.ceil(e9[n11 - 2] / 2), h5 = "int b, int row, int col", f5 = "b * " + l5 + " + (row / 2) * " + c4 + " + (col / 2)", d6 = 2; d6 < n11 - 1; d6++)h5 = "int b" + d6 + ", " + h5, l5 *= e9[n11 - d6 - 1], f5 = "b" + d6 + " * " + l5 + " + " + f5;
                    var p7 = ua();
                    return "\n    vec4 " + o17 + "(" + h5 + ") {\n      int index = " + f5 + ";\n      int texR = index / " + u7 + ";\n      int texC = index - texR * " + u7 + ";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + u7 + ", " + s18 + ");\n      return " + p7.texture2D + "(" + r18 + ", uv);\n    }\n  ";
                })(t1);
        }
    }
    var va = "\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n", ma = "\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n", ga = "\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n", ya = "\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";
    function xa(t1) {
        return "offset" + t1;
    }
    function ba(t1) {
        var e8 = t1.name, n8 = k(t1.shapeInfo.logicalShape);
        return n8 < 2 ? "return " + e8 + ";" : "\n    for (int i = 0; i < " + n8 + "; i++) {\n      if (i == index) {\n        return " + e8 + "[i];\n      }\n    }\n  ";
    }
    function wa(t1) {
        if (t1 <= 1) return "int";
        if (2 === t1) return "ivec2";
        if (3 === t1) return "ivec3";
        if (4 === t1) return "ivec4";
        if (5 === t1) return "ivec5";
        if (6 === t1) return "ivec6";
        throw Error("GPU for rank " + t1 + " is not yet supported");
    }
    function Ca(t1, e8) {
        var n8 = JSON.parse(JSON.stringify(t1));
        return n8.shapeInfo.logicalShape = e8, n8;
    }
    function Ea(t1, e8) {
        return e8.map(function(e9) {
            return t1[e9];
        }).join(", ");
    }
    var Ra = function(t1, e8, n8, r15) {
        this.variableNames = [
            "A"
        ], this.packedInputs = !0, this.packedOutput = !0, C(t1.length > 2, function() {
            return "Packed arg" + (n8.charAt(0).toUpperCase() + n8.slice(1)) + " supports only inputs with rank above 2.";
        });
        var o17 = t1[t1.length - 1], a18 = Math.ceil(o17 / e8);
        this.outputShape = t1.slice(0, -1), a18 > 1 && this.outputShape.push(a18), r15 || this.variableNames.push("bestIndicesA");
        var i17, s18, u7 = this.outputShape, c4 = u7.length, l5 = wa(c4), h5 = sa("coords", c4);
        if (1 === a18) {
            var f5 = wa(s18 = c4 + 1);
            i17 = "\n        " + f5 + " sourceLocR = " + f5 + "(" + h5.join() + ", 0);\n        ++" + h5[c4 - 1] + ";\n        " + f5 + " sourceLocG = " + f5 + "(" + h5.join() + ", 0);\n        ++" + h5[c4 - 2] + ";\n        " + f5 + " sourceLocA = " + f5 + "(" + h5.join() + ", 0);\n        --" + h5[c4 - 1] + ";\n        " + f5 + " sourceLocB = " + f5 + "(" + h5.join() + ", 0);\n        --" + h5[c4 - 2] + ";";
        } else s18 = c4, i17 = "\n        " + l5 + " sourceLocR = coords;\n        ++" + h5[c4 - 1] + ";\n        " + l5 + " sourceLocG = coords;\n        ++" + h5[c4 - 2] + ";\n        " + l5 + " sourceLocA = coords;\n        --" + h5[c4 - 1] + ";\n        " + l5 + " sourceLocB = coords;\n        --" + h5[c4 - 2] + ";";
        var d6 = [
            "x",
            "y",
            "z",
            "w",
            "u",
            "v"
        ].slice(0, s18), p7 = "." + d6[s18 - 1], v7 = d6.map(function(t5) {
            return "int " + t5;
        }), m8 = sa("sourceLocR", s18 - 1).concat("inIdx.r"), g7 = sa("sourceLocG", s18 - 1).concat("inIdx.g"), y5 = sa("sourceLocB", s18 - 1).concat("inIdx.b"), x3 = sa("sourceLocA", s18 - 1).concat("inIdx.a"), b1 = "max" === n8 ? "greaterThan" : "lessThan", w1 = r15 ? "" : "\n          inIdx = round(vec4(getBestIndicesAChannel(" + m8.join() + "),\n                             getBestIndicesAChannel(" + g7.join() + "),\n                             getBestIndicesAChannel(" + y5.join() + "),\n                             getBestIndicesAChannel(" + x3.join() + ")));", E1 = "vec4(\n            getAChannel(" + m8.join() + "),\n            hasNextCol ? getAChannel(" + g7.join() + ") : 0.,\n            hasNextRow ? getAChannel(" + y5.join() + ") : 0.,\n            hasNextRow && hasNextCol ? getAChannel(" + x3.join() + ") : 0.)", R1 = r15 ? "" : "\n      float getBestIndicesAChannel(" + v7.join() + ") {\n        return getChannel(getBestIndicesA(" + d6.join() + "),\n                                          vec2(" + d6.slice(-2).join() + "));\n      }";
        this.userCode = "\n      float getAChannel(" + v7.join() + ") {\n        return getChannel(getA(" + d6.join() + "),\n                               vec2(" + d6.slice(-2).join() + "));\n      }\n      " + R1 + "\n      void main() {\n        " + l5 + " coords = getOutputCoords();\n        bool hasNextCol = " + h5[c4 - 1] + " < " + (u7[c4 - 1] - 1) + ";\n        bool hasNextRow = " + h5[c4 - 2] + " < " + (u7[c4 - 2] - 1) + ";\n        " + i17 + "\n        ivec4 srcIdx = ivec4(sourceLocR" + p7 + ", sourceLocG" + p7 + ",\n          sourceLocB" + p7 + ", sourceLocA" + p7 + ") * " + e8 + ";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = " + E1 + ";\n\n        for (int i = 0; i < " + e8 + "; i++) {\n          inIdx = srcIdx;\n          " + w1 + "\n          vec4 candidate = " + E1 + ";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(" + b1 + "(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    ";
    }, Ia = function(t1) {
        this.variableNames = [
            "dy"
        ], this.outputShape = t1.inShape;
        var e8 = t1.filterHeight, n8 = t1.filterWidth, r15 = t1.strideHeight, o17 = t1.strideWidth, a18 = t1.dilationHeight, i17 = t1.dilationWidth, s18 = t1.effectiveFilterHeight, u7 = t1.effectiveFilterWidth, c4 = s18 - 1 - t1.padInfo.top, l5 = u7 - 1 - t1.padInfo.left, h5 = 1 / (e8 * n8);
        this.userCode = "\n      const ivec2 pads = ivec2(" + c4 + ", " + l5 + ");\n      const float avgMultiplier = float(" + h5 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + s18 + ";\n            wR += " + a18 + ") {\n          float dyR = float(dyRCorner + wR) / " + r15 + ".0;\n\n          if (dyR < 0.0 || dyR >= " + t1.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + u7 + ";\n            wC+= " + i17 + ") {\n            float dyC = float(dyCCorner + wC) / " + o17 + ".0;\n\n            if (dyC < 0.0 || dyC >= " + t1.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }, ka = function(t1) {
        this.variableNames = [
            "dy"
        ], this.outputShape = t1.inShape;
        var e8 = t1.filterDepth, n8 = t1.filterHeight, r15 = t1.filterWidth, o17 = t1.strideDepth, a18 = t1.strideHeight, i17 = t1.strideWidth, s18 = t1.dilationDepth, u7 = t1.dilationHeight, c4 = t1.dilationWidth, l5 = t1.effectiveFilterDepth, h5 = t1.effectiveFilterHeight, f6 = t1.effectiveFilterWidth, d6 = l5 - 1 - t1.padInfo.front, p7 = h5 - 1 - t1.padInfo.top, v7 = f6 - 1 - t1.padInfo.left, m8 = 1 / (e8 * n8 * r15);
        this.userCode = "\n      const ivec3 pads = ivec3(" + d6 + ", " + p7 + ", " + v7 + ");\n      const float avgMultiplier = float(" + m8 + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < " + l5 + ";\n            wD += " + s18 + ") {\n          float dyD = float(dyDCorner + wD) / " + o17 + ".0;\n\n          if (dyD < 0.0 || dyD >= " + t1.outDepth + ".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < " + h5 + ";\n              wR += " + u7 + ") {\n            float dyR = float(dyRCorner + wR) / " + a18 + ".0;\n\n            if (dyR < 0.0 || dyR >= " + t1.outHeight + ".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < " + f6 + ";\n                wC += " + c4 + ") {\n              float dyC = float(dyCCorner + wC) / " + i17 + ".0;\n\n              if (dyC < 0.0 || dyC >= " + t1.outWidth + ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }, Sa = function(t1, e8, n8, r15, o17, a18) {
        this.outputShape = [], this.variableNames = [
            "x",
            "mean",
            "variance"
        ], Ro(t1, e8), Ro(t1, n8);
        var i17 = "0.0";
        null != r15 && (Ro(t1, r15), this.variableNames.push("offset"), i17 = "getOffsetAtOutCoords()");
        var s18 = "1.0";
        null != o17 && (Ro(t1, o17), this.variableNames.push("scale"), s18 = "getScaleAtOutCoords()"), this.outputShape = t1, this.userCode = "\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = " + i17 + ";\n        float scale = " + s18 + ";\n        float inv = scale * inversesqrt(variance + float(" + a18 + "));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    ";
    }, Aa = function(t1, e8, n8, r15, o17, a18) {
        this.packedInputs = !0, this.packedOutput = !0, this.variableNames = [
            "x",
            "mean",
            "variance"
        ], Ro(t1, e8), Ro(t1, n8);
        var i17 = "vec4(0.0)";
        null != r15 && (Ro(t1, r15), this.variableNames.push("offset"), i17 = "getOffsetAtOutCoords()");
        var s18 = "vec4(1.0)";
        null != o17 && (Ro(t1, o17), this.variableNames.push("scale"), s18 = "getScaleAtOutCoords()"), this.outputShape = t1, this.userCode = "\n      void main() {\n        vec4 offset = " + i17 + ";\n        vec4 scale = " + s18 + ";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(" + a18 + "));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    ";
    }, Da = "return areal * breal - aimag * bimag;", Ta = "return areal * bimag + aimag * breal;", Na = function(t1, e8, n8) {
        this.variableNames = [
            "AReal",
            "AImag",
            "BReal",
            "BImag"
        ], this.outputShape = Ro(e8, n8), this.userCode = "\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        " + t1 + "\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    ";
    }, Fa = "return a + b;", _a = "return a - b;", Oa = "return a * b;", Ma = "return (a < 0.) ? b * a : a;", Ba = function(t1, e8, n8) {
        this.variableNames = [
            "A",
            "B"
        ], this.outputShape = Ro(e8, n8), this.userCode = "\n      float binaryOperation(float a, float b) {\n        " + t1 + "\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ";
    }, Pa = "\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n", La = function(t1, e8, n8, r15) {
        (void 0) === r15 && (r15 = !1), this.variableNames = [
            "A",
            "B"
        ], this.supportsBroadcasting = !0, this.packedInputs = !0, this.packedOutput = !0, this.outputShape = Ro(e8, n8);
        var o17 = this.outputShape.length, a18 = "";
        if (r15) {
            if (0 === o17 || 1 === k(this.outputShape)) a18 = "\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";
            else if (a18 = "\n          " + wa(o17) + " coords = getOutputCoords();\n        ", 1 === o17) a18 += "\n            result.y = (coords + 1) >= " + this.outputShape[0] + " ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ";
            else {
                var i17 = sa("coords", o17);
                a18 += "\n            bool nextRowOutOfBounds =\n              (" + i17[o17 - 2] + " + 1) >= " + this.outputShape[o17 - 2] + ";\n            bool nextColOutOfBounds =\n              (" + i17[o17 - 1] + " + 1) >= " + this.outputShape[o17 - 1] + ";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          ";
            }
        }
        this.userCode = "\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        " + t1 + "\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        " + a18 + "\n\n        setOutput(result);\n      }\n    ";
    }, Wa = function() {
        function t1(t5) {
            this.variableNames = [
                "A"
            ], this.outputShape = t5, this.userCode = "\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    ";
        }
        return t1.prototype.getCustomSetupFunc = function(t5, e8) {
            var n8 = this;
            return function(r15, o17) {
                null == n8.minLoc && (n8.minLoc = r15.getUniformLocationNoThrow(o17, "minVal"), n8.maxLoc = r15.getUniformLocationNoThrow(o17, "maxVal")), r15.gl.uniform1f(n8.minLoc, t5), r15.gl.uniform1f(n8.maxLoc, e8);
            };
        }, t1;
    }(), Ua = function() {
        function t1(t5) {
            this.variableNames = [
                "A"
            ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t5, this.userCode = "\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    ";
        }
        return t1.prototype.getCustomSetupFunc = function(t5, e8) {
            var n8 = this;
            return function(r15, o17) {
                null == n8.minLoc && (n8.minLoc = r15.getUniformLocationNoThrow(o17, "minVal"), n8.maxLoc = r15.getUniformLocationNoThrow(o17, "maxVal")), r15.gl.uniform1f(n8.minLoc, t5), r15.gl.uniform1f(n8.maxLoc, e8);
            };
        }, t1;
    }(), Va = function(t1) {
        this.variableNames = [
            "real",
            "imag"
        ], this.outputShape = t1, this.userCode = "\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    ";
    }, za = function(t1) {
        this.outputShape = [], this.outputShape = Sn(t1, 1), this.variableNames = t1.map(function(t5, e8) {
            return "T" + e8;
        });
        var e8 = new Array(t1.length - 1);
        e8[0] = t1[0][1];
        for(var n8 = 1; n8 < e8.length; n8++)e8[n8] = e8[n8 - 1] + t1[n8][1];
        var r15 = [
            "if (yC < " + e8[0] + ") setOutput(getT0(yR, yC));"
        ];
        for(n8 = 1; n8 < e8.length; n8++){
            var o17 = e8[n8 - 1];
            r15.push("else if (yC < " + e8[n8] + ") setOutput(getT" + n8 + "(yR, yC-" + o17 + "));");
        }
        var a18 = e8.length, i18 = e8[e8.length - 1];
        r15.push("else setOutput(getT" + a18 + "(yR, yC-" + i18 + "));"), this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        " + r15.join("\n        ") + "\n      }\n    ";
    }, Ga = function(t1, e8) {
        this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [], this.outputShape = Sn(t1, e8);
        var n8 = this.outputShape, r15 = n8.length, o18 = wa(r15), a18 = sa("coords", r15), i18 = [
            "x",
            "y",
            "z",
            "w",
            "u",
            "v"
        ].slice(0, r15);
        this.variableNames = t1.map(function(t5, e9) {
            return "T" + e9;
        });
        var s18 = new Array(t1.length - 1);
        s18[0] = t1[0][e8];
        for(var u7 = 1; u7 < s18.length; u7++)s18[u7] = s18[u7 - 1] + t1[u7][e8];
        var c4 = i18[e8], l5 = i18.slice(-2), h5 = i18.join(), f6 = "if (" + c4 + " < " + s18[0] + ") {\n        return getChannel(\n            getT0(" + h5 + "), vec2(" + l5.join() + "));\n        }";
        for(u7 = 1; u7 < s18.length; u7++){
            var d6 = s18[u7 - 1];
            f6 += "\n        if (" + c4 + " < " + s18[u7] + "  && " + c4 + " >= " + s18[u7 - 1] + ") {\n          return getChannel(\n            getT" + u7 + "(" + Ha(i18, c4, d6) + "),\n            vec2(" + Ha(l5, c4, d6) + "));\n        }";
        }
        var p7 = s18.length, v7 = s18[s18.length - 1];
        f6 += "\n        return getChannel(\n          getT" + p7 + "(" + Ha(i18, c4, v7) + "),\n          vec2(" + Ha(l5, c4, v7) + "));", this.userCode = "\n      float getValue(" + i18.map(function(t5) {
            return "int " + t5;
        }) + ") {\n        " + f6 + "\n      }\n\n      void main() {\n        " + o18 + " coords = getOutputCoords();\n        vec4 result = vec4(getValue(" + a18 + "), 0., 0., 0.);\n\n        " + a18[r15 - 1] + " = " + a18[r15 - 1] + " + 1;\n        if (" + a18[r15 - 1] + " < " + n8[r15 - 1] + ") {\n          result.g = getValue(" + a18 + ");\n        }\n\n        " + a18[r15 - 2] + " = " + a18[r15 - 2] + " + 1;\n        if (" + a18[r15 - 2] + " < " + n8[r15 - 2] + ") {\n          result.a = getValue(" + a18 + ");\n        }\n\n        " + a18[r15 - 1] + " = " + a18[r15 - 1] + " - 1;\n        if (" + a18[r15 - 2] + " < " + n8[r15 - 2] + " &&\n            " + a18[r15 - 1] + " < " + n8[r15 - 1] + ") {\n          result.b = getValue(" + a18 + ");\n        }\n        setOutput(result);\n      }\n    ";
    };
    function Ha(t1, e8, n8) {
        var r15 = t1.indexOf(e8);
        return t1.map(function(t5, e9) {
            return e9 === r15 ? t5 + " - " + n8 : t5;
        }).join();
    }
    var qa = function(t1) {
        this.variableNames = [
            "x",
            "dy"
        ], this.outputShape = t1.filterShape;
        var e8 = t1.strideHeight, n8 = t1.strideWidth, r15 = t1.padInfo.top, o18 = t1.padInfo.left, a18 = "channelsLast" === t1.dataFormat;
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + t1.batchSize + "; b++) {\n          for (int yR = 0; yR < " + t1.outHeight + "; yR++) {\n            int xR = wR + yR * " + e8 + " - " + r15 + ";\n\n            if (xR < 0 || xR >= " + t1.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + t1.outWidth + "; yC++) {\n              int xC = wC + yC * " + n8 + " - " + o18 + ";\n\n              if (xC < 0 || xC >= " + t1.inWidth + ") {\n                continue;\n              }\n\n              if (" + a18 + ") {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }, Ka = function(t1) {
        this.variableNames = [
            "dy",
            "W"
        ], this.outputShape = t1.inShape;
        var e8 = t1.filterHeight, n8 = t1.filterWidth, r15 = t1.strideHeight, o18 = t1.strideWidth, a18 = "channelsLast" === t1.dataFormat, i18 = e8 - 1 - t1.padInfo.top, s18 = n8 - 1 - t1.padInfo.left, u7 = a18 ? 1 : 2, c4 = a18 ? 2 : 3, l5 = a18 ? 3 : 1;
        this.userCode = "\n      const ivec2 pads = ivec2(" + i18 + ", " + s18 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[" + l5 + "];\n\n        ivec2 dyCorner = ivec2(coords[" + u7 + "], coords[" + c4 + "]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + e8 + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + r15 + ".0;\n\n          if (dyR < 0.0 || dyR >= " + t1.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + e8 + " - 1 - wR;\n\n          for (int wC = 0; wC < " + n8 + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + o18 + ".0;\n\n            if (dyC < 0.0 || dyC >= " + t1.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + n8 + " - 1 - wC;\n\n            for (int d2 = 0; d2 < " + t1.outChannels + "; d2++) {\n\n              if (" + a18 + ") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }, ja = function(t1) {
        this.variableNames = [
            "x",
            "dy"
        ], this.outputShape = t1.filterShape;
        var e8 = t1.strideDepth, n8 = t1.strideHeight, r15 = t1.strideWidth, o18 = t1.padInfo.front, a18 = t1.padInfo.top, i18 = t1.padInfo.left;
        this.userCode = "\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + t1.batchSize + "; b++) {\n          for (int yF = 0; yF < " + t1.outDepth + "; yF++) {\n            int xF = wF + yF * " + e8 + " - " + o18 + ";\n\n            if (xF < 0 || xF >= " + t1.inDepth + ") {\n              continue;\n            }\n\n            for (int yR = 0; yR < " + t1.outHeight + "; yR++) {\n              int xR = wR + yR * " + n8 + " - " + a18 + ";\n\n              if (xR < 0 || xR >= " + t1.inHeight + ") {\n                continue;\n              }\n\n              for (int yC = 0; yC < " + t1.outWidth + "; yC++) {\n                int xC = wC + yC * " + r15 + " - " + i18 + ";\n\n                if (xC < 0 || xC >= " + t1.inWidth + ") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }, Xa = function(t1) {
        this.variableNames = [
            "dy",
            "W"
        ], this.outputShape = t1.inShape;
        var e8 = t1.filterDepth, n8 = t1.filterHeight, r15 = t1.filterWidth, o18 = t1.strideDepth, a18 = t1.strideHeight, i18 = t1.strideWidth, s18 = e8 - 1 - t1.padInfo.front, u7 = n8 - 1 - t1.padInfo.top, c4 = r15 - 1 - t1.padInfo.left;
        this.userCode = "\n      const ivec3 pads = ivec3(" + s18 + ", " + u7 + ", " + c4 + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " + e8 + "; wF++) {\n          float dyF = float(dyFCorner + wF) / " + o18 + ".0;\n\n          if (dyF < 0.0 || dyF >= " + t1.outDepth + ".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = " + e8 + " - 1 - wF;\n\n          for (int wR = 0; wR < " + n8 + "; wR++) {\n            float dyR = float(dyRCorner + wR) / " + a18 + ".0;\n\n            if (dyR < 0.0 || dyR >= " + t1.outHeight + ".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = " + n8 + " - 1 - wR;\n\n            for (int wC = 0; wC < " + r15 + "; wC++) {\n              float dyC = float(dyCCorner + wC) / " + i18 + ".0;\n\n              if (dyC < 0.0 || dyC >= " + t1.outWidth + ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = " + r15 + " - 1 - wC;\n\n              for (int d2 = 0; d2 < " + t1.outChannels + "; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }, Ya = function(t1) {
        this.variableNames = [
            "x",
            "dy"
        ], this.outputShape = t1.filterShape;
        var e8 = t1.strideHeight, n8 = t1.strideWidth, r15 = t1.padInfo.top, o18 = t1.padInfo.left, a18 = t1.outChannels / t1.inChannels;
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * " + a18 + " + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < " + t1.batchSize + "; b++) {\n          for (int yR = 0; yR < " + t1.outHeight + "; yR++) {\n            int xR = wR + yR * " + e8 + " - " + r15 + ";\n\n            if (xR < 0 || xR >= " + t1.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + t1.outWidth + "; yC++) {\n              int xC = wC + yC * " + n8 + " - " + o18 + ";\n\n              if (xC < 0 || xC >= " + t1.inWidth + ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }, $a = function(t1) {
        this.variableNames = [
            "dy",
            "W"
        ], this.outputShape = t1.inShape;
        var e8 = t1.filterHeight, n8 = t1.filterWidth, r15 = t1.strideHeight, o18 = t1.strideWidth, a18 = e8 - 1 - t1.padInfo.top, i18 = n8 - 1 - t1.padInfo.left, s18 = t1.outChannels / t1.inChannels;
        this.userCode = "\n      const ivec2 pads = ivec2(" + a18 + ", " + i18 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < " + e8 + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + r15 + ".0;\n\n          if (dyR < 0.0 || dyR >= " + t1.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + e8 + " - 1 - wR;\n\n          for (int wC = 0; wC < " + n8 + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + o18 + ".0;\n\n            if (dyC < 0.0 || dyC >= " + t1.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + n8 + " - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < " + s18 + "; dm++) {\n              int d2 = d1 * " + s18 + " + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }, Qa = function(t1, e8, n8, r15) {
        (void 0) === e8 && (e8 = !1), (void 0) === n8 && (n8 = null), (void 0) === r15 && (r15 = !1), this.variableNames = [
            "x",
            "W"
        ], this.outputShape = t1.outShape;
        var o18 = t1.padInfo.top, a18 = t1.padInfo.left, i18 = t1.strideHeight, s18 = t1.strideWidth, u7 = t1.dilationHeight, c4 = t1.dilationWidth, l5 = t1.filterHeight, h5 = t1.filterWidth, f6 = 4 * Math.floor(t1.inChannels / 4), d7 = t1.inChannels % 4, p7 = "channelsLast" === t1.dataFormat, v7 = p7 ? 1 : 2, m8 = p7 ? 2 : 3, g7 = p7 ? 3 : 1, y5 = "", x3 = "";
        n8 && (y5 = r15 ? "float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          " + n8 + "\n        }" : "\n          float activation(float x) {\n            " + n8 + "\n          }\n        ", x3 = "result = activation(result);");
        var b1 = e8 ? "result += getBiasAtOutCoords();" : "";
        e8 && this.variableNames.push("bias"), r15 && this.variableNames.push("preluActivationWeights"), this.userCode = "\n      " + y5 + "\n\n      const ivec2 strides = ivec2(" + i18 + ", " + s18 + ");\n      const ivec2 pads = ivec2(" + o18 + ", " + a18 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[" + g7 + "];\n\n        ivec2 xRCCorner =\n            ivec2(coords[" + v7 + "], coords[" + m8 + "]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + l5 + "; wR++) {\n          int xR = xRCorner + wR * " + u7 + ";\n\n          if (xR < 0 || xR >= " + t1.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + h5 + "; wC++) {\n            int xC = xCCorner + wC * " + c4 + ";\n\n            if (xC < 0 || xC >= " + t1.inWidth + ") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < " + f6 + "; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (" + p7 + ") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (" + (1 === d7) + ") {\n\n              if (" + p7 + ") {\n                dotProd +=\n                    getX(batch, xR, xC, " + f6 + ") *\n                    getW(wR, wC, " + f6 + ", d2);\n              } else {\n                dotProd +=\n                    getX(batch, " + f6 + ", xR, xC) *\n                    getW(wR, wC, " + f6 + ", d2);\n              }\n\n            } else if (" + (2 === d7) + ") {\n              vec2 wValues = vec2(\n                getW(wR, wC, " + f6 + ", d2),\n                getW(wR, wC, " + f6 + " + 1, d2)\n              );\n\n              if (" + p7 + ") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, " + f6 + "),\n                  getX(batch, xR, xC, " + f6 + " + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, " + f6 + ", xR, xC),\n                  getX(batch, " + f6 + " + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (" + (3 === d7) + ") {\n              vec3 wValues = vec3(\n                getW(wR, wC, " + f6 + ", d2),\n                getW(wR, wC, " + f6 + " + 1, d2),\n                getW(wR, wC, " + f6 + " + 2, d2)\n              );\n\n              if (" + p7 + ") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, " + f6 + "),\n                  getX(batch, xR, xC, " + f6 + " + 1),\n                  getX(batch, xR, xC, " + f6 + " + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, " + f6 + ", xR, xC),\n                  getX(batch, " + f6 + " + 1, xR, xC),\n                  getX(batch, " + f6 + " + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        " + b1 + "\n        " + x3 + "\n        setOutput(result);\n      }\n    ";
    }, Ja = function(t1) {
        this.variableNames = [
            "x",
            "W"
        ], this.outputShape = t1.outShape;
        var e8 = t1.padInfo.front, n8 = t1.padInfo.top, r15 = t1.padInfo.left, o18 = t1.strideDepth, a18 = t1.strideHeight, i18 = t1.strideWidth, s18 = t1.dilationDepth, u7 = t1.dilationHeight, c4 = t1.dilationWidth, l5 = t1.filterDepth, h5 = t1.filterHeight, f6 = t1.filterWidth, d7 = 4 * Math.floor(t1.inChannels / 4), p7 = t1.inChannels % 4;
        this.userCode = "\n      const ivec3 strides = ivec3(" + o18 + ", " + a18 + ", " + i18 + ");\n      const ivec3 pads = ivec3(" + e8 + ", " + n8 + ", " + r15 + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " + l5 + "; wF++) {\n          int xF = xFCorner + wF * " + s18 + ";\n\n          if (xF < 0 || xF >= " + t1.inDepth + ") {\n            continue;\n          }\n\n          for (int wR = 0; wR < " + h5 + "; wR++) {\n            int xR = xRCorner + wR * " + u7 + ";\n\n            if (xR < 0 || xR >= " + t1.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + f6 + "; wC++) {\n              int xC = xCCorner + wC * " + c4 + ";\n\n              if (xC < 0 || xC >= " + t1.inWidth + ") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < " + d7 + "; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (" + (1 === p7) + ") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, " + d7 + ") *\n                  getW(wF, wR, wC, " + d7 + ", d2);\n              } else if (" + (2 === p7) + ") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, " + d7 + "),\n                  getX(batch, xF, xR, xC, " + d7 + " + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, " + d7 + ", d2),\n                  getW(wF, wR, wC, " + d7 + " + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (" + (3 === p7) + ") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, " + d7 + "),\n                  getX(batch, xF, xR, xC, " + d7 + " + 1),\n                  getX(batch, xF, xR, xC, " + d7 + " + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, " + d7 + ", d2),\n                  getW(wF, wR, wC, " + d7 + " + 1, d2),\n                  getW(wF, wR, wC, " + d7 + " + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }, Za = function(t1, e8, n8, r15) {
        (void 0) === e8 && (e8 = !1), (void 0) === n8 && (n8 = null), (void 0) === r15 && (r15 = !1), this.variableNames = [
            "x",
            "W"
        ], this.outputShape = t1.outShape;
        var o18 = t1.inHeight, a18 = t1.inWidth, i18 = t1.padInfo.top, s18 = t1.padInfo.left, u7 = t1.strideHeight, c4 = t1.strideWidth, l5 = t1.dilationHeight, h5 = t1.dilationWidth, f6 = t1.filterHeight, d7 = t1.filterWidth, p7 = t1.outChannels / t1.inChannels, v7 = "", m8 = "";
        n8 && (v7 = r15 ? "float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          " + n8 + "\n        }" : "\n          float activation(float x) {\n            " + n8 + "\n          }\n        ", m8 = "result = activation(result);");
        var g7 = e8 ? "result += getBiasAtOutCoords();" : "";
        e8 && this.variableNames.push("bias"), r15 && this.variableNames.push("preluActivationWeights"), this.userCode = "\n      " + v7 + "\n\n      const ivec2 strides = ivec2(" + u7 + ", " + c4 + ");\n      const ivec2 pads = ivec2(" + i18 + ", " + s18 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / " + p7 + ";\n        int q = d2 - d1 * " + p7 + ";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < " + f6 + "; wR++) {\n          int xR = xRCorner + wR * " + l5 + ";\n\n          if (xR < 0 || xR >= " + o18 + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + d7 + "; wC++) {\n            int xC = xCCorner + wC * " + h5 + ";\n\n            if (xC < 0 || xC >= " + a18 + ") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        " + g7 + "\n        " + m8 + "\n        setOutput(result);\n      }\n    ";
    }, ti = function(t1, e8, n8, r15) {
        (void 0) === e8 && (e8 = !1), (void 0) === n8 && (n8 = null), (void 0) === r15 && (r15 = !1), this.variableNames = [
            "x",
            "W"
        ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t1.outShape;
        for(var o18 = t1.inHeight, a18 = t1.inWidth, i18 = t1.padInfo.top, s18 = t1.padInfo.left, u7 = t1.strideHeight, c4 = t1.strideWidth, l5 = t1.dilationHeight, h5 = t1.dilationWidth, f6 = t1.filterHeight, d7 = t1.filterWidth, p7 = d7, v7 = "int xR; int xC; int xCOffset;", m8 = 0; m8 < f6; m8++)for(var g7 = 0; g7 < d7; g7++)v7 += "\n          vec4 xTexelR" + m8 + "C" + 2 * g7 + " = vec4(0.);\n          vec4 wR" + m8 + "C" + g7 + " = vec4(0.);\n          vec4 xR" + m8 + "C" + g7 + " = vec4(0.);";
        for(m8 = 0; m8 < f6; m8++)for(var y5 = 0; y5 < p7; y5++){
            if (v7 += "\n          xR = xRCorner + " + m8 * l5 + ";\n          xC = xCCorner + " + (g7 = 2 * y5) * h5 + ";\n        ", 1 === c4) {
                if (g7 < d7 && (v7 += s18 % 2 == 1 ? "\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < " + o18 + " && xCOffset >= 0 && xCOffset < " + a18 + ") {\n                  xTexelR" + m8 + "C" + g7 + " = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= " + a18 + ") {\n                    xTexelR" + m8 + "C" + g7 + ".zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR" + m8 + "C" + g7 + " = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < " + o18 + " && xCOffset >= 0 && xCOffset < " + a18 + ") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= " + a18 + ") {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR" + m8 + "C" + g7 + " = vec4(previous.zw, xTexelR" + m8 + "C" + g7 + ".xy);\n                } else {\n                  xR" + m8 + "C" + g7 + " = vec4(0, 0, xTexelR" + m8 + "C" + g7 + ".xy);\n                }\n              " : "\n                if(xR >= 0 && xR < " + o18 + " && xC >= 0 && xC < " + a18 + ") {\n                  xTexelR" + m8 + "C" + g7 + " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" + m8 + "C" + g7 + " = vec4(0.);\n                }\n\n                xR" + m8 + "C" + g7 + " = xTexelR" + m8 + "C" + g7 + ";\n              ", g7 + 1 < d7)) {
                    var x3 = s18 % 2 == 0 ? b(h5) : h5;
                    h5 % 2 == 0 && s18 % 2 == 1 || h5 % 2 != 0 && s18 % 2 != 1 ? (v7 += "\n                  xCOffset = xC + " + s18 % 2 + " + " + x3 + ";\n\n                  if(xR >= 0 && xR < " + o18 + " &&\n                    xCOffset >= 0 && xCOffset < " + a18 + ") {\n                    xTexelR" + m8 + "C" + (g7 + 2) + " = getX(batch, xR, xCOffset, d1);\n                  }\n                ", h5 > 1 && (v7 += "\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < " + o18 + " &&\n                      xCOffset >= 0 && xCOffset < " + a18 + ") {\n                      xTexelR" + m8 + "C" + g7 + " = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR" + m8 + "C" + g7 + " = vec4(0.);\n                    }\n                  "), v7 += "\n                  xR" + m8 + "C" + (g7 + 1) + " = vec4(\n                    xTexelR" + m8 + "C" + g7 + ".zw, xTexelR" + m8 + "C" + (g7 + 2) + ".xy);\n                ") : v7 += "\n                  xCOffset = xC + " + x3 + ";\n\n                  if(xR >= 0 && xR < " + o18 + " &&\n                    xCOffset >= 0 && xCOffset < " + a18 + ") {\n                    xTexelR" + m8 + "C" + (g7 + 2) + " = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR" + m8 + "C" + (g7 + 1) + " = xTexelR" + m8 + "C" + (g7 + 2) + ";\n                ";
                }
            } else g7 < d7 && (v7 += "\n              if(xR >= 0 && xR < " + o18 + ") {\n            ", s18 % 2 == 1 ? (v7 += "\n                xCOffset = xC + 1 - " + c4 + ";\n                if(xCOffset >= 0 && xCOffset < " + a18 + ") {\n                  xTexelR" + m8 + "C" + g7 + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + m8 + "C" + g7 + " = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < " + a18 + ") {\n                  xTexelR" + m8 + "C" + (g7 + 2) + " = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR" + m8 + "C" + (g7 + 2) + " = vec4(0.);\n                }\n\n                xR" + m8 + "C" + g7 + " = vec4(\n                  xTexelR" + m8 + "C" + g7 + ".zw, xTexelR" + m8 + "C" + (g7 + 2) + ".zw);\n              ", g7 + 1 < d7 && (v7 += "\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + " + c4 + ";\n                  if(xCOffset >= 0 && xCOffset < " + a18 + ") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR" + m8 + "C" + (g7 + 1) + " = vec4(xTexelR" + m8 + "C" + (g7 + 2) + ".xy, final.xy);\n                ")) : (v7 += "\n                if(xC >= 0 && xC < " + a18 + ") {\n                  xTexelR" + m8 + "C" + g7 + " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" + m8 + "C" + g7 + " = vec4(0.);\n                }\n\n                xCOffset = xC + " + c4 + ";\n                if(xCOffset >= 0 && xCOffset < " + a18 + ") {\n                  xTexelR" + m8 + "C" + (g7 + 2) + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + m8 + "C" + (g7 + 2) + " = vec4(0.);\n                }\n\n                xR" + m8 + "C" + g7 + " = vec4(\n                  xTexelR" + m8 + "C" + g7 + ".xy, xTexelR" + m8 + "C" + (g7 + 2) + ".xy);\n              ", g7 + 1 < d7 && (v7 += "\n                  xR" + m8 + "C" + (g7 + 1) + " = vec4(\n                    xTexelR" + m8 + "C" + g7 + ".zw, xTexelR" + m8 + "C" + (g7 + 2) + ".zw);\n                ")), v7 += "}");
            g7 < d7 && (v7 += "\n            vec4 wTexelR" + m8 + "C" + g7 + " = getW(" + m8 + ", " + g7 + ", d1, q);\n            wR" + m8 + "C" + g7 + " = vec4(wTexelR" + m8 + "C" + g7 + ".xz, wTexelR" + m8 + "C" + g7 + ".xz);\n          ", g7 + 1 < d7 && (v7 += "\n              vec4 wTexelR" + m8 + "C" + (g7 + 1) + " = getW(" + m8 + ", " + (g7 + 1) + ", d1, q);\n              wR" + m8 + "C" + (g7 + 1) + " =\n                vec4(wTexelR" + m8 + "C" + (g7 + 1) + ".xz, wTexelR" + m8 + "C" + (g7 + 1) + ".xz);"));
        }
        for(m8 = 0; m8 < f6; m8++)for(g7 = 0; g7 < d7; g7++)v7 += "dotProd += xR" + m8 + "C" + g7 + " * wR" + m8 + "C" + g7 + ";";
        var w1 = "", C1 = "";
        n8 && (w1 = r15 ? "vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          " + n8 + "\n        }" : "vec4 activation(vec4 x) {\n          " + n8 + "\n        }", C1 = "result = activation(result);");
        var E1 = e8 ? "result += getBiasAtOutCoords();" : "";
        e8 && this.variableNames.push("bias"), r15 && this.variableNames.push("preluActivationWeights"), this.userCode = "\n      " + w1 + "\n\n      const ivec2 strides = ivec2(" + u7 + ", " + c4 + ");\n      const ivec2 pads = ivec2(" + i18 + ", " + s18 + ");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        " + v7 + "\n\n        vec4 result = dotProd;\n        " + E1 + "\n        " + C1 + "\n        setOutput(result);\n      }\n    ";
    }, ei = function(t1, e8, n8, r15, o18) {
        this.variableNames = [
            "Image",
            "Boxes",
            "BoxInd"
        ], this.outputShape = [];
        var a18 = t1[0], i18 = t1[1], s18 = t1[2], u7 = t1[3], c4 = e8[0], l5 = n8[0], h5 = n8[1];
        this.outputShape = [
            c4,
            l5,
            h5,
            u7
        ];
        var f6 = "bilinear" === r15 ? 1 : 0, d7 = [
            i18 - 1 + ".0",
            s18 - 1 + ".0"
        ], p7 = d7[0], v7 = d7[1], m8 = l5 > 1 ? [
            "" + (i18 - 1) / (l5 - 1),
            "(y2-y1) * height_ratio",
            "y1*" + p7 + " + float(y)*(height_scale)"
        ] : [
            "0.0",
            "0.0",
            "0.5 * (y1+y2) * " + p7
        ], g7 = m8[0], y5 = m8[1], x5 = m8[2], b1 = h5 > 1 ? [
            "" + (s18 - 1) / (h5 - 1),
            "(x2-x1) * width_ratio",
            "x1*" + v7 + " + float(x)*(width_scale)"
        ] : [
            "0.0",
            "0.0",
            "0.5 * (x1+x2) * " + v7
        ], w1 = b1[0], C1 = b1[1], E1 = b1[2];
        this.userCode = "\n      const float height_ratio = float(" + g7 + ");\n      const float width_ratio = float(" + w1 + ");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= " + a18 + ") {\n          return;\n        }\n\n        float height_scale = " + y5 + ";\n        float width_scale = " + C1 + ";\n\n        float in_y = " + x5 + ";\n        if( in_y < 0.0 || in_y > " + p7 + " ) {\n          setOutput(float(" + o18 + "));\n          return;\n        }\n        float in_x = " + E1 + ";\n        if( in_x < 0.0 || in_x > " + v7 + " ) {\n          setOutput(float(" + o18 + "));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(" + f6 + " == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    ";
    }, ni = function(t1, e8, n8) {
        this.variableNames = [
            "x"
        ], this.outputShape = t1;
        var r15 = t1.length, o18 = t1[t1.length - 1], a18 = n8 ? "<" : ">";
        this.userCode = "\n      int getIndex(int i) {\n        " + (n8 ? "return " + o18 + " -i - 1;" : "return i;") + "\n      }\n\n      void main() {\n        " + wa(r15) + " coords = getOutputCoords();\n        int end = " + ri(r15, "coords") + ";\n        float val = 0.0;\n        for (int i = " + o18 + " - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx " + a18 + " end) {\n            continue;\n          }\n          if (idx == end && " + e8 + ") {\n            continue;\n          }\n          " + ri(r15, "coords") + " = idx;\n          val += getX(" + (function(t5, e9) {
            if (1 === t5) return "" + e9;
            if (2 === t5) return e9 + ".x, " + e9 + ".y";
            if (3 === t5) return e9 + ".x, " + e9 + ".y, " + e9 + ".z";
            if (4 === t5) return e9 + ".x, " + e9 + ".y, " + e9 + ".z, " + e9 + ".w";
            throw Error("Cumulative sum for rank " + t5 + " is not yet supported");
        })(r15, "coords") + ");\n        }\n        setOutput(val);\n      }\n    ";
    };
    function ri(t1, e8) {
        if (1 === t1) return "" + e8;
        if (2 === t1) return e8 + ".y";
        if (3 === t1) return e8 + ".z";
        if (4 === t1) return e8 + ".w";
        throw Error("Cumulative sum for rank " + t1 + " is not yet supported");
    }
    var oi = function(t1) {
        this.variableNames = [
            "A"
        ], this.packedInputs = !1, this.packedOutput = !0, this.outPackingScheme = Vt.DENSE;
        var e8 = Yt(t1), n8 = ua();
        this.outputShape = t1, this.userCode = "\n      ivec3 outCoordsFromFlatIndex(int index) {\n        " + ca([
            "r",
            "c",
            "d"
        ], t1) + "\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(" + e8[0] + ", " + e8[1] + "));\n        int index = 4 * (resTexRC.x * " + e8[1] + " + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        " + n8.output + " = result;\n      }\n    ";
    }, ai = function(t1) {
        this.variableNames = [
            "A"
        ], this.packedInputs = !0, this.packedOutput = !0, this.outPackingScheme = Vt.DENSE;
        var e8 = Yt(t1), n8 = ua();
        this.outputShape = t1, this.userCode = "\n      ivec3 outCoordsFromFlatIndex(int index) {\n        " + ca([
            "r",
            "c",
            "d"
        ], t1) + "\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(" + e8[0] + ", " + e8[1] + "));\n        int index = 4 * (resTexRC.x * " + e8[1] + " + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        " + n8.output + " = result;\n      }\n    ";
    }, ii = function() {
        function t1(t5, e8, n8) {
            this.variableNames = [
                "x"
            ], this.outputShape = [], this.outputShape = t5, this.blockSize = e8, this.dataFormat = n8, this.userCode = "\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = " + this.getHeightCoordString() + ";\n      int w = " + this.getWidthCoordString() + ";\n      int d = " + this.getDepthCoordString() + ";\n\n      int in_h = h / " + e8 + ";\n      int offset_h = imod(h, " + e8 + ");\n      int in_w = w / " + e8 + ";\n      int offset_w = imod(w, " + e8 + ");\n      int offset_d = (offset_h * " + e8 + " + offset_w) *\n        " + this.getOutputDepthSize() + ";\n      int in_d = d + offset_d;\n\n      float result = " + this.getInputSamplingString() + ";\n      setOutput(result);\n    }\n  ";
        }
        return t1.prototype.getHeightCoordString = function() {
            return "NHWC" === this.dataFormat ? "coords[1]" : "coords[2]";
        }, t1.prototype.getWidthCoordString = function() {
            return "NHWC" === this.dataFormat ? "coords[2]" : "coords[3]";
        }, t1.prototype.getDepthCoordString = function() {
            return "NHWC" === this.dataFormat ? "coords[3]" : "coords[1]";
        }, t1.prototype.getOutputDepthSize = function() {
            return "NHWC" === this.dataFormat ? this.outputShape[3] : this.outputShape[1];
        }, t1.prototype.getInputSamplingString = function() {
            return "NHWC" === this.dataFormat ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
        }, t1;
    }(), si = function(t1) {
        this.variableNames = [
            "X"
        ], this.outputShape = [
            t1,
            t1
        ], this.userCode = "\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    ";
    }, ui = function(t1) {
        this.variableNames = [
            "A"
        ], this.outTexUsage = zt.DOWNLOAD;
        var e8 = ua();
        this.outputShape = t1, this.userCode = "\n      " + ha + "\n\n      void main() {\n        float x = getAAtOutCoords();\n        " + e8.output + " = encode_float(x);\n      }\n    ";
    }, ci = function(t1) {
        this.variableNames = [
            "A"
        ], this.packedInputs = !0, this.packedOutput = !1, this.outTexUsage = zt.DOWNLOAD;
        var e8 = ua();
        this.outputShape = t1, this.userCode = "\n      " + ha + "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        " + e8.output + " = encode_float(x);\n      }\n    ";
    }, li = function(t1, e8, n8) {
        (void 0) === n8 && (n8 = !1), this.variableNames = [
            "A"
        ];
        var r15 = ua(), o18 = e8[0], a18 = e8[1];
        this.outputShape = t1;
        var i18 = "result";
        n8 && (i18 = "floor(result * 255. + 0.5)"), this.userCode = "\n      " + la(t1) + "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / " + a18 + ";\n        int c = imod(flatIndex, " + a18 + ");\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(" + a18 + ".0, " + o18 + ".0);\n        vec4 values = " + r15.texture2D + "(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        " + r15.output + " = vec4(" + i18 + ", 0., 0., 0.);\n      }\n    ";
    }, hi = function(t1, e8, n8) {
        (void 0) === n8 && (n8 = !1), this.variableNames = [
            "A"
        ], this.packedInputs = !1, this.packedOutput = !0;
        var r15 = ua(), o18 = e8[0], a18 = e8[1];
        this.outputShape = t1;
        var i18 = "", s18 = "result";
        n8 && (s18 = "floor(result * 255. + 0.5)");
        for(var u7 = 0; u7 <= 1; u7++)for(var c4 = 0; c4 <= 1; c4++){
            var l5 = 2 * u7 + c4;
            i18 += "\n          localCoords = coords;\n          if(localCoords[2] + " + c4 + " < " + t1[2] + ") {\n            localCoords[2] += " + c4 + ";\n            if(localCoords[1] + " + u7 + " < " + t1[1] + ") {\n              localCoords[1] += " + u7 + ";\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / " + a18 + ";\n              c = imod(flatIndex, " + a18 + ");\n              uv = (vec2(c, r) + halfCR) / vec2(" + a18 + ".0, " + o18 + ".0);\n              values = " + r15.texture2D + "(A, uv);\n\n              if(offset == 0) {\n                result[" + l5 + "] = values[0];\n              } else if(offset == 1) {\n                result[" + l5 + "] = values[1];\n              } else if(offset == 2) {\n                result[" + l5 + "] = values[2];\n              } else {\n                result[" + l5 + "] = values[3];\n              }\n            }\n          }\n        ";
        }
        this.userCode = "\n      " + la(t1) + "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        " + i18 + "\n\n        " + r15.output + " = " + s18 + ";\n      }\n    ";
    }, fi = "return real * expR - imag * expI;", di = "return real * expI + imag * expR;", pi = function(t1, e8, n8) {
        this.variableNames = [
            "real",
            "imag"
        ];
        var r15 = e8[1];
        this.outputShape = e8;
        var o18 = n8 ? "2.0 * " + Math.PI : "-2.0 * " + Math.PI, a18 = n8 ? r15 + ".0" : "1.0";
        this.userCode = "\n      const float exponentMultiplier = " + o18 + ";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        " + t1 + "\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(" + r15 + ");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < " + r15 + "; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / " + a18 + ";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    ";
    }, vi = function() {
        function t1(t5, e8) {
            this.outputShape = [], this.variableNames = [
                "x"
            ], this.outputShape = t5, this.userCode = "\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    ";
        }
        return t1.prototype.getCustomSetupFunc = function(t5) {
            var e8 = this;
            return function(n8, r15) {
                null == e8.valueLoc && (e8.valueLoc = n8.getUniformLocationNoThrow(r15, "value")), n8.gl.uniform1f(e8.valueLoc, t5);
            };
        }, t1;
    }(), mi = function(t1, e8, n8) {
        this.variableNames = [
            "A",
            "indices"
        ];
        var r15 = t1.slice();
        r15[n8] = e8, this.outputShape = r15, this.rank = r15.length;
        var o18 = wa(this.rank), a18 = function(t5, e9) {
            var n11 = t5.length;
            if (n11 > 4) throw Error("Gather for rank " + n11 + " is not yet supported");
            if (1 === n11) return "int(getIndices(resRC))";
            for(var r18 = [
                "resRC.x",
                "resRC.y",
                "resRC.z",
                "resRC.w"
            ], o19 = [], a19 = 0; a19 < t5.length; a19++)a19 === e9 ? o19.push("int(getIndices(" + r18[a19] + "))") : o19.push("" + r18[a19]);
            return o19.join();
        }(t1, n8);
        this.userCode = "\n      void main() {\n        " + o18 + " resRC = getOutputCoords();\n        setOutput(getA(" + a18 + "));\n      }\n    ";
    };
    var gi = function(t1, e8, n8) {
        this.sliceDim = t1, this.strides = e8, this.variableNames = [
            "x",
            "indices"
        ], this.outputShape = n8;
        var r15 = wa(e8.length), o18 = wa(n8.length), a18 = this.sliceDim > 1 ? "strides[j]" : "strides";
        this.userCode = "\n        " + r15 + " strides = " + r15 + "(" + this.strides + ");\n         void main() {\n          " + o18 + " coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < " + this.sliceDim + "; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * " + a18 + ";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      ";
    };
    function yi(t1, e8) {
        var n8 = ua();
        return oe(t1, e8, n8.version + "\n    precision highp float;\n    " + n8.attribute + " vec3 clipSpacePos;\n    " + n8.attribute + " vec2 uv;\n    " + n8.varyingVs + " vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }");
    }
    function xi(t1, e8) {
        return fe(t1, e8, new Float32Array([
            -1,
            1,
            0,
            0,
            1,
            -1,
            -1,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            1,
            1,
            -1,
            0,
            1,
            0
        ]));
    }
    function bi(t1, e8) {
        return de(t1, e8, new Uint16Array([
            0,
            1,
            2,
            2,
            1,
            3
        ]));
    }
    function wi(t1, e8, n8, r15, o18, a18, i18) {
        ve(n8, r15);
        var s18 = pe(t1, e8), u7 = t1.TEXTURE_2D;
        return Jt(t1, e8, function() {
            return t1.bindTexture(u7, s18);
        }), Jt(t1, e8, function() {
            return t1.texParameteri(u7, t1.TEXTURE_WRAP_S, t1.CLAMP_TO_EDGE);
        }), Jt(t1, e8, function() {
            return t1.texParameteri(u7, t1.TEXTURE_WRAP_T, t1.CLAMP_TO_EDGE);
        }), Jt(t1, e8, function() {
            return t1.texParameteri(u7, t1.TEXTURE_MIN_FILTER, t1.NEAREST);
        }), Jt(t1, e8, function() {
            return t1.texParameteri(u7, t1.TEXTURE_MAG_FILTER, t1.NEAREST);
        }), Jt(t1, e8, function() {
            return t1.texImage2D(u7, 0, o18, n8, r15, 0, a18, i18, null);
        }), Jt(t1, e8, function() {
            return t1.bindTexture(t1.TEXTURE_2D, null);
        }), s18;
    }
    function Ci(t1, e8, n8, r15, o18) {
        var a18 = Xt(n8, r15);
        return wi(t1, e8, a18[0], a18[1], o18.internalFormatFloat, o18.textureFormatFloat, t1.FLOAT);
    }
    function Ei(t1, e8, n8, r15, o18) {
        var a18 = Xt(n8, r15);
        return wi(t1, e8, a18[0], a18[1], o18.internalFormatHalfFloat, o18.textureFormatFloat, o18.textureTypeHalfFloat);
    }
    function Ri(t1, e8, n8, r15, o18) {
        var a18 = Xt(n8, r15);
        return wi(t1, e8, a18[0], a18[1], t1.RGBA, t1.RGBA, t1.UNSIGNED_BYTE);
    }
    function Ii(t1, e8, n8, r15, o18) {
        var a18 = $t(n8, r15);
        return wi(t1, e8, a18[0], a18[1], o18.internalFormatPackedFloat, t1.RGBA, t1.FLOAT);
    }
    function ki(t1, e8, n8, r15, o18) {
        var a18 = $t(n8, r15);
        return wi(t1, e8, a18[0], a18[1], o18.internalFormatPackedHalfFloat, t1.RGBA, o18.textureTypeHalfFloat);
    }
    function Si(t1, e8, n8, r15) {
        return Jt(t1, e8, function() {
            return t1.bindBuffer(t1.ARRAY_BUFFER, r15);
        }), ge(t1, e8, n8, "clipSpacePos", r15, 3, 20, 0) && ge(t1, e8, n8, "uv", r15, 2, 20, 12);
    }
    function Ai(t1, e8, n8, r15, o18, a18, i18) {
        var s18, u7, c4;
        Jt(t1, e8, function() {
            return t1.bindTexture(t1.TEXTURE_2D, n8);
        }), a18 instanceof Uint8Array ? (s18 = new Uint8Array(r15 * o18 * 4), u7 = t1.UNSIGNED_BYTE, c4 = t1.RGBA) : (s18 = new Float32Array(r15 * o18 * 4), u7 = t1.FLOAT, c4 = i18.internalFormatPackedFloat), s18.set(a18), Jt(t1, e8, function() {
            return t1.texImage2D(t1.TEXTURE_2D, 0, c4, r15, o18, 0, t1.RGBA, u7, s18);
        }), Jt(t1, e8, function() {
            return t1.bindTexture(t1.TEXTURE_2D, null);
        });
    }
    function Di(t1, e8, n8, r15) {
        Jt(t1, e8, function() {
            return t1.bindTexture(t1.TEXTURE_2D, n8);
        }), r15.data instanceof Uint8Array ? Jt(t1, e8, function() {
            return t1.texImage2D(t1.TEXTURE_2D, 0, t1.RGBA, r15.width, r15.height, 0, t1.RGBA, t1.UNSIGNED_BYTE, r15.data);
        }) : Jt(t1, e8, function() {
            return t1.texImage2D(t1.TEXTURE_2D, 0, t1.RGBA, t1.RGBA, t1.UNSIGNED_BYTE, r15);
        }), Jt(t1, e8, function() {
            return t1.bindTexture(t1.TEXTURE_2D, null);
        });
    }
    function Ti(t1, e8, n8, r15, o18) {
        var a18 = t1.createBuffer();
        Jt(t1, e8, function() {
            return t1.bindBuffer(t1.PIXEL_PACK_BUFFER, a18);
        });
        var i18 = 16 * n8 * r15;
        return Jt(t1, e8, function() {
            return t1.bufferData(t1.PIXEL_PACK_BUFFER, i18, t1.STREAM_READ);
        }), Jt(t1, e8, function() {
            return t1.readPixels(0, 0, r15, n8, t1.RGBA, t1.FLOAT, 0);
        }), Jt(t1, e8, function() {
            return t1.bindBuffer(t1.PIXEL_PACK_BUFFER, null);
        }), a18;
    }
    function Ni(t1, e8, n8) {
        var r15 = t1, o18 = new Float32Array(n8);
        return r15.bindBuffer(r15.PIXEL_PACK_BUFFER, e8), r15.getBufferSubData(r15.PIXEL_PACK_BUFFER, 0, o18), r15.bindBuffer(r15.PIXEL_PACK_BUFFER, null), o18;
    }
    function Fi(t1, e8, n8, r15, o18) {
        var a18 = Xt(n8, r15), i18 = a18[0], s18 = a18[1], u7 = new Uint8Array(n8 * r15 * 4);
        return Jt(t1, e8, function() {
            return t1.readPixels(0, 0, i18, s18, o18.downloadTextureFormat, t1.UNSIGNED_BYTE, u7);
        }), new Float32Array(u7.buffer);
    }
    function _i(t1, e8, n8, r15, o18, a18, i18, s18) {
        var u7 = t1, c4 = new Float32Array(function(t5, e9) {
            var n11 = $t(t5, e9);
            return n11[0] * n11[1] * 4;
        }(a18, i18));
        return u7.bindBuffer(u7.PIXEL_PACK_BUFFER, e8), u7.getBufferSubData(u7.PIXEL_PACK_BUFFER, 0, c4), u7.bindBuffer(u7.PIXEL_PACK_BUFFER, null), c4;
    }
    function Oi(t1, e8, n8, r15) {
        var o18 = new Float32Array(n8 * r15 * 4);
        return Jt(t1, e8, function() {
            return t1.readPixels(0, 0, r15, n8, t1.RGBA, t1.FLOAT, o18);
        }), o18;
    }
    var Mi = Object.freeze({
        createVertexShader: yi,
        createVertexBuffer: xi,
        createIndexBuffer: bi,
        createFloat32MatrixTexture: Ci,
        createFloat16MatrixTexture: Ei,
        createUnsignedBytesMatrixTexture: Ri,
        createPackedMatrixTexture: Ii,
        createFloat16PackedMatrixTexture: ki,
        bindVertexProgramAttributeStreams: Si,
        uploadDenseMatrixToTexture: Ai,
        uploadPixelDataToTexture: Di,
        createBufferFromOutputTexture: Ti,
        downloadFloat32MatrixFromBuffer: Ni,
        downloadByteEncodedFloatMatrixFromOutputTexture: Fi,
        downloadPackedMatrixFromBuffer: _i,
        downloadMatrixFromPackedOutputTexture: Oi
    }), Bi = function() {
        function t1(t5) {
            this.outputTexture = null, this.program = null, this.disposed = !1, this.vertexAttrsAreBound = !1, this.itemsToPoll = [];
            var e8 = i15().getNumber("WEBGL_VERSION");
            null != t5 ? (this.gl = t5, Kt(e8, t5)) : this.gl = jt(e8);
            var n8 = "WEBGL_color_buffer_float";
            if (1 === i15().getNumber("WEBGL_VERSION")) {
                if (this.textureFloatExtension = re(this.gl, this.debug, "OES_texture_float"), Pe(this.gl, "OES_texture_half_float")) this.textureHalfFloatExtension = re(this.gl, this.debug, "OES_texture_half_float");
                else if (i15().get("WEBGL_FORCE_F16_TEXTURES")) throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
                if (this.colorBufferFloatExtension = this.gl.getExtension(n8), Pe(this.gl, "EXT_color_buffer_half_float")) this.colorBufferHalfFloatExtension = re(this.gl, this.debug, "EXT_color_buffer_half_float");
                else if (i15().get("WEBGL_FORCE_F16_TEXTURES")) throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
            } else if (n8 = "EXT_color_buffer_float", Pe(this.gl, n8)) this.colorBufferFloatExtension = this.gl.getExtension(n8);
            else {
                if (!Pe(this.gl, "EXT_color_buffer_half_float")) throw new Error("GL context does not support color renderable floats");
                this.colorBufferHalfFloatExtension = this.gl.getExtension("EXT_color_buffer_half_float");
            }
            this.vertexBuffer = xi(this.gl, this.debug), this.indexBuffer = bi(this.gl, this.debug), this.framebuffer = me(this.gl, this.debug), this.textureConfig = Qt(this.gl, this.textureHalfFloatExtension);
        }
        return Object.defineProperty(t1.prototype, "debug", {
            get: function() {
                return i15().getBool("DEBUG");
            },
            enumerable: !0,
            configurable: !0
        }), t1.prototype.dispose = function() {
            var t5 = this;
            if (!this.disposed) {
                null != this.program && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), null != this.outputTexture && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
                var e8 = this.gl;
                Jt(e8, this.debug, function() {
                    return e8.finish();
                }), Jt(e8, this.debug, function() {
                    return e8.bindFramebuffer(e8.FRAMEBUFFER, null);
                }), Jt(e8, this.debug, function() {
                    return e8.deleteFramebuffer(t5.framebuffer);
                }), Jt(e8, this.debug, function() {
                    return e8.bindBuffer(e8.ARRAY_BUFFER, null);
                }), Jt(e8, this.debug, function() {
                    return e8.bindBuffer(e8.ELEMENT_ARRAY_BUFFER, null);
                }), Jt(e8, this.debug, function() {
                    return e8.deleteBuffer(t5.indexBuffer);
                }), this.disposed = !0;
            }
        }, t1.prototype.createFloat32MatrixTexture = function(t5, e9) {
            return this.throwIfDisposed(), Ci(this.gl, this.debug, t5, e9, this.textureConfig);
        }, t1.prototype.createFloat16MatrixTexture = function(t5, e9) {
            return this.throwIfDisposed(), Ei(this.gl, this.debug, t5, e9, this.textureConfig);
        }, t1.prototype.createUnsignedBytesMatrixTexture = function(t5, e9) {
            return this.throwIfDisposed(), Ri(this.gl, this.debug, t5, e9, this.textureConfig);
        }, t1.prototype.uploadPixelDataToTexture = function(t5, e9) {
            this.throwIfDisposed(), Di(this.gl, this.debug, t5, e9);
        }, t1.prototype.uploadDenseMatrixToTexture = function(t5, e9, n8, r15) {
            this.throwIfDisposed(), Ai(this.gl, this.debug, t5, e9, n8, r15, this.textureConfig);
        }, t1.prototype.createFloat16PackedMatrixTexture = function(t5, e9) {
            return this.throwIfDisposed(), ki(this.gl, this.debug, t5, e9, this.textureConfig);
        }, t1.prototype.createPackedMatrixTexture = function(t5, e9) {
            return this.throwIfDisposed(), Ii(this.gl, this.debug, t5, e9, this.textureConfig);
        }, t1.prototype.deleteMatrixTexture = function(t5) {
            var e9 = this;
            this.throwIfDisposed(), this.outputTexture === t5 && (Ee(this.gl, this.debug, this.framebuffer), this.outputTexture = null), Jt(this.gl, this.debug, function() {
                return e9.gl.deleteTexture(t5);
            });
        }, t1.prototype.downloadByteEncodedFloatMatrixFromOutputTexture = function(t5, e9, n8) {
            var r15 = this;
            return this.downloadMatrixDriver(t5, function() {
                return Fi(r15.gl, r15.debug, e9, n8, r15.textureConfig);
            });
        }, t1.prototype.downloadPackedMatrixFromBuffer = function(t5, e9, n8, r15, o18, a18) {
            return _i(this.gl, t5, 0, 0, 0, o18, a18, this.textureConfig);
        }, t1.prototype.downloadFloat32MatrixFromBuffer = function(t5, e9) {
            return Ni(this.gl, t5, e9);
        }, t1.prototype.createBufferFromTexture = function(t5, e9, n8) {
            this.bindTextureToFrameBuffer(t5);
            var r15 = Ti(this.gl, this.debug, e9, n8, this.textureConfig);
            return this.unbindTextureToFrameBuffer(), r15;
        }, t1.prototype.createAndWaitForFence = function() {
            var t5 = this.createFence(this.gl);
            return this.pollFence(t5);
        }, t1.prototype.createFence = function(t5) {
            var e9, n8, r15 = this;
            if (i15().getBool("WEBGL_FENCE_API_ENABLED")) {
                var o18 = t5, a18 = o18.fenceSync(o18.SYNC_GPU_COMMANDS_COMPLETE, 0);
                t5.flush(), n8 = function() {
                    var t7 = o18.clientWaitSync(a18, 0, 0);
                    return t7 === o18.ALREADY_SIGNALED || t7 === o18.CONDITION_SATISFIED;
                }, e9 = a18;
            } else i15().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (e9 = this.beginQuery(), this.endQuery(), n8 = function() {
                return r15.isQueryAvailable(e9, i15().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
            }) : n8 = function() {
                return !0;
            };
            return {
                query: e9,
                isFencePassed: n8
            };
        }, t1.prototype.downloadMatrixFromPackedTexture = function(t5, e9, n8) {
            var r15 = this;
            return this.downloadMatrixDriver(t5, function() {
                return Oi(r15.gl, r15.debug, e9, n8);
            });
        }, t1.prototype.createProgram = function(t5) {
            this.throwIfDisposed();
            var e9 = this.gl, n8 = ae(e9, this.debug, t5), r15 = yi(e9, this.debug), o19 = ce(e9, this.debug);
            return Jt(e9, this.debug, function() {
                return e9.attachShader(o19, r15);
            }), Jt(e9, this.debug, function() {
                return e9.attachShader(o19, n8);
            }), le(e9, this.debug, o19), this.debug && he(e9, this.debug, o19), this.vertexAttrsAreBound || (this.setProgram(o19), this.vertexAttrsAreBound = Si(e9, this.debug, this.program, this.vertexBuffer)), o19;
        }, t1.prototype.deleteProgram = function(t5) {
            var e9 = this;
            this.throwIfDisposed(), t5 === this.program && (this.program = null), null != t5 && Jt(this.gl, this.debug, function() {
                return e9.gl.deleteProgram(t5);
            });
        }, t1.prototype.setProgram = function(t5) {
            var e9 = this;
            this.throwIfDisposed(), this.program = t5, null != this.program && this.debug && he(this.gl, this.debug, this.program), Jt(this.gl, this.debug, function() {
                return e9.gl.useProgram(t5);
            });
        }, t1.prototype.getUniformLocation = function(t5, e9, n8) {
            return (void 0) === n8 && (n8 = !0), this.throwIfDisposed(), n8 ? xe(this.gl, this.debug, t5, e9) : be(this.gl, t5, e9);
        }, t1.prototype.getAttributeLocation = function(t5, e9) {
            var n8 = this;
            return this.throwIfDisposed(), Jt(this.gl, this.debug, function() {
                return n8.gl.getAttribLocation(t5, e9);
            });
        }, t1.prototype.getUniformLocationNoThrow = function(t5, e9) {
            return this.throwIfDisposed(), this.gl.getUniformLocation(t5, e9);
        }, t1.prototype.setInputMatrixTexture = function(t5, e9, n8) {
            this.throwIfDisposed(), this.throwIfNoProgram(), we(this.gl, this.debug, this.program, t5, e9, n8);
        }, t1.prototype.setOutputMatrixTexture = function(t5, e9, n8) {
            this.setOutputMatrixTextureDriver(t5, n8, e9);
        }, t1.prototype.setOutputPackedMatrixTexture = function(t5, e9, n8) {
            this.throwIfDisposed();
            var r15 = $t(e9, n8), o19 = r15[0], a19 = r15[1];
            this.setOutputMatrixTextureDriver(t5, o19, a19);
        }, t1.prototype.setOutputMatrixWriteRegion = function(t5, e9, n8, r15) {
            this.setOutputMatrixWriteRegionDriver(n8, t5, r15, e9);
        }, t1.prototype.setOutputPackedMatrixWriteRegion = function(t5, e9, n8, r15) {
            throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
        }, t1.prototype.debugValidate = function() {
            null != this.program && he(this.gl, this.debug, this.program), Re(this.gl);
        }, t1.prototype.executeProgram = function() {
            this.throwIfDisposed(), this.throwIfNoProgram();
            var t5 = this.gl;
            this.debug && this.debugValidate(), Jt(t5, this.debug, function() {
                return t5.drawElements(t5.TRIANGLES, 6, t5.UNSIGNED_SHORT, 0);
            });
        }, t1.prototype.blockUntilAllProgramsCompleted = function() {
            var t5 = this;
            this.throwIfDisposed(), Jt(this.gl, this.debug, function() {
                return t5.gl.finish();
            });
        }, t1.prototype.getQueryTimerExtension = function() {
            return null == this.disjointQueryTimerExtension && (this.disjointQueryTimerExtension = re(this.gl, this.debug, 2 === i15().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
        }, t1.prototype.getQueryTimerExtensionWebGL2 = function() {
            return this.getQueryTimerExtension();
        }, t1.prototype.getQueryTimerExtensionWebGL1 = function() {
            return this.getQueryTimerExtension();
        }, t1.prototype.beginQuery = function() {
            if (2 === i15().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
                var t5 = this.gl, e9 = this.getQueryTimerExtensionWebGL2(), n8 = t5.createQuery();
                return t5.beginQuery(e9.TIME_ELAPSED_EXT, n8), n8;
            }
            var r15 = this.getQueryTimerExtensionWebGL1(), o19 = r15.createQueryEXT();
            return r15.beginQueryEXT(r15.TIME_ELAPSED_EXT, o19), o19;
        }, t1.prototype.endQuery = function() {
            if (2 !== i15().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
                var t7 = this.getQueryTimerExtensionWebGL1();
                t7.endQueryEXT(t7.TIME_ELAPSED_EXT);
            } else {
                var e10 = this.gl, n11 = this.getQueryTimerExtensionWebGL2();
                e10.endQuery(n11.TIME_ELAPSED_EXT);
            }
        }, t1.prototype.waitForQueryAndGetTime = function(t8) {
            return n10(this, void 0, void 0, function() {
                var e11 = this;
                return r17(this, function(n12) {
                    switch(n12.label){
                        case 0:
                            return [
                                4,
                                F(function() {
                                    return e11.disposed || e11.isQueryAvailable(t8, i15().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
                                })
                            ];
                        case 1:
                            return n12.sent(), [
                                2,
                                this.getQueryTime(t8, i15().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))
                            ];
                    }
                });
            });
        }, t1.prototype.getQueryTime = function(t8, e11) {
            if (0 === e11) return null;
            if (2 === e11) {
                var n12 = this.gl;
                return n12.getQueryParameter(t8, n12.QUERY_RESULT) / 1000000;
            }
            var r15 = this.getQueryTimerExtensionWebGL1();
            return r15.getQueryObjectEXT(t8, r15.QUERY_RESULT_EXT) / 1000000;
        }, t1.prototype.isQueryAvailable = function(t8, e11) {
            if (0 === e11) return !0;
            if (2 === e11) {
                var n13 = this.gl, r15 = this.getQueryTimerExtensionWebGL2(), o19 = n13.getQueryParameter(t8, n13.QUERY_RESULT_AVAILABLE);
                return null == this.disjoint && (this.disjoint = this.gl.getParameter(r15.GPU_DISJOINT_EXT)), o19 && !this.disjoint;
            }
            o19 = (r15 = this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t8, r15.QUERY_RESULT_AVAILABLE_EXT);
            return null == this.disjoint && (this.disjoint = this.gl.getParameter(r15.GPU_DISJOINT_EXT)), o19 && !this.disjoint;
        }, t1.prototype.pollFence = function(t8) {
            var e11 = this;
            return new Promise(function(n14) {
                e11.addItemToPoll(function() {
                    return t8.isFencePassed();
                }, function() {
                    return n14();
                });
            });
        }, t1.prototype.pollItems = function() {
            for(var t8 = function(t9) {
                for(var e11 = 0; e11 < t9.length; ++e11){
                    if (!t9[e11]()) break;
                }
                return e11 - 1;
            }(this.itemsToPoll.map(function(t9) {
                return t9.isDoneFn;
            })), e11 = 0; e11 <= t8; ++e11)this.itemsToPoll[e11].resolveFn();
            this.itemsToPoll = this.itemsToPoll.slice(t8 + 1);
        }, t1.prototype.addItemToPoll = function(t8, e11) {
            var n14 = this;
            this.itemsToPoll.push({
                isDoneFn: t8,
                resolveFn: e11
            }), this.itemsToPoll.length > 1 || F(function() {
                return n14.pollItems(), 0 === n14.itemsToPoll.length;
            });
        }, t1.prototype.bindTextureToFrameBuffer = function(t8) {
            this.throwIfDisposed(), Ce(this.gl, this.debug, t8, this.framebuffer), this.debug && Re(this.gl);
        }, t1.prototype.unbindTextureToFrameBuffer = function() {
            null != this.outputTexture ? (Ce(this.gl, this.debug, this.outputTexture, this.framebuffer), this.debug && Re(this.gl)) : Ee(this.gl, this.debug, this.framebuffer);
        }, t1.prototype.downloadMatrixDriver = function(t8, e11) {
            this.bindTextureToFrameBuffer(t8);
            var n14 = e11();
            return this.unbindTextureToFrameBuffer(), n14;
        }, t1.prototype.setOutputMatrixTextureDriver = function(t8, e11, n14) {
            this.throwIfDisposed();
            var r18 = this.gl;
            Ce(r18, this.debug, t8, this.framebuffer), this.debug && Re(r18), this.outputTexture = t8, Jt(r18, this.debug, function() {
                return r18.viewport(0, 0, e11, n14);
            }), Jt(r18, this.debug, function() {
                return r18.scissor(0, 0, e11, n14);
            });
        }, t1.prototype.setOutputMatrixWriteRegionDriver = function(t8, e11, n14, r18) {
            var o20 = this;
            this.throwIfDisposed(), Jt(this.gl, this.debug, function() {
                return o20.gl.scissor(t8, e11, n14, r18);
            });
        }, t1.prototype.throwIfDisposed = function() {
            if (this.disposed) throw new Error("Attempted to use disposed GPGPUContext.");
        }, t1.prototype.throwIfNoProgram = function() {
            if (null == this.program) throw new Error("No GPU program is currently set.");
        }, t1;
    }();
    function Pi(t1, e11) {
        if (t1.length !== e11.length) throw Error("Binary was compiled with " + t1.length + " inputs, but was executed with " + e11.length + " inputs");
        t1.forEach(function(t8, n14) {
            var r18 = t8.logicalShape, o20 = e11[n14], a19 = o20.shape;
            if (!S(r18, a19)) throw Error("Binary was compiled with different shapes than the current args. Shapes " + r18 + " and " + a19 + " must match");
            if (!t8.isUniform || !o20.isUniform) {
                var i18 = t8.texShape, s18 = o20.isUniform ? null : o20.texData.texShape;
                if (!S(i18, s18)) throw Error("Binary was compiled with different texture shapes than the current args. Shape " + i18 + " and " + s18 + " must match");
            }
        });
    }
    var Li = function(t1, e11, n14) {
        this.variableNames = [
            "A"
        ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t1;
        for(var r18 = n14.filterWidth, o20 = n14.inChannels, a19 = n14.strideWidth, i19 = n14.strideHeight, s19 = n14.padInfo, u7 = n14.outWidth, c4 = n14.dilationWidth, l6 = n14.dilationHeight, h5 = n14.dataFormat, f6 = s19.left, d7 = s19.top, p7 = o20 * r18, v7 = ua(), m8 = "channelsLast" === h5, g7 = m8 ? 0 : 1, y5 = m8 ? 1 : 2, x5 = "", b1 = 0; b1 <= 1; b1++)for(var w1 = 0; w1 <= 1; w1++)x5 += "\n          blockIndex = rc.y + " + w1 + ";\n          pos = rc.x + " + b1 + ";\n\n          if(blockIndex < " + t1[1] + " && pos < " + t1[0] + ") {\n            offsetY = int(blockIndex / (" + u7 + ")) * " + i19 + " - " + d7 + ";\n            d0 = offsetY + " + l6 + " * (pos / " + p7 + ");\n\n            if(d0 < " + e11[g7] + " && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), " + u7 + ".) * " + a19 + ". - " + f6 + ".);\n              d1 = offsetX + " + c4 + " * (int(mod(float(pos), " + p7 + ".) / " + o20 + ".));\n\n              if(d1 < " + e11[y5] + " && d1 >= 0) {\n\n                ch = int(mod(float(pos), " + o20 + ".));\n\n                if (" + m8 + ") {\n                  innerDims = vec2(d1, ch);\n                  result[" + (2 * b1 + w1) + "] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[" + (2 * b1 + w1) + "] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ";
        this.userCode = "\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        " + x5 + "\n\n        " + v7.output + " = result;\n      }\n    ";
    }, Wi = function(t1, e11, n14, r18, o20) {
        this.variableNames = [
            "x"
        ], this.outputShape = [];
        var a19, i19 = e11, s19 = t1[3] - 1;
        this.outputShape = t1;
        var u7 = "float(" + n14 + ") + float(" + r18 + ") * sum";
        a19 = 0.5 === o20 ? "inversesqrt(" + u7 + ")" : 1 === o20 ? "1.0/(" + u7 + ")" : "exp(log(" + u7 + ") * float(-" + o20 + "));", this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -" + i19 + "; j <= " + i19 + "; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  " + s19 + ") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * " + a19 + ";\n        setOutput(val);\n      }\n    ";
    }, Ui = function(t1, e11, n14, r18, o20) {
        this.variableNames = [
            "inputImage",
            "outputImage",
            "dy"
        ], this.outputShape = [], this.outputShape = t1, this.depth = t1[3], this.depthRadius = e11, this.bias = n14, this.alpha = r18, this.beta = o20, this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < " + this.depth + "; ++d) {\n          int depthBegin = int(max(0.0, float(d - " + e11 + ")));\n          int depthEnd = int(min(float(" + this.depth + "),\n              float(d + " + e11 + " + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = " + this.depth + ";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(" + r18 + ") * norm + float(" + n14 + ");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(" + r18 + ")\n                * float(" + o20 + ")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * " + o20 + ");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    ";
    }, Vi = function(t1, e11, n14, r18, o20) {
        this.variableNames = [
            "x"
        ], this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0;
        var a19, i19 = e11, s19 = t1[3] - 1;
        this.outputShape = t1;
        var u7 = "float(" + n14 + ") + float(" + r18 + ") * sum";
        a19 = 0.5 === o20 ? "inversesqrt(" + u7 + ")" : 1 === o20 ? "1.0/(" + u7 + ")" : "exp(log(" + u7 + ") * float(-" + o20 + "));", this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < " + this.outputShape[3] + ";\n        bool hasNextRow = c < " + this.outputShape[2] + ";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - " + i19 + ";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - " + i19 + "; j <= " + i19 + "; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(" + s19 + "));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * " + a19 + ";\n        setOutput(result);\n      }\n    ";
    }, zi = function(t1) {
        this.variableNames = [
            "dy",
            "maxPos"
        ], this.outputShape = t1.inShape;
        var e11 = t1.strideHeight, n14 = t1.strideWidth, r18 = t1.dilationHeight, o20 = t1.effectiveFilterHeight, a19 = t1.effectiveFilterWidth, i19 = o20 - 1 - t1.padInfo.top, s19 = a19 - 1 - t1.padInfo.left, u7 = o20 * a19 - 1;
        this.userCode = "\n      const ivec2 pads = ivec2(" + i19 + ", " + s19 + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + o20 + ";\n          wR += " + r18 + ") {\n          float dyR = float(dyRCorner + wR) / " + e11 + ".0;\n\n          if (dyR < 0.0 || dyR >= " + t1.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + a19 + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + n14 + ".0;\n\n            if (dyC < 0.0 || dyC >= " + t1.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = " + u7 + " - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * " + a19 + " + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }, Gi = function(t1) {
        this.variableNames = [
            "dy",
            "maxPos"
        ], this.outputShape = t1.inShape;
        var e11 = t1.strideDepth, n14 = t1.strideHeight, r18 = t1.strideWidth, o20 = t1.dilationDepth, a19 = t1.dilationHeight, i19 = t1.dilationWidth, s19 = t1.effectiveFilterDepth, u7 = t1.effectiveFilterHeight, c4 = t1.effectiveFilterWidth, l6 = s19 - 1 - t1.padInfo.front, h5 = u7 - 1 - t1.padInfo.top, f6 = c4 - 1 - t1.padInfo.left, d7 = s19 * u7 * c4 - 1;
        this.userCode = "\n      const ivec3 pads = ivec3(" + l6 + ", " + h5 + ", " + f6 + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < " + s19 + ";\n           wD += " + o20 + ") {\n          float dyD = float(dyDCorner + wD) / " + e11 + ".0;\n\n          if (dyD < 0.0 || dyD >= " + t1.outDepth + ".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < " + u7 + ";\n              wR += " + a19 + ") {\n            float dyR = float(dyRCorner + wR) / " + n14 + ".0;\n\n            if (dyR < 0.0 || dyR >= " + t1.outHeight + ".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < " + c4 + ";\n                wC += " + i19 + ") {\n              float dyC = float(dyCCorner + wC) / " + r18 + ".0;\n\n              if (dyC < 0.0 || dyC >= " + t1.outWidth + ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = " + d7 + " -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * " + u7 + " * " + c4 + " +\n                  wR * " + c4 + " + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    }, Hi = function(t1, e11, n14, r18, o20, a19, i19) {
        (void 0) === n14 && (n14 = !1), (void 0) === r18 && (r18 = !1), (void 0) === o20 && (o20 = !1), (void 0) === a19 && (a19 = null), (void 0) === i19 && (i19 = !1), this.variableNames = [
            "matrixA",
            "matrixB"
        ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e11;
        var s19 = n14 ? t1[1] : t1[2], u7 = Math.ceil(s19 / 2), c4 = n14 ? "i * 2, rc.y" : "rc.y, i * 2", l6 = r18 ? "rc.z, i * 2" : "i * 2, rc.z", h5 = n14 ? [
            "a.xxyy",
            "a.zzww"
        ] : [
            "a.xxzz",
            "a.yyww"
        ], f6 = r18 ? [
            "b.xzxz",
            "b.ywyw"
        ] : [
            "b.xyxy",
            "b.zwzw"
        ], d7 = "", p7 = "";
        a19 && (d7 = i19 ? "vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          " + a19 + "\n        }" : "vec4 activation(vec4 x) {\n          " + a19 + "\n        }", p7 = "result = activation(result);");
        var v7 = o20 ? "result += getBiasAtOutCoords();" : "";
        o20 && this.variableNames.push("bias"), i19 && this.variableNames.push("preluActivationWeights"), this.userCode = "\n      " + d7 + "\n\n      const float sharedDimension = " + u7 + ".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < " + u7 + "; i++) {\n          vec4 a = getMatrixA(rc.x, " + c4 + ");\n          vec4 b = getMatrixB(rc.x, " + l6 + ");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (" + h5[0] + " * " + f6[0] + ");\n          result += (" + h5[1] + " * " + f6[1] + ");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        " + v7 + "\n\n        " + p7 + "\n\n        setOutput(result);\n      }\n    ";
    }, qi = function() {
        function t1(t8, e11, n14) {
            this.variableNames = [
                "probs"
            ], this.outputShape = [
                t8,
                n14
            ], this.userCode = "\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < " + (e11 - 1) + "; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(" + (e11 - 1) + "));\n      }\n    ";
        }
        return t1.prototype.getCustomSetupFunc = function(t8) {
            var e11 = this;
            return function(n14, r18) {
                null == e11.seedLoc && (e11.seedLoc = n14.getUniformLocation(r18, "seed")), n14.gl.uniform1f(e11.seedLoc, t8);
            };
        }, t1;
    }(), Ki = function(t1, e11, n14, r18) {
        this.variableNames = [
            "indices"
        ], this.outputShape = [
            t1,
            e11
        ], this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(" + r18 + "), float(" + n14 + "),\n                      float(index == coords.y)));\n      }\n    ";
    }, ji = function(t1) {
        this.variableNames = [
            "A"
        ], this.packedInputs = !1, this.packedOutput = !0, this.outputShape = t1;
        var e11 = t1.length;
        if (0 === e11) this.userCode = "\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";
        else {
            var n14 = sa("rc", e11), r18 = wa(e11), o20 = function(t8, e12, n15) {
                if (1 === t8) return "rc > " + e12[0];
                for(var r19 = "", o21 = t8 - 2; o21 < t8; o21++)r19 += n15[o21] + " >= " + e12[o21], o21 < t8 - 1 && (r19 += "||");
                return r19;
            }(e11, t1, n14), a19 = function(t8, e12, n15, r19) {
                if (1 === t8) return "";
                var o21 = r19.slice(-2);
                return "\n    int r = " + o21[0] + ";\n    int c = " + o21[1] + ";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= " + e12 + ";\n    bool rEdge = rp1 >= " + n15 + ";\n  ";
            }(e11, t1[t1.length - 1], t1[t1.length - 2], n14), i19 = function(t8, e12) {
                var n15 = t8.length, r19 = function(t9, e13) {
                    for(var n16 = [], r20 = 0; r20 <= 1; r20++)for(var o21 = 0; o21 <= 1; o21++){
                        for(var a20 = (0 === r20 ? "r" : "rp1") + ", " + (0 === o21 ? "c" : "cp1"), i20 = 2; i20 < t9; i20++)a20 = e13[e13.length - 1 - i20] + "," + a20;
                        n16.push(a20);
                    }
                    return n16;
                }(n15, e12);
                return 1 === n15 ? "getA(rc),\n            rc + 1 >= " + t8[0] + " ? 0. : getA(rc + 1),\n            0, 0" : "getA(" + r19[0] + "),\n          cEdge ? 0. : getA(" + r19[1] + "),\n          rEdge ? 0. : getA(" + r19[2] + "),\n          rEdge || cEdge ? 0. : getA(" + r19[3] + ")";
            }(t1, n14);
            this.userCode = "\n        void main() {\n          " + r18 + " rc = getOutputCoords();\n\n          if(" + o20 + ") {\n            setOutput(vec4(0));\n          } else {\n            " + a19 + "\n\n            setOutput(vec4(" + i19 + "));\n          }\n        }\n      ";
        }
    };
    var Xi = function(t1, e11, n15) {
        this.variableNames = [
            "x"
        ], this.outputShape = e11.map(function(e12, n16) {
            return e12[0] + t1[n16] + e12[1];
        });
        var r19 = t1.length, o21 = wa(r19), a21 = e11.map(function(t8) {
            return t8[0];
        }).join(","), i21 = e11.map(function(e12, n16) {
            return e12[0] + t1[n16];
        }).join(","), s19 = [
            "coords[0]",
            "coords[1]",
            "coords[2]",
            "coords[3]"
        ].slice(0, r19);
        this.userCode = 1 !== r19 ? "\n      " + o21 + " start = " + o21 + "(" + a21 + ");\n      " + o21 + " end = " + o21 + "(" + i21 + ");\n\n      void main() {\n        " + o21 + " outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(" + n15 + "));\n        } else {\n          " + o21 + " coords = outC - start;\n          setOutput(getX(" + s19 + "));\n        }\n      }\n    " : "\n        int start = " + a21 + ";\n        int end = " + i21 + ";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(" + n15 + "));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      ";
    }, Yi = function(t1, e11, n15) {
        this.variableNames = [
            "x"
        ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e11.map(function(e12, n16) {
            return e12[0] + t1[n16] + e12[1];
        });
        for(var r19 = t1.length, o21 = wa(r19), a21 = e11.map(function(t8) {
            return t8[0];
        }).join(","), i21 = e11.map(function(e12, n16) {
            return e12[0] + t1[n16];
        }).join(","), s19 = sa("rc", r19), u7 = sa("source", r19), c4 = s19[r19 - 1] + " < " + this.outputShape[r19 - 1], l6 = 1 === r19 ? "source" : "vec2(" + u7.slice(-2).join() + ")", h5 = [
            o21 + " rc = outputLoc;",
            s19[r19 - 1] + " += 1;\n       if(" + c4 + ") {\n      ",
            1 === r19 ? "" : "}\n       rc = outputLoc;\n       " + s19[r19 - 2] + " += 1;\n       if(" + s19[r19 - 2] + " < " + this.outputShape[r19 - 2] + ") {",
            1 === r19 ? "" : "  " + s19[r19 - 1] + " += 1;\n         if(" + c4 + ") {"
        ], f6 = 1 === r19 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))", d7 = "", p7 = 0, v7 = 1 === r19 ? 2 : 4; p7 < v7; p7++)d7 += "\n        " + h5[p7] + "\n        if (" + f6 + ") {\n          result[" + p7 + "] = float(" + n15 + ");\n        } else {\n          " + o21 + " source = rc - start;\n          result[" + p7 + "] = getChannel(getX(" + u7.join() + "), " + l6 + ");\n        }\n      ";
        d7 += 1 === r19 ? "} " : "}}", this.userCode = "\n      const " + o21 + " start = " + o21 + "(" + a21 + ");\n      const " + o21 + " end = " + o21 + "(" + i21 + ");\n\n      void main() {\n        " + o21 + " outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        " + d7 + "\n        setOutput(result);\n      }\n    ";
    }, $i = function(t1, e11, n15) {
        if (this.variableNames = [
            "x"
        ], "avg" === e11 && n15) throw new Error("Cannot compute positions for average pool.");
        var r19 = t1.filterWidth, o21 = t1.strideHeight, a21 = t1.strideWidth, i21 = t1.dilationHeight, s19 = t1.dilationWidth, u7 = t1.effectiveFilterHeight, c4 = t1.effectiveFilterWidth, l6 = t1.padInfo.top, h5 = t1.padInfo.left;
        this.outputShape = t1.outShape;
        var f6 = "avg" === e11, d7 = "0.0";
        if (f6 || (d7 = "-1.0 / 1e-20"), n15) this.userCode = "\n        const ivec2 strides = ivec2(" + o21 + ", " + a21 + ");\n        const ivec2 pads = ivec2(" + l6 + ", " + h5 + ");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < " + u7 + ";\n              wR += " + i21 + ") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " + t1.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + c4 + ";\n                wC += " + s19 + ") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= " + t1.inWidth + ") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * " + c4 + " + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";
        else {
            var p7 = e11 + "(" + e11 + "(" + e11 + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
            "avg" === e11 && (p7 = "avgValue / count");
            var v7 = 4 * Math.floor(r19 / 4), m8 = r19 % 4, g7 = "\n      if (" + f6 + ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";
            this.userCode = "\n      const ivec2 strides = ivec2(" + o21 + ", " + a21 + ");\n      const ivec2 pads = ivec2(" + l6 + ", " + h5 + ");\n      const float initializationValue = " + d7 + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= " + t1.inWidth + ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" + d7 + ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < " + u7 + ";\n            wR += " + i21 + ") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= " + t1.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + v7 + "; wC += 4) {\n            int xC = xCCorner + wC * " + s19 + ";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + s19 + ", d),\n              getValue(batch, xR, xC + 2 * " + s19 + ", d),\n              getValue(batch, xR, xC + 3 * " + s19 + ", d)\n            );\n\n            " + g7 + "\n          }\n\n          int xC = xCCorner + " + v7 + ";\n          if (" + (1 === m8) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            " + g7 + "\n          } else if (" + (2 === m8) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + s19 + ", d),\n              initializationValue,\n              initializationValue\n            );\n\n            " + g7 + "\n          } else if (" + (3 === m8) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + s19 + ", d),\n              getValue(batch, xR, xC + 2 * " + s19 + ", d),\n              initializationValue\n            );\n\n            " + g7 + "\n          }\n        }\n        setOutput(" + p7 + ");\n      }\n    ";
        }
    }, Qi = function(t1, e11, n15) {
        if (this.variableNames = [
            "x"
        ], "avg" === e11 && n15) throw new Error("Cannot compute positions for average pool.");
        var r19 = t1.filterWidth, o21 = t1.strideDepth, a21 = t1.strideHeight, i21 = t1.strideWidth, s19 = t1.dilationDepth, u7 = t1.dilationHeight, c4 = t1.dilationWidth, l6 = t1.effectiveFilterDepth, h5 = t1.effectiveFilterHeight, f6 = t1.effectiveFilterWidth, d7 = t1.padInfo.front, p8 = t1.padInfo.top, v8 = t1.padInfo.left;
        this.outputShape = t1.outShape;
        var m9 = "avg" === e11, g8 = "0.0";
        if (m9 || (g8 = "-1.0 / 1e-20"), n15) this.userCode = "\n        const ivec3 strides =\n            ivec3(" + o21 + ", " + a21 + ", " + i21 + ");\n        const ivec3 pads = ivec3(" + d7 + ", " + p8 + ", " + v8 + ");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < " + l6 + ";\n              wD += " + s19 + ") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= " + t1.inDepth + ") {\n              continue;\n            }\n\n            for (int wR = 0; wR < " + h5 + ";\n                wR += " + u7 + ") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= " + t1.inHeight + ") {\n                continue;\n              }\n\n              for (int wC = 0; wC < " + f6 + ";\n                  wC += " + c4 + ") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= " + t1.inWidth + ") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition =\n                      wD * " + h5 + " * " + f6 + " +\n                      wR * " + f6 + " + wC;;\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";
        else {
            var y5 = e11 + "(" + e11 + "(" + e11 + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
            "avg" === e11 && (y5 = "avgValue / count");
            var x5 = 4 * Math.floor(r19 / 4), b1 = r19 % 4, w1 = "\n      if (" + m9 + ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";
            this.userCode = "\n      const ivec3 strides =\n        ivec3(" + o21 + ", " + a21 + ", " + i21 + ");\n      const ivec3 pads = ivec3(" + d7 + ", " + p8 + ", " + v8 + ");\n      const float initializationValue = " + g8 + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= " + t1.inWidth + ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" + g8 + ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < " + l6 + ";\n            wD += " + s19 + ") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= " + t1.inDepth + ") {\n            continue;\n          }\n\n          for (int wR = 0; wR < " + h5 + ";\n            wR += " + u7 + ") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " + t1.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + x5 + "; wC += 4) {\n              int xC = xCCorner + wC * " + c4 + ";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " + c4 + ", ch),\n                getValue(batch, xD, xR, xC + 2 * " + c4 + ", ch),\n                getValue(batch, xD, xR, xC + 3 * " + c4 + ", ch)\n              );\n\n              " + w1 + "\n            }\n\n            int xC = xCCorner + " + x5 + ";\n            if (" + (1 === b1) + ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              " + w1 + "\n            } else if (" + (2 === b1) + ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " + c4 + ", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              " + w1 + "\n            } else if (" + (3 === b1) + ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " + c4 + ", ch),\n                getValue(batch, xD, xR, xC + 2 * " + c4 + ", ch),\n                initializationValue\n              );\n\n              " + w1 + "\n            }\n          }\n          setOutput(" + y5 + ");\n        }\n      }\n    ";
        }
    }, Ji = function(t1, e11) {
        this.variableNames = [
            "x"
        ];
        var n15 = t1.windowSize, r19 = t1.batchSize, o21 = t1.inSize, a21 = Math.ceil(o21 / n15);
        this.outputShape = [
            r19,
            a21
        ];
        var i21 = "0.0", s19 = "";
        "prod" === e11 ? i21 = "1.0" : "min" === e11 ? (i21 = "1.0 / 1e-20", s19 = "min") : "max" === e11 && (i21 = "-1.0 / 1e-20", s19 = "max");
        var u7 = e11 + "(" + e11 + "(" + e11 + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
        "sum" === e11 ? u7 = "sumValue" : "prod" === e11 ? u7 = "prodValue" : "all" === e11 ? u7 = "allValue" : "any" === e11 && (u7 = "anyValue");
        var c4 = 4 * Math.floor(n15 / 4), l6 = n15 % 4, h5 = "\n      if (" + ("sum" === e11) + ") {\n        sumValue += dot(values, ones);\n      } else if (" + ("prod" === e11) + ") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = " + s19 + "(values, minMaxValue);\n      }\n    ", f6 = "vec4";
        "all" === e11 ? (i21 = "1.0", h5 = "\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ", f6 = "bvec4") : "any" === e11 && (i21 = "0.0", h5 = "\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ", f6 = "bvec4");
        var d7 = "";
        o21 % n15 > 0 && (d7 = "\n        if (inIdx < 0 || inIdx >= " + o21 + ") {\n          return initializationValue;\n        }\n      "), this.userCode = "\n      const float initializationValue = " + i21 + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        " + d7 + "\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + n15 + ";\n\n        vec4 minMaxValue = vec4(" + i21 + ");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < " + c4 + "; i += 4) {\n          int inIdx = inOffset + i;\n          " + f6 + " values = " + f6 + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          " + h5 + "\n        }\n\n        int inIdx = inOffset + " + c4 + ";\n        if (" + (1 === l6) + ") {\n          " + f6 + " values = " + f6 + "(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          " + h5 + "\n        } else if (" + (2 === l6) + ") {\n          " + f6 + " values = " + f6 + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          " + h5 + "\n        } else if (" + (3 === l6) + ") {\n          " + f6 + " values = " + f6 + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          " + h5 + "\n        }\n        setOutput(" + u7 + ");\n      }\n    ";
    }, Zi = function(t1, e11) {
        this.variableNames = [
            "A"
        ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t1;
        for(var n15 = "", r19 = 0; r19 < 4; r19++){
            var o21 = "thisRC = rc;";
            r19 % 2 == 1 && (o21 += "thisRC.z += 1;"), r19 > 1 && (o21 += "thisRC.y += 1;"), n15 += "\n        " + o21 + "\n        " + (r19 > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : "") + "\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[" + r19 + "] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        " + (r19 > 0 ? "}" : "") + "\n      ";
        }
        this.userCode = "\n      \n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      " + ca([
            "r",
            "c",
            "d"
        ], e11) + "\n      return ivec3(r, c, d);\n    }\n  \n      " + la(t1) + "\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = " + t1[1] + ";\n        int cols = " + t1[2] + ";\n\n        " + n15 + "\n\n        setOutput(result);\n      }\n    ";
    };
    var ts = function(t1, e11, n15) {
        this.variableNames = [
            "dy"
        ], this.outputShape = [], this.outputShape = e11.shape;
        var r19 = e11.shape, o22 = r19[1], a21 = r19[2], i21 = t1.shape, s19 = i21[1], u7 = i21[2], c4 = [
            n15 && s19 > 1 ? o22 - 1 : o22,
            n15 && u7 > 1 ? a21 - 1 : a21
        ], l6 = [
            n15 && s19 > 1 ? s19 - 1 : s19,
            n15 && u7 > 1 ? u7 - 1 : u7
        ], h5 = c4[0] / l6[0], f6 = c4[1] / l6[1], d7 = 1 / h5, p8 = 1 / f6, v8 = 2 * Math.ceil(d7) + 2, m9 = 2 * Math.ceil(p8) + 2;
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" + h5 + ");\n        const float widthScale = float(" + f6 + ");\n\n        const float invHeightScale = float(" + d7 + ");\n        const float invWidthScale = float(" + p8 + ");\n\n        const int winHeight = int(" + v8 + ");\n        const int winWidth = int(" + m9 + ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " + s19 + ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " + u7 + ") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), " + (o22 - 1) + ".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), " + (a21 - 1) + ".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
    }, es = function(t1, e11, n15, r19) {
        this.variableNames = [
            "A"
        ], this.outputShape = [];
        var o22 = t1[0], a21 = t1[1], i21 = t1[2], s19 = t1[3];
        this.outputShape = [
            o22,
            e11,
            n15,
            s19
        ];
        var u7 = [
            r19 && e11 > 1 ? a21 - 1 : a21,
            r19 && n15 > 1 ? i21 - 1 : i21
        ], c4 = [
            r19 && e11 > 1 ? e11 - 1 : e11,
            r19 && n15 > 1 ? n15 - 1 : n15
        ];
        this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + u7[0] / c4[0] + ",\n          " + u7[1] / c4[1] + ");\n      const vec2 inputShapeRC = vec2(" + a21 + ".0, " + i21 + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    ";
    }, ns = function(t1, e11, n15, r19) {
        this.variableNames = [
            "A"
        ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [];
        var o22 = t1[0], a21 = t1[1], i21 = t1[2], s19 = t1[3];
        this.outputShape = [
            o22,
            e11,
            n15,
            s19
        ];
        var u7 = [
            r19 && e11 > 1 ? a21 - 1 : a21,
            r19 && n15 > 1 ? i21 - 1 : i21
        ], c4 = [
            r19 && e11 > 1 ? e11 - 1 : e11,
            r19 && n15 > 1 ? n15 - 1 : n15
        ];
        this.userCode = "\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          " + u7[0] / c4[0] + ",\n          " + u7[1] / c4[1] + ",\n          " + u7[1] / c4[1] + ");\n      const vec3 inputShapeRC = vec3(" + a21 + ".0, " + i21 + ".0,\n                                     " + i21 + ".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < " + (s19 - 1) + ";\n        bool hasNextRow = coords.z < " + (n15 - 1) + ";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    ";
    }, rs = function(t1, e11, n15) {
        this.variableNames = [
            "dy"
        ], this.outputShape = [], this.outputShape = e11.shape;
        var r19 = e11.shape, o22 = r19[1], a21 = r19[2], i21 = t1.shape, s19 = i21[1], u7 = i21[2], c4 = [
            n15 && s19 > 1 ? o22 - 1 : o22,
            n15 && u7 > 1 ? a21 - 1 : a21
        ], l6 = [
            n15 && s19 > 1 ? s19 - 1 : s19,
            n15 && u7 > 1 ? u7 - 1 : u7
        ], h5 = c4[0] / l6[0], f6 = c4[1] / l6[1], d7 = 1 / h5, p8 = 1 / f6, v8 = 2 * Math.ceil(d7) + 2, m9 = 2 * Math.ceil(p8) + 2;
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" + h5 + ");\n        const float widthScale = float(" + f6 + ");\n\n        const float invHeightScale = float(" + d7 + ");\n        const float invWidthScale = float(" + p8 + ");\n\n        const int winHeight = int(" + v8 + ");\n        const int winWidth = int(" + m9 + ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " + s19 + ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " + u7 + ") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(" + c4[0] + ") *\n                (float(dyR) / float(" + l6[0] + "));\n\n            float sourceFracCol =\n                float(" + c4[1] + ") *\n                  (float(dyC) / float(" + l6[1] + "));\n\n            int sourceNearestRow = int(min(\n                float(int(" + o22 + ") - 1),\n                " + n15 + " ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(" + a21 + ") - 1),\n                " + n15 + " ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
    }, os = function(t1, e11, n15, r19) {
        this.variableNames = [
            "A"
        ], this.outputShape = [];
        var o22 = t1[0], a21 = t1[1], i21 = t1[2], s19 = t1[3];
        this.outputShape = [
            o22,
            e11,
            n15,
            s19
        ];
        var u7 = [
            r19 && e11 > 1 ? a21 - 1 : a21,
            r19 && n15 > 1 ? i21 - 1 : i21
        ], c4 = [
            r19 && e11 > 1 ? e11 - 1 : e11,
            r19 && n15 > 1 ? n15 - 1 : n15
        ], l6 = r19 ? "0.5" : "0.0";
        this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + u7[0] / c4[0] + ",\n          " + u7[1] / c4[1] + ");\n      const vec2 inputShapeRC = vec2(" + a21 + ".0, " + i21 + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + " + l6 + ")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    ";
    }, as = function(t1, e11) {
        this.variableNames = [
            "x"
        ];
        var n15 = t1.length;
        if (n15 > 4) throw new Error("WebGL backend: Reverse of rank-" + n15 + " tensor is not yet supported");
        if (this.outputShape = t1, 1 !== n15) {
            var r19 = t1.map(function(n16, r20) {
                return (function(n17) {
                    return -1 !== e11.indexOf(n17) && 1 !== t1[n17] ? t1[n17] + " - coords[" + n17 + "] - 1" : "coords[" + n17 + "]";
                })(r20);
            }).join(","), o22 = wa(n15);
            this.userCode = "\n      void main() {\n        " + o22 + " coords = getOutputCoords();\n        setOutput(getX(" + r19 + "));\n      }\n    ";
        } else this.userCode = "\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(" + t1[0] + " - coord - 1));\n        }\n      ";
    }, is = function(t1, e11) {
        this.variableNames = [
            "x"
        ], this.packedInputs = !0, this.packedOutput = !0;
        var n15 = t1.length;
        if (n15 > 4) throw new Error("WebGL backend: Reverse of rank-" + n15 + " tensor is not yet supported");
        this.outputShape = t1;
        var r20 = sa("rc", n15), o23 = r20[n15 - 1] + " + 1 < " + this.outputShape[n15 - 1], a21 = r20[n15 - 2] + " + 1 < " + this.outputShape[n15 - 2], i21 = wa(n15);
        function s19(n16) {
            var r21 = t1.map(function(r22, o24) {
                return (function(n17, r23) {
                    return -1 !== e11.indexOf(n17) && 1 !== t1[n17] ? t1[n17] + " - " + r23[n17] + " - 1" : "" + r23[n17];
                })(o24, n16);
            });
            return "getChannel(getX(" + r21.join(",") + "), vec2(" + r21.slice(-2).join(",") + "))";
        }
        this.userCode = 1 === n15 ? "\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(" + t1[0] + " - rc - 1),\n            " + t1[0] + " - rc - 1);\n          if(" + o23 + "){\n              result.g = getChannel(getX(" + t1[0] + " - (rc  + 1) - 1),\n                " + t1[0] + " - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      " : "\n        void main() {\n          " + i21 + " rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = " + (function(t8) {
            return s19(t8);
        })(r20.slice()) + ";\n          if(" + o23 + "){\n            result.g = " + (function(t8) {
            return t8[n15 - 1] = "(" + t8[n15 - 1] + " + 1)", s19(t8);
        })(r20.slice()) + ";\n          }\n          if(" + a21 + ") {\n            result.b = " + (function(t8) {
            return t8[n15 - 2] = "(" + t8[n15 - 2] + " + 1)", s19(t8);
        })(r20.slice()) + ";\n            if(" + o23 + ") {\n              result.a = " + (function(t8) {
            return t8[n15 - 1] = "(" + t8[n15 - 1] + " + 1)", t8[n15 - 2] = "(" + t8[n15 - 2] + " + 1)", s19(t8);
        })(r20.slice()) + ";\n            }\n          }\n          setOutput(result);\n        }\n    ";
    }, ss = function(t1, e11, n15, r20, o23, a21, i21) {
        this.variableNames = [
            "updates",
            "indices",
            "defaultValue"
        ], this.outputShape = a21;
        var s19 = wa(o23.length), u7 = wa(a21.length), c4 = "";
        1 === n15 ? c4 = "i" : 2 === n15 && (c4 = "i, j");
        var l6 = "getIndices(" + c4 + ")", h5 = "";
        1 === r20 ? h5 = "i" : 2 === r20 && (h5 = "i, coords[1]");
        var f6 = "getUpdates(" + h5 + ")", d7 = e11 > 1 ? "strides[j]" : "strides";
        this.userCode = "\n        " + s19 + " strides = " + s19 + "(" + o23 + ");\n\n        void main() {\n          " + u7 + " coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < " + t1 + "; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < " + e11 + "; j++) {\n              int index = round(" + l6 + ");\n              flattenedIndex += index * " + d7 + ";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += " + f6 + ";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      ";
    }, us = function(t1, e11) {
        this.variableNames = [
            "x",
            "segmentIds"
        ];
        var n15 = t1.windowSize, r20 = t1.batchSize, o23 = t1.inSize, a21 = t1.numSegments, i21 = a21 * Math.ceil(o23 / n15);
        this.outputShape = [
            r20,
            i21
        ];
        var s19 = 4 * Math.floor(n15 / 4), u7 = n15 % 4, c4 = "\n        sumValue += dot(values, segFilter);\n    ", l6 = "";
        o23 % n15 > 0 && (l6 = "\n        if (inIdx < 0 || inIdx >= " + o23 + ") {\n          return initializationValue;\n        }\n      ");
        var h5 = "";
        o23 % n15 > 0 && (h5 = "\n        if (inIdx < 0 || inIdx >= " + o23 + ") {\n          return -1.0;\n        }\n      "), this.userCode = "\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        " + l6 + "\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        " + h5 + "\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          " + a21 + ")) * float(" + n15 + "));\n        int currentSeg = int(mod(float(outIdx), float(" + a21 + ")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < " + s19 + "; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          " + c4 + "\n        }\n\n        int inIdx = inOffset + " + s19 + ";\n        if (" + (1 === u7) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          " + c4 + "\n        } else if (" + (2 === u7) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          " + c4 + "\n        } else if (" + (3 === u7) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          " + c4 + "\n        }\n        setOutput(sumValue);\n      }\n    ";
    }, cs = function(t1, e11, n15) {
        var r20, o23;
        if (this.variableNames = [
            "c",
            "a",
            "b"
        ], this.outputShape = e11, n15 > 4) throw Error("Where for rank " + n15 + " is not yet supported");
        if (1 === n15) o23 = "resRC", r20 = "resRC";
        else {
            for(var a21 = [
                "resRC.x",
                "resRC.y",
                "resRC.z",
                "resRC.w"
            ], i21 = [], s19 = [], u7 = 0; u7 < e11.length; u7++)s19.push("" + a21[u7]), u7 < t1 && i21.push("" + a21[u7]);
            r20 = i21.join(), o23 = s19.join();
        }
        var c4 = wa(n15);
        this.userCode = "\n      void main() {\n        " + c4 + " resRC = getOutputCoords();\n        float cVal = getC(" + r20 + ");\n        if (cVal >= 1.0) {\n          setOutput(getA(" + o23 + "));\n        } else {\n          setOutput(getB(" + o23 + "));\n        }\n      }\n    ";
    }, ls = function() {
        function t1(t8) {
            this.variableNames = [
                "source"
            ], this.outputShape = t8, this.rank = t8.length;
            var e11, n15 = wa(this.rank), r20 = "uniform int start[" + this.rank + "];", o23 = function(t9) {
                if (1 === t9) return "sourceLoc";
                if (t9 <= 6) return hs.slice(0, t9).map(function(t10) {
                    return "sourceLoc." + t10;
                }).join(",");
                throw Error("Slicing for rank " + t9 + " is not yet supported");
            }(this.rank);
            e11 = "\n        " + n15 + " sourceLoc;\n        " + n15 + " coords = getOutputCoords();\n        " + t8.map(function(t9, e12) {
                return "sourceLoc." + hs[e12] + " = start[" + e12 + "] + coords." + hs[e12] + ";";
            }).join("\n") + "\n      ", this.userCode = "\n      " + r20 + "\n      void main() {\n        " + e11 + "\n        setOutput(getSource(" + o23 + "));\n      }\n    ";
        }
        return t1.prototype.getCustomSetupFunc = function(t8) {
            var e11 = this;
            if (t8.length !== this.rank) throw Error("The rank (" + this.rank + ") of the program must match the length of start (" + t8.length + ")");
            return function(n15, r20) {
                null == e11.startLoc && (e11.startLoc = n15.getUniformLocationNoThrow(r20, "start"), null == e11.startLoc) || n15.gl.uniform1iv(e11.startLoc, t8);
            };
        }, t1;
    }(), hs = [
        "x",
        "y",
        "z",
        "w",
        "u",
        "v"
    ];
    var fs = function() {
        function t1(t8) {
            this.variableNames = [
                "source"
            ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t8, this.rank = t8.length;
            var e11 = wa(this.rank), n15 = sa("coords", this.rank), r20 = sa("sourceLoc", this.rank), o23 = 1 === this.rank ? "sourceLoc" : "vec2(" + r20.slice(-2).join() + ")", a22 = "getChannel(getSource(" + r20.join() + "), " + o23 + ")", i22 = "\n      result.x = " + a22 + ";\n      if (++" + n15[this.rank - 1] + " < " + t8[this.rank - 1] + ") {\n        ++" + r20[this.rank - 1] + ";\n        result.y = " + a22 + ";\n        --" + r20[this.rank - 1] + ";\n      }\n    ", s20 = 1 === this.rank ? "" : "\n      --" + n15[this.rank - 1] + ";\n      if (++" + n15[this.rank - 2] + " < " + t8[this.rank - 2] + ") {\n        ++" + r20[this.rank - 2] + ";\n        result.z = " + a22 + ";\n        if (++" + n15[this.rank - 1] + " < " + t8[this.rank - 1] + ") {\n          ++" + r20[this.rank - 1] + ";\n          result.w = " + a22 + ";\n        }\n      }\n    ", u8 = this.rank <= 4 ? "sourceLoc = coords +\n            " + e11 + "(" + t8.map(function(t9, e12) {
                return "start[" + e12 + "]";
            }).join() + ");" : t8.map(function(t9, e12) {
                return r20[e12] + " = " + n15[e12] + " + start[" + e12 + "];";
            }).join("\n");
            this.userCode = "\n      uniform int start[" + this.rank + "];\n      void main() {\n        " + e11 + " coords = getOutputCoords();\n        " + e11 + " sourceLoc;\n        " + u8 + "\n        vec4 result = vec4(0.);\n        " + i22 + "\n        " + s20 + "\n        setOutput(result);\n      }\n    ";
        }
        return t1.prototype.getCustomSetupFunc = function(t8) {
            var e11 = this;
            if (t8.length !== this.rank) throw Error("The rank (" + this.rank + ") of the program must match the length of start (" + t8.length + ")");
            return function(n15, r20) {
                null == e11.startLoc && (e11.startLoc = n15.getUniformLocationNoThrow(r20, "start"), null == e11.startLoc) || n15.gl.uniform1iv(e11.startLoc, t8);
            };
        }, t1;
    }(), ds = function(t1, e11, n15) {
        this.variableNames = [
            "x"
        ], this.outputShape = n15;
        var r20 = n15.length, o23 = wa(n15.length), a22 = wa(n15.length), i22 = "";
        if (1 === r20) i22 = "coords * strides + begin";
        else {
            var s20 = 0;
            i22 = n15.map(function(t8, e12) {
                return s20++, 1 === n15.length ? "coords * strides[" + e12 + "] + begin[" + e12 + "]" : "coords[" + (s20 - 1) + "] * strides[" + e12 + "] + begin[" + e12 + "]";
            }).join(",");
        }
        this.userCode = "\n      " + o23 + " begin = " + o23 + "(" + t1 + ");\n      " + o23 + " strides = " + o23 + "(" + e11 + ");\n\n      void main() {\n        " + a22 + " coords = getOutputCoords();\n        setOutput(getX(" + i22 + "));\n      }\n    ";
    }, ps = function() {
        function t1(t8) {
            this.gpgpu = t8, this.numUsedTextures = 0, this.numFreeTextures = 0, this.freeTextures = {
            }, this.logEnabled = !1, this.usedTextures = {
            };
        }
        return t1.prototype.acquireTexture = function(t8, e11, n15) {
            var r20, o23 = vs(e11, n15), a22 = ms(t8, o23, n15);
            if (a22 in this.freeTextures || (this.freeTextures[a22] = []), a22 in this.usedTextures || (this.usedTextures[a22] = []), this.freeTextures[a22].length > 0) {
                this.numFreeTextures--, this.numUsedTextures++, this.log();
                var i22 = this.freeTextures[a22].shift();
                return this.usedTextures[a22].push(i22), i22;
            }
            return this.numUsedTextures++, this.log(), o23 === Gt.PACKED_2X2_FLOAT32 ? r20 = this.gpgpu.createPackedMatrixTexture(t8[0], t8[1]) : o23 === Gt.PACKED_2X2_FLOAT16 ? r20 = this.gpgpu.createFloat16PackedMatrixTexture(t8[0], t8[1]) : o23 === Gt.UNPACKED_FLOAT32 ? r20 = this.gpgpu.createFloat32MatrixTexture(t8[0], t8[1]) : o23 === Gt.UNPACKED_FLOAT16 ? r20 = this.gpgpu.createFloat16MatrixTexture(t8[0], t8[1]) : o23 === Gt.PACKED_4X1_UNSIGNED_BYTE && (r20 = this.gpgpu.createUnsignedBytesMatrixTexture(t8[0], t8[1])), this.usedTextures[a22].push(r20), r20;
        }, t1.prototype.releaseTexture = function(t8, e11, n15, r20) {
            if (null != this.freeTextures) {
                var o23 = ms(e11, vs(n15, r20), r20);
                o23 in this.freeTextures || (this.freeTextures[o23] = []), this.freeTextures[o23].push(t8), this.numFreeTextures++, this.numUsedTextures--;
                var a22 = this.usedTextures[o23], i23 = a22.indexOf(t8);
                if (i23 < 0) throw new Error("Cannot release a texture that was never provided by this texture manager");
                a22.splice(i23, 1), this.log();
            }
        }, t1.prototype.log = function() {
            if (this.logEnabled) {
                var t8 = this.numFreeTextures + this.numUsedTextures;
                console.log("Free/Used", this.numFreeTextures + " / " + this.numUsedTextures, "(" + t8 + ")");
            }
        }, t1.prototype.getNumUsedTextures = function() {
            return this.numUsedTextures;
        }, t1.prototype.getNumFreeTextures = function() {
            return this.numFreeTextures;
        }, t1.prototype.dispose = function() {
            var t9 = this;
            if (null != this.freeTextures) {
                for(var e11 in this.freeTextures)this.freeTextures[e11].forEach(function(e12) {
                    t9.gpgpu.deleteMatrixTexture(e12);
                });
                for(var e11 in this.usedTextures)this.usedTextures[e11].forEach(function(e12) {
                    t9.gpgpu.deleteMatrixTexture(e12);
                });
                this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0;
            }
        }, t1;
    }();
    function vs(t1, e12) {
        if (t1 === zt.UPLOAD) return Gt.PACKED_2X2_FLOAT32;
        if (t1 === zt.RENDER || null == t1) return (function(t9) {
            return i15().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? t9 ? Gt.PACKED_2X2_FLOAT32 : Gt.UNPACKED_FLOAT32 : t9 ? Gt.PACKED_2X2_FLOAT16 : Gt.UNPACKED_FLOAT16;
        })(e12);
        if (t1 === zt.DOWNLOAD || t1 === zt.PIXELS) return Gt.PACKED_4X1_UNSIGNED_BYTE;
        throw new Error("Unknown logical texture type " + t1);
    }
    function ms(t1, e12, n15) {
        return t1[0] + "_" + t1[1] + "_" + e12 + "_" + n15;
    }
    var gs = function(t1, e12) {
        this.variableNames = [
            "A"
        ];
        for(var n15 = new Array(t1.length), r20 = 0; r20 < n15.length; r20++)n15[r20] = t1[r20] * e12[r20];
        this.outputShape = n15, this.rank = n15.length;
        var o24 = wa(this.rank), a23 = function(t9) {
            var e13 = t9.length;
            if (e13 > 5) throw Error("Tile for rank " + e13 + " is not yet supported");
            if (1 === e13) return "imod(resRC, " + t9[0] + ")";
            for(var n16 = [
                "resRC.x",
                "resRC.y",
                "resRC.z",
                "resRC.w",
                "resRC.u"
            ], r21 = [], o25 = 0; o25 < t9.length; o25++)r21.push("imod(" + n16[o25] + ", " + t9[o25] + ")");
            return r21.join();
        }(t1);
        this.userCode = "\n      void main() {\n        " + o24 + " resRC = getOutputCoords();\n        setOutput(getA(" + a23 + "));\n      }\n    ";
    };
    var ys = function(t1, e12) {
        this.variableNames = [
            "A"
        ];
        for(var n15 = new Array(t1.length), r20 = 0; r20 < n15.length; r20++)n15[r20] = t1[e12[r20]];
        this.outputShape = n15, this.rank = n15.length;
        var o24 = wa(this.rank), a23 = function(t9) {
            var e13 = t9.length;
            if (e13 > 6) throw Error("Transpose for rank " + e13 + " is not yet supported");
            for(var n16 = [
                "resRC.x",
                "resRC.y",
                "resRC.z",
                "resRC.w",
                "resRC.u",
                "resRC.v"
            ], r21 = new Array(e13), o25 = 0; o25 < t9.length; o25++)r21[t9[o25]] = n16[o25];
            return r21.join();
        }(e12);
        this.userCode = "\n    void main() {\n      " + o24 + " resRC = getOutputCoords();\n      setOutput(getA(" + a23 + "));\n    }\n    ";
    };
    var xs = function(t1, e12) {
        this.variableNames = [
            "A"
        ], this.packedInputs = !0, this.packedOutput = !0;
        for(var n15 = new Array(t1.length), r20 = 0; r20 < n15.length; r20++)n15[r20] = t1[e12[r20]];
        if (this.outputShape = n15, this.rank = n15.length, this.rank > 6) throw Error("Packed transpose for rank " + this.rank + " is not yet supported.");
        var o24 = wa(this.rank), a23 = ia("rc", this.rank), i24 = new Array(this.rank);
        for(r20 = 0; r20 < e12.length; r20++)i24[e12[r20]] = a23[r20];
        var s21 = "vec2(" + i24.slice(-2).join() + ")", u8 = "++" + a23[this.rank - 1] + " < " + n15[this.rank - 1], c4 = "getChannel(getA(" + i24.join() + "), " + s21 + ")";
        this.userCode = "\n    void main() {\n      " + o24 + " rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = " + c4 + ";\n      if(" + u8 + ") {\n        result[1] = " + c4 + ";\n      }\n      --" + a23[this.rank - 1] + ";\n      if(++" + a23[this.rank - 2] + " < " + n15[this.rank - 2] + ") {\n        result[2] = " + c4 + ";\n        if(" + u8 + ") {\n          result[3] = " + c4 + ";\n        }\n      }\n      setOutput(result);\n    }\n    ";
    }, bs = 1.7580993408473768, ws = 1.0507009873554805, Cs = function(t1, e12) {
        this.variableNames = [
            "A"
        ], this.outputShape = t1, this.userCode = "\n      float unaryOperation(float x) {\n        " + e12 + "\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
    }, Es = "if (isnan(x)) return x;", Rs = "return x;", Is = "return abs(x);", ks = Es + "\n  return (x < 0.0) ? 0.0 : x;\n", Ss = Es + "\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n", As = "return (x >= 0.0) ? x : (exp(x) - 1.0);", Ds = "\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = " + bs + ";\n  float scale = " + ws + ";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n";
    var Ts = "return -x;", Ns = "return ceil(x);", Fs = "return floor(x);", _s = "return exp(x);", Os = "return exp(x) - 1.0;", Ms = Es + "\n  return sin(x);\n", Bs = Es + "\n  return cos(x);\n", Ps = Es + "\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n", Ls = Es + "\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n", Ws = Es + "\n  return atan(x);\n", Us = Es + "return log(x + sqrt(x * x + 1.0));", Vs = Es + "\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));", zs = Es + "\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;", Gs = "return x;", Hs = "return x;", qs = "\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n", Ks = "\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n", js = "\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n", Xs = function(t1, e12) {
        this.variableNames = [
            "A"
        ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t1, this.userCode = "\n      vec4 unaryOperation(vec4 x) {\n        " + e12 + "\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
    }, Ys = function(t1) {
        this.variableNames = [
            "A"
        ], this.packedInputs = !0, this.packedOutput = !1, this.outputShape = t1;
        var e12 = t1.length, n15 = sa("rc", e12), r20 = wa(e12), o24 = function(t9, e13) {
            if (1 === t9) return "rc";
            for(var n16 = "", r21 = 0; r21 < t9; r21++)n16 += e13[r21], r21 < t9 - 1 && (n16 += ",");
            return n16;
        }(e12, n15), a23 = n15.slice(-2), i24 = e12 <= 1 ? "rc" : "vec2(" + a23.join(",") + ")";
        this.userCode = "\n      void main() {\n        " + r20 + " rc = getOutputCoords();\n        vec4 packedInput = getA(" + o24 + ");\n\n        setOutput(getChannel(packedInput, " + i24 + "));\n      }\n    ";
    }, $s = {
    };
    function Qs(t1, e12) {
        if ((void 0) === e12 && (e12 = !1), "linear" === t1) return e12 ? Hs : Rs;
        if ("relu" === t1) return e12 ? qs : ks;
        if ("elu" === t1) return e12 ? js : As;
        if ("relu6" === t1) return e12 ? Ks : Ss;
        if ("prelu" === t1) return e12 ? Pa : Ma;
        throw new Error("Activation " + t1 + " has not been implemented for the WebGL backend.");
    }
    var Js = 600;
    var Zs = function(t1) {
        function o24(e12) {
            var n15, r20 = t1.call(this) || this;
            if (r20.pendingRead = new WeakMap, r20.pendingDisposal = new WeakSet, r20.dataRefCount = new WeakMap, r20.numBytesInGPU = 0, r20.uploadWaitMs = 0, r20.downloadWaitMs = 0, r20.warnedAboutMemory = !1, r20.pendingDeletes = 0, r20.disposed = !1, !i15().getBool("HAS_WEBGL")) throw new Error("WebGL is not supported on this device");
            if (null == e12) {
                var o25 = jt(i15().getNumber("WEBGL_VERSION"));
                r20.binaryCache = (n15 = i15().getNumber("WEBGL_VERSION")) in $s ? $s[n15] : ($s[n15] = {
                }, $s[n15]), r20.gpgpu = new Bi(o25), r20.canvas = o25.canvas, r20.gpgpuCreatedLocally = !0;
            } else r20.gpgpu = e12, r20.binaryCache = {
            }, r20.gpgpuCreatedLocally = !1, r20.canvas = e12.gl.canvas;
            return r20.textureManager = new ps(r20.gpgpu), r20.numMBBeforeWarning = null == i15().global.screen ? 1024 : i15().global.screen.height * i15().global.screen.width * window.devicePixelRatio * Js / 1024 / 1024, r20.texData = new xo(r20, Lt), r20;
        }
        return e(o24, t1), o24.prototype.numDataIds = function() {
            return this.texData.numDataIds() + (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) - this.pendingDeletes;
        }, o24.prototype.write = function(t9, e12, n15) {
            if (i15().getBool("DEBUG") && this.checkNumericalProblems(t9), "complex64" === n15 && null != t9) throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
            var r20 = {
            };
            return this.texData.set(r20, {
                shape: e12,
                dtype: n15,
                values: t9,
                usage: zt.UPLOAD
            }), r20;
        }, o24.prototype.move = function(t9, e12, n15, r20) {
            if (i15().getBool("DEBUG") && this.checkNumericalProblems(e12), "complex64" === r20) throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
            this.texData.set(t9, {
                shape: n15,
                dtype: r20,
                values: e12,
                usage: zt.UPLOAD
            });
        }, o24.prototype.readSync = function(t9) {
            var e12 = this.texData.get(t9), n15 = e12.values, r20 = e12.dtype, o26 = e12.complexTensors, a23 = e12.slice, i24 = e12.shape, s21 = e12.isPacked;
            if (null != a23) {
                var u8 = void 0;
                u8 = s21 ? new Xs(i24, Gs) : new Cs(i24, Gs);
                var c4 = this.runWebGLProgram(u8, [
                    {
                        dataId: t9,
                        shape: i24,
                        dtype: r20
                    }
                ], r20), l6 = this.readSync(c4.dataId);
                return this.disposeData(c4.dataId), l6;
            }
            if (null != n15) return this.convertAndCacheOnCPU(t9);
            if ("string" === r20) return n15;
            var h5, f6, d7 = null != this.activeTimers;
            (d7 && (h5 = et()), "complex64" === r20) ? f6 = Vo(o26.real.dataSync(), o26.imag.dataSync()) : f6 = this.getValuesFromTexture(t9);
            return d7 && (this.downloadWaitMs += et() - h5), this.convertAndCacheOnCPU(t9, f6);
        }, o24.prototype.read = function(t9) {
            return n10(this, void 0, void 0, function() {
                var e12, n15, o26, a23, s21, u9, c5, l7, h5, f6, d7, p8, v8, m9, g8, y6, x6, b3, w3, C1, E1, R1;
                return r17(this, function(r20) {
                    switch(r20.label){
                        case 0:
                            if (this.pendingRead.has(t9)) return e12 = this.pendingRead.get(t9), [
                                2,
                                new Promise(function(t10) {
                                    return e12.push(t10);
                                })
                            ];
                            if (n15 = this.texData.get(t9), o26 = n15.values, a23 = n15.shape, s21 = n15.slice, u9 = n15.dtype, c5 = n15.complexTensors, l7 = n15.isPacked, null != s21) return h5 = void 0, h5 = l7 ? new Xs(a23, Gs) : new Cs(a23, Gs), f6 = this.runWebGLProgram(h5, [
                                {
                                    dataId: t9,
                                    shape: a23,
                                    dtype: u9
                                }
                            ], u9), d7 = this.read(f6.dataId), this.disposeData(f6.dataId), [
                                2,
                                d7
                            ];
                            if (null != o26) return [
                                2,
                                this.convertAndCacheOnCPU(t9)
                            ];
                            if (!i15().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && 2 === i15().getNumber("WEBGL_VERSION")) throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
                            return p8 = null, "complex64" !== u9 && i15().get("WEBGL_BUFFER_SUPPORTED") && (v8 = this.decode(t9), m9 = this.texData.get(v8.dataId), p8 = (R1 = this.gpgpu).createBufferFromTexture.apply(R1, [
                                m9.texture
                            ].concat(Yt(a23)))), this.pendingRead.set(t9, []), "complex64" === u9 ? [
                                3,
                                2
                            ] : [
                                4,
                                this.gpgpu.createAndWaitForFence()
                            ];
                        case 1:
                            r20.sent(), r20.label = 2;
                        case 2:
                            return "complex64" !== u9 ? [
                                3,
                                4
                            ] : [
                                4,
                                Promise.all([
                                    c5.real.data(),
                                    c5.imag.data()
                                ])
                            ];
                        case 3:
                            return y6 = r20.sent(), x6 = y6[0], b3 = y6[1], g8 = Vo(x6, b3), [
                                3,
                                5
                            ];
                        case 4:
                            null == p8 ? g8 = this.getValuesFromTexture(t9) : (w3 = k(a23), g8 = this.gpgpu.downloadFloat32MatrixFromBuffer(p8, w3)), r20.label = 5;
                        case 5:
                            return null != v8 && this.disposeData(v8.dataId), C1 = this.convertAndCacheOnCPU(t9, g8), E1 = this.pendingRead.get(t9), this.pendingRead.delete(t9), E1.forEach(function(t10) {
                                return t10(C1);
                            }), this.pendingDisposal.has(t9) && (this.pendingDisposal.delete(t9), this.disposeData(t9), this.pendingDeletes--), [
                                2,
                                C1
                            ];
                    }
                });
            });
        }, o24.prototype.checkNumericalProblems = function(t9) {
            if (null != t9) for(var e12 = 0; e12 < t9.length; e12++){
                var n15 = t9[e12];
                if (!ee(n15)) {
                    if (i15().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")) throw Error("The value " + n15 + " cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'");
                    throw Error("The value " + n15 + " cannot be represented on this device.");
                }
            }
        }, o24.prototype.getValuesFromTexture = function(t9) {
            var e12, n16 = this.texData.get(t9), r20 = n16.shape, o26 = n16.dtype, a23 = n16.isPacked, s21 = k(r20);
            if (i15().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
                var u9 = this.decode(t9), c5 = this.texData.get(u9.dataId), l7 = (e12 = this.gpgpu).downloadMatrixFromPackedTexture.apply(e12, [
                    c5.texture
                ].concat(Yt(r20))).subarray(0, s21);
                return this.disposeData(u9.dataId), l7;
            }
            var h5 = i15().getBool("WEBGL_PACK") && !0 === a23, f6 = h5 ? Te(r20) : r20, d7 = h5 ? new ci(f6) : new ui(f6), p8 = this.runWebGLProgram(d7, [
                {
                    shape: f6,
                    dtype: o26,
                    dataId: t9
                }
            ], "float32"), v8 = this.texData.get(p8.dataId), m9 = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(v8.texture, v8.texShape[0], v8.texShape[1]).subarray(0, s21);
            return this.disposeData(p8.dataId), m9;
        }, o24.prototype.time = function(t9) {
            return n10(this, void 0, void 0, function() {
                var e12, n16, o26, a23, s21, u10, c6;
                return r17(this, function(r20) {
                    switch(r20.label){
                        case 0:
                            return e12 = this.activeTimers, n16 = [], o26 = !1, null == this.programTimersStack ? (this.programTimersStack = n16, o26 = !0) : this.activeTimers.push(n16), this.activeTimers = n16, t9(), a23 = I(this.activeTimers.map(function(t10) {
                                return t10.query;
                            })).filter(function(t10) {
                                return null != t10;
                            }), s21 = I(this.activeTimers.map(function(t10) {
                                return t10.name;
                            })).filter(function(t10) {
                                return null != t10;
                            }), this.activeTimers = e12, o26 && (this.programTimersStack = null), u10 = {
                                uploadWaitMs: this.uploadWaitMs,
                                downloadWaitMs: this.downloadWaitMs,
                                kernelMs: null,
                                wallMs: null
                            }, i15().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? [
                                4,
                                Promise.all(a23)
                            ] : [
                                3,
                                2
                            ];
                        case 1:
                            return c6 = r20.sent(), u10.kernelMs = w(c6), u10.getExtraProfileInfo = function() {
                                return c6.map(function(t10, e13) {
                                    return {
                                        name: s21[e13],
                                        ms: t10
                                    };
                                }).map(function(t10) {
                                    return t10.name + ": " + t10.ms;
                                }).join(", ");
                            }, [
                                3,
                                3
                            ];
                        case 2:
                            u10.kernelMs = {
                                error: "WebGL query timers are not supported in this environment."
                            }, r20.label = 3;
                        case 3:
                            return this.uploadWaitMs = 0, this.downloadWaitMs = 0, [
                                2,
                                u10
                            ];
                    }
                });
            });
        }, o24.prototype.memory = function() {
            return {
                unreliable: !1,
                numBytesInGPU: this.numBytesInGPU
            };
        }, o24.prototype.startTimer = function() {
            return i15().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? this.gpgpu.beginQuery() : {
                startMs: et(),
                endMs: null
            };
        }, o24.prototype.endTimer = function(t9) {
            return i15().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? (this.gpgpu.endQuery(), t9) : (t9.endMs = et(), t9);
        }, o24.prototype.getQueryTime = function(t9) {
            return n10(this, void 0, void 0, function() {
                var e12;
                return r17(this, function(n16) {
                    return i15().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? [
                        2,
                        this.gpgpu.waitForQueryAndGetTime(t9)
                    ] : [
                        2,
                        (e12 = t9).endMs - e12.startMs
                    ];
                });
            });
        }, o24.prototype.disposeData = function(t9) {
            if (!this.pendingDisposal.has(t9)) {
                if (this.pendingRead.has(t9)) return this.pendingDisposal.add(t9), void this.pendingDeletes++;
                if (this.texData.has(t9)) {
                    this.releaseGPUData(t9);
                    var e12 = this.texData.get(t9).complexTensors;
                    null != e12 && (e12.real.dispose(), e12.imag.dispose()), this.texData.delete(t9);
                }
            }
        }, o24.prototype.releaseGPUData = function(t9) {
            var e13 = this.texData.get(t9), n16 = e13.texture, r20 = e13.dtype, o26 = e13.texShape, a23 = e13.usage, i24 = e13.isPacked, s21 = e13.slice, u10 = s21 && s21.origDataId || t9, c6 = this.dataRefCount.get(u10);
            c6 > 1 ? this.dataRefCount.set(u10, c6 - 1) : (this.dataRefCount.delete(u10), null != n16 && (this.numBytesInGPU -= this.computeBytes(o26, r20), this.textureManager.releaseTexture(n16, o26, a23, i24)));
            var l8 = this.texData.get(t9);
            l8.texture = null, l8.texShape = null, l8.isPacked = !1, l8.slice = null;
        }, o24.prototype.getTexture = function(t9) {
            return this.uploadToGPU(t9), this.texData.get(t9).texture;
        }, o24.prototype.getDataInfo = function(t9) {
            return this.texData.get(t9);
        }, o24.prototype.getCPUBackend = function() {
            return i15().getBool("WEBGL_CPU_FORWARD") ? (null == this.cpuBackend && (this.cpuBackend = Lt.findBackend("cpu")), this.cpuBackend) : null;
        }, o24.prototype.shouldExecuteOnCPU = function(t9, e13) {
            var n16 = this;
            return (void 0) === e13 && (e13 = 128), null != this.getCPUBackend() && t9.every(function(t10) {
                return null == n16.texData.get(t10.dataId).texture && t10.size < e13;
            });
        }, o24.prototype.getGPGPUContext = function() {
            return this.gpgpu;
        }, o24.prototype.complex = function(t9, e13) {
            var n16 = this.makeOutput(t9.shape, "complex64");
            return this.texData.get(n16.dataId).complexTensors = {
                real: Lt.keep(t9.clone()),
                imag: Lt.keep(e13.clone())
            }, n16;
        }, o24.prototype.real = function(t9) {
            return this.texData.get(t9.dataId).complexTensors.real.clone();
        }, o24.prototype.imag = function(t9) {
            return this.texData.get(t9.dataId).complexTensors.imag.clone();
        }, o24.prototype.slice = function(t9, e13, n16) {
            if (this.shouldExecuteOnCPU([
                t9
            ])) return this.cpuBackend.slice(t9, e13, n16);
            if (0 === k(n16)) return Fn([], n16, t9.dtype);
            var r20 = this.texData.get(t9.dataId).isPacked, o26 = io(t9.shape, e13, n16);
            if (r20 || !o26) {
                var a23 = i15().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new fs(n16) : new ls(n16), s21 = a23.getCustomSetupFunc(e13);
                return this.compileAndRun(a23, [
                    t9
                ], null, s21);
            }
            return this.uploadToGPU(t9.dataId), this.shallowSlice(t9, e13, n16);
        }, o24.prototype.shallowSlice = function(t9, e13, n16) {
            var r20 = this.texData.get(t9.dataId), o26 = this.makeOutput(n16, t9.dtype), a24 = this.texData.get(o26.dataId);
            Object.assign(a24, r20), a24.shape = n16, a24.dtype = t9.dtype;
            var i24 = so(e13, t9.strides);
            r20.slice && (i24 += r20.slice.flatOffset), a24.slice = {
                flatOffset: i24,
                origDataId: r20.slice && r20.slice.origDataId || t9.dataId
            };
            var s22 = this.dataRefCount.get(a24.slice.origDataId) || 1;
            return this.dataRefCount.set(a24.slice.origDataId, s22 + 1), o26;
        }, o24.prototype.stridedSlice = function(t9, e13, n16, r20) {
            if (this.shouldExecuteOnCPU([
                t9
            ])) return this.cpuBackend.stridedSlice(t9, e13, n16, r20);
            var o26 = ro(e13, n16, r20);
            if (o26.some(function(t10) {
                return 0 === t10;
            })) return Fn([], o26);
            var a24 = new ds(e13, r20, o26);
            return this.compileAndRun(a24, [
                t9
            ]);
        }, o24.prototype.reverse = function(t9, e13) {
            var n16 = i15().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new is(t9.shape, e13) : new as(t9.shape, e13);
            return this.compileAndRun(n16, [
                t9
            ]);
        }, o24.prototype.concat = function(t9, e13) {
            if ("complex64" === t9[0].dtype) {
                var n16 = t9.map(function(t10) {
                    return Tn(t10);
                }), r20 = t9.map(function(t10) {
                    return Nn(t10);
                });
                return Dn(this.concat(n16, e13), this.concat(r20, e13));
            }
            if (this.shouldExecuteOnCPU(t9)) return this.cpuBackend.concat(t9, e13);
            if (1 === t9.length) return t9[0];
            if (t9.length > i15().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")) {
                var o26 = Math.floor(t9.length / 2), a24 = this.concat(t9.slice(0, o26), e13), s22 = this.concat(t9.slice(o26), e13);
                return this.concat([
                    a24,
                    s22
                ], e13);
            }
            if (i15().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && t9[0].rank > 1) {
                var u10 = new Ga(t9.map(function(t10) {
                    return t10.shape;
                }), e13);
                return this.compileAndRun(u10, t9);
            }
            var c6 = Sn(t9.map(function(t10) {
                return t10.shape;
            }), e13), l8 = t9.map(function(t10) {
                return t10.as2D(-1, k(t10.shape.slice(e13)));
            }), h5 = new za(l8.map(function(t10) {
                return t10.shape;
            }));
            return this.compileAndRun(h5, l8).reshape(c6);
        }, o24.prototype.neg = function(t9) {
            if (this.shouldExecuteOnCPU([
                t9
            ])) return this.cpuBackend.neg(t9);
            if (i15().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t9, Ts, t9.dtype);
            var e13 = new Cs(t9.shape, Ts);
            return this.compileAndRun(e13, [
                t9
            ]);
        }, o24.prototype.batchMatMul = function(t9, e13, n17, r21) {
            var o27 = n17 ? t9.shape[2] : t9.shape[1], a25 = r21 ? e13.shape[1] : e13.shape[2], i24 = n17 ? t9.shape[1] : t9.shape[2], s23 = t9.shape[0];
            if ((1 === o27 || 1 === a25) && i24 > 1000) {
                n17 && (t9 = t9.transpose([
                    0,
                    2,
                    1
                ])), r21 && (e13 = e13.transpose([
                    0,
                    2,
                    1
                ]));
                var u11 = 1 === a25 ? t9 : t9.as3D(s23, i24, 1), c6 = 1 === a25 ? 2 : 1, l8 = 1 === a25 ? e13.as3D(s23, 1, i24) : e13;
                return this.multiply(u11, l8).sum(c6, !0);
            }
            var h5 = Dt(t9.dtype, e13.dtype), f6 = new Hi(t9.shape, [
                s23,
                o27,
                a25
            ], n17, r21);
            return this.compileAndRun(f6, [
                t9,
                e13
            ], h5);
        }, o24.prototype.fusedBatchMatMul = function(t9) {
            var e13 = t9.a, n17 = t9.b, r21 = t9.transposeA, o27 = t9.transposeB, a25 = t9.bias, i24 = t9.activation, s23 = t9.preluActivationWeights, u12 = r21 ? e13.shape[2] : e13.shape[1], c7 = o27 ? n17.shape[1] : n17.shape[2], l9 = e13.shape[0], h5 = Dt(e13.dtype, n17.dtype), f6 = null != a25, d7 = null != s23, p8 = i24 ? Qs(i24, !0) : null, v8 = new Hi(e13.shape, [
                l9,
                u12,
                c7
            ], r21, o27, f6, p8, d7), m9 = [
                e13,
                n17
            ];
            return a25 && m9.push(a25), s23 && m9.push(s23), this.compileAndRun(v8, m9, h5);
        }, o24.prototype.multiply = function(t9, e13) {
            if ("complex64" === t9.dtype) {
                var n17 = this.texData.get(t9.dataId), r21 = this.texData.get(e13.dataId), o27 = new Na(Da, t9.shape, e13.shape), a25 = new Na(Ta, t9.shape, e13.shape), s23 = [
                    this.makeComplexComponentTensorInfo(t9, n17.complexTensors.real),
                    this.makeComplexComponentTensorInfo(t9, n17.complexTensors.imag),
                    this.makeComplexComponentTensorInfo(e13, r21.complexTensors.real),
                    this.makeComplexComponentTensorInfo(e13, r21.complexTensors.imag)
                ], u12 = this.compileAndRun(o27, s23), c7 = this.compileAndRun(a25, s23), l9 = this.complex(u12, c7);
                return u12.dispose(), c7.dispose(), l9;
            }
            if (this.shouldExecuteOnCPU([
                t9,
                e13
            ])) return this.cpuBackend.multiply(t9, e13);
            if (i15().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t9, e13, Oa, t9.dtype);
            var h5 = new Ba(Oa, t9.shape, e13.shape);
            return this.compileAndRun(h5, [
                t9,
                e13
            ], t9.dtype);
        }, o24.prototype.batchNormalization = function(t9, e13, n18, r22, o28, a26) {
            var s24 = [
                t9,
                e13,
                n18
            ], u13 = null;
            null != a26 && (u13 = a26.shape, s24.push(a26));
            var c8 = null;
            if (null != o28 && (c8 = o28.shape, s24.push(o28)), i15().getBool("WEBGL_PACK_NORMALIZATION")) {
                var l10 = new Aa(t9.shape, e13.shape, n18.shape, u13, c8, r22);
                return this.compileAndRun(l10, s24);
            }
            var h5 = new Sa(t9.shape, e13.shape, n18.shape, u13, c8, r22);
            return this.compileAndRun(h5, s24);
        }, o24.prototype.localResponseNormalization4D = function(t9, e13, n18, r22, o28) {
            var a26 = i15().getBool("WEBGL_PACK_NORMALIZATION") ? new Vi(t9.shape, e13, n18, r22, o28) : new Wi(t9.shape, e13, n18, r22, o28);
            return this.compileAndRun(a26, [
                t9
            ]);
        }, o24.prototype.LRNGrad = function(t9, e13, n18, r22, o28, a26, i24) {
            var s24 = new Ui(e13.shape, r22, o28, a26, i24);
            return this.compileAndRun(s24, [
                e13,
                n18,
                t9
            ]);
        }, o24.prototype.tile = function(t9, e13) {
            if ("string" === t9.dtype) {
                var n18 = this.readSync(t9.dataId).map(function(t10) {
                    return ot(t10);
                });
                return ta(dr(t9.shape, t9.dtype, n18), e13);
            }
            var r22 = new gs(t9.shape, e13);
            return this.compileAndRun(r22, [
                t9
            ]);
        }, o24.prototype.pad = function(t9, e13, n19) {
            var r22 = i15().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Yi(t9.shape, e13, n19) : new Xi(t9.shape, e13, n19);
            return this.compileAndRun(r22, [
                t9
            ]);
        }, o24.prototype.transpose = function(t9, e13) {
            if (this.shouldExecuteOnCPU([
                t9
            ])) return this.cpuBackend.transpose(t9, e13);
            var n19 = i15().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new xs(t9.shape, e13) : new ys(t9.shape, e13);
            return this.compileAndRun(n19, [
                t9
            ]);
        }, o24.prototype.gather = function(t9, e13, n19) {
            if (this.shouldExecuteOnCPU([
                t9,
                e13
            ])) return this.cpuBackend.gather(t9, e13, n19);
            var r22 = new mi(t9.shape, e13.size, n19);
            return this.compileAndRun(r22, [
                t9,
                e13
            ]);
        }, o24.prototype.batchToSpaceND = function(t9, e13, n19) {
            C(t9.rank <= 4, function() {
                return "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet";
            });
            var r22 = e13.reduce(function(t10, e14) {
                return t10 * e14;
            }), o28 = zr(t9.shape, e13, r22), a26 = Gr(o28.length, e13.length), i24 = Hr(t9.shape, e13, r22), s24 = qr(n19, e13.length), u13 = Kr(i24, n19, e13.length);
            return t9.reshape(o28).transpose(a26).reshape(i24).slice(s24, u13);
        }, o24.prototype.spaceToBatchND = function(t9, e13, n19) {
            C(t9.rank <= 4, function() {
                return "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet";
            });
            var r22 = e13.reduce(function(t10, e14) {
                return t10 * e14;
            }), o28 = [
                [
                    0,
                    0
                ]
            ];
            o28.push.apply(o28, n19);
            for(var a26 = 1 + e13.length; a26 < t9.shape.length; ++a26)o28.push([
                0,
                0
            ]);
            var i24 = t9.pad(o28), s24 = zr(i24.shape, e13, r22, !1), u13 = Gr(s24.length, e13.length, !1), c8 = Hr(i24.shape, e13, r22, !1);
            return i24.reshape(s24).transpose(u13).reshape(c8);
        }, o24.prototype.reduce = function(t9, e13, n19) {
            var r22 = t9.shape[0], o28 = t9.shape[1], a26 = $r(o28), i24 = new Ji({
                windowSize: a26,
                inSize: o28,
                batchSize: r22
            }, e13), s24 = this.compileAndRun(i24, [
                t9
            ], n19);
            return 1 === s24.shape[1] ? s24 : this.reduce(s24, e13, n19);
        }, o24.prototype.argReduce = function(t9, e13, n19) {
            (void 0) === n19 && (n19 = null);
            var r22 = t9.shape[0], o28 = t9.shape[1];
            null != n19 && (r22 = n19.shape[0], o28 = n19.shape[1]);
            var a26 = $r(o28), i24 = new aa({
                windowSize: a26,
                inSize: o28,
                batchSize: r22
            }, e13, null == n19), s24 = [
                t9
            ];
            null != n19 && s24.push(n19);
            var u13 = this.compileAndRun(i24, s24, "int32");
            return 1 === u13.shape[1] ? u13 : this.argReduce(t9, e13, u13);
        }, o24.prototype.argReducePacked = function(t9, e13, n19) {
            (void 0) === n19 && (n19 = null);
            var r22 = null != n19 ? n19.shape : t9.shape, o28 = $r(r22[r22.length - 1]), a26 = new Ra(r22, o28, e13, null == n19), i24 = null == n19 ? [
                t9
            ] : [
                t9,
                n19
            ], s24 = this.compileAndRun(a26, i24, "int32");
            return s24.rank === t9.rank ? this.argReducePacked(t9, e13, s24) : s24;
        }, o24.prototype.sum = function(t9, e13) {
            Cn("sum", e13, t9.rank);
            var n19 = bn(t9.shape, e13), r22 = n19[0], o28 = k(n19[1]), a26 = t9.as2D(-1, o28), i24 = Tt(t9.dtype);
            return this.reduce(a26, "sum", i24).reshape(r22);
        }, o24.prototype.prod = function(t9, e13) {
            if (this.shouldExecuteOnCPU([
                t9
            ])) return this.cpuBackend.prod(t9, e13);
            var n19 = bn(t9.shape, e13), r22 = n19[0], o28 = k(n19[1]), a26 = t9.as2D(-1, o28), i24 = Tt(t9.dtype);
            return this.reduce(a26, "prod", i24).reshape(r22);
        }, o24.prototype.unsortedSegmentSum = function(t9, e13, n19) {
            var r22 = 0, o28 = En([
                r22
            ], t9.rank), a26 = t9;
            null != o28 && (a26 = t9.transpose(o28), r22 = In(1, t9.rank)[0]);
            var i24 = function(t10, e14, n20) {
                for(var r23 = [], o29 = t10.length, a27 = 0; a27 < o29; a27++)a27 !== e14 ? r23.push(t10[a27]) : r23.push(n20);
                return r23;
            }(a26.shape, r22, n19), s24 = k([
                a26.shape[r22]
            ]), u13 = a26.as2D(-1, s24), c8 = Tt(t9.dtype), l11 = this.segOpCompute(u13, "unsortedSegmentSum", e13, c8, n19).reshape(i24);
            return null != o28 && (l11 = l11.transpose(Rn(o28))), l11;
        }, o24.prototype.segOpCompute = function(t9, e13, n19, r22, o28) {
            var a26 = t9.shape[0], i24 = t9.shape[1], s24 = function(t10, e14) {
                var n20, r23 = !1;
                for(t10 <= Yr ? (n20 = t10, r23 = !0) : n20 = Y(t10, Math.floor(Math.sqrt(t10))); !r23;)n20 > e14 || n20 === t10 ? r23 = !0 : n20 = Y(t10, n20 + 1);
                return n20;
            }(i24, o28), u13 = new us({
                windowSize: s24,
                inSize: i24,
                batchSize: a26,
                numSegments: o28
            }, e13), c8 = this.compileAndRun(u13, [
                t9,
                n19
            ], r22);
            return c8.shape[1] === o28 ? c8 : (n19 = Kn(0, o28).tile([
                i24 / s24
            ]), this.segOpCompute(c8, e13, n19, r22, o28));
        }, o24.prototype.argMinMaxReduce = function(t9, e13, n19) {
            var r22 = [
                e13
            ];
            if (Cn("arg" + n19.charAt(0).toUpperCase() + n19.slice(1), r22, t9.rank), !i15().getBool("WEBGL_PACK_REDUCE") || t9.rank <= 2) {
                var o28 = bn(t9.shape, r22), a26 = o28[0], s24 = k(o28[1]), u13 = t9.as2D(-1, s24);
                return this.argReduce(u13, n19).reshape(a26);
            }
            return this.argReducePacked(t9, n19);
        }, o24.prototype.argMin = function(t9, e13) {
            return this.argMinMaxReduce(t9, e13, "min");
        }, o24.prototype.argMax = function(t9, e13) {
            return this.argMinMaxReduce(t9, e13, "max");
        }, o24.prototype.cumsum = function(t9, e13, n19, r22) {
            if (e13 !== t9.rank - 1) throw new Error("WebGL cumsum shader expects an inner-most axis=" + (t9.rank - 1) + " but got axis=" + e13);
            var o29 = new ni(t9.shape, n19, r22);
            return this.compileAndRun(o29, [
                t9
            ]);
        }, o24.prototype.equal = function(t9, e13) {
            if (i15().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t9, e13, "\n  return vec4(equal(a, b));\n", "bool");
            var n19 = new Ba("return float(a == b);", t9.shape, e13.shape);
            return this.compileAndRun(n19, [
                t9,
                e13
            ], "bool");
        }, o24.prototype.notEqual = function(t9, e13) {
            if (i15().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t9, e13, "\n  return vec4(notEqual(a, b));\n", "bool");
            var n19 = new Ba("return float(a != b);", t9.shape, e13.shape);
            return this.compileAndRun(n19, [
                t9,
                e13
            ], "bool");
        }, o24.prototype.less = function(t9, e13) {
            if (this.shouldExecuteOnCPU([
                t9,
                e13
            ])) return this.cpuBackend.less(t9, e13);
            if (i15().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t9, e13, "\n  return vec4(lessThan(a, b));\n", "bool");
            var n19 = new Ba("return float(a < b);", t9.shape, e13.shape);
            return this.compileAndRun(n19, [
                t9,
                e13
            ], "bool");
        }, o24.prototype.lessEqual = function(t9, e13) {
            if (i15().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t9, e13, "\n  return vec4(lessThanEqual(a, b));\n", "bool");
            var n19 = new Ba("return float(a <= b);", t9.shape, e13.shape);
            return this.compileAndRun(n19, [
                t9,
                e13
            ], "bool");
        }, o24.prototype.greater = function(t9, e13) {
            if (this.shouldExecuteOnCPU([
                t9,
                e13
            ])) return this.cpuBackend.greater(t9, e13);
            if (i15().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t9, e13, "\n  return vec4(greaterThan(a, b));\n", "bool");
            var n19 = new Ba("return float(a > b);", t9.shape, e13.shape);
            return this.compileAndRun(n19, [
                t9,
                e13
            ], "bool");
        }, o24.prototype.greaterEqual = function(t9, e13) {
            if (i15().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t9, e13, "\n  return vec4(greaterThanEqual(a, b));\n", "bool");
            var n19 = new Ba("return float(a >= b);", t9.shape, e13.shape);
            return this.compileAndRun(n19, [
                t9,
                e13
            ], "bool");
        }, o24.prototype.logicalNot = function(t9) {
            var e13 = new Cs(t9.shape, "return float(!(x >= 1.0));");
            return this.compileAndRun(e13, [
                t9
            ]);
        }, o24.prototype.logicalAnd = function(t9, e13) {
            if (i15().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t9, e13, "\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n", "bool");
            var n19 = new Ba("return float(a >= 1.0 && b >= 1.0);", t9.shape, e13.shape);
            return this.compileAndRun(n19, [
                t9,
                e13
            ], "bool");
        }, o24.prototype.logicalOr = function(t9, e13) {
            if (i15().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t9, e13, "\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n", "bool");
            var n19 = new Ba("return float(a >= 1.0 || b >= 1.0);", t9.shape, e13.shape);
            return this.compileAndRun(n19, [
                t9,
                e13
            ], "bool");
        }, o24.prototype.select = function(t9, e13, n19) {
            var r22 = new cs(t9.rank, e13.shape, e13.rank);
            return this.compileAndRun(r22, [
                t9,
                e13,
                n19
            ], Dt(e13.dtype, n19.dtype));
        }, o24.prototype.where = function(t9) {
            dn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
            var e13 = t9.dataSync();
            return na(t9.shape, e13);
        }, o24.prototype.topk = function(t9, e13, n19) {
            return ea(t9.dataSync(), t9.shape, t9.dtype, e13);
        }, o24.prototype.min = function(t9, e13) {
            Cn("min", e13, t9.rank);
            var n19 = bn(t9.shape, e13), r22 = n19[0], o29 = k(n19[1]), a27 = t9.as2D(-1, o29);
            return this.reduce(a27, "min", a27.dtype).reshape(r22);
        }, o24.prototype.minimum = function(t9, e13) {
            if (this.shouldExecuteOnCPU([
                t9,
                e13
            ])) return this.cpuBackend.minimum(t9, e13);
            var n19 = i15().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new La("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t9.shape, e13.shape) : new Ba("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n", t9.shape, e13.shape);
            return this.compileAndRun(n19, [
                t9,
                e13
            ]);
        }, o24.prototype.mod = function(t9, e13) {
            var n19 = i15().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new La("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t9.shape, e13.shape) : new Ba("if (b == 0.0) return NAN;\n  return mod(a, b);", t9.shape, e13.shape);
            return this.compileAndRun(n19, [
                t9,
                e13
            ]);
        }, o24.prototype.max = function(t9, e13) {
            if (this.shouldExecuteOnCPU([
                t9
            ])) return this.cpuBackend.max(t9, e13);
            Cn("max", e13, t9.rank);
            var n19 = bn(t9.shape, e13), r22 = n19[0], o29 = k(n19[1]), a27 = t9.as2D(-1, o29);
            return this.reduce(a27, "max", a27.dtype).reshape(r22);
        }, o24.prototype.maximum = function(t9, e13) {
            if (this.shouldExecuteOnCPU([
                t9,
                e13
            ])) return this.cpuBackend.maximum(t9, e13);
            var n19 = i15().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new La("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t9.shape, e13.shape) : new Ba("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n", t9.shape, e13.shape);
            return this.compileAndRun(n19, [
                t9,
                e13
            ]);
        }, o24.prototype.all = function(t9, e13) {
            Cn("all", e13, t9.rank);
            var n19 = bn(t9.shape, e13), r22 = n19[0], o29 = k(n19[1]), a27 = t9.as2D(-1, o29);
            return this.reduce(a27, "all", a27.dtype).reshape(r22);
        }, o24.prototype.any = function(t9, e13) {
            Cn("any", e13, t9.rank);
            var n19 = bn(t9.shape, e13), r22 = n19[0], o29 = k(n19[1]), a27 = t9.as2D(-1, o29);
            return this.reduce(a27, "any", a27.dtype).reshape(r22);
        }, o24.prototype.realDivide = function(t9, e13) {
            if (i15().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t9, e13, "\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n", "float32", !0);
            var n19 = new Ba("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;", t9.shape, e13.shape);
            return this.compileAndRun(n19, [
                t9,
                e13
            ], "float32");
        }, o24.prototype.floorDiv = function(t9, e13) {
            if (i15().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t9, e13, "\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n", "int32");
            var n19 = new Ba("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n", t9.shape, e13.shape);
            return this.compileAndRun(n19, [
                t9,
                e13
            ], "int32");
        }, o24.prototype.add = function(t9, e13) {
            if ("complex64" === t9.dtype && "complex64" === e13.dtype) return this.complexSeparableBinaryOp(t9, e13, Fa);
            if (this.shouldExecuteOnCPU([
                t9,
                e13
            ])) return this.cpuBackend.add(t9, e13);
            var n19 = Dt(t9.dtype, e13.dtype);
            if (i15().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t9, e13, Fa, n19);
            var r22 = new Ba(Fa, t9.shape, e13.shape);
            return this.compileAndRun(r22, [
                t9,
                e13
            ], n19);
        }, o24.prototype.packedUnaryOp = function(t9, e13, n19) {
            var r22 = new Xs(t9.shape, e13);
            return this.compileAndRun(r22, [
                t9
            ], n19);
        }, o24.prototype.packedBinaryOp = function(t9, e13, n19, r22, o29) {
            (void 0) === o29 && (o29 = !1);
            var a27 = new La(n19, t9.shape, e13.shape, o29);
            return this.compileAndRun(a27, [
                t9,
                e13
            ], r22);
        }, o24.prototype.complexSeparableBinaryOp = function(t9, e13, n19) {
            var r22 = this, o29 = this.texData.get(t9.dataId), a27 = this.texData.get(e13.dataId), i24 = [
                [
                    o29.complexTensors.real,
                    a27.complexTensors.real
                ],
                [
                    o29.complexTensors.imag,
                    a27.complexTensors.imag
                ]
            ].map(function(o30) {
                var a28 = o30[0], i25 = o30[1], s25 = r22.makeComplexComponentTensorInfo(t9, a28), u14 = r22.makeComplexComponentTensorInfo(e13, i25), c8 = new Ba(n19, t9.shape, e13.shape);
                return r22.compileAndRun(c8, [
                    s25,
                    u14
                ], Dt(a28.dtype, i25.dtype));
            }), s25 = i24[0], u14 = i24[1], c8 = this.complex(s25, u14);
            return s25.dispose(), u14.dispose(), c8;
        }, o24.prototype.makeComplexComponentTensorInfo = function(t9, e13) {
            return {
                dataId: e13.dataId,
                dtype: e13.dtype,
                shape: t9.shape
            };
        }, o24.prototype.addN = function(t9) {
            if (1 === t9.length) return t9[0];
            if (t9.length > i15().get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
                var e13 = Math.floor(t9.length / 2), n19 = this.addN(t9.slice(0, e13)), r22 = this.addN(t9.slice(e13));
                return this.addN([
                    n19,
                    r22
                ]);
            }
            var o29 = t9.map(function(t10) {
                return t10.dtype;
            }).reduce(function(t10, e14) {
                return Dt(t10, e14);
            }), a27 = t9.map(function(t10) {
                return t10.shape;
            }), s25 = i15().getBool("WEBGL_PACK") ? new oa(t9[0].shape, a27) : new ra(t9[0].shape, a27);
            return this.compileAndRun(s25, t9, o29);
        }, o24.prototype.subtract = function(t9, e14) {
            if ("complex64" === t9.dtype && "complex64" === e14.dtype) return this.complexSeparableBinaryOp(t9, e14, _a);
            if (this.shouldExecuteOnCPU([
                t9,
                e14
            ])) return this.cpuBackend.subtract(t9, e14);
            var n20 = Dt(t9.dtype, e14.dtype);
            if (i15().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t9, e14, _a, t9.dtype);
            var r23 = new Ba(_a, t9.shape, e14.shape);
            return this.compileAndRun(r23, [
                t9,
                e14
            ], n20);
        }, o24.prototype.pow = function(t9, e14) {
            var n20 = i15().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new La("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t9.shape, e14.shape) : new Ba("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n", t9.shape, e14.shape), r23 = Dt(t9.dtype, e14.dtype);
            return this.compileAndRun(n20, [
                t9,
                e14
            ], r23);
        }, o24.prototype.ceil = function(t9) {
            if (this.shouldExecuteOnCPU([
                t9
            ])) return this.cpuBackend.ceil(t9);
            if (i15().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t9, Ns, t9.dtype);
            var e14 = new Cs(t9.shape, Ns);
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.floor = function(t9) {
            if (this.shouldExecuteOnCPU([
                t9
            ])) return this.cpuBackend.floor(t9);
            if (i15().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t9, Fs, t9.dtype);
            var e14 = new Cs(t9.shape, Fs);
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.sign = function(t9) {
            var e14 = new Cs(t9.shape, "\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.isNaN = function(t9) {
            var e14 = new Cs(t9.shape, "return float(isnan(x));");
            return this.compileAndRun(e14, [
                t9
            ], "bool");
        }, o24.prototype.isInf = function(t9) {
            var e14 = new Cs(t9.shape, "return float(isinf(x));");
            return this.compileAndRun(e14, [
                t9
            ], "bool");
        }, o24.prototype.isFinite = function(t9) {
            var e14 = new Cs(t9.shape, "return float(!isnan(x) && !isinf(x));");
            return this.compileAndRun(e14, [
                t9
            ], "bool");
        }, o24.prototype.round = function(t9) {
            var e14 = new Cs(t9.shape, "\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.exp = function(t9) {
            if (this.shouldExecuteOnCPU([
                t9
            ])) return this.cpuBackend.exp(t9);
            if (i15().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t9, _s, t9.dtype);
            var e14 = new Cs(t9.shape, _s);
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.expm1 = function(t9) {
            if (this.shouldExecuteOnCPU([
                t9
            ])) return this.cpuBackend.expm1(t9);
            if (i15().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t9, Os, t9.dtype);
            var e14 = new Cs(t9.shape, Os);
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.softmax = function(t9, e14) {
            var n20 = O([
                e14
            ], t9.shape), r23 = this.max(t9, n20), o29 = wn(r23.shape, n20), a27 = this.subtract(t9, r23.reshape(o29)), i24 = this.exp(a27), s25 = this.sum(i24, n20).reshape(o29);
            return this.realDivide(i24, s25);
        }, o24.prototype.log = function(t9) {
            if (this.shouldExecuteOnCPU([
                t9
            ])) return this.cpuBackend.log(t9);
            if (i15().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t9, "\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n", t9.dtype);
            var e14 = new Cs(t9.shape, "if (x < 0.0) return NAN;\n  return log(x);");
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.log1p = function(t9) {
            var e14 = new Cs(t9.shape, "return log(1.0 + x);");
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.sqrt = function(t9) {
            var e14 = new Cs(t9.shape, "return sqrt(x);");
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.rsqrt = function(t9) {
            if (this.shouldExecuteOnCPU([
                t9
            ])) return this.cpuBackend.rsqrt(t9);
            var e14 = new Cs(t9.shape, "return inversesqrt(x);");
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.reciprocal = function(t9) {
            var e14 = new Cs(t9.shape, "return 1.0 / x;");
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.relu = function(t9) {
            var e14;
            return e14 = i15().getBool("WEBGL_PACK") ? new Xs(t9.shape, qs) : new Cs(t9.shape, ks), this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.relu6 = function(t9) {
            var e14;
            return e14 = i15().getBool("WEBGL_PACK") ? new Xs(t9.shape, Ks) : new Cs(t9.shape, Ss), this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.prelu = function(t9, e14) {
            var n20 = i15().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new La(Pa, t9.shape, e14.shape) : new Ba(Ma, t9.shape, e14.shape);
            return this.compileAndRun(n20, [
                t9,
                e14
            ]);
        }, o24.prototype.elu = function(t9) {
            if (i15().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t9, js, t9.dtype);
            var e14 = new Cs(t9.shape, As);
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.eluDer = function(t9, e14) {
            var n20 = i15().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new La("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n", t9.shape, e14.shape) : new Ba("return (b >= 1.0) ? a : a * (b + 1.0);", t9.shape, e14.shape);
            return this.compileAndRun(n20, [
                t9,
                e14
            ]);
        }, o24.prototype.selu = function(t9) {
            var e14 = new Cs(t9.shape, Ds);
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.int = function(t9) {
            var e14 = new Cs(t9.shape, "return float(int(x));");
            return this.compileAndRun(e14, [
                t9
            ], "int32");
        }, o24.prototype.clip = function(t9, e14, n20) {
            var r23, o29 = (r23 = i15().getBool("WEBGL_PACK_CLIP") ? new Ua(t9.shape) : new Wa(t9.shape)).getCustomSetupFunc(e14, n20);
            return this.compileAndRun(r23, [
                t9
            ], null, o29);
        }, o24.prototype.abs = function(t9) {
            if (this.shouldExecuteOnCPU([
                t9
            ])) return this.cpuBackend.abs(t9);
            if (i15().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t9, Is, t9.dtype);
            var e14 = new Cs(t9.shape, Is);
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.complexAbs = function(t9) {
            var e14 = this.texData.get(t9.dataId), n20 = new Va(t9.shape), r23 = [
                this.makeComplexComponentTensorInfo(t9, e14.complexTensors.real),
                this.makeComplexComponentTensorInfo(t9, e14.complexTensors.imag)
            ];
            return this.compileAndRun(n20, r23);
        }, o24.prototype.sigmoid = function(t9) {
            var e14 = new Cs(t9.shape, "return 1.0 / (1.0 + exp(-1.0 * x));");
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.softplus = function(t9) {
            var e14 = new Cs(t9.shape, "\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.sin = function(t9) {
            var e14 = new Cs(t9.shape, Ms);
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.cos = function(t9) {
            var e14 = new Cs(t9.shape, Bs);
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.tan = function(t9) {
            var e14 = new Cs(t9.shape, "return tan(x);");
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.asin = function(t9) {
            var e14 = new Cs(t9.shape, Ps);
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.acos = function(t9) {
            var e14 = new Cs(t9.shape, Ls);
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.atan = function(t9) {
            var e14 = new Cs(t9.shape, Ws);
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.atan2 = function(t9, e14) {
            var n20 = i15().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new La("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n", t9.shape, e14.shape) : new Ba("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n", t9.shape, e14.shape);
            return this.compileAndRun(n20, [
                t9,
                e14
            ]);
        }, o24.prototype.sinh = function(t9) {
            var e14 = new Cs(t9.shape, "\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.cosh = function(t9) {
            var e14 = new Cs(t9.shape, "\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.tanh = function(t9) {
            var e14 = new Cs(t9.shape, "\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.asinh = function(t9) {
            var e14 = new Cs(t9.shape, Us);
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.acosh = function(t9) {
            var e14 = new Cs(t9.shape, Vs);
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.atanh = function(t9) {
            var e14 = new Cs(t9.shape, zs);
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.erf = function(t9) {
            var e14 = new Cs(t9.shape, '\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.step = function(t9, e14) {
            var n20 = new Cs(t9.shape, function(t10) {
                return (void 0) === t10 && (t10 = 0), Es + "\n    return x > 0.0 ? 1.0 : float(" + t10 + ");\n  ";
            }(e14));
            return this.compileAndRun(n20, [
                t9
            ]);
        }, o24.prototype.conv2dByMatMul = function(t9, e14, n20, r23, o29, a27) {
            var s25 = t9.shape, u14 = this.texData.get(t9.dataId), c8 = n20.inChannels, l11 = s25[0] * s25[1] * s25[2], h5 = n20.outChannels, f6 = "channelsLast" === n20.dataFormat, d7 = (1 === l11 || 1 === h5) && c8 > 1000, p8 = s25[2] % 2 != 0 && !!u14.isPacked;
            if (d7 || !i15().getBool("WEBGL_LAZILY_UNPACK") || !i15().getBool("WEBGL_PACK_BINARY_OPERATIONS") || !p8) {
                var v8 = f6 ? s25[0] * s25[1] * s25[2] : s25[0] * s25[2] * s25[3], m9 = this.reshape(t9, [
                    1,
                    v8,
                    n20.inChannels
                ]), g8 = this.reshape(e14, [
                    1,
                    n20.inChannels,
                    n20.outChannels
                ]);
                return this.reshape(this.fusedBatchMatMul({
                    a: m9,
                    b: g8,
                    transposeA: !1,
                    transposeB: !1,
                    bias: r23,
                    activation: o29,
                    preluActivationWeights: a27
                }), n20.outShape);
            }
            var y6 = f6 ? s25[0] * s25[1] * (s25[2] + 1) : s25[0] * s25[2] * (s25[3] + 1), x6 = {
                dataId: t9.dataId,
                shape: [
                    1,
                    y6,
                    n20.inChannels
                ],
                dtype: t9.dtype
            }, b3 = u14.shape;
            u14.shape = u14.shape.slice(), u14.shape[u14.shape.length - 2]++, C(_e(u14.shape, x6.shape), function() {
                return "packed reshape " + u14.shape + " to " + x6.shape + " isn't free";
            });
            var w3 = this.reshape(e14, [
                1,
                n20.inChannels,
                n20.outChannels
            ]), E1 = this.fusedBatchMatMul({
                a: x6,
                b: w3,
                transposeA: !1,
                transposeB: !1,
                bias: r23,
                activation: o29,
                preluActivationWeights: a27
            }), R1 = this.texData.get(E1.dataId);
            return C(R1.isPacked, function() {
                return "batchMatMul result is expected to be packed";
            }), u14.shape = b3, R1.shape = n20.outShape, Lt.makeTensorFromDataId(E1.dataId, n20.outShape, E1.dtype);
        }, o24.prototype.conv2dWithIm2Row = function(t9, e14, n20, r23, o29, a27) {
            var i24 = n20.filterWidth, s25 = n20.filterHeight, u14 = n20.inChannels, c8 = n20.outWidth, l11 = n20.outHeight, h5 = "channelsLast" === n20.dataFormat, f6 = i24 * s25 * u14, d7 = l11 * c8, p8 = [
                f6,
                d7
            ], v9 = t9.squeeze([
                0
            ]), m10 = e14.reshape([
                1,
                f6,
                -1
            ]), g9 = new Li(p8, v9.shape, n20), y6 = this.compileAndRun(g9, [
                v9
            ]).reshape([
                1,
                p8[0],
                p8[1]
            ]), x6 = null != r23, b3 = null != a27, w3 = o29 ? Qs(o29, !0) : null, C1 = new Hi(y6.shape, [
                1,
                d7,
                n20.outChannels
            ], !0, !1, x6, w3, b3), E1 = [
                y6,
                m10
            ];
            r23 && E1.push(r23), b3 && E1.push(a27);
            var R1 = this.compileAndRun(C1, E1);
            return h5 ? R1.reshape([
                1,
                l11,
                c8,
                n20.outChannels
            ]) : R1.reshape([
                1,
                n20.outChannels,
                l11,
                c8
            ]);
        }, o24.prototype.fusedConv2d = function(t9) {
            var e14 = t9.input, n20 = t9.filter, r23 = t9.convInfo, o29 = t9.bias, a27 = t9.activation, s25 = t9.preluActivationWeights;
            if (1 === r23.filterHeight && 1 === r23.filterWidth && 1 === r23.dilationHeight && 1 === r23.dilationWidth && 1 === r23.strideHeight && 1 === r23.strideWidth && ("SAME" === r23.padInfo.type || "VALID" === r23.padInfo.type)) return this.conv2dByMatMul(e14, n20, r23, o29, a27, s25);
            if (i15().getBool("WEBGL_CONV_IM2COL") && 1 === e14.shape[0]) return this.conv2dWithIm2Row(e14, n20, r23, o29, a27, s25);
            var u14 = null != o29, c8 = null != s25, l11 = a27 ? Qs(a27, !1) : null, h5 = new Qa(r23, u14, l11, c8), f6 = [
                e14,
                n20
            ];
            return o29 && f6.push(o29), s25 && f6.push(s25), this.compileAndRun(h5, f6);
        }, o24.prototype.conv2d = function(t9, e14, n20) {
            if (1 === n20.filterHeight && 1 === n20.filterWidth && 1 === n20.dilationHeight && 1 === n20.dilationWidth && 1 === n20.strideHeight && 1 === n20.strideWidth && ("SAME" === n20.padInfo.type || "VALID" === n20.padInfo.type)) return this.conv2dByMatMul(t9, e14, n20);
            if (i15().getBool("WEBGL_CONV_IM2COL") && 1 === t9.shape[0]) return this.conv2dWithIm2Row(t9, e14, n20);
            var r23 = new Qa(n20);
            return this.compileAndRun(r23, [
                t9,
                e14
            ]);
        }, o24.prototype.conv2dDerInput = function(t9, e14, n20) {
            var r23 = new Ka(n20);
            return this.compileAndRun(r23, [
                t9,
                e14
            ]);
        }, o24.prototype.conv2dDerFilter = function(t9, e14, n20) {
            var r23 = new qa(n20);
            return this.compileAndRun(r23, [
                t9,
                e14
            ]);
        }, o24.prototype.fusedDepthwiseConv2D = function(t9) {
            var e14, n20 = t9.input, r23 = t9.filter, o29 = t9.convInfo, a27 = t9.bias, s25 = t9.activation, u14 = t9.preluActivationWeights, c8 = i15().getBool("WEBGL_PACK_DEPTHWISECONV") && o29.strideWidth <= 2 && o29.outChannels / o29.inChannels == 1, l11 = s25 ? Qs(s25, c8) : null, h5 = [
                n20,
                r23
            ], f6 = null != a27, d7 = null != u14;
            return f6 && h5.push(a27), d7 && h5.push(u14), c8 ? (e14 = new ti(o29, f6, l11, d7), this.compileAndRun(e14, h5)) : (e14 = new Za(o29, f6, l11, d7), this.compileAndRun(e14, h5));
        }, o24.prototype.depthwiseConv2D = function(t9, e14, n20) {
            var r23;
            return i15().getBool("WEBGL_PACK_DEPTHWISECONV") && n20.strideWidth <= 2 && n20.outChannels / n20.inChannels == 1 ? (r23 = new ti(n20), this.compileAndRun(r23, [
                t9,
                e14
            ])) : (r23 = new Za(n20), this.compileAndRun(r23, [
                t9,
                e14
            ]));
        }, o24.prototype.depthwiseConv2DDerInput = function(t9, e14, n20) {
            var r23 = new $a(n20);
            return this.compileAndRun(r23, [
                t9,
                e14
            ]);
        }, o24.prototype.depthwiseConv2DDerFilter = function(t9, e14, n20) {
            var r23 = new Ya(n20);
            return this.compileAndRun(r23, [
                t9,
                e14
            ]);
        }, o24.prototype.conv3d = function(t9, e14, n20) {
            var r23 = new Ja(n20);
            return this.compileAndRun(r23, [
                t9,
                e14
            ]);
        }, o24.prototype.conv3dDerInput = function(t9, e14, n20) {
            var r23 = new Xa(n20);
            return this.compileAndRun(r23, [
                t9,
                e14
            ]);
        }, o24.prototype.conv3dDerFilter = function(t9, e14, n20) {
            var r23 = new ja(n20);
            return this.compileAndRun(r23, [
                t9,
                e14
            ]);
        }, o24.prototype.maxPool = function(t9, e14) {
            var n20 = new $i(e14, "max", !1);
            return this.compileAndRun(n20, [
                t9
            ]);
        }, o24.prototype.avgPool = function(t9, e14) {
            var n20 = new $i(e14, "avg", !1);
            return this.compileAndRun(n20, [
                t9
            ], "float32");
        }, o24.prototype.maxPoolBackprop = function(t9, e14, n20, r23) {
            var o29 = new $i(r23, "max", !0), a27 = this.compileAndRun(o29, [
                e14
            ]), i24 = new zi(r23), s25 = this.compileAndRun(i24, [
                t9,
                a27
            ], e14.dtype);
            return a27.dispose(), s25;
        }, o24.prototype.avgPoolBackprop = function(t9, e14, n20) {
            var r23 = new Ia(n20);
            return this.compileAndRun(r23, [
                t9
            ], e14.dtype);
        }, o24.prototype.cast = function(t9, e14) {
            return Po(t9, e14, this);
        }, o24.prototype.unstack = function(t9, e14) {
            for(var n20 = t9.shape[e14], r23 = new Array(t9.rank - 1), o29 = 0, a27 = 0; a27 < t9.rank; a27++)a27 !== e14 && (r23[o29++] = t9.shape[a27]);
            var i24 = new Array(t9.rank).fill(0), s25 = t9.shape.slice();
            s25[e14] = 1;
            var u14 = new Array(n20);
            for(a27 = 0; a27 < u14.length; a27++)i24[e14] = a27, u14[a27] = this.slice(t9, i24, s25).reshape(r23);
            return u14;
        }, o24.prototype.avgPool3d = function(t9, e14) {
            var n20 = new Qi(e14, "avg", !1);
            return this.compileAndRun(n20, [
                t9
            ], "float32");
        }, o24.prototype.avgPool3dBackprop = function(t9, e14, n20) {
            var r23 = new ka(n20);
            return this.compileAndRun(r23, [
                t9
            ], e14.dtype);
        }, o24.prototype.maxPool3d = function(t9, e14) {
            var n20 = new Qi(e14, "max", !1);
            return this.compileAndRun(n20, [
                t9
            ], "float32");
        }, o24.prototype.maxPool3dBackprop = function(t9, e14, n20, r23) {
            var o29 = new Qi(r23, "max", !0), a27 = this.compileAndRun(o29, [
                e14
            ]), i24 = new Gi(r23), s25 = this.compileAndRun(i24, [
                t9,
                a27
            ], e14.dtype);
            return a27.dispose(), s25;
        }, o24.prototype.reshape = function(t9, e14) {
            var n20 = this.texData.get(t9.dataId);
            if (n20.isPacked && !_e(t9.shape, e14) && (null === n20.texture || !_e(n20.shape, e14))) {
                var r23 = this.packedReshape(t9, e14);
                return Lt.makeTensorFromDataId(r23.dataId, r23.shape, r23.dtype);
            }
            return Lo(t9, e14);
        }, o24.prototype.resizeBilinear = function(t9, e14, n20, r24) {
            var o29 = i15().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new ns(t9.shape, e14, n20, r24) : new es(t9.shape, e14, n20, r24);
            return this.compileAndRun(o29, [
                t9
            ], "float32");
        }, o24.prototype.resizeBilinearBackprop = function(t9, e14, n20) {
            var r24 = new ts(t9, e14, n20);
            return this.compileAndRun(r24, [
                t9
            ]);
        }, o24.prototype.resizeNearestNeighbor = function(t9, e14, n20, r24) {
            var o29 = new os(t9.shape, e14, n20, r24);
            return this.compileAndRun(o29, [
                t9
            ]);
        }, o24.prototype.resizeNearestNeighborBackprop = function(t9, e14, n20) {
            var r24 = new rs(t9, e14, n20);
            return this.compileAndRun(r24, [
                t9
            ]);
        }, o24.prototype.multinomial = function(t9, e14, n20, r24) {
            var o29 = e14 ? t9 : go(t9), a27 = o29.shape[0], i24 = o29.shape[1], s25 = new qi(a27, i24, n20), u14 = s25.getCustomSetupFunc(r24);
            return this.compileAndRun(s25, [
                o29
            ], "int32", u14);
        }, o24.prototype.oneHot = function(t9, e14, n20, r24) {
            var o29 = new Ki(t9.size, e14, n20, r24);
            return this.compileAndRun(o29, [
                t9
            ]);
        }, o24.prototype.diag = function(t9) {
            var e14 = new si(t9.size);
            return this.compileAndRun(e14, [
                t9
            ]);
        }, o24.prototype.nonMaxSuppression = function(t9, e14, n20, r24, o29) {
            return dn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"), jo(t9.dataSync(), e14.dataSync(), n20, r24, o29);
        }, o24.prototype.cropAndResize = function(t9, e14, n20, r24, o29, a27) {
            var i24 = new ei(t9.shape, e14.shape, r24, o29, a27);
            return this.compileAndRun(i24, [
                t9,
                e14,
                n20
            ], "float32");
        }, o24.prototype.depthToSpace = function(t9, e14, n20) {
            C(e14 > 1, function() {
                return "blockSize should be > 1 for depthToSpace, but was: " + e14;
            });
            var r24 = t9.shape[0], o29 = "NHWC" === n20 ? t9.shape[1] : t9.shape[2], a27 = "NHWC" === n20 ? t9.shape[2] : t9.shape[3], i24 = "NHWC" === n20 ? t9.shape[3] : t9.shape[1], s25 = o29 * e14, u14 = a27 * e14, c8 = i24 / (e14 * e14), l11 = new ii("NHWC" === n20 ? [
                r24,
                s25,
                u14,
                c8
            ] : [
                r24,
                c8,
                s25,
                u14
            ], e14, n20);
            return this.compileAndRun(l11, [
                t9
            ]);
        }, o24.prototype.split = function(t9, e14, n20) {
            return Zo(t9, e14, n20);
        }, o24.prototype.scatterND = function(t9, e14, n20) {
            var r24 = Zr(0, t9, n20), o29 = r24.sliceRank, a27 = r24.numUpdates, i24 = r24.sliceSize, s25 = r24.strides, u14 = r24.outputSize, c8 = [
                u14 / i24,
                i24
            ], l11 = t9.reshape([
                a27,
                o29
            ]), h5 = e14.reshape([
                a27,
                i24
            ]);
            if (0 === u14) return Lo(Fn([]), n20);
            var f6 = On(0), d7 = new ss(a27, o29, l11.rank, h5.rank, s25, c8);
            return this.compileAndRun(d7, [
                h5,
                l11,
                f6
            ]).reshape(n20);
        }, o24.prototype.sparseToDense = function(t9, e14, n20, r24) {
            var o29 = Zr(0, t9, n20), a27 = o29.sliceRank, i24 = o29.numUpdates, s25 = o29.strides, u14 = o29.outputSize, c8 = new ss(i24, a27, t9.rank, e14.rank, s25, [
                u14,
                1
            ], !1);
            return this.compileAndRun(c8, [
                e14,
                t9,
                r24
            ]).reshape(n20);
        }, o24.prototype.fft = function(t9) {
            return this.fftImpl(t9, !1);
        }, o24.prototype.ifft = function(t9) {
            return this.fftImpl(t9, !0);
        }, o24.prototype.fftImpl = function(t9, e14) {
            var n20 = this.texData.get(t9.dataId), r24 = new pi(fi, t9.shape, e14), o29 = new pi(di, t9.shape, e14), a27 = [
                this.makeComplexComponentTensorInfo(t9, n20.complexTensors.real),
                this.makeComplexComponentTensorInfo(t9, n20.complexTensors.imag)
            ], i24 = this.compileAndRun(r24, a27), s25 = this.compileAndRun(o29, a27), u14 = this.complex(i24, s25).as2D(t9.shape[0], t9.shape[1]);
            return i24.dispose(), s25.dispose(), u14;
        }, o24.prototype.gatherND = function(t9, e14) {
            var n20 = e14.shape, r24 = n20[n20.length - 1], o29 = jr(t9, e14), a27 = o29[0], i24 = o29[1], s25 = o29[2], u14 = o29[3], c8 = e14.reshape([
                i24,
                r24
            ]), l11 = t9.reshape([
                t9.size / s25,
                s25
            ]), h5 = new gi(r24, u14, [
                i24,
                s25
            ]);
            return this.compileAndRun(h5, [
                l11,
                c8
            ]).reshape(a27);
        }, o24.prototype.fill = function(t9, e14, n20) {
            if ("string" === (n20 = n20 || j(e14))) {
                var r24 = P(n20, k(t9));
                return r24.fill(e14), Lt.makeTensor(r24, t9, n20, this);
            }
            var o29 = new vi(t9, e14), a27 = o29.getCustomSetupFunc(e14);
            return this.compileAndRun(o29, [], n20, a27);
        }, o24.prototype.onesLike = function(t9) {
            if ("string" === t9.dtype) throw new Error("onesLike is not supported under string dtype");
            return this.fill(t9.shape, 1, t9.dtype);
        }, o24.prototype.zerosLike = function(t9) {
            return this.fill(t9.shape, "string" === t9.dtype ? "" : 0, t9.dtype);
        }, o24.prototype.linspace = function(t9, e14, n20) {
            return Wo(t9, e14, n20);
        }, o24.prototype.makeTensorInfo = function(t9, e14) {
            var n20 = this.write(null, t9, e14);
            return this.texData.get(n20).usage = null, {
                dataId: n20,
                shape: t9,
                dtype: e14
            };
        }, o24.prototype.makeOutput = function(t9, e14) {
            var n20 = this.makeTensorInfo(t9, e14).dataId;
            return Lt.makeTensorFromDataId(n20, t9, e14, this);
        }, o24.prototype.unpackTensor = function(t9) {
            var e14 = new Ys(t9.shape);
            return this.runWebGLProgram(e14, [
                t9
            ], t9.dtype);
        }, o24.prototype.packTensor = function(t9) {
            var e14 = new ji(t9.shape);
            return this.runWebGLProgram(e14, [
                t9
            ], t9.dtype, null, !0);
        }, o24.prototype.packedReshape = function(t9, e14) {
            var n20 = [
                Ae(t9.shape)
            ].concat(De(t9.shape)), r25 = {
                dtype: t9.dtype,
                shape: n20,
                dataId: t9.dataId
            }, o29 = [
                Ae(e14)
            ].concat(De(e14)), a27 = new Zi(o29, n20), i24 = this.runWebGLProgram(a27, [
                r25
            ], t9.dtype, null, !0);
            return {
                dataId: i24.dataId,
                shape: e14,
                dtype: i24.dtype
            };
        }, o24.prototype.decode = function(t9) {
            var e14, n20 = this.texData.get(t9), r25 = n20.isPacked, o29 = n20.shape, a27 = n20.dtype, i24 = Te(o29);
            e14 = r25 ? new ai(i24) : new oi(i24);
            return {
                dtype: a27,
                shape: o29,
                dataId: this.runWebGLProgram(e14, [
                    {
                        shape: i24,
                        dtype: a27,
                        dataId: t9
                    }
                ], a27, null, !0).dataId
            };
        }, o24.prototype.runWebGLProgram = function(t9, e14, n20, r25, o29) {
            var a27 = this;
            (void 0) === o29 && (o29 = !1);
            var s25 = this.makeTensorInfo(t9.outputShape, n20), u14 = this.texData.get(s25.dataId);
            if (t9.packedOutput && (u14.isPacked = !0), t9.outPackingScheme === Vt.DENSE) {
                var c8 = Yt(t9.outputShape);
                u14.texShape = c8.map(function(t10) {
                    return 2 * t10;
                });
            }
            if (null != t9.outTexUsage && (u14.usage = t9.outTexUsage), 0 === k(s25.shape)) return u14.values = B(s25.dtype, 0), s25;
            var l11 = [], h5 = e14.map(function(e15) {
                if ("complex64" === e15.dtype) throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
                var n21 = a27.texData.get(e15.dataId);
                if (null == n21.texture) {
                    if (!t9.packedInputs && k(e15.shape) <= i15().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM")) return {
                        shape: e15.shape,
                        texData: null,
                        isUniform: !0,
                        uniformValues: n21.values
                    };
                    t9.packedInputs && (n21.isPacked = !0, n21.shape = e15.shape);
                } else if (!!n21.isPacked != !!t9.packedInputs) e15 = n21.isPacked ? a27.unpackTensor(e15) : a27.packTensor(e15), l11.push(e15), n21 = a27.texData.get(e15.dataId);
                else if (n21.isPacked && !_e(n21.shape, e15.shape)) {
                    var r26 = e15, o30 = e15.shape;
                    e15.shape = n21.shape, e15 = a27.packedReshape(e15, o30), l11.push(e15), n21 = a27.texData.get(e15.dataId), r26.shape = o30;
                }
                return a27.uploadToGPU(e15.dataId), {
                    shape: e15.shape,
                    texData: n21,
                    isUniform: !1
                };
            });
            this.uploadToGPU(s25.dataId);
            var f6, d7 = {
                shape: s25.shape,
                texData: u14,
                isUniform: !1
            }, p8 = function(t10, e15, n21) {
                var r27 = "";
                e15.concat(n21).forEach(function(t11) {
                    var e16 = null != t11.texData && null != t11.texData.slice && t11.texData.slice.flatOffset > 0, n22 = t11.isUniform ? "uniform" : t11.texData.texShape;
                    r27 += t11.shape + "_" + n22 + "_" + e16;
                });
                var o31 = t10.userCode, a28 = t10.constructor.name;
                return a28 += "_" + r27 + "_" + o31;
            }(t9, h5, d7), v9 = this.getAndSaveBinary(p8, function() {
                return (function(t10, e15, n21, r27) {
                    var o31 = e15.userCode, a28 = n21.map(function(t11, n22) {
                        var r28 = {
                            logicalShape: t11.shape,
                            texShape: t11.isUniform ? null : t11.texData.texShape,
                            isUniform: t11.isUniform,
                            isPacked: !t11.isUniform && t11.texData.isPacked,
                            flatOffset: null
                        };
                        return null != t11.texData && null != t11.texData.slice && t11.texData.slice.flatOffset > 0 && (r28.flatOffset = t11.texData.slice.flatOffset), {
                            name: e15.variableNames[n22],
                            shapeInfo: r28
                        };
                    }), s26 = a28.map(function(t11) {
                        return t11.shapeInfo;
                    }), u15 = {
                        logicalShape: r27.shape,
                        texShape: r27.texData.texShape,
                        isUniform: !1,
                        isPacked: r27.texData.isPacked,
                        flatOffset: null
                    }, c9 = fa(a28, u15, o31, e15.packedInputs), l12 = t10.createProgram(c9), h6 = null, f7 = t10.getUniformLocation(l12, "NAN", !1);
                    1 === i15().getNumber("WEBGL_VERSION") && (h6 = t10.getUniformLocation(l12, "INFINITY", !1));
                    for(var d8 = {
                    }, p9 = 0; p9 < e15.variableNames.length; p9++){
                        var v10 = e15.variableNames[p9];
                        d8[v10] = t10.getUniformLocation(l12, v10, !1), d8["offset" + v10] = t10.getUniformLocation(l12, "offset" + v10, !1);
                    }
                    return {
                        program: e15,
                        source: c9,
                        webGLProgram: l12,
                        uniformLocations: d8,
                        inShapeInfos: s26,
                        outShapeInfo: u15,
                        infLoc: h6,
                        nanLoc: f7
                    };
                })(a27.gpgpu, t9, h5, d7);
            }), m10 = null != this.activeTimers;
            if (m10 && (f6 = this.startTimer()), (function(t10, e15, n21, r27, o31) {
                Pi(e15.inShapeInfos, n21), Pi([
                    e15.outShapeInfo
                ], [
                    r27
                ]);
                var a28 = r27.texData.texture, s26 = r27.texData.texShape;
                r27.texData.isPacked ? t10.setOutputPackedMatrixTexture(a28, s26[0], s26[1]) : t10.setOutputMatrixTexture(a28, s26[0], s26[1]), t10.setProgram(e15.webGLProgram), 1 === i15().getNumber("WEBGL_VERSION") && null !== e15.infLoc && t10.gl.uniform1f(e15.infLoc, 1 / 0), null !== e15.nanLoc && t10.gl.uniform1f(e15.nanLoc, NaN), n21.forEach(function(n22, r28) {
                    var o32 = e15.program.variableNames[r28], a29 = e15.uniformLocations[o32], i24 = e15.uniformLocations["offset" + o32];
                    if (null != a29) {
                        if (n22.isUniform) {
                            if (k(n22.shape) < 2) t10.gl.uniform1f(a29, n22.uniformValues[0]);
                            else {
                                var s27 = n22.uniformValues;
                                s27 instanceof Float32Array || (s27 = new Float32Array(s27)), t10.gl.uniform1fv(a29, s27);
                            }
                        } else null != n22.texData.slice && null != i24 && t10.gl.uniform1i(i24, n22.texData.slice.flatOffset), t10.setInputMatrixTexture(n22.texData.texture, a29, r28);
                    }
                }), null != o31 && o31(t10, e15.webGLProgram), t10.executeProgram();
            })(this.gpgpu, v9, h5, d7, r25), l11.forEach(function(t10) {
                return a27.disposeData(t10.dataId);
            }), m10 && (f6 = this.endTimer(f6), this.activeTimers.push({
                name: t9.constructor.name,
                query: this.getQueryTime(f6)
            })), !i15().getBool("WEBGL_LAZILY_UNPACK") && u14.isPacked && !1 === o29) {
                var g9 = this.unpackTensor(s25);
                return this.disposeData(s25.dataId), g9;
            }
            return s25;
        }, o24.prototype.compileAndRun = function(t9, e14, n20, r25, o29) {
            (void 0) === o29 && (o29 = !1), n20 = n20 || e14[0].dtype;
            var a27 = this.runWebGLProgram(t9, e14, n20, r25, o29);
            return Lt.makeTensorFromDataId(a27.dataId, a27.shape, a27.dtype);
        }, o24.prototype.getAndSaveBinary = function(t9, e14) {
            return t9 in this.binaryCache || (this.binaryCache[t9] = e14()), this.binaryCache[t9];
        }, o24.prototype.getTextureManager = function() {
            return this.textureManager;
        }, o24.prototype.dispose = function() {
            var t9 = this;
            if (!this.disposed) {
                if (!i15().getBool("IS_TEST")) Object.keys(this.binaryCache).forEach(function(e14) {
                    t9.gpgpu.deleteProgram(t9.binaryCache[e14].webGLProgram), delete t9.binaryCache[e14];
                });
                this.textureManager.dispose(), null != this.canvas && "undefined" != typeof HTMLCanvasElement && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = !0;
            }
        }, o24.prototype.floatPrecision = function() {
            var t9 = this;
            return null == this.floatPrecisionValue && (this.floatPrecisionValue = Ze(function() {
                if (!i15().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
                    var e14 = i15().getBool("DEBUG");
                    i15().set("DEBUG", !1);
                    var n20 = t9.abs(On(0.00000001)).dataSync()[0];
                    if (i15().set("DEBUG", e14), n20 > 0) return 32;
                }
                return 16;
            })), this.floatPrecisionValue;
        }, o24.prototype.epsilon = function() {
            return 32 === this.floatPrecision() ? 0.0000001 : 0.0001;
        }, o24.prototype.uploadToGPU = function(t9) {
            var e15, n21 = this.texData.get(t9), r25 = n21.shape, o29 = n21.dtype, a27 = n21.values, i24 = n21.texture, s25 = n21.usage, u14 = n21.isPacked;
            if (null == i24) {
                var c9, l11 = null != this.activeTimers;
                l11 && (c9 = et());
                var h5 = n21.texShape;
                if (null == h5 && (h5 = Ne(r25, u14), n21.texShape = h5), null != a27) {
                    var f6 = Te(r25), d7 = void 0, p8 = h5[1], v9 = h5[0], m10 = a27 instanceof Uint8Array;
                    u14 ? (p8 = (e15 = $t(h5[0], h5[1]))[0], v9 = e15[1], d7 = new hi(f6, [
                        v9,
                        p8
                    ], m10)) : d7 = new li(f6, [
                        v9,
                        p8
                    ], m10);
                    var g10 = this.makeTensorInfo([
                        v9,
                        p8
                    ], o29);
                    this.texData.get(g10.dataId).usage = m10 ? zt.PIXELS : zt.UPLOAD, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(g10.dataId), p8, v9, a27);
                    var y6 = this.runWebGLProgram(d7, [
                        g10
                    ], o29, null, !0), x6 = this.texData.get(y6.dataId);
                    n21.texture = x6.texture, n21.texShape = x6.texShape, n21.isPacked = x6.isPacked, n21.usage = x6.usage, this.disposeData(g10.dataId), this.texData.delete(y6.dataId), n21.values = null, l11 && (this.uploadWaitMs += et() - c9);
                } else {
                    var b3 = this.acquireTexture(h5, s25, o29, u14);
                    n21.texture = b3;
                }
            }
        }, o24.prototype.convertAndCacheOnCPU = function(t9, e15) {
            var n21 = this.texData.get(t9), r25 = n21.dtype;
            return this.releaseGPUData(t9), null != e15 && (n21.values = (function(t10, e16) {
                if ("float32" === e16 || "complex64" === e16) return t10;
                if ("int32" === e16 || "bool" === e16) {
                    for(var n22 = "int32" === e16 ? new Int32Array(t10.length) : new Uint8Array(t10.length), r27 = 0; r27 < n22.length; ++r27)n22[r27] = Math.round(t10[r27]);
                    return n22;
                }
                throw new Error("Unknown dtype " + e16);
            })(e15, r25)), n21.values;
        }, o24.prototype.acquireTexture = function(t9, e15, n21, r25) {
            if (this.numBytesInGPU += this.computeBytes(t9, n21), !this.warnedAboutMemory && this.numBytesInGPU > 1024 * this.numMBBeforeWarning * 1024) {
                var o29 = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
                this.warnedAboutMemory = !0, console.warn("High memory usage in GPU: " + o29 + " MB, most likely due to a memory leak");
            }
            return this.textureManager.acquireTexture(t9, e15, r25);
        }, o24.prototype.computeBytes = function(t9, e15) {
            return t9[0] * t9[1] * z(e15);
        }, o24;
    }(bo);
    Wt() && Lt.registerBackend("webgl", function() {
        return new Zs;
    }, 2);
    var tu = An({
        square_: function(t1) {
            var e15 = mn(t1, "x", "square"), n21 = [
                e15
            ];
            return Lt.runKernelFunc(function(t9, n23) {
                return n23([
                    e15
                ]), t9.square(e15);
            }, {
                x: e15
            }, null, "Square", {
            }, n21, []);
        }
    }), eu = "SquaredDifference";
    var nu = An({
        squaredDifference_: function(t1, e15) {
            var n21, r25 = mn(t1, "a", "squaredDifference"), o24 = mn(e15, "b", "squaredDifference");
            n21 = Nt(r25, o24), r25 = n21[0], o24 = n21[1], Ro(r25.shape, o24.shape);
            var a27 = {
                a: r25,
                b: o24
            }, i24 = [
                r25,
                o24
            ];
            return Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.squaredDifference(r25, o24);
                return e16([
                    r25,
                    o24
                ]), n23;
            }, a27, function(t9, e16) {
                var n23 = e16[0], r28 = e16[1], o31 = On(2);
                return {
                    a: function() {
                        return t9.mul(n23.sub(r28).mul(o31));
                    },
                    b: function() {
                        return t9.mul(r28.sub(n23).mul(o31));
                    }
                };
            }, eu, {
            }, i24, []);
        }
    });
    var ru = An({
        abs_: function(t1) {
            var e15 = mn(t1, "x", "abs");
            return "complex64" === e15.dtype ? Lt.runKernelFunc(function(t9) {
                return t9.complexAbs(e15);
            }, {
                $x: e15
            }) : Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.abs(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    x: function() {
                        return t9.mul(n21.toFloat().step(-1));
                    }
                };
            }, "Abs");
        }
    }), ou = An({
        acos_: function(t1) {
            var e15 = mn(t1, "x", "acos");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.acos(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        return t9.divStrict(On(1).sub(n21.toFloat().square()).sqrt()).neg();
                    }
                };
            });
        }
    }), au = An({
        acosh_: function(t1) {
            var e15 = mn(t1, "x", "acosh");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.acosh(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        return t9.divStrict(n21.toFloat().square().sub(1).sqrt());
                    }
                };
            });
        }
    }), iu = An({
        asin_: function(t1) {
            var e15 = mn(t1, "x", "asin");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.asin(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        return t9.divStrict(On(1).sub(n21.toFloat().square()).sqrt());
                    }
                };
            });
        }
    }), su = An({
        asinh_: function(t1) {
            var e15 = mn(t1, "x", "asinh");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.asinh(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        return t9.divStrict(On(1).add(n21.toFloat().square()).sqrt());
                    }
                };
            });
        }
    }), uu = An({
        atan_: function(t1) {
            var e15 = mn(t1, "x", "atan");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.atan(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        return t9.div(n21.toFloat().square().add(1));
                    }
                };
            });
        }
    }), cu = An({
        atanh_: function(t1) {
            var e15 = mn(t1, "x", "atanh");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.atanh(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        return t9.div(On(1).sub(n21.toFloat().square()));
                    }
                };
            });
        }
    }), lu = An({
        ceil_: function(t1) {
            var e15 = mn(t1, "x", "ceil");
            return Lt.runKernelFunc(function(t9) {
                return t9.ceil(e15);
            }, {
                $x: e15
            }, function(t9) {
                return {
                    $x: function() {
                        return Xn(t9);
                    }
                };
            });
        }
    }), hu = An({
        clipByValue_: function(t1, e15, n21) {
            var r25 = mn(t1, "x", "clipByValue");
            C(e15 <= n21, function() {
                return "Error in clip: min (" + e15 + ") must be less than or equal to max (" + n21 + ").";
            });
            var o24 = [
                r25
            ], a27 = {
                min: e15,
                max: n21
            };
            return Lt.runKernelFunc(function(t9, o31) {
                var a28 = t9.clip(r25, e15, n21);
                return o31([
                    r25
                ]), a28;
            }, {
                x: r25
            }, function(t9, r28) {
                var o31 = r28[0];
                return {
                    x: function() {
                        return t9.where(o31.greaterEqual(e15).logicalAnd(o31.lessEqual(n21)), Xn(t9));
                    }
                };
            }, "ClipByValue", a27, o24);
        }
    }), fu = An({
        cos_: function(t1) {
            var e15 = mn(t1, "x", "cos"), n21 = [
                e15
            ];
            return Lt.runKernelFunc(function(t9, n23) {
                var r25 = t9.cos(e15);
                return n23([
                    e15
                ]), r25;
            }, {
                x: e15
            }, function(t9, e16) {
                var n23 = e16[0];
                return {
                    x: function() {
                        return n23.toFloat().sin().neg().mul(t9);
                    }
                };
            }, "Cos", {
            }, n21);
        }
    }), du = An({
        cosh_: function(t1) {
            var e15 = mn(t1, "x", "cosh");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.cosh(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        return n21.toFloat().sinh().mulStrict(t9);
                    }
                };
            });
        }
    }), pu = An({
        erf_: function(t1) {
            var e15 = mn(t1, "x", "erf");
            return C("int32" === e15.dtype || "float32" === e15.dtype, function() {
                return "Input dtype must be `int32` or `float32`.";
            }), "int32" === e15.dtype && (e15 = e15.toFloat()), Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.erf(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        return t9.mul(n21.square().neg().exp().mul(2 / Math.sqrt(Math.PI)));
                    }
                };
            });
        }
    }), vu = An({
        exp_: function(t1) {
            var e15 = mn(t1, "x", "exp");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.exp(e15);
                return n21([
                    r25
                ]), r25;
            }, {
                x: e15
            }, function(t9, e16) {
                return {
                    x: function() {
                        return t9.mulStrict(e16[0]);
                    }
                };
            }, "Exp", {
            }, [], [
                !0
            ]);
        }
    }), mu = An({
        expm1_: function(t1) {
            var e15 = mn(t1, "x", "expm1");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.expm1(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        return t9.mul(n21.exp());
                    }
                };
            });
        }
    }), gu = An({
        floor_: function(t1) {
            var e15 = mn(t1, "x", "floor");
            return Lt.runKernelFunc(function(t9) {
                return t9.floor(e15);
            }, {
                $x: e15
            }, function(t9) {
                return {
                    $x: function() {
                        return Xn(t9);
                    }
                };
            });
        }
    }), yu = An({
        log_: function(t1) {
            var e15 = mn(t1, "x", "log"), n21 = [
                e15
            ];
            return Lt.runKernelFunc(function(t9, n23) {
                var r25 = t9.log(e15);
                return n23([
                    e15
                ]), r25;
            }, {
                x: e15
            }, function(t9, e16) {
                var n23 = e16[0];
                return {
                    x: function() {
                        return t9.div(n23.toFloat());
                    }
                };
            }, "Log", {
            }, n21);
        }
    }), xu = An({
        log1p_: function(t1) {
            var e15 = mn(t1, "x", "log1p");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.log1p(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        return t9.div(n21.add(1));
                    }
                };
            });
        }
    }), bu = An({
        logSigmoid_: function(t1) {
            var e15 = mn(t1, "x", "logSigmoid");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.softplus(e15.neg()).neg();
                return n21([
                    e15
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        return t9.mul(n21.neg().sigmoid());
                    }
                };
            });
        }
    }), wu = An({
        neg_: function(t1) {
            var e15 = mn(t1, "x", "neg"), n21 = [
                e15
            ];
            return Lt.runKernelFunc(function(t9) {
                return t9.neg(e15);
            }, {
                x: e15
            }, function(t9) {
                return {
                    x: function() {
                        return t9.neg();
                    }
                };
            }, "Neg", {
            }, n21);
        }
    }), Cu = An({
        reciprocal_: function(t1) {
            var e15 = mn(t1, "x", "reciprocal");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.reciprocal(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        return t9.div(n21.square().neg());
                    }
                };
            });
        }
    }), Eu = An({
        round_: function(t1) {
            var e15 = mn(t1, "x", "round");
            return Lt.runKernelFunc(function(t9) {
                return t9.round(e15);
            }, {
                $x: e15
            }, function(t9) {
                return {
                    $x: function() {
                        return Xn(t9);
                    }
                };
            });
        }
    }), Ru = An({
        rsqrt_: function(t1) {
            var e15 = mn(t1, "x", "rsqrt"), n21 = [
                e15
            ];
            return Lt.runKernelFunc(function(t9, n23) {
                var r25 = t9.rsqrt(e15);
                return n23([
                    e15
                ]), r25;
            }, {
                x: e15
            }, function(t9, e16) {
                var n23 = e16[0];
                return {
                    x: function() {
                        return t9.div(n23.pow(1.5).mul(2)).neg();
                    }
                };
            }, "Rsqrt", {
            }, n21);
        }
    }), Iu = An({
        sigmoid_: function(t1) {
            var e15 = mn(t1, "x", "sigmoid");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.sigmoid(e15);
                return n21([
                    r25
                ]), r25;
            }, {
                x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    x: function() {
                        return t9.mul(n21.mul(On(1).sub(n21)));
                    }
                };
            }, "Sigmoid");
        }
    }), ku = An({
        sign_: function(t1) {
            var e15 = mn(t1, "x", "sign");
            return Lt.runKernelFunc(function(t9) {
                return t9.sign(e15);
            }, {
                $x: e15
            }, function(t9) {
                return {
                    $x: function() {
                        return Xn(t9);
                    }
                };
            });
        }
    }), Su = An({
        isNaN_: function(t1) {
            var e15 = mn(t1, "x", "isNaN");
            return Lt.runKernelFunc(function(t9) {
                return t9.isNaN(e15);
            }, {
                $x: e15
            }, function(t9) {
                return {
                    $x: function() {
                        return Xn(t9);
                    }
                };
            });
        }
    }), Au = An({
        isInf_: function(t1) {
            var e15 = mn(t1, "x", "isInf");
            return Lt.runKernelFunc(function(t9) {
                return t9.isInf(e15);
            }, {
                $x: e15
            }, function(t9) {
                return {
                    $x: function() {
                        return Xn(t9);
                    }
                };
            });
        }
    }), Du = An({
        isFinite_: function(t1) {
            var e15 = mn(t1, "x", "isFinite");
            return Lt.runKernelFunc(function(t9) {
                return t9.isFinite(e15);
            }, {
                $x: e15
            }, function(t9) {
                return {
                    $x: function() {
                        return Xn(t9);
                    }
                };
            });
        }
    }), Tu = An({
        sin_: function(t1) {
            var e15 = mn(t1, "x", "sin"), n21 = [
                e15
            ];
            return Lt.runKernelFunc(function(t9, n23) {
                var r25 = t9.sin(e15);
                return n23([
                    e15
                ]), r25;
            }, {
                x: e15
            }, function(t9, e16) {
                var n23 = e16[0];
                return {
                    x: function() {
                        return n23.toFloat().cos().mul(t9);
                    }
                };
            }, "Sin", {
            }, n21);
        }
    }), Nu = An({
        sinh_: function(t1) {
            var e15 = mn(t1, "x", "sinh");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.sinh(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        return n21.toFloat().cosh().mulStrict(t9);
                    }
                };
            });
        }
    }), Fu = An({
        softplus_: function(t1) {
            var e15 = mn(t1, "x", "softplus");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.softplus(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        return t9.mul(n21.sigmoid());
                    }
                };
            });
        }
    }), _u = An({
        sqrt_: function(t1) {
            var e15 = mn(t1, "x", "sqrt");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.sqrt(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        return t9.div(n21.toFloat().sqrt().mul(2));
                    }
                };
            });
        }
    }), Ou = An({
        step_: function(t1, e15) {
            (void 0) === e15 && (e15 = 0);
            var n21 = mn(t1, "x", "step");
            return Lt.runKernelFunc(function(t9) {
                return t9.step(n21, e15);
            }, {
                $x: n21
            }, function(t9) {
                return {
                    $x: function() {
                        return Xn(t9);
                    }
                };
            });
        }
    }), Mu = An({
        tan_: function(t1) {
            var e15 = mn(t1, "x", "tan");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.tan(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        return t9.div(n21.cos().square());
                    }
                };
            });
        }
    }), Bu = An({
        tanh_: function(t1) {
            var e15 = mn(t1, "x", "tanh");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.tanh(e15);
                return n21([
                    r25
                ]), r25;
            }, {
                x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    x: function() {
                        return On(1).sub(n21.square()).mulStrict(t9);
                    }
                };
            }, "Tanh", {
            }, null, [
                !0
            ]);
        }
    });
    function Pu(t1, e15, n21, r25, o24, a27) {
        var i24, s25, u14 = mn(t1, "x", "batchNorm"), c10 = mn(e15, "mean", "batchNorm"), l12 = mn(n21, "variance", "batchNorm");
        return null != o24 && (i24 = mn(o24, "scale", "batchNorm")), null != r25 && (s25 = mn(r25, "offset", "batchNorm")), C(2 === u14.rank, function() {
            return "Error in batchNorm3D: x must be rank 3 but got rank " + u14.rank + ".";
        }), C(2 === c10.rank || 1 === c10.rank, function() {
            return "Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank " + c10.rank + ".";
        }), C(2 === l12.rank || 1 === l12.rank, function() {
            return "Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank " + l12.rank + ".";
        }), null != i24 && C(2 === i24.rank || 1 === i24.rank, function() {
            return "Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank " + i24.rank + ".";
        }), null != s25 && C(2 === s25.rank || 1 === s25.rank, function() {
            return "Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank " + s25.rank + ".";
        }), Uu(u14, c10, l12, s25, i24, a27);
    }
    function Lu(t1, e15, n21, r25, o24, a27) {
        var i24, s25, u14 = mn(t1, "x", "batchNorm"), c10 = mn(e15, "mean", "batchNorm"), l12 = mn(n21, "variance", "batchNorm");
        return null != o24 && (i24 = mn(o24, "scale", "batchNorm")), null != r25 && (s25 = mn(r25, "offset", "batchNorm")), C(3 === u14.rank, function() {
            return "Error in batchNorm3D: x must be rank 3 but got rank " + u14.rank + ".";
        }), C(3 === c10.rank || 1 === c10.rank, function() {
            return "Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank " + c10.rank + ".";
        }), C(3 === l12.rank || 1 === l12.rank, function() {
            return "Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank " + l12.rank + ".";
        }), null != i24 && C(3 === i24.rank || 1 === i24.rank, function() {
            return "Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank " + i24.rank + ".";
        }), null != s25 && C(3 === s25.rank || 1 === s25.rank, function() {
            return "Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank " + s25.rank + ".";
        }), Uu(u14, c10, l12, s25, i24, a27);
    }
    function Wu(t1, e15, n21, r25, o24, a27) {
        var i24, s25, u14 = mn(t1, "x", "batchNorm"), c10 = mn(e15, "mean", "batchNorm"), l12 = mn(n21, "variance", "batchNorm");
        return null != o24 && (i24 = mn(o24, "scale", "batchNorm")), null != r25 && (s25 = mn(r25, "offset", "batchNorm")), C(4 === u14.rank, function() {
            return "Error in batchNorm4D: x must be rank 4 but got rank " + u14.rank + ".";
        }), C(4 === c10.rank || 1 === c10.rank, function() {
            return "Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank " + c10.rank + ".";
        }), C(4 === l12.rank || 1 === l12.rank, function() {
            return "Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank " + l12.rank + ".";
        }), null != i24 && C(4 === i24.rank || 1 === i24.rank, function() {
            return "Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank " + i24.rank + ".";
        }), null != s25 && C(4 === s25.rank || 1 === s25.rank, function() {
            return "Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank " + s25.rank + ".";
        }), Uu(u14, c10, l12, s25, i24, a27);
    }
    function Uu(t1, e15, n21, r25, o24, a27) {
        null == a27 && (a27 = 0.001);
        var i24, s25, u14, c10 = mn(t1, "x", "batchNorm"), l12 = mn(e15, "mean", "batchNorm"), h6 = mn(n21, "variance", "batchNorm");
        null != o24 && (i24 = mn(o24, "scale", "batchNorm")), null != r25 && (s25 = mn(r25, "offset", "batchNorm")), C(l12.rank === h6.rank, function() {
            return "Batch normalization gradient requires mean and variance to have equal ranks.";
        }), C(null == s25 || l12.rank === s25.rank, function() {
            return "Batch normalization gradient requires mean and offset to have equal ranks.";
        }), C(null == i24 || l12.rank === i24.rank, function() {
            return "Batch normalization gradient requires mean and scale to have equal ranks.";
        }), u14 = 0 === c10.rank || 1 === c10.rank ? c10.as4D(1, 1, 1, c10.size) : 2 === c10.rank ? c10.as4D(1, 1, c10.shape[0], c10.shape[1]) : 3 === c10.rank ? c10.as4D(1, c10.shape[0], c10.shape[1], c10.shape[2]) : c10;
        var f7 = [
            c10,
            l12,
            h6,
            i24
        ];
        return Lt.runKernelFunc(function(t9, e16) {
            var n23 = t9.batchNormalization(u14, Vu(l12), Vu(h6), a27, Vu(i24), Vu(s25));
            return e16([
                c10,
                l12,
                h6,
                i24
            ]), n23;
        }, {
            x: c10,
            mean: l12,
            variance: h6,
            scale: i24,
            offset: s25
        }, function(t9, e16) {
            var n23 = e16, r28 = n23[0], o31 = n23[1], i25 = n23[2], s26 = n23[3], c11 = null == s26 ? On(1) : s26, l13 = Eo(o31.shape, u14.shape), h7 = [];
            if (1 === o31.rank) {
                for(var f8 = 0; f8 < u14.shape.length - 1; ++f8)h7.push(u14.shape[f8]);
                h7.push(1);
            }
            var d8 = r28.sub(o31), p9 = t9.mul(c11), v11 = Ru(i25.add(On(a27))), m11 = v11.mul(v11).mul(v11).mul(On(-0.5));
            return {
                x: function() {
                    return 1 === o31.rank ? t9.mul(Lr(v11.as4D(1, 1, 1, o31.shape[0]), h7)).mul(c11).reshape(r28.shape) : t9.mul(v11).mul(c11).reshape(r28.shape);
                },
                mean: function() {
                    var t10 = v11.mul(On(-1)).mul(p9);
                    return 1 === o31.rank && (t10 = t10.sum(l13)), t10.reshape(o31.shape);
                },
                variance: function() {
                    var t10 = m11.mul(d8).mul(p9);
                    return 1 === o31.rank && (t10 = t10.sum(l13)), t10.reshape(o31.shape);
                },
                scale: function() {
                    var e17 = d8.mul(v11), n24 = t9.mul(e17);
                    return 1 === o31.rank && (n24 = n24.sum(l13)), n24.reshape(o31.shape);
                },
                offset: function() {
                    var e17 = t9;
                    return 1 === o31.rank && (e17 = e17.sum(l13)), e17.reshape(o31.shape);
                }
            };
        }, "BatchNormalization", {
            varianceEpsilon: a27
        }, f7).reshape(c10.shape);
    }
    function Vu(t1) {
        return null == t1 ? null : 0 === t1.rank ? t1.as1D() : 1 === t1.rank ? t1 : 2 === t1.rank ? t1.as4D(1, 1, t1.shape[0], t1.shape[1]) : 3 === t1.rank ? t1.as4D(1, t1.shape[0], t1.shape[1], t1.shape[2]) : t1;
    }
    function zu() {
        Xe("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon");
    }
    var Gu = An({
        batchNormalization2d_: function(t1, e15, n21, r25, o24, a27) {
            return (void 0) === r25 && (r25 = 0.001), zu(), Pu(t1, e15, n21, a27, o24, r25);
        }
    }), Hu = An({
        batchNormalization3d_: function(t1, e15, n21, r25, o24, a27) {
            return (void 0) === r25 && (r25 = 0.001), zu(), Lu(t1, e15, n21, a27, o24, r25);
        }
    }), qu = An({
        batchNormalization4d_: function(t1, e15, n21, r25, o24, a27) {
            return (void 0) === r25 && (r25 = 0.001), zu(), Wu(t1, e15, n21, a27, o24, r25);
        }
    }), Ku = An({
        batchNormalization_: function(t1, e15, n21, r25, o24, a27) {
            return (void 0) === r25 && (r25 = 0.001), zu(), Uu(t1, e15, n21, a27, o24, r25);
        }
    }), ju = An({
        batchNorm_: Uu
    }), Xu = An({
        batchNorm2d_: Pu
    }), Yu = An({
        batchNorm3d_: Lu
    }), $u = An({
        batchNorm4d_: Wu
    });
    var Qu = An({
        logicalAnd_: function(t1, e15) {
            var n21 = mn(t1, "a", "logicalAnd", "bool"), r25 = mn(e15, "b", "logicalAnd", "bool");
            return Ro(n21.shape, r25.shape), Lt.runKernelFunc(function(t9) {
                return t9.logicalAnd(n21, r25);
            }, {
                a: n21,
                b: r25
            }, null, "LogicalAnd");
        }
    }), Ju = An({
        logicalNot_: function(t1) {
            var e15 = mn(t1, "x", "logicalNot", "bool");
            return Lt.runKernelFunc(function(t9) {
                return t9.logicalNot(e15);
            }, {
                $x: e15
            });
        }
    }), Zu = An({
        logicalOr_: function(t1, e15) {
            var n21 = mn(t1, "a", "logicalOr", "bool"), r25 = mn(e15, "b", "logicalOr", "bool");
            return Ro(n21.shape, r25.shape), Lt.runKernelFunc(function(t9) {
                return t9.logicalOr(n21, r25);
            }, {
                $a: n21,
                $b: r25
            });
        }
    }), tc = An({
        logicalXor_: function(t1, e15) {
            var n21 = mn(t1, "a", "logicalXor", "bool"), r25 = mn(e15, "b", "logicalXor", "bool");
            return Ro(n21.shape, r25.shape), Zu(t1, e15).logicalAnd(Qu(t1, e15).logicalNot());
        }
    }), ec = An({
        where_: function(t1, e15, n21) {
            var r25 = mn(e15, "a", "where"), o24 = mn(n21, "b", "where"), a27 = mn(t1, "condition", "where", "bool");
            return E(r25.shape, o24.shape, "Error in where: "), 1 === a27.rank ? C(a27.shape[0] === r25.shape[0], function() {
                return "The first dimension of `a` must match the size of `condition`.";
            }) : E(a27.shape, o24.shape, "Error in where: "), Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.select(a27, r25, o24);
                return e16([
                    a27
                ]), n23;
            }, {
                $condition: a27,
                $a: r25,
                $b: o24
            }, function(t9, e16) {
                var n23 = e16[0];
                return {
                    $condition: function() {
                        return Xn(n23).toFloat();
                    },
                    $a: function() {
                        return t9.mul(n23.cast(t9.dtype));
                    },
                    $b: function() {
                        return t9.mul(n23.logicalNot().cast(t9.dtype));
                    }
                };
            });
        }
    }), nc = function(t1) {
        return n10(this, void 0, void 0, function() {
            var e15, n21, o24;
            return r17(this, function(r25) {
                switch(r25.label){
                    case 0:
                        return [
                            4,
                            (e15 = mn(t1, "condition", "whereAsync", "bool")).data()
                        ];
                    case 1:
                        return n21 = r25.sent(), o24 = na(e15.shape, n21), t1 !== e15 && e15.dispose(), [
                            2,
                            o24
                        ];
                }
            });
        });
    };
    var rc = An({
        add_: function(t1, e15) {
            var n21, r25 = mn(t1, "a", "add"), o24 = mn(e15, "b", "add");
            n21 = Nt(r25, o24), r25 = n21[0], o24 = n21[1];
            var a27 = Ro(r25.shape, o24.shape);
            return Lt.runKernelFunc(function(t9) {
                return t9.add(r25, o24);
            }, {
                a: r25,
                b: o24
            }, function(t9) {
                return {
                    a: function() {
                        var e16 = t9, n23 = Eo(r25.shape, a27);
                        return n23.length > 0 && (e16 = e16.sum(n23)), e16.reshape(r25.shape);
                    },
                    b: function() {
                        var e16 = t9, n23 = Eo(o24.shape, a27);
                        return n23.length > 0 && (e16 = e16.sum(n23)), e16.reshape(o24.shape);
                    }
                };
            }, "Add");
        }
    }), oc = An({
        addN_: function(t1) {
            C(Array.isArray(t1), function() {
                return "The argument passed to tf.addN() must be a list of tensors";
            }), C(t1.length >= 1, function() {
                return "Must pass at least one tensor to tf.addN(), but got " + t1.length;
            });
            var e15 = t1.map(function(t9, e16) {
                return mn(t9, "tensors" + e16, "addN");
            }), n21 = e15[0];
            e15.forEach(function(t9) {
                if (t9.dtype !== n21.dtype) throw new Error("All tensors passed to tf.addN() must have the same dtype");
            }), e15.forEach(function(t9) {
                if (!S(t9.shape, n21.shape)) throw new Error("All tensors passed to tf.addN() must have the same shape");
            });
            var r25 = e15;
            return Lt.runKernelFunc(function(t9) {
                return t9.addN(e15);
            }, r25, function(t9) {
                var n23 = {
                };
                return e15.forEach(function(e16, r28) {
                    n23[r28] = function() {
                        return t9.clone();
                    };
                }), n23;
            }, "AddN");
        }
    }), ac = An({
        addStrict_: function(t1, e15) {
            var n21 = mn(t1, "a", "addStrict"), r25 = mn(e15, "b", "addStrict");
            return E(n21.shape, r25.shape, "Error in addStrict: "), n21.add(r25);
        }
    }), ic = An({
        atan2_: function(t1, e15) {
            var n21, r25 = mn(t1, "a", "atan2"), o24 = mn(e15, "b", "atan2");
            n21 = Nt(r25, o24), r25 = n21[0], o24 = n21[1];
            var a27 = Ro(r25.shape, o24.shape);
            return Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.atan2(r25, o24);
                return e16([
                    r25,
                    o24
                ]), n23;
            }, {
                $a: r25,
                $b: o24
            }, function(t9, e16) {
                var n23 = e16[0], r28 = e16[1];
                return {
                    $a: function() {
                        var e17 = rc(n23.square(), r28.square()), o31 = t9.mul(r28.div(e17)), i24 = Eo(n23.shape, a27);
                        return i24.length > 0 && (o31 = o31.sum(i24)), o31.reshape(n23.shape);
                    },
                    $b: function() {
                        var e17 = rc(n23.square(), r28.square()), o31 = wu(t9.mul(n23.div(e17))), i24 = Eo(r28.shape, a27);
                        return i24.length > 0 && (o31 = o31.sum(i24)), o31.reshape(r28.shape);
                    }
                };
            });
        }
    }), sc = An({
        div_: function(t1, e15) {
            var n21, r25 = mn(t1, "a", "div"), o24 = mn(e15, "b", "div");
            if (n21 = Nt(r25, o24), r25 = n21[0], o24 = n21[1], "int32" === r25.dtype && "int32" === o24.dtype) return lc(r25, o24);
            var a27 = Ro(r25.shape, o24.shape);
            return Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.realDivide(r25, o24);
                return e16([
                    r25,
                    o24
                ]), n23;
            }, {
                a: r25,
                b: o24
            }, function(t9, e16) {
                var n23 = e16[0], r28 = e16[1];
                return {
                    a: function() {
                        var e17 = t9.div(r28.toFloat()), o31 = Eo(n23.shape, a27);
                        return o31.length > 0 ? e17.sum(o31).reshape(n23.shape) : e17;
                    },
                    b: function() {
                        var e17 = t9.mul(n23.toFloat()), o31 = Eo(r28.shape, a27);
                        o31.length > 0 && (e17 = e17.sum(o31).reshape(r28.shape));
                        var i24 = r28.square();
                        return e17.div(i24.toFloat()).neg();
                    }
                };
            }, "Div");
        }
    }), uc = An({
        divNoNan_: function(t1, e15) {
            var n21, r25 = mn(t1, "a", "div"), o24 = mn(e15, "b", "div");
            r25 = (n21 = Nt(r25, o24))[0], o24 = n21[1];
            var a27 = sc(r25, o24), i24 = Xn(a27), s25 = o24.equal(i24);
            return ec(s25, i24, a27);
        }
    }), cc = An({
        divStrict_: function(t1, e15) {
            var n21 = mn(t1, "a", "div"), r25 = mn(e15, "b", "div");
            return E(n21.shape, r25.shape, "Error in divideStrict: "), n21.div(r25);
        }
    }), lc = An({
        floorDiv_: function(t1, e15) {
            var n21, r25 = mn(t1, "a", "floorDiv"), o24 = mn(e15, "b", "floorDiv");
            n21 = Nt(r25, o24), r25 = n21[0], o24 = n21[1];
            var a27 = Ro(r25.shape, o24.shape);
            return Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.floorDiv(r25, o24);
                return e16([
                    r25,
                    o24
                ]), n23;
            }, {
                a: r25,
                b: o24
            }, function(t9, e16) {
                var n23 = e16[0], r28 = e16[1];
                return {
                    a: function() {
                        var e17 = t9.div(r28.toFloat()), o31 = Eo(n23.shape, a27);
                        return o31.length > 0 ? e17.sum(o31).reshape(n23.shape) : e17;
                    },
                    b: function() {
                        var e17 = t9.mul(n23.toFloat()), o31 = Eo(r28.shape, a27);
                        o31.length > 0 && (e17 = e17.sum(o31).reshape(r28.shape));
                        var i24 = r28.square();
                        return e17.div(i24.toFloat()).neg();
                    }
                };
            }, "FloorDiv");
        }
    }), hc = An({
        maximum_: function(t1, e15) {
            var n21, r25 = mn(t1, "a", "maximum"), o24 = mn(e15, "b", "maximum");
            return n21 = Nt(r25, o24), r25 = n21[0], o24 = n21[1], "bool" === r25.dtype && (r25 = r25.toInt(), o24 = o24.toInt()), Ro(r25.shape, o24.shape), Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.maximum(r25, o24);
                return e16([
                    r25,
                    o24
                ]), n23;
            }, {
                a: r25,
                b: o24
            }, function(t9, e16) {
                var n23 = e16[0], r28 = e16[1];
                return {
                    a: function() {
                        return t9.mul(n23.greaterEqual(r28).toFloat());
                    },
                    b: function() {
                        return t9.mul(n23.less(r28).toFloat());
                    }
                };
            }, "Maximum");
        }
    }), fc = An({
        maximumStrict_: function(t1, e15) {
            var n21 = mn(t1, "a", "maximumStrict"), r25 = mn(e15, "b", "maximumStrict");
            return E(n21.shape, r25.shape, "Error in maximumStrict: "), n21.maximum(r25);
        }
    }), dc = An({
        minimum_: function(t1, e15) {
            var n21, r25 = mn(t1, "a", "minimum"), o24 = mn(e15, "b", "minimum");
            return n21 = Nt(r25, o24), r25 = n21[0], o24 = n21[1], "bool" === r25.dtype && (r25 = r25.toInt(), o24 = o24.toInt()), Ro(r25.shape, o24.shape), Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.minimum(r25, o24);
                return e16([
                    r25,
                    o24
                ]), n23;
            }, {
                a: r25,
                b: o24
            }, function(t9, e16) {
                var n23 = e16[0], r28 = e16[1];
                return {
                    a: function() {
                        return t9.mul(n23.lessEqual(r28).toFloat());
                    },
                    b: function() {
                        return t9.mul(n23.greater(r28).toFloat());
                    }
                };
            }, "Minimum");
        }
    }), pc = An({
        minimumStrict_: function(t1, e15) {
            var n21 = mn(t1, "a", "minimumStrict"), r25 = mn(e15, "b", "minimumStrict");
            return E(n21.shape, r25.shape, "Error in minimumStrict: "), n21.minimum(r25);
        }
    }), vc = An({
        mod_: function(t1, e15) {
            var n21, r25 = mn(t1, "a", "mod"), o24 = mn(e15, "b", "mod");
            n21 = Nt(r25, o24), r25 = n21[0], o24 = n21[1];
            var a27 = Ro(r25.shape, o24.shape);
            return Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.mod(r25, o24);
                return e16([
                    r25,
                    o24
                ]), n23;
            }, {
                $a: r25,
                $b: o24
            }, function(t9, e16) {
                var n23 = e16[0], r28 = e16[1];
                return {
                    $a: function() {
                        var e17 = Eo(n23.shape, a27);
                        return e17.length > 0 ? t9.sum(e17).reshape(n23.shape) : t9;
                    },
                    $b: function() {
                        var e17 = t9.mul(n23.div(r28).floor().neg()), o31 = Eo(r28.shape, a27);
                        return o31.length > 0 ? e17.sum(o31).reshape(r28.shape) : e17;
                    }
                };
            });
        }
    }), mc = An({
        modStrict_: function(t1, e15) {
            var n21 = mn(t1, "a", "modStrict"), r25 = mn(e15, "b", "modStrict");
            return E(n21.shape, r25.shape, "Error in modStrict: "), n21.mod(r25);
        }
    }), gc = An({
        mul_: function(t1, e15) {
            var n21, r25 = mn(t1, "a", "mul"), o24 = mn(e15, "b", "mul");
            n21 = Nt(r25, o24), r25 = n21[0], o24 = n21[1];
            var a27 = Ro(r25.shape, o24.shape);
            return Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.multiply(r25, o24);
                return e16([
                    r25,
                    o24
                ]), n23;
            }, {
                a: r25,
                b: o24
            }, function(t9, e16) {
                var n23 = e16[0], r28 = e16[1];
                return {
                    a: function() {
                        var e17 = t9.mul(r28.toFloat()), o31 = Eo(n23.shape, a27);
                        return o31.length > 0 ? e17.sum(o31).reshape(n23.shape) : e17;
                    },
                    b: function() {
                        var e17 = t9.mul(n23.toFloat()), o31 = Eo(r28.shape, a27);
                        return o31.length > 0 ? e17.sum(o31).reshape(r28.shape) : e17;
                    }
                };
            }, "Mul");
        }
    }), yc = An({
        mulStrict_: function(t1, e15) {
            var n21 = mn(t1, "a", "mul"), r25 = mn(e15, "b", "mul");
            return E(n21.shape, r25.shape, "Error in multiplyStrict: "), n21.mul(r25);
        }
    }), xc = An({
        pow_: function(t1, e15) {
            var n21, r25 = mn(t1, "base", "pow"), o24 = mn(e15, "exp", "pow");
            n21 = Nt(r25, o24), r25 = n21[0], o24 = n21[1];
            var a27 = Ro(r25.shape, o24.shape), i24 = [
                r25,
                o24
            ];
            return Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.pow(r25, o24);
                return e16([
                    r25,
                    o24,
                    n23
                ]), n23;
            }, {
                a: r25,
                b: o24
            }, function(t9, e16) {
                var n23 = e16[0], r28 = e16[1], o31 = e16[2];
                return {
                    a: function() {
                        var e17 = r28.toFloat(), o32 = t9.mul(e17.mul(n23.pow(e17.sub(On(1))))), i25 = Eo(n23.shape, a27);
                        return i25.length > 0 && (o32 = o32.sum(i25)), o32.reshape(n23.shape);
                    },
                    b: function() {
                        var e17 = n23.greater(0), i25 = n23.log().where(e17, Xn(n23)), s25 = t9.mul(o31.mul(i25)), u14 = Eo(r28.shape, a27);
                        return u14.length > 0 && (s25 = s25.sum(u14)), s25.reshape(r28.shape);
                    }
                };
            }, "Pow", {
            }, i24, [
                !0
            ]);
        }
    }), bc = An({
        powStrict_: function(t1, e15) {
            return E(t1.shape, e15.shape, "Error in powStrict: "), t1.pow(e15);
        }
    }), wc = An({
        squaredDifferenceStrict_: function(t1, e15) {
            var n21 = mn(t1, "a", "squaredDifferenceStrict"), r25 = mn(e15, "b", "squaredDifferenceStrict");
            return E(n21.shape, r25.shape, "Error in squaredDifferenceStrict: "), n21.squaredDifference(r25);
        }
    }), Cc = An({
        sub_: function(t1, e15) {
            var n21, r25 = mn(t1, "a", "sub"), o24 = mn(e15, "b", "sub");
            n21 = Nt(r25, o24), r25 = n21[0], o24 = n21[1];
            var a27 = Ro(r25.shape, o24.shape);
            return Lt.runKernelFunc(function(t9) {
                return t9.subtract(r25, o24);
            }, {
                a: r25,
                b: o24
            }, function(t9) {
                return {
                    a: function() {
                        var e16 = t9, n23 = Eo(r25.shape, a27);
                        return n23.length > 0 && (e16 = e16.sum(n23)), e16.reshape(r25.shape);
                    },
                    b: function() {
                        var e16 = t9, n23 = Eo(o24.shape, a27);
                        return n23.length > 0 && (e16 = e16.sum(n23)), e16.neg().reshape(o24.shape);
                    }
                };
            }, "Sub");
        }
    }), Ec = An({
        subStrict_: function(t1, e15) {
            var n21 = mn(t1, "a", "subStrict"), r25 = mn(e15, "b", "subStrict");
            return E(n21.shape, r25.shape, "Error in subStrict: "), n21.sub(r25);
        }
    });
    var Rc = An({
        equal_: function(t1, e15) {
            var n21, r25 = mn(t1, "a", "equal"), o24 = mn(e15, "b", "equal");
            return n21 = Nt(r25, o24), r25 = n21[0], o24 = n21[1], Ro(r25.shape, o24.shape), Lt.runKernelFunc(function(t9) {
                return t9.equal(r25, o24);
            }, {
                $a: r25,
                $b: o24
            });
        }
    }), Ic = An({
        equalStrict_: function(t1, e15) {
            var n21 = mn(t1, "a", "equalStrict"), r25 = mn(e15, "b", "equalStrict");
            return E(n21.shape, r25.shape, "Error in equalStrict: "), n21.equal(r25);
        }
    }), kc = An({
        greater_: function(t1, e15) {
            var n21, r25 = mn(t1, "a", "greater"), o24 = mn(e15, "b", "greater");
            return n21 = Nt(r25, o24), r25 = n21[0], o24 = n21[1], Ro(r25.shape, o24.shape), Lt.runKernelFunc(function(t9) {
                return t9.greater(r25, o24);
            }, {
                a: r25,
                b: o24
            }, null, "Greater");
        }
    }), Sc = An({
        greaterEqual_: function(t1, e15) {
            var n21, r25 = mn(t1, "a", "greaterEqual"), o24 = mn(e15, "b", "greaterEqual");
            return n21 = Nt(r25, o24), r25 = n21[0], o24 = n21[1], Ro(r25.shape, o24.shape), Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.greaterEqual(r25, o24);
                return e16([
                    r25,
                    o24
                ]), n23;
            }, {
                a: r25,
                b: o24
            }, function(t9, e16) {
                var n23 = e16[0], r28 = e16[1];
                return {
                    a: function() {
                        return Xn(n23);
                    },
                    b: function() {
                        return Xn(r28);
                    }
                };
            }, "GreaterEqual");
        }
    }), Ac = An({
        greaterEqualStrict_: function(t1, e15) {
            var n21 = mn(t1, "a", "greaterEqualStrict"), r25 = mn(e15, "b", "greaterEqualStrict");
            return E(n21.shape, r25.shape, "Error in greaterEqualStrict: "), n21.greaterEqual(r25);
        }
    }), Dc = An({
        greaterStrict_: function(t1, e15) {
            var n21 = mn(t1, "a", "greaterStrict"), r25 = mn(e15, "b", "greaterStrict");
            return E(n21.shape, r25.shape, "Error in greaterStrict: "), n21.greater(r25);
        }
    }), Tc = An({
        less_: function(t1, e15) {
            var n21, r25 = mn(t1, "a", "less"), o24 = mn(e15, "b", "less");
            return n21 = Nt(r25, o24), r25 = n21[0], o24 = n21[1], Ro(r25.shape, o24.shape), Lt.runKernelFunc(function(t9) {
                return t9.less(r25, o24);
            }, {
                a: r25,
                b: o24
            }, null, "Less");
        }
    }), Nc = An({
        lessEqual_: function(t1, e15) {
            var n21, r25 = mn(t1, "a", "lessEqual"), o24 = mn(e15, "b", "lessEqual");
            return n21 = Nt(r25, o24), r25 = n21[0], o24 = n21[1], Ro(r25.shape, o24.shape), Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.lessEqual(r25, o24);
                return e16([
                    r25,
                    o24
                ]), n23;
            }, {
                a: r25,
                b: o24
            }, null, "LessEqual");
        }
    }), Fc = An({
        lessEqualStrict_: function(t1, e15) {
            var n21 = mn(t1, "a", "lessEqualStrict"), r25 = mn(e15, "b", "lessEqualStrict");
            return E(n21.shape, r25.shape, "Error in lessEqualStrict: "), n21.lessEqual(r25);
        }
    }), _c = An({
        lessStrict_: function(t1, e15) {
            var n21 = mn(t1, "a", "lessStrict"), r25 = mn(e15, "b", "lessStrict");
            return E(n21.shape, r25.shape, "Error in lessStrict: "), n21.less(r25);
        }
    }), Oc = An({
        notEqual_: function(t1, e15) {
            var n21, r25 = mn(t1, "a", "notEqual"), o24 = mn(e15, "b", "notEqual");
            return n21 = Nt(r25, o24), r25 = n21[0], o24 = n21[1], Ro(r25.shape, o24.shape), Lt.runKernelFunc(function(t9) {
                return t9.notEqual(r25, o24);
            }, {
                a: r25,
                b: o24
            }, null, "NotEqual");
        }
    }), Mc = An({
        notEqualStrict_: function(t1, e15) {
            var n21 = mn(t1, "a", "notEqualStrict"), r25 = mn(e15, "b", "notEqualStrict");
            return E(n21.shape, r25.shape, "Error in notEqualStrict: "), n21.notEqual(r25);
        }
    });
    function Bc(t1, e15) {
        for(var n21 = [], r25 = t1; r25 < e15; ++r25)n21.push(r25);
        return n21;
    }
    function Pc(t1) {
        for(var e15 = [], n21 = 0; n21 < t1.length; ++n21)for(var r25 = 0; r25 < t1[n21].length; ++r25)e15.push(t1[n21][r25]);
        return e15;
    }
    var Lc = An({
        gather_: function(t1, e15, n21) {
            (void 0) === n21 && (n21 = 0);
            var r25 = mn(t1, "x", "gather"), o24 = mn(e15, "indices", "gather", "int32");
            n21 = O(n21, r25.shape)[0];
            var a27 = function(t9, e16, n23) {
                for(var r28 = t9.shape[n23], o31 = [], a28 = 1, i24 = 1, s25 = 0; s25 < n23; s25++)o31.push(t9.shape[s25]), a28 *= t9.shape[s25];
                for(s25 = 0; s25 < e16.rank; s25++)o31.push(e16.shape[s25]);
                for(s25 = n23 + 1; s25 < t9.rank; s25++)o31.push(t9.shape[s25]), i24 *= t9.shape[s25];
                return {
                    batchSize: a28,
                    sliceSize: i24,
                    dimSize: r28,
                    outputShape: o31
                };
            }(r25, o24, n21);
            return Lt.runKernelFunc(function(t9, e16) {
                var a28 = t9.gather(r25, o24.flatten(), n21);
                return e16([
                    o24
                ]), a28;
            }, {
                x: r25,
                indices: o24
            }, function(t9, e16) {
                var o31 = e16[0];
                return {
                    x: function() {
                        var e17 = r25.shape, a28 = o31.size, i24 = e17.slice(0, n21), s25 = i24.length, u14 = e17.slice(n21, e17.length).slice(1), c10 = u14.length, l12 = Bc(0, s25), h6 = Bc(s25 + 1, s25 + 1 + c10), f7 = Pc([
                            i24,
                            [
                                a28
                            ],
                            u14
                        ]), d8 = t9.reshape(f7), p9 = o31.reshape([
                            a28
                        ]), v11 = Pc([
                            [
                                s25
                            ],
                            l12,
                            h6
                        ]), m11 = d8.transpose(v11), g11 = Wc(m11, p9, r25.shape[n21]), y7 = Rn(v11);
                        return g11 = g11.transpose(y7);
                    },
                    indices: function() {
                        return o31;
                    }
                };
            }, "Gather", {
                axis: n21
            }).reshape(a27.outputShape);
        }
    }), Wc = An({
        unsortedSegmentSum_: function(t1, e15, n21) {
            var r25 = mn(t1, "x", "unsortedSegmentSum"), o24 = mn(e15, "segmentIds", "unsortedSegmentSum", "int32");
            return C(A(n21), function() {
                return "numSegments must be of dtype int";
            }), Lt.runKernelFunc(function(t9, e16) {
                var a27 = t9.unsortedSegmentSum(r25, o24, n21);
                return e16([
                    o24
                ]), a27;
            }, {
                $x: r25
            }, function(t9, e16) {
                var n23 = e16[0];
                return {
                    $x: function() {
                        return (function(t10, e17) {
                            for(var n24 = hc(e17, Xn(e17)), r28 = Lc(t10, n24), o31 = Sc(e17, On(0, "int32")), a27 = r28.rank - o31.rank, i24 = 0; i24 < a27; ++i24)o31 = wr(o31, i24 + 1);
                            o31 = Qu(o31, zn(r28.shape, "bool"));
                            var s25 = Xn(r28);
                            return ec(o31, r28, s25);
                        })(t9, n23);
                    }
                };
            });
        }
    });
    var Uc = function(t1, e15, o24) {
        return n10(this, void 0, void 0, function() {
            var n21, a27, i24, s25, u14, c10, l12, h6, f7, d8, p9, v11, m11;
            return r17(this, function(r25) {
                switch(r25.label){
                    case 0:
                        for(n21 = mn(t1, "tensor", "boolMask"), a27 = mn(e15, "mask", "boolMask", "bool"), i24 = null == o24 ? 0 : o24, s25 = a27.rank, u14 = n21.shape, C(s25 > 0, function() {
                            return "mask cannot be scalar";
                        }), E(u14.slice(i24, i24 + s25), a27.shape, "mask's shape must match the first K dimensions of tensor's shape,"), c10 = 1, l12 = i24; l12 < i24 + s25; l12++)c10 *= u14[l12];
                        return h6 = u14.slice(0, i24).concat([
                            c10
                        ], u14.slice(i24 + s25)), f7 = n21.reshape(h6), d8 = a27.reshape([
                            -1
                        ]), [
                            4,
                            nc(d8)
                        ];
                    case 1:
                        return p9 = r25.sent(), v11 = p9.squeeze([
                            1
                        ]), m11 = Lc(f7, v11, i24), t1 !== n21 && n21.dispose(), e15 !== a27 && a27.dispose(), v11.dispose(), f7.dispose(), d8.dispose(), p9.dispose(), [
                            2,
                            m11
                        ];
                }
            });
        });
    };
    function Vc(t1, e15, n21, r25, o24, a27, i24) {
        (void 0) === a27 && (a27 = "NHWC"), C(t1.length === e15.rank, function() {
            return "Length of inShape (" + t1.length + ") and rank of dy (" + e15.rank + ") must match";
        });
        var s25 = t1, u14 = e15, c10 = !1;
        3 === e15.rank && (c10 = !0, u14 = e15.as4D(1, e15.shape[0], e15.shape[1], e15.shape[2]), s25 = [
            1,
            t1[0],
            t1[1],
            t1[2]
        ]), C(4 === s25.length, function() {
            return "Error in conv2dDerInput: inShape must be length 4, but got length " + s25.length + ".";
        }), C(4 === u14.rank, function() {
            return "Error in conv2dDerInput: dy must be rank 4, but got rank " + u14.rank;
        }), C(4 === n21.rank, function() {
            return "Error in conv2dDerInput: filter must be rank 4, but got rank " + n21.rank;
        });
        var l12 = "NHWC" === a27 ? s25[3] : s25[1], h6 = "NHWC" === a27 ? u14.shape[3] : u14.shape[1];
        C(l12 === n21.shape[2], function() {
            return "Error in conv2dDerInput: depth of input (" + l12 + ") must match input depth for filter " + n21.shape[2] + ".";
        }), C(h6 === n21.shape[3], function() {
            return "Error in conv2dDerInput: depth of output (" + h6 + ") must match output depth for filter " + n21.shape[3] + ".";
        }), null != i24 && C(A(o24), function() {
            return "Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode " + i24 + " but got pad " + o24 + ".";
        });
        var f7 = Bo(a27), d8 = So(s25, n21.shape, r25, 1, o24, i24, !1, f7), p9 = Lt.runKernelFunc(function(t9, e16) {
            var r28 = t9.conv2dDerInput(u14, n21, d8);
            return e16([
                n21,
                u14
            ]), r28;
        }, {
            dy4D: u14,
            filter: n21
        }, function(t9, e16) {
            var n23 = e16[0], s26 = e16[1];
            return {
                dy4D: function() {
                    return qc(t9, n23, r25, o24, a27, 1, i24);
                },
                filter: function() {
                    return jc(t9, s26, n23.shape, r25, o24, a27, i24);
                }
            };
        });
        return c10 ? p9.as3D(p9.shape[1], p9.shape[2], p9.shape[3]) : p9;
    }
    function zc(t1) {
        var e15 = function(t9) {
            return "number" == typeof t9 ? [
                t9,
                t9,
                t9
            ] : 2 === t9.length ? [
                t9[0],
                t9[1],
                1
            ] : t9;
        }(t1), n21 = e15[0], r25 = e15[1], o24 = e15[2];
        return 1 === n21 && 1 === r25 && 1 === o24;
    }
    function Gc(t1, e15, n21, r25, o24) {
        C(t1.length === e15.rank, function() {
            return "Length of inShape (" + t1.length + ") and rank of dy (" + e15.rank + ") must match";
        });
        var a27 = t1, i24 = e15, s25 = !1;
        4 === e15.rank && (s25 = !0, i24 = e15.as5D(1, e15.shape[0], e15.shape[1], e15.shape[2], e15.shape[3]), a27 = [
            1,
            t1[0],
            t1[1],
            t1[2],
            t1[3]
        ]);
        var u14 = a27[4], c10 = i24.shape[4];
        C(5 === a27.length, function() {
            return "Error in conv3dDerInput: inShape must be length 5, but got length " + a27.length + ".";
        }), C(5 === i24.rank, function() {
            return "Error in conv3dDerInput: dy must be rank 5, but got rank " + i24.rank;
        }), C(5 === n21.rank, function() {
            return "Error in conv3dDerInput: filter must be rank 5, but got rank " + n21.rank;
        }), C(u14 === n21.shape[3], function() {
            return "Error in conv3dDerInput: depth of input (" + u14 + ") must match input depth for filter " + n21.shape[3] + ".";
        }), C(c10 === n21.shape[4], function() {
            return "Error in conv3dDerInput: depth of output (" + c10 + ") must match output depth for filter " + n21.shape[4] + ".";
        });
        var l12 = Ao(a27, n21.shape, r25, 1, o24), h6 = Lt.runKernelFunc(function(t9) {
            return t9.conv3dDerInput(i24, n21, l12);
        }, {
            dy5D: i24
        });
        return s25 ? h6.as4D(h6.shape[1], h6.shape[2], h6.shape[3], h6.shape[4]) : h6;
    }
    var Hc = An({
        conv1d_: function(t1, e15, n21, r25, o24, a27, i24) {
            (void 0) === o24 && (o24 = "NWC"), (void 0) === a27 && (a27 = 1);
            var s25 = mn(t1, "x", "conv1d"), u14 = mn(e15, "filter", "conv1d"), c10 = s25, l12 = !1;
            2 === s25.rank && (l12 = !0, c10 = s25.as3D(1, s25.shape[0], s25.shape[1])), C(3 === c10.rank, function() {
                return "Error in conv1d: input must be rank 3, but got rank " + c10.rank + ".";
            }), C(3 === u14.rank, function() {
                return "Error in conv1d: filter must be rank 3, but got rank " + u14.rank + ".";
            }), null != i24 && C(A(r25), function() {
                return "Error in conv1d: pad must be an integer when using, dimRoundingMode " + i24 + " but got pad " + r25 + ".";
            }), C(c10.shape[2] === u14.shape[1], function() {
                return "Error in conv1d: depth of input (" + c10.shape[2] + ") must match input depth for filter " + u14.shape[1] + ".";
            }), C(Mo(n21, a27), function() {
                return "Error in conv1D: Either stride or dilation must be 1. Got stride " + n21 + " and dilation '" + a27 + "'";
            }), C("NWC" === o24, function() {
                return "Error in conv1d: got dataFormat of " + o24 + " but only NWC is currently supported.";
            });
            var h6 = u14.as4D(1, u14.shape[0], u14.shape[1], u14.shape[2]), f7 = c10.as4D(c10.shape[0], 1, c10.shape[1], c10.shape[2]), d8 = qc(f7, h6, [
                1,
                n21
            ], r25, "NHWC", [
                1,
                a27
            ], i24);
            return l12 ? d8.as2D(d8.shape[2], d8.shape[3]) : d8.as3D(d8.shape[0], d8.shape[2], d8.shape[3]);
        }
    }), qc = An({
        conv2d_: function(t1, e15, n21, r25, o24, a27, i24) {
            (void 0) === o24 && (o24 = "NHWC"), (void 0) === a27 && (a27 = [
                1,
                1
            ]);
            var s25 = mn(t1, "x", "conv2d"), u14 = mn(e15, "filter", "conv2d"), c10 = s25, l12 = !1;
            3 === s25.rank && (l12 = !0, c10 = s25.as4D(1, s25.shape[0], s25.shape[1], s25.shape[2])), C(4 === c10.rank, function() {
                return "Error in conv2d: input must be rank 4, but got rank " + c10.rank + ".";
            }), C(4 === u14.rank, function() {
                return "Error in conv2d: filter must be rank 4, but got rank " + u14.rank + ".";
            }), null != i24 && C(A(r25), function() {
                return "Error in conv2d: pad must be an integer when using, dimRoundingMode " + i24 + " but got pad " + r25 + ".";
            });
            var h6 = "NHWC" === o24 ? c10.shape[3] : c10.shape[1];
            C(h6 === u14.shape[2], function() {
                return "Error in conv2d: depth of input (" + h6 + ") must match input depth for filter " + u14.shape[2] + ".";
            }), C(Mo(n21, a27), function() {
                return "Error in conv2D: Either strides or dilations must be 1. Got strides " + n21 + " and dilations '" + a27 + "'";
            });
            var f7 = Bo(o24), d8 = So(c10.shape, u14.shape, n21, a27, r25, i24, !1, f7), p9 = [
                u14,
                c10
            ], v11 = Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.conv2d(c10, u14, d8);
                return e16([
                    u14,
                    c10
                ]), n23;
            }, {
                x: c10,
                filter: u14
            }, function(t9, e16) {
                var i25 = e16, s26 = i25[0], u15 = i25[1];
                return C(Oo(a27), function() {
                    return "Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '" + a27 + "'";
                }), {
                    x: function() {
                        return Xc(u15.shape, t9, s26, n21, r25, o24);
                    },
                    filter: function() {
                        return jc(u15, t9, s26.shape, n21, r25, o24);
                    }
                };
            }, "Conv2D", d8, p9);
            return l12 ? v11.as3D(v11.shape[1], v11.shape[2], v11.shape[3]) : v11;
        }
    }), Kc = An({
        conv3d_: function(t1, e15, n21, r25, o24, a27) {
            (void 0) === o24 && (o24 = "NDHWC"), (void 0) === a27 && (a27 = [
                1,
                1,
                1
            ]);
            var i24 = mn(t1, "x", "conv3d"), s25 = mn(e15, "filter", "conv3d"), u14 = i24, c10 = !1;
            4 === i24.rank && (c10 = !0, u14 = i24.as5D(1, i24.shape[0], i24.shape[1], i24.shape[2], i24.shape[3])), C(5 === u14.rank, function() {
                return "Error in conv3d: input must be rank 5, but got rank " + u14.rank + ".";
            }), C(5 === s25.rank, function() {
                return "Error in conv3d: filter must be rank 5, but got rank " + s25.rank + ".";
            }), C(u14.shape[4] === s25.shape[3], function() {
                return "Error in conv3d: depth of input (" + u14.shape[4] + ") must match input depth for filter " + s25.shape[3] + ".";
            }), C(function(t9, e16) {
                return zc(t9) || zc(e16);
            }(n21, a27), function() {
                return "Error in conv3D: Either strides or dilations must be 1. Got strides " + n21 + " and dilations '" + a27 + "'";
            }), C("NDHWC" === o24, function() {
                return "Error in conv3d: got dataFormat of " + o24 + " but only NDHWC is currently supported.";
            });
            var l12 = Ao(u14.shape, s25.shape, n21, a27, r25), h6 = Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.conv3d(u14, s25, l12);
                return e16([
                    u14,
                    s25
                ]), n23;
            }, {
                x: u14,
                $filter: s25
            }, function(t9, e16) {
                C(zc(a27), function() {
                    return "Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '" + a27 + "'";
                });
                var o31 = e16[0], i25 = e16[1];
                return {
                    x: function() {
                        return Gc(o31.shape, t9, i25, n21, r25);
                    },
                    $filter: function() {
                        return (function(t10, e17, n23, r28, o32) {
                            var a28 = t10;
                            4 === t10.rank && (a28 = t10.as5D(1, t10.shape[0], t10.shape[1], t10.shape[2], t10.shape[3]));
                            var i26 = e17;
                            4 === i26.rank && (i26 = e17.as5D(1, e17.shape[0], e17.shape[1], e17.shape[2], e17.shape[3]));
                            C(5 === a28.rank, function() {
                                return "Error in conv3dDerFilter: input must be rank 5, but got shape " + a28.shape + ".";
                            }), C(5 === i26.rank, function() {
                                return "Error in conv3dDerFilter: dy must be rank 5, but got shape " + i26.shape + ".";
                            }), C(5 === n23.length, function() {
                                return "Error in conv3dDerFilter: filterShape must be length 5, but got " + n23 + ".";
                            }), C(a28.shape[4] === n23[3], function() {
                                return "Error in conv3dDerFilter: depth of input " + a28.shape[4] + ") must match input depth in filter (" + n23[3] + ".";
                            }), C(i26.shape[4] === n23[4], function() {
                                return "Error in conv3dDerFilter: depth of dy (" + i26.shape[4] + ") must match output depth for filter (" + n23[4] + ").";
                            });
                            var s26 = Ao(a28.shape, n23, r28, 1, o32);
                            return Lt.runKernelFunc(function(t11) {
                                return t11.conv3dDerFilter(a28, i26, s26);
                            }, {
                                x5D: a28,
                                dy5D: i26
                            });
                        })(o31, t9, i25.shape, n21, r25);
                    }
                };
            });
            return c10 ? h6.as4D(h6.shape[1], h6.shape[2], h6.shape[3], h6.shape[4]) : h6;
        }
    }), jc = An({
        conv2dDerFilter_: function(t1, e15, n21, r25, o24, a27, i24) {
            (void 0) === a27 && (a27 = "NHWC");
            var s25 = t1;
            3 === t1.rank && (s25 = t1.as4D(1, t1.shape[0], t1.shape[1], t1.shape[2]));
            var u14 = e15;
            3 === u14.rank && (u14 = e15.as4D(1, e15.shape[0], e15.shape[1], e15.shape[2])), C(4 === s25.rank, function() {
                return "Error in conv2dDerFilter: input must be rank 4, but got shape " + s25.shape + ".";
            }), C(4 === u14.rank, function() {
                return "Error in conv2dDerFilter: dy must be rank 4, but got shape " + u14.shape + ".";
            }), C(4 === n21.length, function() {
                return "Error in conv2dDerFilter: filterShape must be length 4, but got " + n21 + ".";
            });
            var c10 = "NHWC" === a27 ? s25.shape[3] : s25.shape[1], l12 = "NHWC" === a27 ? u14.shape[3] : u14.shape[1];
            C(c10 === n21[2], function() {
                return "Error in conv2dDerFilter: depth of input " + c10 + ") must match input depth in filter (" + n21[2] + ".";
            }), C(l12 === n21[3], function() {
                return "Error in conv2dDerFilter: depth of dy (" + l12 + ") must match output depth for filter (" + n21[3] + ").";
            }), null != i24 && C(A(o24), function() {
                return "Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode " + i24 + " but got pad " + o24 + ".";
            });
            var h6 = Bo(a27), f7 = So(s25.shape, n21, r25, 1, o24, i24, !1, h6);
            return Lt.runKernelFunc(function(t9) {
                return t9.conv2dDerFilter(s25, u14, f7);
            }, {
                x4D: s25,
                dy4D: u14
            });
        }
    }), Xc = An({
        conv2dDerInput_: Vc
    }), Yc = An({
        depthwiseConv2d_: function(t1, e15, n21, r25, o24, a27, i24) {
            (void 0) === a27 && (a27 = [
                1,
                1
            ]);
            var s25 = mn(t1, "x", "depthwiseConv2d"), u14 = mn(e15, "filter", "depthwiseConv2d"), c10 = s25, l12 = !1;
            3 === s25.rank && (l12 = !0, c10 = s25.as4D(1, s25.shape[0], s25.shape[1], s25.shape[2])), C(4 === c10.rank, function() {
                return "Error in depthwiseConv2d: input must be rank 4, but got rank " + c10.rank + ".";
            }), C(4 === u14.rank, function() {
                return "Error in depthwiseConv2d: filter must be rank 4, but got rank " + u14.rank + ".";
            }), C(c10.shape[3] === u14.shape[2], function() {
                return "Error in depthwiseConv2d: number of input channels (" + c10.shape[3] + ") must match the inChannels dimension in filter " + u14.shape[2] + ".";
            }), null == a27 && (a27 = [
                1,
                1
            ]), C(Mo(n21, a27), function() {
                return "Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides " + n21 + " and dilations '" + a27 + "'";
            }), null != i24 && C(A(r25), function() {
                return "Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode " + i24 + " but got pad " + r25 + ".";
            });
            var h6 = So(c10.shape, u14.shape, n21, a27, r25, i24, !0), f7 = [
                c10,
                u14
            ], d8 = Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.depthwiseConv2D(c10, u14, h6);
                return e16([
                    c10,
                    u14
                ]), n23;
            }, {
                x: c10,
                filter: u14
            }, function(t9, e16) {
                C(Oo(a27), function() {
                    return "Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '" + a27 + "'";
                });
                var n23 = e16[0], r28 = e16[1];
                return {
                    x: function() {
                        return $c(n23.shape, t9, r28, h6);
                    },
                    filter: function() {
                        return Qc(n23, t9, r28.shape, h6);
                    }
                };
            }, "DepthwiseConv2dNative", h6, f7);
            return l12 ? d8.as3D(d8.shape[1], d8.shape[2], d8.shape[3]) : d8;
        }
    }), $c = An({
        depthwiseConv2dDerInput_: function(t1, e15, n21, r25) {
            var o24 = e15, a27 = !1;
            3 === e15.rank && (a27 = !0, o24 = e15.as4D(1, e15.shape[0], e15.shape[1], e15.shape[2]));
            var i24 = Lt.runKernelFunc(function(t9) {
                return t9.depthwiseConv2DDerInput(o24, n21, r25);
            }, {
                dy4D: o24
            });
            return a27 ? i24.as3D(i24.shape[1], i24.shape[2], i24.shape[3]) : i24;
        }
    }), Qc = An({
        depthwiseConv2dDerFilter_: function(t1, e15, n21, r25) {
            var o24 = t1;
            3 === t1.rank && (o24 = t1.as4D(1, t1.shape[0], t1.shape[1], t1.shape[2]));
            var a27 = e15;
            return 3 === a27.rank && (a27 = e15.as4D(1, e15.shape[0], e15.shape[1], e15.shape[2])), Lt.runKernelFunc(function(t9) {
                return t9.depthwiseConv2DDerFilter(o24, a27, r25);
            }, {
                x4D: o24,
                dy4D: a27
            });
        }
    }), Jc = An({
        separableConv2d_: function(t1, e15, n21, r25, o24, a27, i24) {
            (void 0) === a27 && (a27 = [
                1,
                1
            ]), (void 0) === i24 && (i24 = "NHWC");
            var s25 = mn(t1, "x", "separableConv2d"), u14 = mn(e15, "depthwiseFilter", "separableConv2d"), c10 = mn(n21, "pointwiseFilter", "separableConv2d"), l12 = s25, h6 = !1;
            if (3 === s25.rank && (h6 = !0, l12 = s25.as4D(1, s25.shape[0], s25.shape[1], s25.shape[2])), "NCHW" === i24) throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
            C(4 === l12.rank, function() {
                return "Error in separableConv2d: input must be rank 4, but got rank " + l12.rank + ".";
            }), C(4 === u14.rank, function() {
                return "Error in separableConv2d: depthwise filter must be rank 4, but got rank " + u14.rank + ".";
            }), C(4 === c10.rank, function() {
                return "Error in separableConv2d: pointwise filter must be rank 4, but got rank " + u14.rank + ".";
            }), C(1 === c10.shape[0], function() {
                return "Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got " + c10.shape[0] + ".";
            }), C(1 === c10.shape[1], function() {
                return "Error in separableConv2d: the second dimension of pointwise filter must be 1, but got " + c10.shape[1] + ".";
            });
            var f7 = u14.shape[2], d8 = u14.shape[3];
            C(c10.shape[2] === f7 * d8, function() {
                return "Error in separableConv2d: the third dimension of pointwise filter must be " + f7 * d8 + ", but got " + c10.shape[2] + ".";
            });
            var p9 = Yc(l12, u14, r25, o24, i24, a27), v11 = qc(p9, c10, 1, "valid", i24);
            return h6 ? v11.as3D(v11.shape[1], v11.shape[2], v11.shape[3]) : v11;
        }
    }), Zc = An({
        conv2dTranspose_: function(t1, e15, n21, r25, o24, a27) {
            return Vc(n21, mn(t1, "x", "conv2dTranspose"), mn(e15, "filter", "conv2dTranspose"), r25, o24, "NHWC", a27);
        }
    }), tl = An({
        conv3dTranspose_: function(t1, e15, n21, r25, o24) {
            return Gc(n21, mn(t1, "x", "conv3dTranspose"), mn(e15, "filter", "conv3dTranspose"), r25, o24);
        }
    });
    var el = An({
        matMul_: function(t1, e15, n21, r25) {
            var o24;
            (void 0) === n21 && (n21 = !1), (void 0) === r25 && (r25 = !1);
            var a27 = mn(t1, "a", "matMul"), i24 = mn(e15, "b", "matMul");
            o24 = Nt(a27, i24), a27 = o24[0], i24 = o24[1];
            var s25 = n21 ? a27.shape[a27.rank - 2] : a27.shape[a27.rank - 1], u14 = r25 ? i24.shape[i24.rank - 1] : i24.shape[i24.rank - 2], c10 = n21 ? a27.shape[a27.rank - 1] : a27.shape[a27.rank - 2], l12 = r25 ? i24.shape[i24.rank - 2] : i24.shape[i24.rank - 1], h6 = a27.shape.slice(0, -2), f7 = i24.shape.slice(0, -2), d8 = k(h6), p9 = k(f7);
            C(a27.rank >= 2 && i24.rank >= 2 && a27.rank === i24.rank, function() {
                return "Error in matMul: inputs must have the same rank of at least 2, got ranks " + a27.rank + " and " + i24.rank + ".";
            }), C(S(h6, f7), function() {
                return "Error in matMul: outer dimensions (" + h6 + ") and (" + f7 + ") of Tensors with shapes " + a27.shape + " and " + i24.shape + " must match.";
            }), C(s25 === u14, function() {
                return "Error in matMul: inner shapes (" + s25 + ") and (" + u14 + ") of Tensors with shapes " + a27.shape + " and " + i24.shape + " and transposeA=" + n21 + " and transposeB=" + r25 + " must match.";
            });
            var v11 = a27.shape.slice(0, -2).concat([
                c10,
                l12
            ]), m11 = n21 ? a27.as3D(d8, s25, c10) : a27.as3D(d8, c10, s25), g11 = r25 ? i24.as3D(p9, l12, u14) : i24.as3D(p9, u14, l12), y7 = {
                transposeA: n21,
                transposeB: r25
            };
            return Lt.runKernelFunc(function(t9, e16) {
                var o31 = t9.batchMatMul(m11, g11, n21, r25);
                return e16([
                    m11,
                    g11
                ]), o31;
            }, {
                a: m11,
                b: g11
            }, function(t9, e16) {
                var o31 = e16, a28 = o31[0], i25 = o31[1];
                return n21 || r25 ? !n21 && r25 ? {
                    a: function() {
                        return t9.matMul(i25, !1, !1);
                    },
                    b: function() {
                        return t9.matMul(a28, !0, !1);
                    }
                } : n21 && !r25 ? {
                    a: function() {
                        return i25.matMul(t9, !1, !0);
                    },
                    b: function() {
                        return a28.matMul(t9, !1, !1);
                    }
                } : {
                    a: function() {
                        return i25.matMul(t9, !0, !0);
                    },
                    b: function() {
                        return t9.matMul(a28, !0, !0);
                    }
                } : {
                    a: function() {
                        return t9.matMul(i25, !1, !0);
                    },
                    b: function() {
                        return a28.matMul(t9, !0, !1);
                    }
                };
            }, "BatchMatMul", y7).reshape(v11);
        }
    }), nl = An({
        dot_: function(t1, e15) {
            var n21 = mn(t1, "t1", "dot"), r25 = mn(e15, "t2", "dot");
            C(!(1 !== n21.rank && 2 !== n21.rank || 1 !== r25.rank && 2 !== r25.rank), function() {
                return "Error in dot: inputs must all be rank 1 or 2, but got ranks " + n21.rank + " and " + r25.rank + ".";
            });
            var o24 = 1 === n21.rank ? n21.size : n21.shape[1], a27 = 1 === r25.rank ? r25.size : r25.shape[0];
            return C(o24 === a27, function() {
                return "Error in dot: inner dimensions of inputs must match, but got " + o24 + " and " + a27 + ".";
            }), 1 === n21.rank && 1 === r25.rank ? n21.as2D(1, -1).matMul(r25.as2D(-1, 1)).asScalar() : 1 === n21.rank && 2 === r25.rank ? n21.as2D(1, -1).matMul(r25.as2D(r25.shape[0], r25.shape[1])).as1D() : 2 === n21.rank && 1 === r25.rank ? n21.matMul(r25.as2D(-1, 1)).as1D() : n21.matMul(r25.as2D(r25.shape[0], r25.shape[1]));
        }
    }), rl = An({
        outerProduct_: function(t1, e15) {
            var n21 = mn(t1, "v1", "outerProduct"), r25 = mn(e15, "v2", "outerProduct");
            return C(1 === n21.rank && 1 === r25.rank, function() {
                return "Error in outerProduct: inputs must be rank 1, but got ranks " + n21.rank + " and " + r25.rank + ".";
            }), n21.as2D(-1, 1).matMul(r25.as2D(1, -1));
        }
    });
    var ol = An({
        reverse_: function(t1, e15) {
            var n21 = mn(t1, "x", "reverse");
            if (0 === n21.rank) return n21.clone();
            var r25 = O(e15, n21.shape);
            return Lt.runKernelFunc(function(t9) {
                return t9.reverse(n21, r25);
            }, {
                $x: n21
            }, function(t9) {
                return {
                    $x: function() {
                        return t9.reverse(r25);
                    }
                };
            }).reshapeAs(n21);
        }
    }), al = An({
        reverse1d_: function(t1) {
            var e15 = mn(t1, "x", "reverse");
            return C(1 === e15.rank, function() {
                return "Error in reverse1D: x must be rank 1 but got rank " + e15.rank + ".";
            }), ol(e15, 0);
        }
    }), il = An({
        reverse2d_: function(t1, e15) {
            var n21 = mn(t1, "x", "reverse");
            return C(2 === n21.rank, function() {
                return "Error in reverse2D: x must be rank 2 but got rank " + n21.rank + ".";
            }), ol(n21, e15);
        }
    }), sl = An({
        reverse3d_: function(t1, e15) {
            var n21 = mn(t1, "x", "reverse");
            return C(3 === n21.rank, function() {
                return "Error in reverse3D: x must be rank 3 but got rank " + n21.rank + ".";
            }), ol(n21, e15);
        }
    }), ul = An({
        reverse4d_: function(t1, e15) {
            var n21 = mn(t1, "x", "reverse");
            return C(4 === n21.rank, function() {
                return "Error in reverse4D: x must be rank 4 but got rank " + n21.rank + ".";
            }), ol(n21, e15);
        }
    });
    function cl(t1, e15, n21, r25, o24, a27) {
        var i24 = mn(t1, "x", "maxPool"), s25 = i24, u14 = !1;
        3 === i24.rank && (u14 = !0, s25 = i24.as4D(1, i24.shape[0], i24.shape[1], i24.shape[2])), null == r25 && (r25 = [
            1,
            1
        ]), C(4 === s25.rank, function() {
            return "Error in maxPool: input must be rank 4 but got rank " + s25.rank + ".";
        }), C(Mo(n21, r25), function() {
            return "Error in maxPool: Either strides or dilations must be 1. Got strides " + n21 + " and dilations '" + r25 + "'";
        }), null != a27 && C(A(o24), function() {
            return "Error in maxPool: pad must be an integer when using, dimRoundingMode " + a27 + " but got pad " + o24 + ".";
        });
        var c10 = Io(s25.shape, e15, n21, r25, o24, a27);
        if (1 === c10.filterWidth && 1 === c10.filterHeight && S(c10.inShape, c10.outShape)) return i24.clone();
        var l12 = [
            s25
        ], h6 = Lt.runKernelFunc(function(t9, e16) {
            var n23 = t9.maxPool(s25, c10);
            return e16([
                s25,
                n23
            ]), n23;
        }, {
            x: s25
        }, function(t9, a28) {
            var i25 = a28[0], s26 = a28[1];
            return {
                x: function() {
                    return (function(t10, e16, n23, r28, o31, a29, i26, s28) {
                        var u15 = mn(t10, "dy", "maxPoolBackprop"), c11 = mn(e16, "input", "maxPoolBackprop"), l13 = mn(n23, "output", "maxPoolBackprop");
                        C(c11.rank === u15.rank, function() {
                            return "Rank of input (" + c11.rank + ") does not match rank of dy (" + u15.rank + ")";
                        }), null == a29 && (a29 = [
                            1,
                            1
                        ]);
                        C(Mo(o31, a29), function() {
                            return "Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides " + o31 + " and dilations '" + a29 + "'";
                        }), C(4 === u15.rank, function() {
                            return "Error in maxPoolBackprop: dy must be rank 4 but got rank " + u15.rank + ".";
                        }), C(4 === c11.rank, function() {
                            return "Error in maxPoolBackprop: input must be rank 4 but got rank " + c11.rank + ".";
                        }), null != s28 && C(A(i26), function() {
                            return "Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode " + s28 + " but got pad " + i26 + ".";
                        });
                        var h7 = Io(c11.shape, r28, o31, a29, i26, s28);
                        return Lt.runKernelFunc(function(t11) {
                            return t11.maxPoolBackprop(u15, c11, l13, h7);
                        }, {
                            $dy: u15,
                            $input: c11
                        });
                    })(t9, i25, s26, e15, n21, r25, o24);
                }
            };
        }, "MaxPool", c10, l12);
        return u14 ? h6.as3D(h6.shape[1], h6.shape[2], h6.shape[3]) : h6;
    }
    function ll(t1, e15, n21, r25, o24, a27) {
        var i24 = mn(t1, "x", "avgPool", "float32");
        null == r25 && (r25 = [
            1,
            1
        ]), C(Mo(n21, r25), function() {
            return "Error in avgPool: Either strides or dilations must be 1. Got strides " + n21 + " and dilations '" + r25 + "'";
        });
        var s25 = i24, u14 = !1;
        3 === i24.rank && (u14 = !0, s25 = i24.as4D(1, i24.shape[0], i24.shape[1], i24.shape[2])), C(4 === s25.rank, function() {
            return "Error in avgPool: x must be rank 4 but got rank " + s25.rank + ".";
        }), null != a27 && C(A(o24), function() {
            return "Error in avgPool: pad must be an integer when using, dimRoundingMode " + a27 + " but got pad " + o24 + ".";
        });
        var c10 = Io(s25.shape, e15, n21, r25, o24, a27);
        if (1 === c10.filterWidth && 1 === c10.filterHeight && S(c10.inShape, c10.outShape)) return i24.clone();
        var l12 = Lt.runKernelFunc(function(t9) {
            return t9.avgPool(s25, c10);
        }, {
            x: s25
        }, function(t9) {
            return {
                x: function() {
                    return (function(t10, e16, n23, r28, o31, a28) {
                        var i25 = mn(t10, "dy", "avgPoolBackprop"), s26 = mn(e16, "input", "avgPoolBackprop");
                        C(s26.rank === i25.rank, function() {
                            return "Rank of input (" + s26.rank + ") does not match rank of dy (" + i25.rank + ")";
                        }), null == o31 && (o31 = [
                            1,
                            1
                        ]);
                        C(Mo(r28, o31), function() {
                            return "Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides " + r28 + " and dilations '" + o31 + "'";
                        });
                        var u15 = s26, c11 = i25, l13 = !1;
                        3 === s26.rank && (l13 = !0, u15 = s26.as4D(1, s26.shape[0], s26.shape[1], s26.shape[2]), c11 = i25.as4D(1, i25.shape[0], i25.shape[1], i25.shape[2]));
                        C(4 === c11.rank, function() {
                            return "Error in avgPoolBackprop: dy must be rank 4 but got rank " + c11.rank + ".";
                        }), C(4 === u15.rank, function() {
                            return "Error in avgPoolBackprop: input must be rank 4 but got rank " + u15.rank + ".";
                        });
                        var h6 = Io(u15.shape, n23, r28, o31, a28), f7 = Lt.runKernelFunc(function(t11) {
                            return t11.avgPoolBackprop(c11, u15, h6);
                        }, {
                            dy4D: c11,
                            input4D: u15
                        });
                        if (l13) return f7.as3D(f7.shape[1], f7.shape[2], f7.shape[3]);
                        return f7;
                    })(t9, s25, e15, n21, r25, o24);
                }
            };
        }, "AvgPool", c10);
        return l12 = l12.cast(i24.dtype), u14 ? l12.as3D(l12.shape[1], l12.shape[2], l12.shape[3]) : l12;
    }
    var hl = An({
        maxPool_: function(t1, e15, n21, r25, o24) {
            return cl(t1, e15, n21, 1, r25, o24);
        }
    }), fl = An({
        avgPool_: function(t1, e15, n21, r25, o24) {
            return ll(t1, e15, n21, 1, r25, o24);
        }
    }), dl = An({
        pool_: function(t1, e15, n21, r25, o24, a27) {
            null == o24 && (o24 = [
                1,
                1
            ]), null == a27 && (a27 = 1), 0 === r25 && (r25 = "valid");
            var i24 = mn(t1, "x", "maxPool"), s25 = i24, u14 = !1;
            3 === i24.rank && (u14 = !0, s25 = i24.as4D(1, i24.shape[0], i24.shape[1], i24.shape[2])), C(Mo(a27, o24), function() {
                return "Error in pool: Either strides or dilations must be 1. Got strides " + a27 + " and dilations '" + o24 + "'";
            });
            var c10, l12 = Io(s25.shape, e15, a27, o24, r25), h6 = [
                l12.dilationHeight,
                l12.dilationWidth
            ];
            c10 = "same" === r25 ? (function(t9, e16) {
                var n23 = t9.map(function(t10, n24) {
                    return t10 + (t10 - 1) * (e16[n24] - 1);
                }).map(function(t10) {
                    return t10 - 1;
                }), r28 = n23.map(function(t10) {
                    return Math.floor(t10 / 2);
                }), o31 = n23.map(function(t10, e17) {
                    return t10 - r28[e17];
                });
                return n23.map(function(t10, e17) {
                    return [
                        r28[e17],
                        o31[e17]
                    ];
                });
            })([
                l12.filterHeight,
                l12.filterWidth
            ], h6) : [
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ]
            ];
            var f7 = 1 === h6[0] && 1 === h6[1], d8 = function(t9, e16, n23) {
                var r28 = n23.map(function(t10) {
                    return t10[0];
                }), o31 = n23.map(function(t10) {
                    return t10[1];
                }), a28 = t9.concat(r28, o31), i25 = e16.map(function(t10, e17) {
                    return (t10 - a28[e17] % t10) % t10;
                }), s26 = o31.map(function(t10, e17) {
                    return t10 + i25[e17];
                }), u15 = e16.map(function(t10, e17) {
                    return [
                        r28[e17],
                        s26[e17]
                    ];
                }), c11 = e16.map(function(t10, e17) {
                    return [
                        0,
                        i25[e17]
                    ];
                });
                return [
                    u15,
                    c11
                ];
            }([
                l12.inHeight,
                l12.inWidth
            ], h6, c10), p9 = d8[0], v11 = d8[1], m11 = f7 ? r25 : "valid", g11 = f7 ? s25 : Mr(s25, h6, p9), y7 = ("avg" === n21 ? function() {
                return ll(g11, e15, a27, 1, m11);
            } : function() {
                return cl(g11, e15, a27, 1, m11);
            })(), x7 = f7 ? y7 : vr(y7, h6, v11);
            return u14 ? x7.as3D(x7.shape[1], x7.shape[2], x7.shape[3]) : x7;
        }
    }), pl = An({
        maxPool3d_: function(t1, e15, n21, r25, o24, a27, i24) {
            (void 0) === a27 && (a27 = "NDHWC");
            var s25 = mn(t1, "x", "maxPool3d"), u14 = s25, c10 = !1;
            4 === s25.rank && (c10 = !0, u14 = s25.as5D(1, s25.shape[0], s25.shape[1], s25.shape[2], s25.shape[3])), null == i24 && (i24 = [
                1,
                1,
                1
            ]), C(5 === u14.rank, function() {
                return "Error in maxPool3d: x must be rank 5 but got rank " + u14.rank + ".";
            }), C("NDHWC" === a27, function() {
                return "Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of " + a27;
            }), C(Mo(n21, i24), function() {
                return "Error in maxPool3d: Either strides or dilations must be 1. Got strides " + n21 + " and dilations '" + i24 + "'";
            }), null != o24 && C(A(r25), function() {
                return "Error in maxPool3d: pad must be an integer when using, dimRoundingMode " + o24 + " but got pad " + r25 + ".";
            });
            var l12 = ko(u14.shape, e15, n21, i24, r25, o24, a27), h6 = Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.maxPool3d(u14, l12);
                return e16([
                    u14,
                    n23
                ]), n23;
            }, {
                x: u14
            }, function(t9, a28) {
                var s26 = a28[0], u15 = a28[1];
                return {
                    x: function() {
                        return (function(t10, e16, n23, r28, o31, a29, i25, s28) {
                            var u16 = mn(t10, "dy", "maxPool3dBackprop"), c11 = mn(e16, "input", "maxPool3dBackprop"), l13 = mn(n23, "output", "maxPool3dBackprop"), h7 = u16, f7 = c11, d8 = l13, p9 = !1;
                            4 === c11.rank && (p9 = !0, h7 = u16.as5D(1, u16.shape[0], u16.shape[1], u16.shape[2], u16.shape[3]), f7 = c11.as5D(1, c11.shape[0], c11.shape[1], c11.shape[2], c11.shape[3]), d8 = l13.as5D(1, l13.shape[0], l13.shape[1], l13.shape[2], l13.shape[3]));
                            C(5 === h7.rank, function() {
                                return "Error in maxPool3dBackprop: dy must be rank 5 but got rank " + h7.rank + ".";
                            }), C(5 === f7.rank, function() {
                                return "Error in maxPool3dBackprop: input must be rank 5 but got rank " + f7.rank + ".";
                            }), C(5 === d8.rank, function() {
                                return "Error in maxPool3dBackprop: output must be rank 5 but got rank " + d8.rank + ".";
                            }), null == a29 && (a29 = [
                                1,
                                1,
                                1
                            ]);
                            C(Mo(o31, a29), function() {
                                return "Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides " + o31 + " and dilations '" + a29 + "'";
                            }), null != s28 && C(A(i25), function() {
                                return "Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode " + s28 + " but got pad " + i25 + ".";
                            });
                            var v11 = ko(f7.shape, r28, o31, a29, i25, s28), m11 = Lt.runKernelFunc(function(t11) {
                                return t11.maxPool3dBackprop(h7, f7, d8, v11);
                            }, {
                                dy5D: h7,
                                input5D: f7
                            });
                            if (p9) return m11.as4D(m11.shape[1], m11.shape[2], m11.shape[3], m11.shape[4]);
                            return m11;
                        })(t9, s26, u15, e15, n21, i24, r25, o24);
                    }
                };
            });
            return c10 ? h6.as4D(h6.shape[1], h6.shape[2], h6.shape[3], h6.shape[4]) : h6;
        }
    }), vl = An({
        avgPool3d_: function(t1, e15, n21, r25, o24, a27, i24) {
            (void 0) === a27 && (a27 = "NDHWC");
            var s25 = mn(t1, "x", "avgPool3d", "float32"), u14 = s25, c10 = !1;
            4 === s25.rank && (c10 = !0, u14 = s25.as5D(1, s25.shape[0], s25.shape[1], s25.shape[2], s25.shape[3])), null == i24 && (i24 = [
                1,
                1,
                1
            ]), C(5 === u14.rank, function() {
                return "Error in avgPool3d: x must be rank 5 but got rank " + u14.rank + ".";
            }), C("NDHWC" === a27, function() {
                return "Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of " + a27;
            }), C(Mo(n21, i24), function() {
                return "Error in avgPool3d: Either strides or dilations must be 1. Got strides " + n21 + " and dilations '" + i24 + "'";
            }), null != o24 && C(A(r25), function() {
                return "Error in avgPool3d: pad must be an integer when using, dimRoundingMode " + o24 + " but got pad " + r25 + ".";
            });
            var l12 = ko(u14.shape, e15, n21, i24, r25, o24, a27), h6 = Lt.runKernelFunc(function(t9) {
                return t9.avgPool3d(u14, l12);
            }, {
                x: u14
            }, function(t9) {
                return {
                    x: function() {
                        return (function(t10, e16, n23, r28, o31, a28, i25) {
                            var s26 = mn(t10, "dy", "avgPool3dBackprop"), u15 = mn(e16, "input", "avgPool3dBackprop"), c11 = s26, l13 = u15, h7 = !1;
                            4 === u15.rank && (h7 = !0, c11 = s26.as5D(1, s26.shape[0], s26.shape[1], s26.shape[2], s26.shape[3]), l13 = u15.as5D(1, u15.shape[0], u15.shape[1], u15.shape[2], u15.shape[3]));
                            C(5 === c11.rank, function() {
                                return "Error in avgPool3dBackprop: dy must be rank 5 but got rank " + c11.rank + ".";
                            }), C(5 === l13.rank, function() {
                                return "Error in avgPool3dBackprop: input must be rank 5 but got rank " + l13.rank + ".";
                            }), null == o31 && (o31 = [
                                1,
                                1,
                                1
                            ]);
                            C(Mo(r28, o31), function() {
                                return "Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides " + r28 + " and dilations '" + o31 + "'";
                            }), null != i25 && C(A(a28), function() {
                                return "Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode " + i25 + " but got pad " + a28 + ".";
                            });
                            var f7 = ko(l13.shape, n23, r28, o31, a28, i25), d8 = Lt.runKernelFunc(function(t11) {
                                return t11.avgPool3dBackprop(c11, l13, f7);
                            }, {
                                dy5D: c11,
                                input5D: l13
                            });
                            if (h7) return d8.as4D(d8.shape[1], d8.shape[2], d8.shape[3], d8.shape[4]);
                            return d8;
                        })(t9, u14, e15, n21, i24, r25, o24);
                    }
                };
            });
            return h6 = h6.cast(u14.dtype), c10 ? h6.as4D(h6.shape[1], h6.shape[2], h6.shape[3], h6.shape[4]) : h6;
        }
    });
    var ml = An({
        slice_: function(t1, e15, n21) {
            var r25, o24, a27 = mn(t1, "x", "slice");
            if (0 === a27.rank) throw new Error("Slicing scalar is not possible");
            (r25 = "number" == typeof e15 ? [
                e15
            ].concat(new Array(a27.rank - 1).fill(0)) : e15.length < a27.rank ? e15.concat(new Array(a27.rank - e15.length).fill(0)) : e15.slice()).forEach(function(t9) {
                C(-1 !== t9, function() {
                    return "slice() does not support negative begin indexing.";
                });
            }), o24 = (o24 = null == n21 ? new Array(a27.rank).fill(-1) : "number" == typeof n21 ? [
                n21
            ].concat(new Array(a27.rank - 1).fill(-1)) : n21.length < a27.rank ? n21.concat(new Array(a27.rank - n21.length).fill(-1)) : n21).map(function(t9, e16) {
                return t9 >= 0 ? t9 : (C(-1 === t9, function() {
                    return "Negative size values should be exactly -1 but got " + t9 + " for the slice() size at index " + e16 + ".";
                }), a27.shape[e16] - r25[e16]);
            }), eo(a27, r25, o24);
            var i24 = a27.shape, s25 = {
                begin: r25,
                size: o24
            };
            return Lt.runKernelFunc(function(t9) {
                return t9.slice(a27, r25, o24);
            }, {
                x: a27
            }, function(t9) {
                for(var e16 = [], n23 = 0; n23 < t9.rank; n23++)e16.push([
                    r25[n23],
                    i24[n23] - r25[n23] - o24[n23]
                ]);
                return {
                    x: function() {
                        return t9.pad(e16);
                    }
                };
            }, "Slice", s25);
        }
    }), gl = An({
        slice1d_: function(t1, e15, n21) {
            var r25 = mn(t1, "x", "slice1d");
            return C(1 === r25.rank, function() {
                return "slice1d expects a rank-1 tensor, but got a rank-" + r25.rank + " tensor";
            }), ml(r25, [
                e15
            ], [
                n21
            ]);
        }
    }), yl = An({
        slice2d_: function(t1, e15, n21) {
            var r25 = mn(t1, "x", "slice2d");
            return C(2 === r25.rank, function() {
                return "slice2d expects a rank-2 tensor, but got a rank-" + r25.rank + " tensor";
            }), ml(r25, e15, n21);
        }
    }), xl = An({
        slice3d_: function(t1, e15, n21) {
            var r25 = mn(t1, "x", "slice3d");
            return C(3 === r25.rank, function() {
                return "slice3d expects a rank-3 tensor, but got a rank-" + r25.rank + " tensor";
            }), ml(r25, e15, n21);
        }
    }), bl = An({
        slice4d_: function(t1, e15, n21) {
            var r25 = mn(t1, "x", "slice4d");
            return C(4 === r25.rank, function() {
                return "slice4d expects a rank-4 tensor, but got a rank-" + r25.rank + " tensor";
            }), ml(r25, e15, n21);
        }
    });
    function wl(t1, e15, n21, r25, o24) {
        return e15.rank < n21.rank && (e15 = e15.reshape(wn(e15.shape, r25))), t1.rank < n21.rank && (t1 = t1.reshape(wn(t1.shape, r25))), {
            x: function() {
                var r28 = t1.mul(n21.equal(e15).cast(t1.dtype));
                return null == o24 ? r28 : r28.transpose(o24);
            }
        };
    }
    var Cl = An({
        all_: function(t1, e15, n21) {
            (void 0) === e15 && (e15 = null), (void 0) === n21 && (n21 = !1);
            var r25 = mn(t1, "x", "all", "bool"), o24 = O(e15, r25.shape), a27 = o24, i24 = En(a27, r25.rank);
            null != i24 && (r25 = r25.transpose(i24), a27 = In(a27.length, r25.rank));
            var s25 = Lt.runKernelFunc(function(t9) {
                return t9.all(r25, a27);
            }, {
                $x: r25
            });
            if (n21) {
                var u14 = wn(s25.shape, o24);
                return s25.reshape(u14);
            }
            return s25;
        }
    }), El = An({
        any_: function(t1, e15, n21) {
            (void 0) === e15 && (e15 = null), (void 0) === n21 && (n21 = !1);
            var r25 = mn(t1, "x", "any", "bool"), o24 = O(e15, r25.shape), a27 = o24, i24 = En(a27, r25.rank);
            null != i24 && (r25 = r25.transpose(i24), a27 = In(a27.length, r25.rank));
            var s25 = Lt.runKernelFunc(function(t9) {
                return t9.any(r25, a27);
            }, {
                $x: r25
            });
            if (n21) {
                var u15 = wn(s25.shape, o24);
                return s25.reshape(u15);
            }
            return s25;
        }
    }), Rl = An({
        argMax_: function(t1, e15) {
            (void 0) === e15 && (e15 = 0);
            var n21 = mn(t1, "x", "argMax");
            null == e15 && (e15 = 0);
            var r25 = O(e15, n21.shape), o24 = En(r25, n21.rank);
            null != o24 && (n21 = n21.transpose(o24), r25 = In(r25.length, n21.rank));
            var a27 = {
                axis: r25[0]
            }, i24 = [
                n21
            ];
            return Lt.runKernelFunc(function(t9, e16) {
                var o31 = t9.argMax(n21, r25[0]);
                return e16([
                    n21
                ]), o31;
            }, {
                x: n21
            }, function(t9, e16) {
                var n23 = e16[0];
                return {
                    x: function() {
                        return Xn(n23);
                    }
                };
            }, "ArgMax", a27, i24);
        }
    }), Il = An({
        argMin_: function(t1, e15) {
            (void 0) === e15 && (e15 = 0);
            var n21 = mn(t1, "x", "argMin");
            null == e15 && (e15 = 0);
            var r25 = O(e15, n21.shape), o24 = En(r25, n21.rank);
            return null != o24 && (n21 = n21.transpose(o24), r25 = In(r25.length, n21.rank)), Lt.runKernelFunc(function(t9, e16) {
                var o31 = t9.argMin(n21, r25[0]);
                return e16([
                    n21
                ]), o31;
            }, {
                $x: n21
            }, function(t9, e16) {
                var n23 = e16[0];
                return {
                    $x: function() {
                        return Xn(n23);
                    }
                };
            });
        }
    }), kl = An({
        logSumExp_: function(t1, e15, n21) {
            (void 0) === e15 && (e15 = null), (void 0) === n21 && (n21 = !1);
            var r25 = mn(t1, "x", "logSumExp"), o24 = O(e15, r25.shape), a27 = r25.max(o24, !0), i24 = r25.sub(a27).exp().sum(o24).log(), s25 = a27.reshape(i24.shape).add(i24);
            if (n21) {
                var u16 = wn(s25.shape, o24);
                return s25.reshape(u16);
            }
            return s25;
        }
    }), Sl = An({
        max_: function(t1, e15, n21) {
            (void 0) === e15 && (e15 = null), (void 0) === n21 && (n21 = !1);
            var r25 = mn(t1, "x", "max"), o24 = r25, a27 = O(e15, r25.shape), i24 = a27, s25 = En(i24, r25.rank);
            null != s25 && (r25 = r25.transpose(s25), i24 = In(i24.length, r25.rank));
            var u17 = [
                r25
            ], c10 = Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.max(r25, i24);
                return e16([
                    o24,
                    n23
                ]), n23;
            }, {
                x: r25
            }, function(t9, e16) {
                return wl(t9, e16[1], e16[0], a27, s25);
            }, "Max", {
                axes: i24
            }, u17, [
                !0
            ]);
            if (n21) {
                var l12 = wn(c10.shape, a27);
                c10 = c10.reshape(l12);
            }
            return c10;
        }
    }), Al = An({
        mean_: function(t1, e15, n21) {
            (void 0) === e15 && (e15 = null), (void 0) === n21 && (n21 = !1);
            var r25 = mn(t1, "x", "mean"), o24 = O(e15, r25.shape), a27 = k(bn(r25.shape, o24)[1]);
            return vo(function(t9) {
                var r28 = On(a27);
                return {
                    value: (r28.dtype === t9.dtype ? t9 : t9.cast(r28.dtype)).div(r28).sum(e15, n21),
                    gradFunc: function(e16) {
                        var n23 = t9.shape.slice();
                        return o24.forEach(function(t10) {
                            n23[t10] = 1;
                        }), e16.reshape(n23).mul(zn(t9.shape, "float32")).div(a27);
                    }
                };
            })(r25);
        }
    }), Dl = An({
        min_: function(t1, e15, n21) {
            (void 0) === e15 && (e15 = null), (void 0) === n21 && (n21 = !1);
            var r25 = mn(t1, "x", "min"), o24 = r25, a27 = O(e15, r25.shape), i24 = a27, s25 = En(i24, r25.rank);
            null != s25 && (r25 = r25.transpose(s25), i24 = In(i24.length, r25.rank));
            var u17 = [
                r25
            ], c10 = Lt.runKernelFunc(function(t9, e16) {
                var n23 = t9.min(r25, i24);
                return e16([
                    o24,
                    n23
                ]), n23;
            }, {
                x: r25
            }, function(t9, e16) {
                return wl(t9, e16[1], e16[0], a27, s25);
            }, "Min", {
                axes: i24
            }, u17, [
                !0
            ]);
            if (n21) {
                var l13 = wn(c10.shape, a27);
                c10 = c10.reshape(l13);
            }
            return c10;
        }
    }), Tl = An({
        moments_: function(t1, e15, n21) {
            (void 0) === e15 && (e15 = null), (void 0) === n21 && (n21 = !1);
            var r25 = O(e15, (t1 = mn(t1, "x", "moments")).shape), o24 = t1.mean(r25, n21), a27 = o24.shape;
            n21 || (a27 = wn(o24.shape, r25));
            var i24 = t1.toFloat().sub(o24.reshape(a27)).square();
            return {
                mean: o24,
                variance: i24.mean(r25, n21)
            };
        }
    }), Nl = An({
        sum_: function(t1, e15, n21) {
            (void 0) === e15 && (e15 = null), (void 0) === n21 && (n21 = !1);
            var r25 = mn(t1, "x", "sum");
            "bool" === r25.dtype && (r25 = r25.toInt());
            var o24 = O(e15, r25.shape);
            return vo(function(t9) {
                var e16 = En(o24, t9.rank), r28 = o24, a27 = t9;
                null != e16 && (a27 = t9.transpose(e16), r28 = In(r28.length, t9.rank));
                var i24 = function(e17) {
                    var n23 = t9.shape.slice();
                    return o24.forEach(function(t10) {
                        n23[t10] = 1;
                    }), e17.reshape(n23).mul(zn(t9.shape, "float32"));
                }, s25 = {
                    axes: r28
                }, u17 = Lt.runKernelFunc(function(t10) {
                    return t10.sum(a27, r28);
                }, {
                    x: a27
                }, function(t10) {
                    return {
                        x: function() {
                            return i24(t10);
                        }
                    };
                }, "Sum", s25);
                if (n21) {
                    var c10 = wn(u17.shape, o24);
                    u17 = u17.reshape(c10);
                }
                return {
                    value: u17,
                    gradFunc: i24
                };
            })(r25);
        }
    }), Fl = An({
        prod_: function(t1, e15, n21) {
            (void 0) === e15 && (e15 = null), (void 0) === n21 && (n21 = !1);
            var r25 = mn(t1, "x", "prod");
            "bool" === r25.dtype && (r25 = r25.toInt());
            var o24 = O(e15, r25.shape), a27 = En(o24, r25.rank), i24 = o24, s25 = r25;
            null != a27 && (s25 = r25.transpose(a27), i24 = In(i24.length, r25.rank));
            var u17 = Lt.runKernelFunc(function(t9) {
                return t9.prod(s25, i24);
            }, {
                permutedX: s25
            });
            if (n21) {
                var c11 = wn(u17.shape, o24);
                u17 = u17.reshape(c11);
            }
            return u17;
        }
    });
    var _l = An({
        elu_: function(t1) {
            var e15 = mn(t1, "x", "elu");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.elu(e15);
                return n21([
                    r25
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        return Lt.runKernelFunc(function(e17) {
                            return e17.eluDer(t9, n21);
                        }, {
                            dy: t9,
                            y: n21
                        });
                    }
                };
            });
        }
    }), Ol = An({
        leakyRelu_: function(t1, e15) {
            (void 0) === e15 && (e15 = 0.2);
            var n21 = mn(t1, "x", "leakyRelu");
            return hc(On(e15).mul(n21), n21);
        }
    }), Ml = An({
        prelu_: function(t1, e15) {
            var n21 = mn(t1, "x", "prelu"), r25 = mn(e15, "alpha", "prelu");
            return Lt.runKernelFunc(function(t9, e16) {
                var o24 = t9.prelu(n21, r25);
                return e16([
                    n21,
                    r25
                ]), o24;
            }, {
                x: n21,
                alpha: r25
            }, function(t9, e16) {
                var n23 = e16[0], r28 = e16[1], o24 = n23.greater(0);
                return {
                    x: function() {
                        return ec(o24, t9, t9.mul(r28));
                    },
                    alpha: function() {
                        var e17 = ec(o24, Xn(t9), t9.mul(n23)), a27 = Eo(r28.shape, t9.shape);
                        return a27.length > 0 && (e17 = e17.sum(a27)), e17.reshape(r28.shape);
                    }
                };
            }, "Prelu");
        }
    }), Bl = An({
        relu_: function(t1) {
            var e15 = mn(t1, "x", "relu");
            return "bool" === e15.dtype ? e15.toInt() : Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.relu(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    x: function() {
                        return t9.mulStrict(n21.step().toFloat());
                    }
                };
            }, "Relu");
        }
    }), Pl = An({
        relu6_: function(t1) {
            var e15 = mn(t1, "x", "relu6");
            return "bool" === e15.dtype ? e15.toInt() : Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.relu6(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                x: e15
            }, function(t9, e16) {
                var n21 = e16[0], r25 = n21.lessEqual(6).mul(n21.step());
                return {
                    x: function() {
                        return t9.mulStrict(r25.toFloat());
                    }
                };
            }, "Relu6");
        }
    }), Ll = An({
        selu_: function(t1) {
            var e15 = mn(t1, "x", "selu");
            return Lt.runKernelFunc(function(t9, n21) {
                var r25 = t9.selu(e15);
                return n21([
                    e15
                ]), r25;
            }, {
                $x: e15
            }, function(t9, e16) {
                var n21 = e16[0];
                return {
                    $x: function() {
                        var e17 = n21.greater(On(0)), r25 = On(bs), o24 = On(ws), a27 = t9.mul(o24), i24 = t9.mul(r25).mul(n21.toFloat().exp());
                        return ec(e17, a27, i24);
                    }
                };
            });
        }
    });
    var Wl = An({
        transpose_: function(t1, e15) {
            var n21 = mn(t1, "x", "transpose");
            if (null == e15 && (e15 = n21.shape.map(function(t9, e16) {
                return e16;
            }).reverse()), C(n21.rank === e15.length, function() {
                return "Error in transpose: rank of input " + n21.rank + " must match length of perm " + e15 + ".";
            }), e15.forEach(function(t9) {
                C(t9 >= 0 && t9 < n21.rank, function() {
                    return "All entries in 'perm' must be between 0 and " + (n21.rank - 1) + " but got " + e15;
                });
            }), n21.rank <= 1) return n21.clone();
            var r25 = {
                perm: e15
            };
            return Lt.runKernelFunc(function(t9) {
                return t9.transpose(n21, e15);
            }, {
                x: n21
            }, function(t9) {
                var n23 = Rn(e15);
                return {
                    x: function() {
                        return t9.transpose(n23);
                    }
                };
            }, "Transpose", r25);
        }
    });
    var Ul = An({
        localResponseNormalization_: function(t1, e15, n21, r25, o24) {
            (void 0) === e15 && (e15 = 5), (void 0) === n21 && (n21 = 1), (void 0) === r25 && (r25 = 1), (void 0) === o24 && (o24 = 0.5);
            var a27 = mn(t1, "x", "localResponseNormalization");
            C(4 === a27.rank || 3 === a27.rank, function() {
                return "Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank " + a27.rank + ".";
            }), C(A(e15), function() {
                return "Error in localResponseNormalization: depthRadius must be an integer but got depthRadius " + e15 + ".";
            });
            var i24 = a27, s25 = !1;
            3 === a27.rank && (s25 = !0, i24 = a27.as4D(1, a27.shape[0], a27.shape[1], a27.shape[2]));
            var u17 = Lt.runKernelFunc(function(t9, a28) {
                var s26 = t9.localResponseNormalization4D(i24, e15, n21, r25, o24);
                return a28([
                    i24,
                    s26
                ]), s26;
            }, {
                x4D: i24
            }, function(t9, a28) {
                var i25 = a28[0], s26 = a28[1];
                return {
                    x4D: function() {
                        return Lt.runKernelFunc(function(a29) {
                            return a29.LRNGrad(t9, i25, s26, e15, n21, r25, o24);
                        }, {
                        });
                    }
                };
            });
            return s25 ? u17.as3D(u17.shape[1], u17.shape[2], u17.shape[3]) : u17;
        }
    });
    var Vl = An({
        norm_: function(t1, e15, n21, r25) {
            (void 0) === e15 && (e15 = "euclidean"), (void 0) === n21 && (n21 = null), (void 0) === r25 && (r25 = !1);
            var o24 = function t9(e16, n23, r28) {
                (void 0) === r28 && (r28 = null);
                if (0 === e16.rank) return e16.abs();
                if (1 !== e16.rank && null === r28) return t9(e16.reshape([
                    -1
                ]), n23, r28);
                if (1 === e16.rank || "number" == typeof r28 || Array.isArray(r28) && 1 === r28.length) {
                    if (1 === n23) return e16.abs().sum(r28);
                    if (n23 === 1 / 0) return e16.abs().max(r28);
                    if (n23 === -1 / 0) return e16.abs().min(r28);
                    if ("euclidean" === n23 || 2 === n23) return e16.abs().pow(On(2, "int32")).sum(r28).sqrt();
                    throw new Error("Error in norm: invalid ord value: " + n23);
                }
                if (Array.isArray(r28) && 2 === r28.length) {
                    if (1 === n23) return e16.abs().sum(r28[0]).max(r28[1] - 1);
                    if (n23 === 1 / 0) return e16.abs().sum(r28[1]).max(r28[0]);
                    if (n23 === -1 / 0) return e16.abs().sum(r28[1]).min(r28[0]);
                    if ("fro" === n23 || "euclidean" === n23) return e16.square().sum(r28).sqrt();
                    throw new Error("Error in norm: invalid ord value: " + n23);
                }
                throw new Error("Error in norm: invalid axis: " + r28);
            }(t1 = mn(t1, "x", "norm"), e15, n21), a27 = o24.shape;
            if (r25) {
                var i24 = O(n21, t1.shape);
                a27 = wn(o24.shape, i24);
            }
            return o24.reshape(a27);
        }
    });
    var zl = An({
        basicLSTMCell_: function(t1, e15, n21, r25, o24, a27) {
            var i25 = mn(t1, "forgetBias", "basicLSTMCell"), s25 = mn(e15, "lstmKernel", "basicLSTMCell"), u17 = mn(n21, "lstmBias", "basicLSTMCell"), c12 = mn(r25, "data", "basicLSTMCell"), l14 = mn(o24, "c", "basicLSTMCell"), h6 = mn(a27, "h", "basicLSTMCell"), f7 = c12.concat(h6, 1).matMul(s25).add(u17), d8 = f7.shape[0], p9 = f7.shape[1] / 4, v11 = [
                d8,
                p9
            ], m11 = f7.slice([
                0,
                0
            ], v11), g11 = f7.slice([
                0,
                p9
            ], v11), y7 = f7.slice([
                0,
                2 * p9
            ], v11), x7 = f7.slice([
                0,
                3 * p9
            ], v11), b4 = m11.sigmoid().mulStrict(g11.tanh()).addStrict(l14.mulStrict(i25.add(y7).sigmoid())), w3 = b4.tanh().mulStrict(x7.sigmoid());
            return [
                b4,
                w3
            ];
        }
    }), Gl = An({
        multiRNNCell_: function(t1, e15, n21, r25) {
            for(var o24 = mn(e15, "data", "multiRNNCell"), a27 = gn(n21, "c", "multiRNNCell"), i25 = gn(r25, "h", "multiRNNCell"), s25 = o24, u17 = [], c12 = 0; c12 < t1.length; c12++){
                var l14 = t1[c12](s25, a27[c12], i25[c12]);
                u17.push(l14[0]), u17.push(l14[1]), s25 = l14[1];
            }
            var h6 = [], f7 = [];
            for(c12 = 0; c12 < u17.length; c12 += 2)h6.push(u17[c12]), f7.push(u17[c12 + 1]);
            return [
                h6,
                f7
            ];
        }
    });
    var Hl = An({
        movingAverage_: function(t1, e15, n21, r25, o24) {
            (void 0) === o24 && (o24 = !0);
            var a27 = mn(t1, "v", "movingAverage"), i25 = mn(e15, "x", "movingAverage"), s25 = mn(n21, "decay", "movingAverage");
            Ft(a27, i25), C(S(a27.shape, i25.shape), function() {
                return "Shape mismatch in v and x";
            });
            var u17 = On(1), c12 = u17.sub(s25), l15 = i25.sub(a27).mul(c12);
            if (o24) {
                C(null != r25, function() {
                    return "When using zeroDebias: true, step is required.";
                });
                var h6 = mn(r25, "step", "movingAverage");
                l15 = l15.div(u17.sub(xc(s25, h6)));
            }
            return a27.add(l15);
        }
    });
    var ql = An({
        stridedSlice_: function(t1, e15, n21, r25, o24, a27, i25, s25, u17) {
            if ((void 0) === o24 && (o24 = 0), (void 0) === a27 && (a27 = 0), (void 0) === i25 && (i25 = 0), (void 0) === s25 && (s25 = 0), (void 0) === u17 && (u17 = 0), null == r25 && (r25 = new Array(e15.length)), 0 !== i25) throw new Error("ellipsis mask is not yet supported");
            var c12 = mn(t1, "x", "stridedSlice"), l15 = no(s25), h7 = c12.shape.slice();
            l15.forEach(function(t9) {
                e15[t9] = 0, n21[t9] = 1, h7.splice(t9, 0, 1);
            }), c12 = c12.reshape(h7);
            for(var f7 = 0; f7 < c12.rank; f7++)e15[f7] = oo(o24, e15, r25, c12.shape, f7), n21[f7] = ao(a27, n21, r25, c12.shape, f7), r25[f7] = r25[f7] || 1;
            var d8 = no(u17);
            d8.forEach(function(t9) {
                n21[t9] = e15[t9] + 1, r25[t9] = 1;
            });
            var p9 = ro(e15, n21, r25), v11 = p9.filter(function(t9, e16) {
                return -1 === d8.indexOf(e16);
            });
            return r25.every(function(t9) {
                return 1 === t9;
            }) ? ml(c12, e15, p9).reshape(v11) : Lt.runKernelFunc(function(t9) {
                return t9.stridedSlice(c12, e15, n21, r25);
            }, {
                $x: c12
            }).reshape(v11);
        }
    });
    var Kl = An({
        topk_: function(t1, e15, n21) {
            (void 0) === e15 && (e15 = 1), (void 0) === n21 && (n21 = !0);
            var r25 = mn(t1, "x", "topk");
            if (0 === r25.rank) throw new Error("topk() expects the input to be of rank 1 or higher");
            var o24 = r25.shape[r25.shape.length - 1];
            if (e15 > o24) throw new Error("'k' passed to topk() must be <= the last dimension (" + o24 + ") but got " + e15);
            var a27 = Lt.runKernelFunc(function(t9) {
                return t9.topk(r25, e15, n21);
            }, {
                $x: r25
            });
            return {
                values: a27[0],
                indices: a27[1]
            };
        }
    });
    var jl = An({
        scatterND_: function(t1, e15, n21) {
            var r25 = mn(t1, "indices", "scatterND", "int32"), o24 = mn(e15, "updates", "scatterND");
            return Jr(o24, r25, n21), Lt.runKernelFunc(function(t9) {
                return t9.scatterND(r25, o24, n21);
            }, {
                indices: r25,
                updates: o24
            }, null, "ScatterNd", {
                shape: n21
            });
        }
    });
    var Xl = An({
        fft_: function(t1) {
            C("complex64" === t1.dtype, function() {
                return "The dtype for tf.spectral.fft() must be complex64 but got " + t1.dtype + ".";
            });
            var e15 = t1.shape[t1.shape.length - 1], n21 = t1.size / e15, r25 = t1.as2D(n21, e15);
            return Lt.runKernelFunc(function(t9) {
                return t9.fft(r25);
            }, {
                input: t1
            }).reshape(t1.shape);
        }
    }), Yl = An({
        ifft_: function(t1) {
            C("complex64" === t1.dtype, function() {
                return "The dtype for tf.spectral.ifft() must be complex64 but got " + t1.dtype + ".";
            });
            var e15 = t1.shape[t1.shape.length - 1], n21 = t1.size / e15, r25 = t1.as2D(n21, e15);
            return Lt.runKernelFunc(function(t9) {
                return t9.ifft(r25);
            }, {
                input: t1
            }).reshape(t1.shape);
        }
    }), $l = An({
        rfft_: function(t1, e15) {
            C("float32" === t1.dtype, function() {
                return "The dtype for rfft() must be real value but got " + t1.dtype;
            });
            var n21, r25 = t1.shape[t1.shape.length - 1], o24 = t1.size / r25;
            if (null != e15 && e15 < r25) {
                var a27 = t1.shape.map(function(t9) {
                    return 0;
                }), i25 = t1.shape.map(function(t9) {
                    return t9;
                });
                i25[t1.shape.length - 1] = e15, n21 = t1.slice(a27, i25), r25 = e15;
            } else if (null != e15 && e15 > r25) {
                var s25 = t1.shape.map(function(t9) {
                    return t9;
                });
                s25[t1.shape.length - 1] = e15 - r25, n21 = t1.concat(Gn(s25), t1.shape.length - 1), r25 = e15;
            } else n21 = t1;
            var u17 = n21.zerosLike(), c12 = Dn(n21, u17).as2D(o24, r25), l15 = Xl(c12), h7 = Math.floor(r25 / 2) + 1, f7 = Tn(l15), d8 = Nn(l15), p9 = f7.split([
                h7,
                r25 - h7
            ], f7.shape.length - 1), v11 = d8.split([
                h7,
                r25 - h7
            ], d8.shape.length - 1), m11 = n21.shape.slice();
            return m11[n21.shape.length - 1] = h7, Dn(p9[0], v11[0]).reshape(m11);
        }
    }), Ql = An({
        irfft_: function(t1) {
            var e15 = t1.shape[t1.shape.length - 1], n21 = t1.size / e15;
            if (e15 <= 2) {
                var r25 = t1.as2D(n21, e15), o24 = Yl(r25);
                return Tn(o24);
            }
            var a28 = [
                n21,
                2 * (e15 - 1)
            ], i26 = Tn(t1).as2D(n21, e15), s26 = Nn(t1).as2D(n21, e15), u17 = i26.slice([
                0,
                1
            ], [
                n21,
                e15 - 2
            ]).reverse(1), c12 = s26.slice([
                0,
                1
            ], [
                n21,
                e15 - 2
            ]).reverse(1).mul(On(-1)), l15 = i26.concat(u17, 1), h7 = s26.concat(c12, 1);
            return r25 = Dn(l15, h7).as2D(a28[0], a28[1]), o24 = Yl(r25), Tn(o24);
        }
    }), Jl = Object.freeze({
        fft: Xl,
        ifft: Yl,
        rfft: $l,
        irfft: Ql
    });
    var Zl = An({
        sparseToDense_: function(t1, e15, n21, r28) {
            (void 0) === r28 && (r28 = 0);
            var o31 = mn(t1, "sparseIndices", "sparseToDense", "int32"), a28 = mn(e15, "sparseValues", "sparseToDense"), i26 = mn(r28, "defaultValue", "sparseToDense", a28.dtype);
            return (function(t9, e16, n23, r29) {
                if ("int32" !== t9.dtype) throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was " + t9.dtype + ".");
                if (t9.rank > 2) throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape " + t9.shape + ".");
                var o32 = t9.rank > 0 ? t9.shape[0] : 1, a29 = t9.rank > 1 ? t9.shape[1] : 1;
                if (n23.length !== a29) throw new Error("outputShape has incorrect number of elements:, " + n23.length + ", should be: " + a29 + ".");
                var i27 = e16.size;
                if (0 !== e16.rank && (1 !== e16.rank || i27 !== o32)) throw new Error("sparseValues has incorrect shape " + e16.shape + ", should be [] or [" + o32 + "]");
                if (e16.dtype !== r29.dtype) throw new Error("sparseValues.dtype must match defaultValues.dtype");
            })(o31, a28, n21, i26), Lt.runKernelFunc(function(t9) {
                return t9.sparseToDense(o31, a28, n21, i26);
            }, {
                $sparseIndices: o31,
                $sparseValues: a28,
                $defaultValue: i26
            });
        }
    });
    var th = An({
        gatherND_: function(t1, e15) {
            var n21 = mn(e15, "indices", "gatherND", "int32"), r28 = mn(t1, "x", "gatherND");
            return Lt.runKernelFunc(function(t9) {
                return t9.gatherND(r28, n21);
            }, {
                x: r28,
                indices: n21
            }, null, "GatherNd");
        }
    });
    var eh = An({
        diag_: function(t1) {
            var e15 = mn(t1, "x", "diag").flatten(), n21 = t1.shape.concat(t1.shape);
            return Lt.runKernelFunc(function(t9) {
                return t9.diag(e15);
            }, {
                $x: e15
            }).reshape(n21);
        }
    });
    var nh = An({
        dropout_: function(t1, e15, n21, r28) {
            var o31 = mn(t1, "x", "dropout");
            if (C("float32" === o31.dtype, function() {
                return "x has to be a floating point tensor since it's going to be scaled, but got a " + o31.dtype + " tensor instead.";
            }), C(e15 >= 0 && e15 < 1, function() {
                return "rate must be a float in the range [0, 1), but got " + e15 + ".";
            }), 0 === e15) return t1 instanceof wt ? o31.clone() : o31;
            var a28 = function(t9, e16) {
                if (null == e16) return t9.shape.slice();
                if (S(t9.shape, e16)) return e16;
                if (t9.shape.length === e16.length) {
                    for(var n23 = [], r29 = 0; r29 < t9.shape.length; r29++)null == e16[r29] && null != t9.shape[r29] ? n23.push(t9.shape[r29]) : n23.push(e16[r29]);
                    return n23;
                }
                return e16;
            }(o31, n21), i26 = 1 - e15, s26 = _r(a28, 0, 1, "float32", r28).add(i26).floor().div(i26);
            return o31.mul(s26);
        }
    });
    function rh(t1, e15, n21) {
        for(var r28 = 1 - t1 % 2, o31 = new Float32Array(t1), a28 = 0; a28 < t1; ++a28){
            var i26 = 2 * Math.PI * a28 / (t1 + r28 - 1);
            o31[a28] = e15 - n21 * Math.cos(i26);
        }
        return Mn(o31, "float32");
    }
    var oh = An({
        hannWindow_: function(t1) {
            return rh(t1, 0.5, 0.5);
        }
    }), ah = An({
        hammingWindow_: function(t1) {
            return rh(t1, 0.54, 0.46);
        }
    }), ih = An({
        frame_: function(t1, e15, n21, r28, o31) {
            (void 0) === r28 && (r28 = !1), (void 0) === o31 && (o31 = 0);
            for(var a28 = 0, i27 = []; a28 + e15 <= t1.size;)i27.push(ml(t1, a28, e15)), a28 += n21;
            if (r28) for(; a28 < t1.size;){
                var s26 = a28 + e15 - t1.size, u17 = Yn([
                    ml(t1, a28, e15 - s26),
                    Hn([
                        s26
                    ], o31)
                ]);
                i27.push(u17), a28 += n21;
            }
            return 0 === i27.length ? Bn([], [
                0,
                e15
            ]) : Yn(i27).as2D(i27.length, e15);
        }
    }), sh = An({
        stft_: function(t1, e15, n21, r28, o31) {
            var a28;
            (void 0) === o31 && (o31 = oh), null == r28 && (a28 = e15, r28 = Math.floor(Math.pow(2, Math.ceil(Math.log(a28) / Math.log(2)))));
            for(var i27 = ih(t1, e15, n21), s28 = gc(i27, o31(e15)), u18 = [], c12 = 0; c12 < i27.shape[0]; c12++)u18.push($l(s28.slice([
                c12,
                0
            ], [
                1,
                e15
            ]), r28));
            return Yn(u18);
        }
    }), uh = Object.freeze({
        hannWindow: oh,
        hammingWindow: ah,
        frame: ih,
        stft: sh
    });
    var ch, lh = function(t1, e15, o31) {
        return (void 0) === o31 && (o31 = 1), n10(this, void 0, void 0, function() {
            var n21, a28, i27, s28, u18, c12, l15, h7, f7, d8, p9, v11, m11, g11;
            return r17(this, function(r28) {
                switch(r28.label){
                    case 0:
                        return n21 = mn(t1, "predictions", "inTopK"), a28 = mn(e15, "targets", "inTopK"), C(n21.rank > 1, function() {
                            return "inTopK() expects the predictions to be of rank 2 or higher, but got " + n21.rank;
                        }), C(n21.rank - 1 === a28.rank, function() {
                            return "predictions rank should be 1 larger than targets rank, but got predictions rank " + n21.rank + " and targets rank " + a28.rank;
                        }), E(n21.shape.slice(0, n21.shape.length - 1), a28.shape, "predictions's shape should be align with the targets' shape, except the last dimension."), i27 = n21.shape[n21.shape.length - 1], C(o31 > 0 && o31 <= i27, function() {
                            return "'k' passed to inTopK() must be > 0 && <= the predictions last dimension (" + i27 + "), but got " + o31;
                        }), [
                            4,
                            n21.data()
                        ];
                    case 1:
                        return s28 = r28.sent(), [
                            4,
                            a28.data()
                        ];
                    case 2:
                        for(u18 = r28.sent(), c12 = [
                            s28.length / i27,
                            i27
                        ], h7 = c12[1], f7 = B("bool", l15 = c12[0]), d8 = 0; d8 < l15; d8++){
                            for(p9 = d8 * h7, v11 = s28.subarray(p9, p9 + h7), m11 = [], g11 = 0; g11 < v11.length; g11++)m11.push({
                                value: v11[g11],
                                index: g11
                            });
                            for(m11.sort(function(t9, e16) {
                                return e16.value - t9.value;
                            }), f7[d8] = 0, g11 = 0; g11 < o31; g11++)if (m11[g11].index === u18[d8]) {
                                f7[d8] = 1;
                                break;
                            }
                        }
                        return t1 !== n21 && n21.dispose(), e15 !== a28 && a28.dispose(), [
                            2,
                            Fn(f7, a28.shape, "bool")
                        ];
                }
            });
        });
    };
    !function(t1) {
        t1[t1.NONE = 0] = "NONE", t1[t1.MEAN = 1] = "MEAN", t1[t1.SUM = 2] = "SUM", t1[t1.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
    }(ch || (ch = {
    }));
    var hh = An({
        absoluteDifference_: function(t1, e15, n21, r28) {
            (void 0) === r28 && (r28 = ch.SUM_BY_NONZERO_WEIGHTS);
            var o31 = mn(t1, "labels", "absoluteDifference"), a28 = mn(e15, "predictions", "absoluteDifference"), i27 = null;
            null != n21 && (i27 = mn(n21, "weights", "absoluteDifference")), E(o31.shape, a28.shape, "Error in absoluteDifference: ");
            var s28 = o31.sub(a28).abs();
            return fh(s28, i27, r28);
        }
    }), fh = An({
        computeWeightedLoss_: function(t1, e15, n21) {
            (void 0) === n21 && (n21 = ch.SUM_BY_NONZERO_WEIGHTS);
            var r28 = mn(t1, "losses", "computeWeightedLoss"), o31 = null;
            null != e15 && (o31 = mn(e15, "weights", "computeWeightedLoss"));
            var a28 = null == o31 ? r28 : r28.mul(o31);
            if (n21 === ch.NONE) return a28;
            if (n21 === ch.SUM) return a28.sum();
            if (n21 === ch.MEAN) {
                if (null == o31) return a28.mean();
                var i27 = r28.size / o31.size, s28 = a28.sum().div(o31.sum());
                return i27 > 1 ? s28.div(On(i27)) : s28;
            }
            if (n21 === ch.SUM_BY_NONZERO_WEIGHTS) {
                if (null == o31) return a28.sum().div(On(r28.size));
                var u18 = o31.mul(zn(r28.shape)).notEqual(On(0)).sum().toFloat();
                return a28.sum().div(u18);
            }
            throw Error("Unknown reduction: " + n21);
        }
    }), dh = An({
        cosineDistance_: function(t1, e15, n21, r28, o31) {
            (void 0) === o31 && (o31 = ch.SUM_BY_NONZERO_WEIGHTS);
            var a28 = mn(t1, "labels", "cosineDistance"), i28 = mn(e15, "predictions", "cosineDistance"), s29 = null;
            null != r28 && (s29 = mn(r28, "weights", "cosineDistance")), E(a28.shape, i28.shape, "Error in cosineDistance: ");
            var u19 = On(1).sub(a28.mul(i28).sum(n21, !0));
            return fh(u19, s29, o31);
        }
    }), ph = An({
        hingeLoss_: function(t1, e15, n21, r28) {
            (void 0) === r28 && (r28 = ch.SUM_BY_NONZERO_WEIGHTS);
            var o31 = mn(t1, "labels", "hingeLoss"), a28 = mn(e15, "predictions", "hingeLoss"), i28 = null;
            null != n21 && (i28 = mn(n21, "weights", "hingeLoss")), E(o31.shape, a28.shape, "Error in hingeLoss: ");
            var s29 = On(1);
            o31 = On(2).mul(o31).sub(s29);
            var u19 = s29.sub(o31.mul(a28)).relu();
            return fh(u19, i28, r28);
        }
    }), vh = An({
        huberLoss_: function(t1, e15, n21, r28, o31) {
            (void 0) === r28 && (r28 = 1), (void 0) === o31 && (o31 = ch.SUM_BY_NONZERO_WEIGHTS);
            var a28 = mn(t1, "labels", "huberLoss"), i28 = mn(e15, "predictions", "huberLoss"), s29 = null;
            null != n21 && (s29 = mn(n21, "weights", "huberLoss")), E(a28.shape, i28.shape, "Error in huberLoss: ");
            var u19 = On(r28), c12 = i28.sub(a28).abs(), l15 = dc(c12, u19), h7 = c12.sub(l15), f7 = On(0.5).mul(l15.square()).add(u19.mul(h7));
            return fh(f7, s29, o31);
        }
    }), mh = An({
        logLoss_: function(t1, e15, n21, r28, o31) {
            (void 0) === r28 && (r28 = 0.0000001), (void 0) === o31 && (o31 = ch.SUM_BY_NONZERO_WEIGHTS);
            var a28 = mn(t1, "labels", "logLoss"), i28 = mn(e15, "predictions", "logLoss"), s29 = null;
            null != n21 && (s29 = mn(n21, "weights", "logLoss")), E(a28.shape, i28.shape, "Error in logLoss: ");
            var u19 = On(1), c12 = On(r28), l15 = a28.mul(i28.add(c12).log()).neg().sub(u19.sub(a28).mul(u19.sub(i28).add(c12).log()));
            return fh(l15, s29, o31);
        }
    }), gh = An({
        meanSquaredError_: function(t1, e15, n21, r28) {
            (void 0) === r28 && (r28 = ch.SUM_BY_NONZERO_WEIGHTS);
            var o31 = mn(t1, "labels", "meanSquaredError"), a28 = mn(e15, "predictions", "meanSquaredError"), i28 = null;
            null != n21 && (i28 = mn(n21, "weights", "meanSquaredError")), E(o31.shape, a28.shape, "Error in meanSquaredError: ");
            var s29 = o31.squaredDifference(a28);
            return fh(s29, i28, r28);
        }
    }), yh = An({
        sigmoidCrossEntropy_: function(t1, e15, n21, r28, o31) {
            (void 0) === r28 && (r28 = 0), (void 0) === o31 && (o31 = ch.SUM_BY_NONZERO_WEIGHTS);
            var a28 = mn(t1, "multiClassLabels", "sigmoidCrossEntropy"), i28 = mn(e15, "logits", "sigmoidCrossEntropy"), s29 = null;
            if (null != n21 && (s29 = mn(n21, "weights", "sigmoidCrossEntropy")), E(a28.shape, i28.shape, "Error in sigmoidCrossEntropy: "), r28 > 0) {
                var u19 = On(r28), c12 = On(1), l15 = On(0.5);
                a28 = a28.mul(c12.sub(u19)).add(l15.mul(u19));
            }
            var h7 = function(t9, e16) {
                var n24 = mn(t9, "labels", "sigmoidCrossEntropyWithLogits"), r30 = mn(e16, "logits", "sigmoidCrossEntropyWithLogits");
                E(n24.shape, r30.shape, "Error in sigmoidCrossEntropyWithLogits: ");
                var o32 = r30.relu(), a29 = r30.mul(n24), i29 = r30.abs().neg().exp().log1p();
                return o32.sub(a29).add(i29);
            }(a28, i28);
            return fh(h7, s29, o31);
        }
    }), xh = An({
        softmaxCrossEntropy_: function(t1, e15, n21, r28, o31) {
            (void 0) === r28 && (r28 = 0), (void 0) === o31 && (o31 = ch.SUM_BY_NONZERO_WEIGHTS);
            var a28 = mn(t1, "onehotLabels", "softmaxCrossEntropy"), i28 = mn(e15, "logits", "softmaxCrossEntropy"), s29 = null;
            if (null != n21 && (s29 = mn(n21, "weights", "softmaxCrossEntropy")), E(a28.shape, i28.shape, "Error in softmaxCrossEntropy: "), r28 > 0) {
                var u20 = On(r28), c13 = On(1), l16 = On(a28.shape[1]);
                a28 = a28.mul(c13.sub(u20)).add(u20.div(l16));
            }
            var h7 = function(t9, e16, n24) {
                if ((void 0) === n24 && (n24 = -1), -1 === n24 && (n24 = e16.rank - 1), n24 !== e16.rank - 1) throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank " + e16.rank + " and dim was " + n24);
                return vo(function(t10, e17, r30) {
                    var o32 = e17.logSumExp([
                        n24
                    ], !0), a29 = e17.toFloat().sub(o32);
                    r30([
                        t10,
                        a29
                    ]);
                    return {
                        value: a29.mul(t10).neg().sum([
                            n24
                        ]),
                        gradFunc: function(t11, e18) {
                            var r31 = e18[0], o33 = e18[1], a30 = wn(t11.shape, [
                                n24
                            ]);
                            return [
                                t11.reshape(a30).mul(r31.toFloat().sub(o33.exp())),
                                t11.reshape(a30).mul(o33.exp().sub(r31.toFloat()))
                            ];
                        }
                    };
                })(t9, e16);
            }(a28, i28);
            return fh(h7, s29, o31);
        }
    }), bh = Object.freeze({
        get Reduction () {
            return ch;
        },
        absoluteDifference: hh,
        computeWeightedLoss: fh,
        cosineDistance: dh,
        hingeLoss: ph,
        huberLoss: vh,
        logLoss: mh,
        meanSquaredError: gh,
        sigmoidCrossEntropy: yh,
        softmaxCrossEntropy: xh
    });
    function wh(t1, e15) {
        return (void 0) === e15 && (e15 = !1), Lt.tidy(function() {
            if (2 !== t1.shape.length) throw new Error("qr2d() requires a 2D Tensor, but got a " + t1.shape.length + "D Tensor.");
            for(var n21 = t1.shape[0], r28 = t1.shape[1], o31 = Cr(n21), a28 = t1.clone(), i28 = Bn([
                [
                    1
                ]
            ], [
                1,
                1
            ]), s29 = i28.clone(), u21 = n21 >= r28 ? r28 : n21, c14 = function(t9) {
                var e16, u22 = a28, c15 = s29, l17 = o31;
                e16 = Lt.tidy(function() {
                    var e17 = a28.slice([
                        t9,
                        t9
                    ], [
                        n21 - t9,
                        1
                    ]), u23 = e17.norm(), c16 = a28.slice([
                        t9,
                        t9
                    ], [
                        1,
                        1
                    ]), l18 = Bn([
                        [
                            -1
                        ]
                    ]).where(c16.greater(0), Bn([
                        [
                            1
                        ]
                    ])), h7 = c16.sub(l18.mul(u23)), f7 = e17.div(h7);
                    s29 = 1 === f7.shape[0] ? i28.clone() : i28.concat(f7.slice([
                        1,
                        0
                    ], [
                        f7.shape[0] - 1,
                        f7.shape[1]
                    ]), 0);
                    var d8 = l18.matMul(h7).div(u23).neg(), p9 = a28.slice([
                        t9,
                        0
                    ], [
                        n21 - t9,
                        r28
                    ]), v11 = d8.mul(s29);
                    if (0 === t9) a28 = p9.sub(v11.matMul(s29.transpose().matMul(p9)));
                    else {
                        var m11 = p9.sub(v11.matMul(s29.transpose().matMul(p9)));
                        a28 = a28.slice([
                            0,
                            0
                        ], [
                            t9,
                            r28
                        ]).concat(m11, 0);
                    }
                    var g11 = o31.slice([
                        0,
                        t9
                    ], [
                        n21,
                        o31.shape[1] - t9
                    ]);
                    if (0 === t9) o31 = g11.sub(g11.matMul(s29).matMul(v11.transpose()));
                    else {
                        var y7 = g11.sub(g11.matMul(s29).matMul(v11.transpose()));
                        o31 = o31.slice([
                            0,
                            0
                        ], [
                            n21,
                            t9
                        ]).concat(y7, 1);
                    }
                    return [
                        s29,
                        a28,
                        o31
                    ];
                }), s29 = e16[0], a28 = e16[1], o31 = e16[2], tn([
                    u22,
                    c15,
                    l17
                ]);
            }, l17 = 0; l17 < u21; ++l17)c14(l17);
            return !e15 && n21 > r28 && (o31 = o31.slice([
                0,
                0
            ], [
                n21,
                r28
            ]), a28 = a28.slice([
                0,
                0
            ], [
                r28,
                r28
            ])), [
                o31,
                a28
            ];
        });
    }
    var Ch = An({
        bandPart_: function(t1, e15, n21) {
            if (e15 % 1 != 0) throw new Error("bandPart(): numLower must be an integer, got " + e15 + ".");
            if (n21 % 1 != 0) throw new Error("bandPart(): numUpper must be an integer, got " + n21 + ".");
            var r28 = mn(t1, "a", "bandPart");
            if (r28.rank < 2) throw new Error("bandPart(): Rank must be at least 2, got " + r28.rank + ".");
            var o31 = r28.shape, a28 = r28.shape.slice(-2), i28 = a28[0], s29 = a28[1];
            if (!(e15 <= i28)) throw new Error("bandPart(): numLower (" + e15 + ") must not be greater than the number of rows (" + i28 + ").");
            if (!(n21 <= s29)) throw new Error("bandPart(): numUpper (" + n21 + ") must not be greater than the number of columns (" + s29 + ").");
            e15 < 0 && (e15 = i28), n21 < 0 && (n21 = s29);
            var u21 = Kn(0, i28, 1, "int32").reshape([
                -1,
                1
            ]), c14 = Kn(0, s29, 1, "int32"), l17 = Cc(u21, c14), h7 = Qu(l17.lessEqual(On(+e15, "int32")), l17.greaterEqual(On(-n21, "int32"))), f7 = Gn([
                i28,
                s29
            ], r28.dtype);
            return Pr(Ur(r28.reshape([
                -1,
                i28,
                s29
            ])).map(function(t9) {
                return ec(h7, t9, f7);
            })).reshape(o31);
        }
    }), Eh = An({
        gramSchmidt_: function(t1) {
            var e15;
            if (Array.isArray(t1)) {
                e15 = !1, C(null != t1 && t1.length > 0, function() {
                    return "Gram-Schmidt process: input must not be null, undefined, or empty";
                });
                for(var n21 = t1[0].shape[0], r28 = function(e16) {
                    C(t1[e16].shape[0] === n21, function() {
                        return "Gram-Schmidt: Non-unique lengths found in the input vectors: (" + t1[e16].shape[0] + " vs. " + n21 + ")";
                    });
                }, o31 = 1; o31 < t1.length; ++o31)r28(o31);
            } else e15 = !0, t1 = tr(t1, t1.shape[0], 0).map(function(t9) {
                return Br(t9, [
                    0
                ]);
            });
            C(t1.length <= t1[0].shape[0], function() {
                return "Gram-Schmidt: Number of vectors (" + t1.length + ") exceeds number of dimensions (" + t1[0].shape[0] + ").";
            });
            var a28 = [], i28 = t1, s29 = function(t9) {
                a28.push(Lt.tidy(function() {
                    var e16 = i28[t9];
                    if (t9 > 0) for(var n24 = 0; n24 < t9; ++n24){
                        var r30 = Nl(a28[n24].mulStrict(e16)).mul(a28[n24]);
                        e16 = e16.sub(r30);
                    }
                    return e16.div(Vl(e16, "euclidean"));
                }));
            };
            for(o31 = 0; o31 < t1.length; ++o31)s29(o31);
            return e15 ? Pr(a28, 0) : a28;
        }
    }), Rh = An({
        qr_: function(t1, e15) {
            if ((void 0) === e15 && (e15 = !1), t1.rank < 2) throw new Error("qr() requires input tensor to have a rank >= 2, but got rank " + t1.rank);
            if (2 === t1.rank) return wh(t1, e15);
            var n24 = t1.shape.slice(0, t1.shape.length - 2).reduce(function(t9, e16) {
                return t9 * e16;
            }), r31 = Ur(t1.reshape([
                n24,
                t1.shape[t1.shape.length - 2],
                t1.shape[t1.shape.length - 1]
            ]), 0), o32 = [], a28 = [];
            return r31.forEach(function(t9) {
                var n25 = wh(t9, e15), r32 = n25[0], i28 = n25[1];
                o32.push(r32), a28.push(i28);
            }), [
                Pr(o32, 0).reshape(t1.shape),
                Pr(a28, 0).reshape(t1.shape)
            ];
        }
    }), Ih = Object.freeze({
        bandPart: Ch,
        gramSchmidt: Eh,
        qr: Rh
    });
    function kh(t1, e15, n24, r31, o32, a28) {
        null == r31 && (r31 = 0.5), null == o32 && (o32 = Number.NEGATIVE_INFINITY), null == a28 && (a28 = 0);
        var i28 = t1.shape[0];
        return n24 = Math.min(n24, i28), C(0 <= r31 && r31 <= 1, function() {
            return "iouThreshold must be in [0, 1], but was '" + r31 + "'";
        }), C(2 === t1.rank, function() {
            return "boxes must be a 2D tensor, but was of rank '" + t1.rank + "'";
        }), C(4 === t1.shape[1], function() {
            return "boxes must have 4 columns, but 2nd dimension was " + t1.shape[1];
        }), C(1 === e15.rank, function() {
            return "scores must be a 1D tensor";
        }), C(e15.shape[0] === i28, function() {
            return "scores has incompatible shape with boxes. Expected " + i28 + ", but was " + e15.shape[0];
        }), C(0 <= a28 && a28 <= 1, function() {
            return "softNmsSigma must be in [0, 1], but was '" + a28 + "'";
        }), {
            maxOutputSize: n24,
            iouThreshold: r31,
            scoreThreshold: o32,
            softNmsSigma: a28
        };
    }
    var Sh = An({
        resizeBilinear_: function(t1, e15, n24) {
            (void 0) === n24 && (n24 = !1);
            var r31 = mn(t1, "images", "resizeBilinear");
            C(3 === r31.rank || 4 === r31.rank, function() {
                return "Error in resizeBilinear: x must be rank 3 or 4, but got rank " + r31.rank + ".";
            }), C(2 === e15.length, function() {
                return "Error in resizeBilinear: new shape must 2D, but got shape " + e15 + ".";
            });
            var o32 = r31, a28 = !1;
            3 === r31.rank && (a28 = !0, o32 = r31.as4D(1, r31.shape[0], r31.shape[1], r31.shape[2]));
            var i28 = e15[0], s29 = e15[1], u21 = Lt.runKernelFunc(function(t9, e16) {
                return e16([
                    o32
                ]), t9.resizeBilinear(o32, i28, s29, n24);
            }, {
                x: o32
            }, function(t9, e16) {
                return {
                    x: function() {
                        return Lt.runKernelFunc(function(r32) {
                            return r32.resizeBilinearBackprop(t9, e16[0], n24);
                        }, {
                        });
                    }
                };
            }, "ResizeBilinear", {
                alignCorners: n24,
                newHeight: i28,
                newWidth: s29
            });
            return a28 ? u21.as3D(u21.shape[1], u21.shape[2], u21.shape[3]) : u21;
        }
    }), Ah = An({
        resizeNearestNeighbor_: function(t1, e15, n24) {
            (void 0) === n24 && (n24 = !1);
            var r31 = mn(t1, "images", "resizeNearestNeighbor");
            C(3 === r31.rank || 4 === r31.rank, function() {
                return "Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank " + r31.rank + ".";
            }), C(2 === e15.length, function() {
                return "Error in resizeNearestNeighbor: new shape must 2D, but got shape " + e15 + ".";
            }), C("float32" === r31.dtype || "int32" === r31.dtype, function() {
                return "`images` must have `int32` or `float32` as dtype";
            });
            var o32 = r31, a28 = !1;
            3 === r31.rank && (a28 = !0, o32 = r31.as4D(1, r31.shape[0], r31.shape[1], r31.shape[2]));
            var i28 = e15[0], s29 = e15[1], u21 = Lt.runKernelFunc(function(t9, e16) {
                return e16([
                    o32
                ]), t9.resizeNearestNeighbor(o32, i28, s29, n24);
            }, {
                batchImages: o32
            }, function(t9, e16) {
                return {
                    batchImages: function() {
                        return Lt.runKernelFunc(function(r32) {
                            return r32.resizeNearestNeighborBackprop(t9, e16[0], n24);
                        }, {
                        });
                    }
                };
            });
            return a28 ? u21.as3D(u21.shape[1], u21.shape[2], u21.shape[3]) : u21;
        }
    }), Dh = An({
        nonMaxSuppression_: function(t1, e15, n24, r31, o32) {
            (void 0) === r31 && (r31 = 0.5), (void 0) === o32 && (o32 = Number.NEGATIVE_INFINITY);
            var a28 = mn(t1, "boxes", "nonMaxSuppression"), i28 = mn(e15, "scores", "nonMaxSuppression"), s29 = kh(a28, i28, n24, r31, o32);
            n24 = s29.maxOutputSize, r31 = s29.iouThreshold, o32 = s29.scoreThreshold;
            var u21 = {
                maxOutputSize: n24,
                iouThreshold: r31,
                scoreThreshold: o32
            };
            return Lt.runKernelFunc(function(t9) {
                return t9.nonMaxSuppression(a28, i28, n24, r31, o32);
            }, {
                boxes: a28,
                scores: i28
            }, null, "NonMaxSuppressionV3", u21);
        }
    }), Th = function(t1, e15, o32, a28, i28) {
        return (void 0) === a28 && (a28 = 0.5), (void 0) === i28 && (i28 = Number.NEGATIVE_INFINITY), n10(this, void 0, void 0, function() {
            var n24, s29, u21, c14, l17, h7, f7;
            return r17(this, function(r31) {
                switch(r31.label){
                    case 0:
                        return n24 = mn(t1, "boxes", "nonMaxSuppressionAsync"), s29 = mn(e15, "scores", "nonMaxSuppressionAsync"), u21 = kh(n24, s29, o32, a28, i28), o32 = u21.maxOutputSize, a28 = u21.iouThreshold, i28 = u21.scoreThreshold, [
                            4,
                            Promise.all([
                                n24.data(),
                                s29.data()
                            ])
                        ];
                    case 1:
                        return c14 = r31.sent(), l17 = c14[0], h7 = c14[1], f7 = jo(l17, h7, o32, a28, i28), n24 !== t1 && n24.dispose(), s29 !== e15 && s29.dispose(), [
                            2,
                            f7
                        ];
                }
            });
        });
    }, Nh = An({
        nonMaxSuppressionWithScore_: function(t1, e15, n24, r31, o32, a28) {
            (void 0) === r31 && (r31 = 0.5), (void 0) === o32 && (o32 = Number.NEGATIVE_INFINITY), (void 0) === a28 && (a28 = 0);
            var i28 = mn(t1, "boxes", "nonMaxSuppression"), s29 = mn(e15, "scores", "nonMaxSuppression"), u21 = kh(i28, s29, n24, r31, o32, a28), c14 = {
                maxOutputSize: n24 = u21.maxOutputSize,
                iouThreshold: r31 = u21.iouThreshold,
                scoreThreshold: o32 = u21.scoreThreshold,
                softNmsSigma: a28 = u21.softNmsSigma
            }, l17 = Lt.runKernel("NonMaxSuppressionV5", {
                boxes: i28,
                scores: s29
            }, c14);
            return {
                selectedIndices: l17[0],
                selectedScores: l17[1]
            };
        }
    }), Fh = function(t1, e15, o32, a28, i28, s29) {
        return (void 0) === a28 && (a28 = 0.5), (void 0) === i28 && (i28 = Number.NEGATIVE_INFINITY), (void 0) === s29 && (s29 = 0), n10(this, void 0, void 0, function() {
            var n24, u21, c14, l17, h7, f7, d8;
            return r17(this, function(r31) {
                switch(r31.label){
                    case 0:
                        return n24 = mn(t1, "boxes", "nonMaxSuppressionAsync"), u21 = mn(e15, "scores", "nonMaxSuppressionAsync"), c14 = kh(n24, u21, o32, a28, i28, s29), o32 = c14.maxOutputSize, a28 = c14.iouThreshold, i28 = c14.scoreThreshold, s29 = c14.softNmsSigma, [
                            4,
                            Promise.all([
                                n24.data(),
                                u21.data()
                            ])
                        ];
                    case 1:
                        return l17 = r31.sent(), h7 = l17[0], f7 = l17[1], d8 = Xo(h7, f7, o32, a28, i28, s29), n24 !== t1 && n24.dispose(), u21 !== e15 && u21.dispose(), [
                            2,
                            d8
                        ];
                }
            });
        });
    }, _h = An({
        cropAndResize_: function(t1, e15, n24, r31, o32, a28) {
            var i28 = mn(t1, "image", "cropAndResize"), s29 = mn(e15, "boxes", "cropAndResize", "float32"), u21 = mn(n24, "boxInd", "cropAndResize", "int32");
            o32 = o32 || "bilinear", a28 = a28 || 0;
            var c14 = s29.shape[0];
            return C(4 === i28.rank, function() {
                return "Error in cropAndResize: image must be rank 4,but got rank " + i28.rank + ".";
            }), C(2 === s29.rank && 4 === s29.shape[1], function() {
                return "Error in cropAndResize: boxes must be have size [" + c14 + ",4] but had shape " + s29.shape + ".";
            }), C(1 === u21.rank && u21.shape[0] === c14, function() {
                return "Error in cropAndResize: boxInd must be have size [" + c14 + "] but had shape " + s29.shape + ".";
            }), C(2 === r31.length, function() {
                return "Error in cropAndResize: cropSize must be of length 2, but got length " + r31.length + ".";
            }), C(r31[0] >= 1 && r31[1] >= 1, function() {
                return "cropSize must be atleast [1,1], but was " + r31;
            }), C("bilinear" === o32 || "nearest" === o32, function() {
                return "method must be bilinear or nearest, but was " + o32;
            }), Lt.runKernelFunc(function(t9, e16) {
                return t9.cropAndResize(i28, s29, u21, r31, o32, a28);
            }, {
                images: i28,
                boxes: s29,
                boxInd: u21
            }, null, "CropAndResize", {
                method: o32,
                extrapolationValue: a28,
                cropSize: r31
            });
        }
    }), Oh = Object.freeze({
        resizeBilinear: Sh,
        resizeNearestNeighbor: Ah,
        nonMaxSuppression: Dh,
        nonMaxSuppressionAsync: Th,
        nonMaxSuppressionWithScore: Nh,
        nonMaxSuppressionWithScoreAsync: Fh,
        cropAndResize: _h
    }), Mh = function(t1, e15) {
        return !(t1 > 0) || "linear" === e15;
    }, Bh = function(t1, e15, n24) {
        if (null == n24 || "linear" === n24) return t1;
        if ("relu" === n24) return t1.mul(e15.step());
        throw new Error("Gradient for activation " + n24 + " has not been implemented yet.");
    }, Ph = function(t1, e15) {
        var n24 = e15, r31 = Eo(t1.shape, e15.shape);
        return r31.length > 0 && (n24 = n24.sum(r31)), n24.reshape(t1.shape);
    }, Lh = function(t1, e15, n24) {
        if ("linear" === e15) return t1;
        if ("relu" === e15) return Bl(t1);
        if ("elu" === e15) return _l(t1);
        if ("relu6" === e15) return Pl(t1);
        if ("prelu" === e15) return Ml(t1, n24);
        throw new Error("Unknown fused activation " + e15 + ".");
    };
    var Wh = An({
        fusedMatMul_: function(t1) {
            var e15, n24 = t1.a, r31 = t1.b, o32 = t1.transposeA, a28 = (void 0) !== o32 && o32, i28 = t1.transposeB, s29 = (void 0) !== i28 && i28, u21 = t1.bias, c14 = t1.activation, l17 = (void 0) === c14 ? "linear" : c14, h7 = t1.preluActivationWeights;
            if (!1 === Mh(Lt.state.gradientDepth, l17)) {
                var f7 = el(n24, r31, a28, s29);
                return null != u21 && (f7 = rc(f7, u21)), Lh(f7, l17, h7);
            }
            var d8 = mn(n24, "a", "fused matMul"), p9 = mn(r31, "b", "fused matMul");
            e15 = Nt(d8, p9), d8 = e15[0], p9 = e15[1];
            var v11 = a28 ? d8.shape[d8.rank - 2] : d8.shape[d8.rank - 1], m12 = s29 ? p9.shape[p9.rank - 1] : p9.shape[p9.rank - 2], g11 = a28 ? d8.shape[d8.rank - 1] : d8.shape[d8.rank - 2], y8 = s29 ? p9.shape[p9.rank - 2] : p9.shape[p9.rank - 1], x7 = d8.shape.slice(0, -2), b4 = p9.shape.slice(0, -2), w3 = k(x7), E1 = k(b4);
            C(d8.rank >= 2 && p9.rank >= 2 && d8.rank === p9.rank, function() {
                return "Error in fused matMul: inputs must have the same rank of at least 2, got ranks " + d8.rank + " and " + p9.rank + ".";
            }), C(S(x7, b4), function() {
                return "Error in fused matMul: outer dimensions (" + x7 + ") and (" + b4 + ") of Tensors with shapes " + d8.shape + " and " + p9.shape + " must match.";
            }), C(v11 === m12, function() {
                return "Error in fused matMul: inner shapes (" + v11 + ") and (" + m12 + ") of Tensors with shapes " + d8.shape + " and " + p9.shape + " and transposeA=" + a28 + " and transposeB=" + s29 + " must match.";
            });
            var R1, I1, A1 = d8.shape.slice(0, -2).concat([
                g11,
                y8
            ]), D1 = a28 ? d8.as3D(w3, v11, g11) : d8.as3D(w3, g11, v11), T1 = s29 ? p9.as3D(E1, y8, m12) : p9.as3D(E1, m12, y8);
            null != u21 && Ro(A1, (R1 = Nt(R1 = mn(u21, "bias", "fused matMul"), d8)[0]).shape), null != h7 && (I1 = mn(h7, "prelu weights", "fused matMul"));
            var N1 = {
                a: D1,
                b: T1
            };
            null != u21 && (N1.bias = R1), null != h7 && (N1.preluActivationWeights = I1);
            var F1 = [
                D1,
                T1
            ];
            return Lt.runKernelFunc(function(t9, e16) {
                var n25 = t9.fusedBatchMatMul({
                    a: D1,
                    b: T1,
                    transposeA: a28,
                    transposeB: s29,
                    bias: R1,
                    activation: l17,
                    preluActivationWeights: I1
                });
                return e16([
                    D1,
                    T1,
                    n25
                ]), n25;
            }, N1, function(t9, e16) {
                var n25 = e16[0], r32 = e16[1], o33 = e16[2], i29 = Bh(t9, o33, l17), c15 = {
                };
                return null != u21 && (c15 = {
                    bias: function() {
                        return Ph(R1, i29);
                    }
                }), a28 || s29 ? !a28 && s29 ? Object.assign({
                    a: function() {
                        return i29.matMul(r32, !1, !1);
                    },
                    b: function() {
                        return i29.matMul(n25, !0, !1);
                    }
                }, c15) : a28 && !s29 ? Object.assign({
                    a: function() {
                        return r32.matMul(i29, !1, !0);
                    },
                    b: function() {
                        return n25.matMul(i29, !1, !1);
                    }
                }, c15) : Object.assign({
                    a: function() {
                        return r32.matMul(i29, !0, !0);
                    },
                    b: function() {
                        return i29.matMul(n25, !0, !0);
                    }
                }, c15) : Object.assign({
                    a: function() {
                        return i29.matMul(r32, !1, !0);
                    },
                    b: function() {
                        return n25.matMul(i29, !0, !1);
                    }
                }, c15);
            }, "_FusedMatMul", {
                transposeA: a28,
                transposeB: s29,
                activation: l17
            }, F1, [
                !0
            ]).reshape(A1);
        }
    }), Uh = An({
        fusedConv2d_: function(t1) {
            var e15 = t1.x, n24 = t1.filter, r31 = t1.strides, o32 = t1.pad, a28 = t1.dataFormat, i28 = (void 0) === a28 ? "NHWC" : a28, s29 = t1.dilations, u21 = (void 0) === s29 ? [
                1,
                1
            ] : s29, c14 = t1.dimRoundingMode, l17 = t1.bias, h7 = t1.activation, f9 = (void 0) === h7 ? "linear" : h7, d8 = t1.preluActivationWeights;
            if (f9 = f9 || "linear", !1 === Mh(Lt.state.gradientDepth, f9)) {
                var p9 = qc(e15, n24, r31, o32, i28, u21, c14);
                return null != l17 && (p9 = rc(p9, l17)), Lh(p9, f9, d8);
            }
            var v11 = mn(e15, "x", "conv2d"), m12 = mn(n24, "filter", "conv2d"), g11 = v11, y8 = !1;
            3 === v11.rank && (y8 = !0, g11 = v11.as4D(1, v11.shape[0], v11.shape[1], v11.shape[2])), C(4 === g11.rank, function() {
                return "Error in fused conv2d: input must be rank 4, but got rank " + g11.rank + ".";
            }), C(4 === m12.rank, function() {
                return "Error in fused conv2d: filter must be rank 4, but got rank " + m12.rank + ".";
            }), null != c14 && C(A(o32), function() {
                return "Error in fused conv2d: pad must be an integer when using, dimRoundingMode " + c14 + " but got pad " + o32 + ".";
            }), C(g11.shape[3] === m12.shape[2], function() {
                return "Error in conv2d: depth of input (" + g11.shape[3] + ") must match input depth for filter " + m12.shape[2] + ".";
            }), C(Mo(r31, u21), function() {
                return "Error in conv2D: Either strides or dilations must be 1. Got strides " + r31 + " and dilations '" + u21 + "'";
            }), C("NHWC" === i28, function() {
                return "Error in conv2d: got dataFormat of " + i28 + " but only NHWC is currently supported.";
            });
            var x7, b4, w3 = So(g11.shape, m12.shape, r31, u21, o32, c14);
            null != l17 && (x7 = Nt(x7 = mn(l17, "bias", "fused conv2d"), v11)[0], Ro(w3.outShape, x7.shape)), null != d8 && (b4 = mn(d8, "prelu weights", "fused conv2d"));
            var E1 = {
                x: g11,
                filter: m12
            };
            null != l17 && (E1.bias = x7), null != d8 && (E1.preluActivationWeights = b4);
            var R1 = [
                m12,
                g11
            ], I1 = Lt.runKernelFunc(function(t9, e16) {
                var n25 = t9.fusedConv2d({
                    input: g11,
                    filter: m12,
                    convInfo: w3,
                    bias: x7,
                    activation: f9,
                    preluActivationWeights: b4
                });
                return e16([
                    m12,
                    g11,
                    n25
                ]), n25;
            }, E1, function(t9, e16) {
                var n25 = e16, a29 = n25[0], i29 = n25[1], s30 = n25[2], c15 = Bh(t9, s30, f9);
                C(Oo(u21), function() {
                    return "Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '" + u21 + "'";
                });
                var h8 = {
                };
                return null != l17 && (h8 = {
                    bias: function() {
                        return Ph(x7, c15);
                    }
                }), Object.assign({
                    x: function() {
                        return Xc(i29.shape, c15, a29, r31, o32);
                    },
                    filter: function() {
                        return jc(i29, c15, a29.shape, r31, o32);
                    }
                }, h8);
            }, "FusedConv2D", {
                convInfo: w3,
                activation: f9
            }, R1, [
                !0
            ]);
            return y8 ? I1.as3D(I1.shape[1], I1.shape[2], I1.shape[3]) : I1;
        }
    }), Vh = An({
        fusedDepthwiseConv2d_: function(t1) {
            var e15 = t1.x, n24 = t1.filter, r31 = t1.strides, o32 = t1.pad, a28 = t1.dataFormat, i28 = (void 0) === a28 ? "NHWC" : a28, s29 = t1.dilations, u21 = (void 0) === s29 ? [
                1,
                1
            ] : s29, c14 = t1.dimRoundingMode, l17 = t1.bias, h7 = t1.activation, f9 = (void 0) === h7 ? "linear" : h7, d8 = t1.preluActivationWeights;
            if (!1 === Mh(Lt.state.gradientDepth, f9)) {
                var p10 = Yc(e15, n24, r31, o32, i28, u21, c14);
                return null != l17 && (p10 = rc(p10, l17)), Lh(p10, f9, d8);
            }
            var v11 = mn(e15, "x", "depthwiseConv2d"), m12 = mn(n24, "filter", "depthwiseConv2d"), g11 = v11, y8 = !1;
            3 === v11.rank && (y8 = !0, g11 = v11.as4D(1, v11.shape[0], v11.shape[1], v11.shape[2])), C(4 === g11.rank, function() {
                return "Error in fused depthwiseConv2d: input must be rank 4, but got rank " + g11.rank + ".";
            }), C(4 === m12.rank, function() {
                return "Error in fused depthwiseConv2d: filter must be rank 4, but got rank " + m12.rank + ".";
            }), C(g11.shape[3] === m12.shape[2], function() {
                return "Error in fused depthwiseConv2d: number of input channels (" + g11.shape[3] + ") must match the inChannels dimension in filter " + m12.shape[2] + ".";
            }), null == u21 && (u21 = [
                1,
                1
            ]), C(Mo(r31, u21), function() {
                return "Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides " + r31 + " and dilations '" + u21 + "'";
            }), null != c14 && C(A(o32), function() {
                return "Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode " + c14 + " but got pad " + o32 + ".";
            });
            var x7, b4, w3 = So(g11.shape, m12.shape, r31, u21, o32, c14, !0);
            null != l17 && (x7 = Nt(x7 = mn(l17, "bias", "fused conv2d"), v11)[0], Ro(w3.outShape, x7.shape)), null != d8 && (b4 = mn(d8, "prelu weights", "fused depthwiseConv2d"));
            var E1 = {
                x: g11,
                filter: m12
            };
            null != l17 && (E1.bias = x7), null != d8 && (E1.preluActivationWeights = b4);
            var R1 = [
                m12,
                g11
            ], I1 = Lt.runKernelFunc(function(t9, e16) {
                var n25 = t9.fusedDepthwiseConv2D({
                    input: g11,
                    filter: m12,
                    convInfo: w3,
                    bias: x7,
                    activation: f9,
                    preluActivationWeights: b4
                });
                return e16([
                    m12,
                    g11,
                    n25
                ]), n25;
            }, E1, function(t9, e16) {
                C(Oo(u21), function() {
                    return "Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '" + u21 + "'";
                });
                var n25 = e16[0], r32 = e16[1], o33 = e16[2], a29 = Bh(t9, o33, f9), i29 = {
                };
                return null != l17 && (i29 = {
                    bias: function() {
                        return Ph(x7, a29);
                    }
                }), Object.assign({
                    x: function() {
                        return $c(r32.shape, a29, n25, w3);
                    },
                    filter: function() {
                        return Qc(r32, a29, n25.shape, w3);
                    }
                }, i29);
            }, "FusedDepthwiseConv2D", {
                convInfo: w3,
                activation: f9
            }, R1, [
                !0
            ]);
            return y8 ? I1.as3D(I1.shape[1], I1.shape[2], I1.shape[3]) : I1;
        }
    }), zh = Object.freeze({
        matMul: Wh,
        conv2d: Uh,
        depthwiseConv2d: Vh
    }), Gh = Object.freeze({
        image: Oh,
        linalg: Ih,
        losses: bh,
        spectral: Jl,
        fused: zh,
        signal: uh,
        square: tu,
        squaredDifference: nu,
        conv1d: Hc,
        conv2d: qc,
        conv3d: Kc,
        depthwiseConv2d: Yc,
        separableConv2d: Jc,
        conv2dTranspose: Zc,
        conv3dTranspose: tl,
        op: An,
        batchNormalization2d: Gu,
        batchNormalization3d: Hu,
        batchNormalization4d: qu,
        batchNormalization: Ku,
        batchNorm: ju,
        batchNorm2d: Xu,
        batchNorm3d: Yu,
        batchNorm4d: $u,
        booleanMaskAsync: Uc,
        complex: Dn,
        real: Tn,
        imag: Nn,
        concat: Yn,
        concat1d: $n,
        concat2d: Qn,
        concat3d: Jn,
        concat4d: Zn,
        split: tr,
        matMul: el,
        dot: nl,
        outerProduct: rl,
        reverse: ol,
        reverse1d: al,
        reverse2d: il,
        reverse3d: sl,
        reverse4d: ul,
        maxPool: hl,
        avgPool: fl,
        pool: dl,
        maxPool3d: pl,
        avgPool3d: vl,
        slice: ml,
        slice1d: gl,
        slice2d: yl,
        slice3d: xl,
        slice4d: bl,
        abs: ru,
        acos: ou,
        acosh: au,
        asin: iu,
        asinh: su,
        atan: uu,
        atanh: cu,
        ceil: lu,
        clipByValue: hu,
        cos: fu,
        cosh: du,
        erf: pu,
        exp: vu,
        expm1: mu,
        floor: gu,
        log: yu,
        log1p: xu,
        logSigmoid: bu,
        neg: wu,
        reciprocal: Cu,
        round: Eu,
        rsqrt: Ru,
        sigmoid: Iu,
        sign: ku,
        isNaN: Su,
        isInf: Au,
        isFinite: Du,
        sin: Tu,
        sinh: Nu,
        softplus: Fu,
        sqrt: _u,
        step: Ou,
        tan: Mu,
        tanh: Bu,
        all: Cl,
        any: El,
        argMax: Rl,
        argMin: Il,
        logSumExp: kl,
        max: Sl,
        mean: Al,
        min: Dl,
        moments: Tl,
        sum: Nl,
        prod: Fl,
        equal: Rc,
        equalStrict: Ic,
        greater: kc,
        greaterEqual: Sc,
        greaterEqualStrict: Ac,
        greaterStrict: Dc,
        less: Tc,
        lessEqual: Nc,
        lessEqualStrict: Fc,
        lessStrict: _c,
        notEqual: Oc,
        notEqualStrict: Mc,
        add: rc,
        addN: oc,
        addStrict: ac,
        atan2: ic,
        div: sc,
        divNoNan: uc,
        divStrict: cc,
        floorDiv: lc,
        maximum: hc,
        maximumStrict: fc,
        minimum: dc,
        minimumStrict: pc,
        mod: vc,
        modStrict: mc,
        mul: gc,
        mulStrict: yc,
        pow: xc,
        powStrict: bc,
        squaredDifferenceStrict: wc,
        sub: Cc,
        subStrict: Ec,
        elu: _l,
        leakyRelu: Ol,
        prelu: Ml,
        relu: Bl,
        relu6: Pl,
        selu: Ll,
        logicalAnd: Qu,
        logicalNot: Ju,
        logicalOr: Zu,
        logicalXor: tc,
        where: ec,
        whereAsync: nc,
        buffer: dr,
        print: pr,
        batchToSpaceND: vr,
        broadcastTo: mr,
        cast: gr,
        clone: yr,
        cumsum: xr,
        depthToSpace: br,
        expandDims: wr,
        eye: Cr,
        multinomial: Er,
        oneHot: Rr,
        pad: Ir,
        pad1d: kr,
        pad2d: Sr,
        pad3d: Ar,
        pad4d: Dr,
        rand: Tr,
        randomNormal: Nr,
        randomGamma: Fr,
        randomUniform: _r,
        reshape: Or,
        spaceToBatchND: Mr,
        squeeze: Br,
        stack: Pr,
        tile: Lr,
        truncatedNormal: Wr,
        unstack: Ur,
        setdiff1dAsync: Vr,
        fill: Hn,
        linspace: qn,
        ones: zn,
        range: Kn,
        scalar: On,
        tensor: Fn,
        tensor1d: Mn,
        tensor2d: Bn,
        tensor3d: Pn,
        tensor4d: Ln,
        tensor5d: Wn,
        tensor6d: Un,
        variable: Vn,
        zeros: Gn,
        onesLike: jn,
        zerosLike: Xn,
        transpose: Wl,
        softmax: go,
        logSoftmax: yo,
        localResponseNormalization: Ul,
        norm: Vl,
        gather: Lc,
        unsortedSegmentSum: Wc,
        basicLSTMCell: zl,
        multiRNNCell: Gl,
        movingAverage: Hl,
        stridedSlice: ql,
        topk: Kl,
        scatterND: jl,
        fft: Xl,
        ifft: Yl,
        rfft: $l,
        irfft: Ql,
        sparseToDense: Zl,
        gatherND: th,
        diag: eh,
        dropout: nh,
        hannWindow: oh,
        hammingWindow: ah,
        frame: ih,
        stft: sh,
        inTopKAsync: lh
    });
    function Hh(t1, e15) {
        Array.isArray(t1) || (t1 = [
            t1
        ]), t1.forEach(function(t9) {
            null != t9 && C("complex64" !== t9.dtype, function() {
                return e15 + " does not support complex64 tensors.";
            });
        });
    }
    function qh(t1, e15, n24, r31) {
        if ("linear" === n24) return t1.linear(e15);
        if ("relu" === n24) return t1.relu(e15);
        if ("elu" === n24) return t1.elu(e15);
        if ("relu6" === n24) return t1.relu6(e15);
        if ("prelu" === n24) return t1.prelu(e15, r31);
        throw new Error("Activation " + n24 + " has not been implemented for the CPU backend.");
    }
    var Kh = function(t1) {
        function o32() {
            var e15 = t1.call(this) || this;
            return e15.blockSize = 48, e15.firstUse = !0, e15.data = new xo(e15, Lt), e15;
        }
        return e(o32, t1), o32.prototype.write = function(t9, e15, n24) {
            this.firstUse && (this.firstUse = !1, i15().get("IS_NODE") && dn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));
            var r31 = {
            };
            return this.data.set(r31, {
                values: t9,
                dtype: n24
            }), r31;
        }, o32.prototype.move = function(t9, e15, n24, r31) {
            this.data.set(t9, {
                values: e15,
                dtype: r31
            });
        }, o32.prototype.numDataIds = function() {
            return this.data.numDataIds();
        }, o32.prototype.read = function(t9) {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(e15) {
                    return [
                        2,
                        this.readSync(t9)
                    ];
                });
            });
        }, o32.prototype.readSync = function(t9) {
            var e15 = this.data.get(t9), n24 = e15.dtype, r31 = e15.complexTensors;
            return "complex64" === n24 ? Vo(this.readSync(r31.real.dataId), this.readSync(r31.imag.dataId)) : this.data.get(t9).values;
        }, o32.prototype.bufferSync = function(t9) {
            var e15 = this.readSync(t9.dataId), n24 = e15;
            if ("string" === t9.dtype) try {
                n24 = e15.map(function(t10) {
                    return ot(t10);
                });
            } catch (t10) {
                throw new Error("Failed to decode encoded string bytes into utf-8");
            }
            return dr(t9.shape, t9.dtype, n24);
        }, o32.prototype.makeOutput = function(t9, e15, n24) {
            var r31 = this.write(t9, e15, n24);
            return Lt.makeTensorFromDataId(r31, e15, n24, this);
        }, o32.prototype.disposeData = function(t9) {
            if (this.data.has(t9)) {
                var e15 = this.data.get(t9).complexTensors;
                null != e15 && (e15.real.dispose(), e15.imag.dispose()), this.data.delete(t9);
            }
        }, o32.prototype.time = function(t9) {
            return n10(this, void 0, void 0, function() {
                var e16;
                return r17(this, function(n24) {
                    return e16 = et(), t9(), [
                        2,
                        {
                            kernelMs: et() - e16
                        }
                    ];
                });
            });
        }, o32.prototype.memory = function() {
            return {
                unreliable: !0,
                reasons: [
                    "The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."
                ]
            };
        }, o32.prototype.complex = function(t9, e16) {
            var n24 = this.makeOutput(null, t9.shape, "complex64");
            return this.data.get(n24.dataId).complexTensors = {
                real: Lt.keep(t9.clone()),
                imag: Lt.keep(e16.clone())
            }, n24;
        }, o32.prototype.real = function(t9) {
            return this.data.get(t9.dataId).complexTensors.real.clone();
        }, o32.prototype.imag = function(t9) {
            return this.data.get(t9.dataId).complexTensors.imag.clone();
        }, o32.prototype.slice = function(t9, e16, n24) {
            if (Hh(t9, "slice"), io(t9.shape, e16, n24)) {
                var r31 = so(e16, t9.strides), o33 = k(n24);
                return Fn(this.readSync(t9.dataId).subarray(r31, r31 + o33), n24, t9.dtype);
            }
            for(var a28 = dr(n24, t9.dtype), i28 = this.bufferSync(t9), s29 = 0; s29 < a28.size; ++s29){
                var u21 = a28.indexToLoc(s29).map(function(t10, n25) {
                    return t10 + e16[n25];
                });
                a28.values[s29] = i28.get.apply(i28, u21);
            }
            return a28.toTensor();
        }, o32.prototype.stridedSlice = function(t9, e16, n24, r32) {
            Hh(t9, "stridedSlice");
            var o34 = ro(e16, n24, r32);
            if (o34.some(function(t10) {
                return 0 === t10;
            })) return Fn([], o34);
            for(var a28 = dr(o34, t9.dtype), i28 = this.bufferSync(t9), s29 = 0; s29 < a28.size; s29++){
                for(var u22 = a28.indexToLoc(s29), c14 = new Array(u22.length), l17 = 0; l17 < c14.length; l17++)c14[l17] = u22[l17] * r32[l17] + e16[l17];
                a28.set.apply(a28, [
                    i28.get.apply(i28, c14)
                ].concat(u22));
            }
            return a28.toTensor();
        }, o32.prototype.diag = function(t9) {
            for(var e16 = this.readSync(t9.dataId), n24 = dr([
                t9.size,
                t9.size
            ], t9.dtype), r32 = n24.values, o34 = 0; o34 < e16.length; o34++)r32[o34 * t9.size + o34] = e16[o34];
            return n24.toTensor();
        }, o32.prototype.unstack = function(t9, e16) {
            for(var n24 = t9.shape[e16], r32 = new Array(t9.rank - 1), o34 = 0, a28 = 0; a28 < t9.rank; a28++)a28 !== e16 && (r32[o34++] = t9.shape[a28]);
            var i28 = new Array(t9.rank).fill(0), s29 = t9.shape.slice();
            s29[e16] = 1;
            var u23 = new Array(n24);
            for(a28 = 0; a28 < u23.length; a28++)i28[e16] = a28, u23[a28] = this.slice(t9, i28, s29).reshape(r32);
            return u23;
        }, o32.prototype.reverse = function(t9, e16) {
            Hh(t9, "reverse");
            for(var n24 = dr(t9.shape, t9.dtype), r32 = this.bufferSync(t9), o34 = function(o35) {
                var a28 = n24.indexToLoc(o35), i28 = a28.slice();
                e16.forEach(function(e17) {
                    return i28[e17] = t9.shape[e17] - 1 - i28[e17];
                }), n24.set.apply(n24, [
                    r32.get.apply(r32, i28)
                ].concat(a28));
            }, a28 = 0; a28 < n24.size; a28++)o34(a28);
            return n24.toTensor();
        }, o32.prototype.concat = function(t9, e16) {
            var n24 = this;
            if ("complex64" === t9[0].dtype) {
                var r32 = t9.map(function(t10) {
                    return Tn(t10);
                }), o34 = t9.map(function(t10) {
                    return Nn(t10);
                });
                return Dn(this.concat(r32, e16), this.concat(o34, e16));
            }
            var a28 = t9.map(function(t10) {
                var n25 = k(t10.shape.slice(e16));
                return t10.as2D(-1, n25);
            }), i28 = Sn(a28.map(function(t10) {
                return t10.shape;
            }), 1), s29 = dr(i28, t9[0].dtype).values;
            if (1 === a28[0].shape[0]) {
                var u23 = 0;
                a28.forEach(function(t10) {
                    s29.set(n24.readSync(t10.dataId), u23), u23 += t10.size;
                });
            } else {
                var c15 = 0;
                a28.forEach(function(t10) {
                    for(var e17 = n24.readSync(t10.dataId), r33 = 0, o35 = 0; o35 < t10.shape[0]; ++o35)for(var a29 = o35 * i28[1] + c15, u24 = 0; u24 < t10.shape[1]; ++u24)s29[a29 + u24] = e17[r33++];
                    c15 += t10.shape[1];
                });
            }
            var l18 = Sn(t9.map(function(t10) {
                return t10.shape;
            }), e16);
            return Fn(s29, l18, t9[0].dtype);
        }, o32.prototype.neg = function(t9) {
            return Hh(t9, "neg"), this.multiply(On(-1), t9);
        }, o32.prototype.add = function(t9, e16) {
            return "complex64" === t9.dtype || "complex64" === e16.dtype ? this.broadcastedBinaryComplexOp(t9.cast("complex64"), e16.cast("complex64"), function(t10, e17, n24, r33) {
                return {
                    real: t10 + n24,
                    imag: e17 + r33
                };
            }) : this.broadcastedBinaryOp(t9, e16, Dt(t9.dtype, e16.dtype), function(t10, e17) {
                return t10 + e17;
            });
        }, o32.prototype.addN = function(t9) {
            var e16 = this;
            Hh(t9, "addN");
            for(var n24 = t9.map(function(t10) {
                return e16.readSync(t10.dataId);
            }), r33 = dr(t9[0].shape, t9[0].dtype), o35 = r33.values, a28 = 0; a28 < t9.length; a28++)for(var i28 = n24[a28], s29 = 0; s29 < o35.length; s29++)o35[s29] += i28[s29];
            return r33.toTensor();
        }, o32.prototype.softmax = function(t9, e16) {
            var n24 = O([
                e16
            ], t9.shape), r33 = this.max(t9, n24), o35 = wn(r33.shape, n24), a28 = this.subtract(t9, r33.reshape(o35)), i28 = this.exp(a28), s29 = this.sum(i28, n24).reshape(o35);
            return this.realDivide(i28, s29);
        }, o32.prototype.subtract = function(t9, e16) {
            return "complex64" === t9.dtype || "complex64" === e16.dtype ? this.broadcastedBinaryComplexOp(t9.cast("complex64"), e16.cast("complex64"), function(t10, e17, n24, r33) {
                return {
                    real: t10 - n24,
                    imag: e17 - r33
                };
            }) : this.broadcastedBinaryOp(t9, e16, Dt(t9.dtype, e16.dtype), function(t10, e17) {
                return t10 - e17;
            });
        }, o32.prototype.pow = function(t9, e16) {
            return Hh([
                t9,
                e16
            ], "pow"), this.broadcastedBinaryOp(t9, e16, t9.dtype, function(t10, e17) {
                return Math.pow(t10, e17);
            });
        }, o32.prototype.batchMatMul = function(t9, e16, n24, r33) {
            Hh([
                t9,
                e16
            ], "matMul");
            for(var o35 = n24 ? t9.shape[1] : t9.shape[2], a28 = n24 ? t9.shape[2] : t9.shape[1], i28 = r33 ? e16.shape[1] : e16.shape[2], s29 = t9.shape[0], u24 = this.readSync(t9.dataId), c16 = this.readSync(e16.dataId), l18 = n24 ? [
                t9.strides[0],
                1,
                t9.strides[1]
            ] : [
                t9.strides[0],
                t9.strides[1],
                1
            ], h7 = l18[0], f9 = l18[1], d8 = l18[2], p11 = r33 ? [
                1,
                e16.strides[1],
                e16.strides[0]
            ] : [
                e16.strides[1],
                1,
                e16.strides[0]
            ], v11 = p11[0], m12 = p11[1], g11 = p11[2], y8 = a28 * i28, x7 = dr([
                s29,
                a28,
                i28
            ], t9.dtype), b4 = x7.values, w3 = this.blockSize, C1 = 0; C1 < s29; C1++)for(var E1 = 0; E1 < a28; E1 += w3)for(var R1 = 0; R1 < i28; R1 += w3)for(var I1 = 0; I1 < o35; I1 += w3)for(var k1 = Math.min(E1 + w3, a28), S1 = Math.min(R1 + w3, i28), A1 = Math.min(I1 + w3, o35), D1 = E1; D1 < k1; D1++)for(var T1 = R1; T1 < S1; T1++){
                for(var N1 = 0, F1 = I1; F1 < A1; F1++)N1 += u24[C1 * h7 + D1 * f9 + F1 * d8] * c16[F1 * v11 + T1 * m12 + C1 * g11];
                b4[C1 * y8 + (D1 * i28 + T1)] += N1;
            }
            return x7.toTensor();
        }, o32.prototype.fusedBatchMatMul = function(t9) {
            var e16 = t9.a, n24 = t9.b, r33 = t9.transposeA, o35 = t9.transposeB, a28 = t9.bias, i28 = t9.activation, s29 = t9.preluActivationWeights, u24 = this.batchMatMul(e16, n24, r33, o35);
            return a28 && (u24 = this.add(u24, a28)), i28 && (u24 = qh(this, u24, i28, s29)), u24;
        }, o32.prototype.multiply = function(t9, e16) {
            return "complex64" === t9.dtype || "complex64" === e16.dtype ? this.broadcastedBinaryComplexOp(t9.cast("complex64"), e16.cast("complex64"), function(t10, e17, n24, r33) {
                return {
                    real: t10 * n24 - e17 * r33,
                    imag: t10 * r33 + e17 * n24
                };
            }) : this.broadcastedBinaryOp(t9, e16, Dt(t9.dtype, e16.dtype), function(t10, e17) {
                return t10 * e17;
            });
        }, o32.prototype.realDivide = function(t9, e16) {
            Hh([
                t9,
                e16
            ], "realDivide");
            return this.broadcastedBinaryOp(t9, e16, "float32", function(t10, e17) {
                return t10 / e17;
            });
        }, o32.prototype.floorDiv = function(t9, e16) {
            Hh([
                t9,
                e16
            ], "floorDiv");
            return this.broadcastedBinaryOp(t9, e16, "int32", function(t10, e17) {
                return Math.floor(t10 / e17);
            });
        }, o32.prototype.sum = function(t9, e16) {
            Hh(t9, "sum"), Cn("sum", e16, t9.rank);
            for(var n24 = bn(t9.shape, e16), r33 = n24[0], o35 = n24[1], a28 = Gn(r33, Dt(t9.dtype, "int32")), i28 = k(o35), s29 = this.readSync(a28.dataId), u24 = this.readSync(t9.dataId), c16 = 0; c16 < s29.length; ++c16){
                for(var l18 = c16 * i28, h7 = 0, f9 = 0; f9 < i28; ++f9)h7 += u24[l18 + f9];
                s29[c16] = h7;
            }
            return a28;
        }, o32.prototype.prod = function(t9, e16) {
            Hh(t9, "sum");
            for(var n24 = bn(t9.shape, e16), r33 = n24[0], o35 = n24[1], a28 = Gn(r33, Dt(t9.dtype, "int32")), i28 = k(o35), s29 = this.readSync(a28.dataId), u24 = this.readSync(t9.dataId), c16 = 0; c16 < s29.length; ++c16){
                for(var l19 = c16 * i28, h8 = 1, f10 = 0; f10 < i28; ++f10)h8 *= u24[l19 + f10];
                s29[c16] = h8;
            }
            return a28;
        }, o32.prototype.unsortedSegmentSum = function(t9, e16, n24) {
            Hh(t9, "unsortedSegmentSum");
            for(var r33 = [], o35 = t9.rank - e16.rank, a28 = 0; a28 < o35; ++a28)e16 = e16.expandDims(a28 + 1);
            for(a28 = 0; a28 < n24; ++a28){
                var i28 = On(a28, "int32"), s29 = Rc(i28, e16).asType("float32").mul(t9).sum(0);
                r33.push(s29);
            }
            return Pr(r33);
        }, o32.prototype.argMin = function(t9, e16) {
            Hh(t9, "argMin");
            var n24 = [
                e16
            ];
            Cn("argMin", n24, t9.rank);
            for(var r33 = bn(t9.shape, n24), o35 = r33[0], a28 = r33[1], i29 = Gn(o35, "int32"), s30 = k(a28), u24 = this.readSync(i29.dataId), c16 = this.readSync(t9.dataId), l20 = 0; l20 < u24.length; ++l20){
                for(var h9 = l20 * s30, f11 = c16[h9], d8 = 0, p11 = 0; p11 < s30; ++p11){
                    var v11 = c16[h9 + p11];
                    v11 < f11 && (f11 = v11, d8 = p11);
                }
                u24[l20] = d8;
            }
            return i29;
        }, o32.prototype.argMax = function(t9, e16) {
            Hh(t9, "argMax");
            var n24 = [
                e16
            ];
            Cn("argMax", n24, t9.rank);
            for(var r33 = bn(t9.shape, n24), o35 = r33[0], a28 = r33[1], i29 = Gn(o35, "int32"), s30 = k(a28), u24 = this.readSync(i29.dataId), c16 = this.readSync(t9.dataId), l20 = 0; l20 < u24.length; ++l20){
                for(var h10 = l20 * s30, f12 = c16[h10], d9 = 0, p12 = 0; p12 < s30; ++p12){
                    var v12 = c16[h10 + p12];
                    v12 > f12 && (f12 = v12, d9 = p12);
                }
                u24[l20] = d9;
            }
            return i29;
        }, o32.prototype.cumsum = function(t9, e16, n24, r33) {
            if (Hh(t9, "cumsum"), e16 !== t9.rank - 1) throw new Error("backend.cumsum in CPU expects an inner-most axis=" + (t9.rank - 1) + " but got axis=" + e16);
            for(var o35 = Dt(t9.dtype, "int32"), a28 = Gn(t9.shape, o35), i29 = this.readSync(a28.dataId), s30 = this.readSync(t9.dataId), u24 = t9.shape[t9.rank - 1], c16 = r33 ? function(t10, e17) {
                return t10 + u24 - e17 - 1;
            } : function(t10, e17) {
                return t10 + e17;
            }, l20 = 0; l20 < s30.length; l20 += u24)for(var h11 = 0; h11 < u24; h11++){
                var f13 = c16(l20, h11);
                if (0 === h11) i29[f13] = n24 ? 0 : s30[f13];
                else {
                    var d10 = c16(l20, h11 - 1);
                    i29[f13] = n24 ? s30[d10] + i29[d10] : s30[f13] + i29[d10];
                }
            }
            return a28;
        }, o32.prototype.equal = function(t9, e16) {
            return Hh([
                t9,
                e16
            ], "equal"), this.broadcastedBinaryOp(t9, e16, "bool", function(t10, e17) {
                return t10 === e17 ? 1 : 0;
            });
        }, o32.prototype.notEqual = function(t9, e16) {
            return Hh([
                t9,
                e16
            ], "notEqual"), this.broadcastedBinaryOp(t9, e16, "bool", function(t10, e17) {
                return t10 !== e17 ? 1 : 0;
            });
        }, o32.prototype.less = function(t9, e16) {
            return Hh([
                t9,
                e16
            ], "less"), this.broadcastedBinaryOp(t9, e16, "bool", function(t10, e17) {
                return t10 < e17 ? 1 : 0;
            });
        }, o32.prototype.lessEqual = function(t9, e16) {
            return Hh([
                t9,
                e16
            ], "lessEqual"), this.broadcastedBinaryOp(t9, e16, "bool", function(t10, e17) {
                return t10 <= e17 ? 1 : 0;
            });
        }, o32.prototype.greater = function(t9, e16) {
            return Hh([
                t9,
                e16
            ], "greater"), this.broadcastedBinaryOp(t9, e16, "bool", function(t10, e17) {
                return t10 > e17 ? 1 : 0;
            });
        }, o32.prototype.greaterEqual = function(t9, e16) {
            return Hh([
                t9,
                e16
            ], "greaterEqual"), this.broadcastedBinaryOp(t9, e16, "bool", function(t10, e17) {
                return t10 >= e17 ? 1 : 0;
            });
        }, o32.prototype.logicalNot = function(t9) {
            Hh(t9, "logicalNot");
            for(var e16 = this.readSync(t9.dataId), n24 = new Uint8Array(e16.length), r33 = 0; r33 < e16.length; ++r33)n24[r33] = e16[r33] ? 0 : 1;
            return this.makeOutput(n24, t9.shape, "bool");
        }, o32.prototype.logicalAnd = function(t9, e16) {
            return Hh([
                t9,
                e16
            ], "logicalAnd"), this.broadcastedBinaryOp(t9, e16, "bool", function(t10, e17) {
                return t10 && e17;
            });
        }, o32.prototype.logicalOr = function(t9, e16) {
            return Hh([
                t9,
                e16
            ], "logicalOr"), this.broadcastedBinaryOp(t9, e16, "bool", function(t10, e17) {
                return t10 || e17;
            });
        }, o32.prototype.select = function(t9, e16, n24) {
            Hh([
                t9,
                e16,
                n24
            ], "select");
            for(var r33 = this.readSync(t9.dataId), o35 = this.readSync(e16.dataId), a28 = this.readSync(n24.dataId), i29 = Gn(e16.shape, Dt(e16.dtype, n24.dtype)), s30 = this.readSync(i29.dataId), u24 = 0, c16 = 0 === t9.rank || t9.rank > 1 || 1 === e16.rank ? 1 : k(e16.shape.slice(1)), l20 = 0; l20 < r33.length; l20++)for(var h11 = 0; h11 < c16; h11++)1 === r33[l20] ? s30[u24++] = o35[l20] : s30[u24++] = a28[l20];
            return i29;
        }, o32.prototype.where = function(t9) {
            Hh([
                t9
            ], "where");
            var e16 = this.readSync(t9.dataId);
            return na(t9.shape, e16);
        }, o32.prototype.topk = function(t9, e16, n24) {
            return Hh(t9, "topk"), ea(this.readSync(t9.dataId), t9.shape, t9.dtype, e16);
        }, o32.prototype.min = function(t9, e16) {
            Hh(t9, "min"), Cn("min", e16, t9.rank);
            for(var n24 = bn(t9.shape, e16), r33 = n24[0], o35 = n24[1], a28 = Gn(r33, t9.dtype), i29 = k(o35), s30 = this.readSync(a28.dataId), u24 = this.readSync(t9.dataId), c16 = 0; c16 < s30.length; ++c16){
                for(var l20 = c16 * i29, h11 = u24[l20], f14 = 0; f14 < i29; ++f14){
                    var d11 = u24[l20 + f14];
                    d11 < h11 && (h11 = d11);
                }
                s30[c16] = h11;
            }
            return a28;
        }, o32.prototype.minimum = function(t9, e16) {
            return Hh([
                t9,
                e16
            ], "minimum"), this.broadcastedBinaryOp(t9, e16, t9.dtype, function(t10, e17) {
                return Math.min(t10, e17);
            });
        }, o32.prototype.mod = function(t9, e16) {
            return Hh([
                t9,
                e16
            ], "mod"), this.broadcastedBinaryOp(t9, e16, t9.dtype, function(t10, e17) {
                var n24 = t10 % e17;
                return t10 < 0 && e17 < 0 || t10 >= 0 && e17 >= 0 ? n24 : (n24 + e17) % e17;
            });
        }, o32.prototype.max = function(t9, e16) {
            Hh(t9, "max"), Cn("max", e16, t9.rank);
            for(var n24 = bn(t9.shape, e16), r33 = n24[0], o35 = n24[1], a28 = Gn(r33, t9.dtype), i29 = k(o35), s30 = this.readSync(a28.dataId), u24 = this.readSync(t9.dataId), c16 = 0; c16 < s30.length; ++c16){
                for(var l21 = c16 * i29, h12 = u24[l21], f15 = 0; f15 < i29; ++f15){
                    var d12 = u24[l21 + f15];
                    d12 > h12 && (h12 = d12);
                }
                s30[c16] = h12;
            }
            return a28;
        }, o32.prototype.maximum = function(t9, e16) {
            return Hh([
                t9,
                e16
            ], "maximum"), this.broadcastedBinaryOp(t9, e16, t9.dtype, function(t10, e17) {
                return Math.max(t10, e17);
            });
        }, o32.prototype.all = function(t9, e16) {
            Hh(t9, "all"), Cn("all", e16, t9.rank);
            for(var n24 = bn(t9.shape, e16), r33 = n24[0], o35 = n24[1], a28 = Gn(r33, t9.dtype), i29 = k(o35), s30 = this.readSync(a28.dataId), u24 = this.readSync(t9.dataId), c16 = 0; c16 < s30.length; ++c16){
                for(var l22 = c16 * i29, h13 = u24[l22], f16 = 0; f16 < i29; ++f16){
                    var d13 = u24[l22 + f16];
                    h13 = h13 && d13;
                }
                s30[c16] = h13;
            }
            return a28;
        }, o32.prototype.any = function(t9, e16) {
            Hh(t9, "any"), Cn("any", e16, t9.rank);
            for(var n24 = bn(t9.shape, e16), r33 = n24[0], o35 = n24[1], a28 = Gn(r33, t9.dtype), i29 = k(o35), s30 = this.readSync(a28.dataId), u24 = this.readSync(t9.dataId), c16 = 0; c16 < s30.length; ++c16){
                for(var l23 = c16 * i29, h14 = u24[l23], f17 = 0; f17 < i29; ++f17){
                    var d14 = u24[l23 + f17];
                    h14 = h14 || d14;
                }
                s30[c16] = h14;
            }
            return a28;
        }, o32.prototype.squaredDifference = function(t9, e16) {
            return Hh([
                t9,
                e16
            ], "squaredDifference"), this.broadcastedBinaryOp(t9, e16, t9.dtype, function(t10, e17) {
                var n24 = t10 - e17;
                return n24 * n24;
            });
        }, o32.prototype.ceil = function(t9) {
            Hh(t9, "ceil");
            for(var e16 = this.readSync(t9.dataId), n24 = new Float32Array(e16.length), r33 = 0; r33 < e16.length; ++r33)n24[r33] = Math.ceil(e16[r33]);
            return this.makeOutput(n24, t9.shape, "float32");
        }, o32.prototype.floor = function(t9) {
            Hh(t9, "floor");
            for(var e16 = this.readSync(t9.dataId), n24 = new Float32Array(e16.length), r33 = 0; r33 < e16.length; ++r33)n24[r33] = Math.floor(e16[r33]);
            return this.makeOutput(n24, t9.shape, "float32");
        }, o32.prototype.sign = function(t9) {
            Hh(t9, "x");
            for(var e16 = this.readSync(t9.dataId), n24 = new Float32Array(e16.length), r33 = 0; r33 < e16.length; ++r33)e16[r33] < 0 ? n24[r33] = -1 : e16[r33] > 0 ? n24[r33] = 1 : n24[r33] = 0;
            return this.makeOutput(n24, t9.shape, "float32");
        }, o32.prototype.isNaN = function(t9) {
            Hh(t9, "x");
            for(var e16 = this.readSync(t9.dataId), n24 = new Uint8Array(e16.length), r33 = 0; r33 < e16.length; ++r33)Number.isNaN(e16[r33]) && (n24[r33] = 1);
            return this.makeOutput(n24, t9.shape, "bool");
        }, o32.prototype.isInf = function(t9) {
            Hh(t9, "x");
            for(var e16 = this.readSync(t9.dataId), n24 = new Uint8Array(e16.length), r33 = 0; r33 < e16.length; ++r33)Math.abs(e16[r33]) === 1 / 0 && (n24[r33] = 1);
            return this.makeOutput(n24, t9.shape, "bool");
        }, o32.prototype.isFinite = function(t9) {
            Hh(t9, "x");
            for(var e16 = this.readSync(t9.dataId), n24 = new Uint8Array(e16.length), r33 = 0; r33 < e16.length; ++r33)Number.isFinite(e16[r33]) && (n24[r33] = 1);
            return this.makeOutput(n24, t9.shape, "bool");
        }, o32.prototype.round = function(t9) {
            Hh(t9, "round");
            for(var e16 = this.readSync(t9.dataId), n24 = new Float32Array(e16.length), r33 = 0; r33 < e16.length; ++r33){
                var o35 = Math.floor(e16[r33]);
                e16[r33] - o35 < 0.5 ? n24[r33] = Math.floor(e16[r33]) : e16[r33] - o35 > 0.5 ? n24[r33] = Math.ceil(e16[r33]) : n24[r33] = o35 % 2 == 0 ? o35 : o35 + 1;
            }
            return this.makeOutput(n24, t9.shape, "float32");
        }, o32.prototype.exp = function(t9) {
            Hh(t9, "exp");
            for(var e16 = this.readSync(t9.dataId), n24 = new Float32Array(e16.length), r33 = 0; r33 < e16.length; ++r33)n24[r33] = Math.exp(e16[r33]);
            return this.makeOutput(n24, t9.shape, "float32");
        }, o32.prototype.expm1 = function(t9) {
            Hh(t9, "expm1");
            for(var e16 = this.readSync(t9.dataId), n24 = new Float32Array(e16.length), r33 = 0; r33 < e16.length; ++r33)n24[r33] = Math.expm1(e16[r33]);
            return this.makeOutput(n24, t9.shape, "float32");
        }, o32.prototype.log = function(t9) {
            Hh(t9, "log");
            for(var e16 = this.readSync(t9.dataId), n24 = new Float32Array(e16.length), r33 = 0; r33 < e16.length; ++r33){
                var o36 = e16[r33];
                n24[r33] = Math.log(o36);
            }
            return this.makeOutput(n24, t9.shape, "float32");
        }, o32.prototype.log1p = function(t9) {
            Hh(t9, "log1p");
            for(var e16 = this.readSync(t9.dataId), n24 = new Float32Array(e16.length), r33 = 0; r33 < e16.length; ++r33){
                var o37 = e16[r33];
                n24[r33] = Math.log1p(o37);
            }
            return this.makeOutput(n24, t9.shape, "float32");
        }, o32.prototype.sqrt = function(t9) {
            Hh(t9, "sqrt");
            for(var e16 = this.readSync(t9.dataId), n24 = new Float32Array(e16.length), r33 = 0; r33 < e16.length; ++r33){
                var o38 = e16[r33];
                n24[r33] = Math.sqrt(o38);
            }
            return this.makeOutput(n24, t9.shape, "float32");
        }, o32.prototype.rsqrt = function(t9) {
            Hh(t9, "rsqrt");
            for(var e16 = this.readSync(t9.dataId), n24 = new Float32Array(e16.length), r33 = 0; r33 < e16.length; ++r33){
                var o39 = e16[r33];
                n24[r33] = 1 / Math.sqrt(o39);
            }
            return this.makeOutput(n24, t9.shape, "float32");
        }, o32.prototype.reciprocal = function(t9) {
            Hh(t9, "reciprocal");
            for(var e16 = this.readSync(t9.dataId), n24 = new Float32Array(e16.length), r33 = 0; r33 < e16.length; ++r33)n24[r33] = 1 / e16[r33];
            return this.makeOutput(n24, t9.shape, "float32");
        }, o32.prototype.linear = function(t9) {
            return t9;
        }, o32.prototype.relu = function(t9) {
            Hh(t9, "relu");
            for(var e16 = Gn(t9.shape, t9.dtype), n24 = this.readSync(e16.dataId), r33 = this.readSync(t9.dataId), o40 = 0; o40 < r33.length; ++o40)n24[o40] = Math.max(0, r33[o40]);
            return e16;
        }, o32.prototype.relu6 = function(t9) {
            Hh(t9, "relu");
            for(var e16 = Gn(t9.shape, t9.dtype), n24 = this.readSync(e16.dataId), r33 = this.readSync(t9.dataId), o40 = 0; o40 < r33.length; ++o40)n24[o40] = Math.min(Math.max(0, r33[o40]), 6);
            return e16;
        }, o32.prototype.prelu = function(t9, e16) {
            return Hh([
                t9,
                e16
            ], "prelu"), this.broadcastedBinaryOp(t9, e16, t9.dtype, function(t10, e17) {
                return t10 < 0 ? e17 * t10 : t10;
            });
        }, o32.prototype.elu = function(t9) {
            Hh(t9, "elu");
            for(var e16 = new Float32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < n24.length; ++r33){
                var o40 = n24[r33];
                e16[r33] = o40 >= 0 ? o40 : Math.exp(o40) - 1;
            }
            return this.makeOutput(e16, t9.shape, "float32");
        }, o32.prototype.eluDer = function(t9, e16) {
            Hh([
                t9,
                e16
            ], "eluDer");
            for(var n24 = new Float32Array(e16.size), r33 = this.readSync(e16.dataId), o41 = this.readSync(t9.dataId), a28 = 0; a28 < r33.length; ++a28){
                var i29 = r33[a28];
                n24[a28] = i29 >= 1 ? o41[a28] : o41[a28] * (i29 + 1);
            }
            return this.makeOutput(n24, e16.shape, "float32");
        }, o32.prototype.selu = function(t9) {
            Hh(t9, "selu");
            for(var e16 = bs, n24 = ws, r33 = new Float32Array(t9.size), o41 = this.readSync(t9.dataId), a28 = 0; a28 < o41.length; ++a28){
                var i30 = o41[a28];
                r33[a28] = i30 >= 0 ? n24 * i30 : e16 * (Math.exp(i30) - 1);
            }
            return this.makeOutput(r33, t9.shape, "float32");
        }, o32.prototype.clip = function(t9, e16, n24) {
            Hh(t9, "clip");
            for(var r33 = new Float32Array(t9.size), o41 = this.readSync(t9.dataId), a28 = 0; a28 < o41.length; ++a28){
                var i31 = o41[a28];
                r33[a28] = i31 > n24 ? n24 : i31 < e16 ? e16 : i31;
            }
            return this.makeOutput(r33, t9.shape, "float32");
        }, o32.prototype.abs = function(t9) {
            for(var e16 = new Float32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < n24.length; ++r33)e16[r33] = Math.abs(n24[r33]);
            return this.makeOutput(e16, t9.shape, "float32");
        }, o32.prototype.complexAbs = function(t9) {
            for(var e16 = new Float32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < t9.size; ++r33){
                var o41 = n24[2 * r33], a28 = n24[2 * r33 + 1];
                e16[r33] = Math.hypot(o41, a28);
            }
            return this.makeOutput(e16, t9.shape, "float32");
        }, o32.prototype.int = function(t9) {
            Hh(t9, "int");
            for(var e16 = new Int32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < n24.length; ++r33)e16[r33] = n24[r33];
            return this.makeOutput(e16, t9.shape, "int32");
        }, o32.prototype.sigmoid = function(t9) {
            Hh(t9, "sigmoid");
            for(var e16 = new Float32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < n24.length; ++r33)e16[r33] = 1 / (1 + Math.exp(-n24[r33]));
            return this.makeOutput(e16, t9.shape, "float32");
        }, o32.prototype.softplus = function(t9) {
            Hh(t9, "softplus");
            for(var e16 = Math.log(0.00000011920928955078125) + 2, n24 = new Float32Array(t9.size), r33 = this.readSync(t9.dataId), o42 = 0; o42 < r33.length; ++o42){
                var a29 = r33[o42] > -e16, i32 = r33[o42] < e16, s30 = Math.exp(r33[o42]), u24 = void 0;
                u24 = i32 ? s30 : a29 ? r33[o42] : Math.log(1 + s30), n24[o42] = u24;
            }
            return this.makeOutput(n24, t9.shape, "float32");
        }, o32.prototype.sin = function(t9) {
            Hh(t9, "sin");
            for(var e16 = new Float32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < n24.length; ++r33)e16[r33] = Math.sin(n24[r33]);
            return this.makeOutput(e16, t9.shape, "float32");
        }, o32.prototype.cos = function(t9) {
            Hh(t9, "cos");
            for(var e16 = new Float32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < n24.length; ++r33)e16[r33] = Math.cos(n24[r33]);
            return this.makeOutput(e16, t9.shape, "float32");
        }, o32.prototype.tan = function(t9) {
            Hh(t9, "tan");
            for(var e16 = new Float32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < n24.length; ++r33)e16[r33] = Math.tan(n24[r33]);
            return this.makeOutput(e16, t9.shape, "float32");
        }, o32.prototype.asin = function(t9) {
            Hh(t9, "asin");
            for(var e16 = new Float32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < n24.length; ++r33)e16[r33] = Math.asin(n24[r33]);
            return this.makeOutput(e16, t9.shape, "float32");
        }, o32.prototype.acos = function(t9) {
            Hh(t9, "acos");
            for(var e16 = new Float32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < n24.length; ++r33)e16[r33] = Math.acos(n24[r33]);
            return this.makeOutput(e16, t9.shape, "float32");
        }, o32.prototype.atan = function(t9) {
            Hh(t9, "atan");
            for(var e16 = new Float32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < n24.length; ++r33)e16[r33] = Math.atan(n24[r33]);
            return this.makeOutput(e16, t9.shape, "float32");
        }, o32.prototype.atan2 = function(t9, e16) {
            return Hh([
                t9,
                e16
            ], "atan2"), this.broadcastedBinaryOp(t9, e16, t9.dtype, function(t10, e17) {
                return Math.atan2(t10, e17);
            });
        }, o32.prototype.sinh = function(t9) {
            Hh(t9, "sinh");
            for(var e16 = new Float32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < n24.length; ++r33)e16[r33] = Math.sinh(n24[r33]);
            return this.makeOutput(e16, t9.shape, "float32");
        }, o32.prototype.cosh = function(t9) {
            Hh(t9, "cosh");
            for(var e16 = new Float32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < n24.length; ++r33)e16[r33] = Math.cosh(n24[r33]);
            return this.makeOutput(e16, t9.shape, "float32");
        }, o32.prototype.tanh = function(t9) {
            Hh(t9, "tanh");
            for(var e16 = new Float32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < n24.length; ++r33)e16[r33] = D(n24[r33]);
            return this.makeOutput(e16, t9.shape, "float32");
        }, o32.prototype.asinh = function(t9) {
            Hh(t9, "asinh");
            for(var e16 = new Float32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < n24.length; ++r33)e16[r33] = Math.asinh(n24[r33]);
            return this.makeOutput(e16, t9.shape, "float32");
        }, o32.prototype.acosh = function(t9) {
            Hh(t9, "acosh");
            for(var e16 = new Float32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < n24.length; ++r33)e16[r33] = Math.acosh(n24[r33]);
            return this.makeOutput(e16, t9.shape, "float32");
        }, o32.prototype.atanh = function(t9) {
            Hh(t9, "atanh");
            for(var e16 = new Float32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < n24.length; ++r33)e16[r33] = Math.atanh(n24[r33]);
            return this.makeOutput(e16, t9.shape, "float32");
        }, o32.prototype.erf = function(t9) {
            Hh(t9, "erf");
            for(var e16 = new Float32Array(t9.size), n24 = this.readSync(t9.dataId), r33 = 0; r33 < n24.length; ++r33){
                var o42 = Math.sign(n24[r33]), a30 = Math.abs(n24[r33]), i33 = 1 / (1 + 0.3275911 * a30);
                e16[r33] = o42 * (1 - ((((1.061405429 * i33 - 1.453152027) * i33 + 1.421413741) * i33 - 0.284496736) * i33 + 0.254829592) * i33 * Math.exp(-a30 * a30));
            }
            return this.makeOutput(e16, t9.shape, "float32");
        }, o32.prototype.step = function(t9, e16) {
            (void 0) === e16 && (e16 = 0), Hh(t9, "step");
            for(var n24 = new Float32Array(t9.size), r33 = this.readSync(t9.dataId), o43 = 0; o43 < r33.length; ++o43){
                var a31 = r33[o43];
                isNaN(a31) ? n24[o43] = NaN : n24[o43] = a31 > 0 ? 1 : e16;
            }
            return this.makeOutput(n24, t9.shape, "float32");
        }, o32.prototype.fusedConv2d = function(t9) {
            var e16 = t9.input, n24 = t9.filter, r33 = t9.convInfo, o43 = t9.bias, a32 = t9.activation, i34 = t9.preluActivationWeights, s31 = this.conv2d(e16, n24, r33);
            return o43 && (s31 = this.add(s31, o43)), a32 && (s31 = qh(this, s31, a32, i34)), s31;
        }, o32.prototype.conv2d = function(t9, e16, n24) {
            Hh([
                t9,
                e16
            ], "conv2d");
            for(var r33 = n24.filterHeight, o43 = n24.filterWidth, a32 = n24.dilationHeight, i34 = n24.dilationWidth, s31 = n24.padInfo.left, u25 = n24.padInfo.top, c16 = "channelsLast" === n24.dataFormat, l24 = dr(n24.outShape, t9.dtype), h15 = t9.strides[0], f18 = c16 ? t9.strides[1] : t9.strides[2], d15 = c16 ? t9.strides[2] : 1, p13 = c16 ? 1 : t9.strides[1], v13 = l24.strides[0], m12 = c16 ? l24.strides[1] : l24.strides[2], g11 = c16 ? l24.strides[2] : 1, y8 = c16 ? 1 : l24.strides[1], x7 = this.readSync(t9.dataId), b4 = this.readSync(e16.dataId), w3 = l24.values, C1 = 0; C1 < n24.batchSize; ++C1)for(var E1 = C1 * h15, R1 = C1 * v13, I1 = 0; I1 < n24.outHeight; ++I1)for(var k1 = R1 + I1 * m12, S1 = I1 * n24.strideHeight - u25, A1 = 0; A1 < r33; A1++){
                var D1 = S1 + A1 * a32;
                if (!(D1 < 0 || D1 >= n24.inHeight)) for(var T1 = A1 * e16.strides[0], N2 = E1 + D1 * f18, F2 = 0; F2 < n24.outWidth; ++F2)for(var _1 = k1 + F2 * g11, O1 = F2 * n24.strideWidth - s31, M1 = 0; M1 < o43; M1++){
                    var B1 = O1 + M1 * i34;
                    if (!(B1 < 0 || B1 >= n24.inWidth)) for(var P1 = N2 + B1 * d15, L1 = T1 + M1 * e16.strides[1], W1 = 0; W1 < n24.inChannels; ++W1){
                        for(var U1 = x7[P1 + W1 * p13], V1 = 0; V1 < n24.outChannels; ++V1)w3[_1 + V1 * y8] += U1 * b4[L1 + V1];
                        L1 += n24.outChannels;
                    }
                }
            }
            return l24.toTensor();
        }, o32.prototype.conv3d = function(t9, e16, n24) {
            for(var r33 = n24.filterDepth, o43 = n24.filterHeight, a32 = n24.filterWidth, i34 = n24.dilationDepth, s31 = n24.dilationHeight, u25 = n24.dilationWidth, c16 = n24.padInfo.front, l24 = n24.padInfo.left, h15 = n24.padInfo.top, f18 = dr(n24.outShape, t9.dtype), d15 = this.readSync(t9.dataId), p13 = this.readSync(e16.dataId), v13 = f18.values, m12 = 0; m12 < n24.batchSize; ++m12)for(var g11 = m12 * t9.strides[0], y8 = m12 * f18.strides[0], x7 = 0; x7 < n24.outDepth; ++x7)for(var b4 = y8 + x7 * f18.strides[1], w3 = x7 * n24.strideDepth - c16, C1 = 0; C1 < r33; C1++){
                var E1 = w3 + C1 * i34;
                if (!(E1 < 0 || E1 >= n24.inDepth)) for(var R1 = C1 * e16.strides[0], I1 = g11 + E1 * t9.strides[1], k1 = 0; k1 < n24.outHeight; ++k1)for(var S1 = b4 + k1 * f18.strides[2], A1 = k1 * n24.strideHeight - h15, D2 = 0; D2 < o43; D2++){
                    var T2 = A1 + D2 * s31;
                    if (!(T2 < 0 || T2 >= n24.inHeight)) for(var N3 = R1 + D2 * e16.strides[1], F3 = I1 + T2 * t9.strides[2], _2 = 0; _2 < n24.outWidth; ++_2)for(var O2 = S1 + _2 * n24.outChannels, M2 = _2 * n24.strideWidth - l24, B2 = 0; B2 < a32; B2++){
                        var P2 = M2 + B2 * u25;
                        if (!(P2 < 0 || P2 >= n24.inWidth)) for(var L2 = N3 + B2 * e16.strides[2], W2 = F3 + P2 * n24.inChannels, U2 = L2, V2 = 0; V2 < n24.inChannels; ++V2){
                            for(var z1 = d15[W2 + V2], G1 = 0; G1 < n24.outChannels; ++G1)v13[O2 + G1] += z1 * p13[U2 + G1];
                            U2 += n24.outChannels;
                        }
                    }
                }
            }
            return f18.toTensor();
        }, o32.prototype.conv2dDerInput = function(t9, e16, n24) {
            Hh([
                t9,
                e16
            ], "conv2dDerInput");
            for(var r33 = dr(n24.inShape, "float32"), o43 = r33.values, a32 = this.readSync(t9.dataId), i34 = this.readSync(e16.dataId), s31 = e16.strides, u25 = s31[0], c16 = s31[1], l24 = s31[2], h15 = n24.batchSize, f18 = n24.filterHeight, d15 = n24.filterWidth, p13 = n24.inChannels, v13 = n24.inHeight, m12 = n24.inWidth, g11 = n24.outChannels, y8 = n24.outHeight, x7 = n24.outWidth, b4 = n24.strideHeight, w3 = n24.strideWidth, C1 = n24.dataFormat, E3 = f18 - 1 - n24.padInfo.top, R3 = d15 - 1 - n24.padInfo.left, I2 = "channelsLast" === C1, k2 = r33.strides[0], S2 = I2 ? r33.strides[1] : r33.strides[2], A2 = I2 ? r33.strides[2] : 1, D3 = I2 ? 1 : r33.strides[1], T3 = t9.strides[0], N4 = I2 ? t9.strides[1] : t9.strides[2], F4 = I2 ? t9.strides[2] : 1, _3 = I2 ? 1 : t9.strides[1], O3 = 0; O3 < h15; ++O3)for(var M3 = 0; M3 < p13; ++M3)for(var B3 = 0; B3 < v13; ++B3)for(var P3 = B3 - E3, L3 = Math.max(0, Math.ceil(P3 / b4)), W3 = Math.min(y8, (f18 + P3) / b4), U3 = 0; U3 < m12; ++U3){
                for(var V3 = U3 - R3, z2 = Math.max(0, Math.ceil(V3 / w3)), G2 = Math.min(x7, (d15 + V3) / w3), H1 = 0, q1 = L3; q1 < W3; ++q1)for(var K1 = q1 * b4 - P3, j1 = z2; j1 < G2; ++j1)for(var X1 = T3 * O3 + N4 * q1 + F4 * j1, Y1 = u25 * (f18 - 1 - K1) + c16 * (d15 - 1 - (j1 * w3 - V3)) + l24 * M3, $1 = 0; $1 < g11; ++$1)H1 += a32[X1 + _3 * $1] * i34[Y1 + $1];
                o43[k2 * O3 + S2 * B3 + A2 * U3 + D3 * M3] = H1;
            }
            return r33.toTensor();
        }, o32.prototype.conv3dDerInput = function(t9, e16, n24) {
            for(var r33 = dr(n24.inShape, "float32"), o43 = r33.values, a32 = r33.strides, i34 = a32[0], s31 = a32[1], u25 = a32[2], c16 = a32[3], l24 = this.readSync(t9.dataId), h15 = t9.strides, f18 = h15[0], d15 = h15[1], p13 = h15[2], v13 = h15[3], m12 = this.readSync(e16.dataId), g11 = e16.strides, y8 = g11[0], x7 = g11[1], b4 = g11[2], w3 = g11[3], C1 = n24.batchSize, E3 = n24.filterDepth, R3 = n24.filterHeight, I2 = n24.filterWidth, k2 = n24.inChannels, S2 = n24.inDepth, A2 = n24.inHeight, D3 = n24.inWidth, T3 = n24.outChannels, N4 = n24.outDepth, F4 = n24.outHeight, _3 = n24.outWidth, O3 = n24.strideDepth, M3 = n24.strideHeight, B3 = n24.strideWidth, P3 = E3 - 1 - n24.padInfo.front, L3 = R3 - 1 - n24.padInfo.top, W3 = I2 - 1 - n24.padInfo.left, U3 = 0; U3 < C1; ++U3)for(var V4 = 0; V4 < k2; ++V4)for(var z3 = 0; z3 < S2; ++z3)for(var G3 = z3 - P3, H2 = Math.max(0, Math.ceil(G3 / O3)), q2 = Math.min(N4, (E3 + G3) / O3), K2 = 0; K2 < A2; ++K2)for(var j2 = K2 - L3, X2 = Math.max(0, Math.ceil(j2 / M3)), Y2 = Math.min(F4, (R3 + j2) / M3), $2 = 0; $2 < D3; ++$2){
                for(var Q1 = $2 - W3, J1 = Math.max(0, Math.ceil(Q1 / B3)), Z1 = Math.min(_3, (I2 + Q1) / B3), tt1 = 0, et1 = H2; et1 < q2; ++et1)for(var nt1 = et1 * O3 - G3, rt1 = X2; rt1 < Y2; ++rt1)for(var ot1 = rt1 * M3 - j2, at1 = J1; at1 < Z1; ++at1)for(var it1 = f18 * U3 + d15 * et1 + p13 * rt1 + v13 * at1, st1 = y8 * (E3 - 1 - nt1) + x7 * (R3 - 1 - ot1) + b4 * (I2 - 1 - (at1 * B3 - Q1)) + w3 * V4, ut1 = 0; ut1 < T3; ++ut1)tt1 += l24[it1 + ut1] * m12[st1 + ut1];
                o43[i34 * U3 + s31 * z3 + u25 * K2 + c16 * $2 + V4] = tt1;
            }
            return r33.toTensor();
        }, o32.prototype.conv2dDerFilter = function(t9, e16, n24) {
            Hh([
                t9,
                e16
            ], "conv2dDerFilter");
            for(var r33 = n24.strideHeight, o43 = n24.strideWidth, a32 = n24.filterHeight, i34 = n24.filterWidth, s31 = "channelsLast" === n24.dataFormat, u25 = dr(n24.filterShape, "float32"), c16 = n24.padInfo.left, l24 = n24.padInfo.top, h15 = this.bufferSync(t9), f18 = this.bufferSync(e16), d15 = 0; d15 < a32; ++d15)for(var p13 = Math.max(0, Math.ceil((l24 - d15) / r33)), v13 = Math.min(n24.outHeight, (n24.inHeight + l24 - d15) / r33), m12 = 0; m12 < i34; ++m12)for(var g11 = Math.max(0, Math.ceil((c16 - m12) / o43)), y8 = Math.min(n24.outWidth, (n24.inWidth + c16 - m12) / o43), x7 = 0; x7 < n24.inChannels; ++x7)for(var b4 = 0; b4 < n24.outChannels; ++b4){
                for(var w3 = 0, C1 = 0; C1 < n24.batchSize; ++C1)for(var E3 = p13; E3 < v13; ++E3)for(var R3 = d15 + E3 * r33 - l24, I2 = g11; I2 < y8; ++I2){
                    var k2 = m12 + I2 * o43 - c16;
                    w3 += s31 ? h15.get(C1, R3, k2, x7) * f18.get(C1, E3, I2, b4) : h15.get(C1, x7, R3, k2) * f18.get(C1, b4, E3, I2);
                }
                u25.set(w3, d15, m12, x7, b4);
            }
            return u25.toTensor();
        }, o32.prototype.conv3dDerFilter = function(t9, e16, n24) {
            for(var r33 = n24.strideDepth, o43 = n24.strideHeight, a32 = n24.strideWidth, i34 = n24.filterDepth, s31 = n24.filterHeight, u25 = n24.filterWidth, c16 = dr(n24.filterShape, "float32"), l24 = c16.values, h15 = c16.strides, f18 = h15[0], d15 = h15[1], p13 = h15[2], v13 = h15[3], m12 = this.readSync(e16.dataId), g11 = e16.strides, y8 = g11[0], x7 = g11[1], b4 = g11[2], w4 = g11[3], C2 = this.readSync(t9.dataId), E4 = t9.strides, R4 = E4[0], I3 = E4[1], k3 = E4[2], S2 = E4[3], A2 = n24.padInfo.front, D3 = n24.padInfo.left, T3 = n24.padInfo.top, N4 = 0; N4 < i34; ++N4)for(var F4 = Math.max(0, Math.ceil((A2 - N4) / r33)), _3 = Math.min(n24.outDepth, (n24.inDepth + A2 - N4) / r33), O3 = N4 * f18, M3 = 0; M3 < s31; ++M3)for(var B3 = Math.max(0, Math.ceil((T3 - M3) / o43)), P3 = Math.min(n24.outHeight, (n24.inHeight + T3 - M3) / o43), L3 = M3 * d15 + O3, W3 = 0; W3 < u25; ++W3)for(var U3 = Math.max(0, Math.ceil((D3 - W3) / a32)), V4 = Math.min(n24.outWidth, (n24.inWidth + D3 - W3) / a32), z3 = W3 * p13 + L3, G3 = 0; G3 < n24.inChannels; ++G3)for(var H2 = G3 * v13 + z3, q2 = 0; q2 < n24.outChannels; ++q2){
                for(var K2 = 0, j2 = 0; j2 < n24.batchSize; ++j2)for(var X2 = j2 * R4, Y2 = j2 * y8, $2 = F4; $2 < _3; ++$2)for(var Q2 = (N4 + $2 * r33 - A2) * I3 + X2, J2 = $2 * x7 + Y2, Z2 = B3; Z2 < P3; ++Z2)for(var tt2 = (M3 + Z2 * o43 - T3) * k3 + Q2, et2 = Z2 * b4 + J2, nt2 = U3; nt2 < V4; ++nt2){
                    var rt2 = nt2 * w4 + et2;
                    K2 += C2[(W3 + nt2 * a32 - D3) * S2 + tt2 + G3] * m12[rt2 + q2];
                }
                l24[H2 + q2] = K2;
            }
            return c16.toTensor();
        }, o32.prototype.fusedDepthwiseConv2D = function(t9) {
            var e16 = t9.input, n24 = t9.filter, r33 = t9.convInfo, o43 = t9.bias, a32 = t9.activation, i34 = t9.preluActivationWeights, s31 = this.depthwiseConv2D(e16, n24, r33);
            return o43 && (s31 = this.add(s31, o43)), a32 && (s31 = qh(this, s31, a32, i34)), s31;
        }, o32.prototype.depthwiseConv2D = function(t9, e16, n24) {
            Hh([
                t9,
                e16
            ], "depthwiseConv2D");
            for(var r33 = n24.filterHeight, o43 = n24.filterWidth, a32 = n24.dilationHeight, i34 = n24.dilationWidth, s31 = n24.padInfo.left, u25 = n24.padInfo.top, c16 = n24.outChannels / n24.inChannels, l24 = dr(n24.outShape, t9.dtype), h15 = this.readSync(t9.dataId), f18 = this.readSync(e16.dataId), d15 = l24.values, p13 = 0; p13 < n24.batchSize; ++p13)for(var v13 = p13 * t9.strides[0], m12 = p13 * l24.strides[0], g11 = 0; g11 < n24.outHeight; ++g11)for(var y8 = m12 + g11 * l24.strides[1], x7 = g11 * n24.strideHeight - s31, b4 = 0; b4 < r33; ++b4){
                var w4 = x7 + b4 * a32;
                if (!(w4 < 0 || w4 >= n24.inHeight)) for(var C2 = b4 * e16.strides[0], E4 = v13 + w4 * t9.strides[1], R4 = 0; R4 < n24.outWidth; ++R4)for(var I3 = y8 + R4 * l24.strides[2], k3 = R4 * n24.strideWidth - u25, S2 = 0; S2 < o43; ++S2){
                    var A2 = k3 + S2 * i34;
                    if (!(A2 < 0 || A2 >= n24.inWidth)) for(var D3 = C2 + S2 * e16.strides[1], T3 = E4 + A2 * n24.inChannels, N4 = I3, F4 = D3, _3 = 0; _3 < n24.inChannels; ++_3){
                        for(var O3 = h15[T3 + _3], M3 = 0; M3 < c16; ++M3)d15[N4 + M3] += O3 * f18[F4 + M3];
                        N4 += c16, F4 += c16;
                    }
                }
            }
            return l24.toTensor();
        }, o32.prototype.depthwiseConv2DDerInput = function(t9, e16, n24) {
            Hh([
                t9,
                e16
            ], "depthwiseConv2DDerInput");
            for(var r33 = dr(n24.inShape, "float32"), o43 = r33.values, a32 = r33.strides, i34 = a32[0], s31 = a32[1], u25 = a32[2], c16 = this.readSync(t9.dataId), l24 = t9.strides, h15 = l24[0], f18 = l24[1], d15 = l24[2], p13 = this.readSync(e16.dataId), v13 = e16.strides, m12 = v13[0], g11 = v13[1], y8 = v13[2], x7 = n24.batchSize, b4 = n24.filterHeight, w5 = n24.filterWidth, C3 = n24.inChannels, E5 = n24.inHeight, R5 = n24.inWidth, I4 = n24.outChannels, k4 = n24.outHeight, S3 = n24.outWidth, A3 = n24.strideHeight, D4 = n24.strideWidth, T4 = b4 - 1 - n24.padInfo.top, N5 = w5 - 1 - n24.padInfo.left, F5 = I4 / C3, _4 = 0; _4 < x7; ++_4)for(var O4 = 0; O4 < C3; ++O4)for(var M4 = 0; M4 < E5; ++M4)for(var B3 = M4 - T4, P3 = Math.max(0, Math.ceil(B3 / A3)), L3 = Math.min(k4, (b4 + B3) / A3), W3 = 0; W3 < R5; ++W3){
                for(var U3 = W3 - N5, V4 = Math.max(0, Math.ceil(U3 / D4)), z3 = Math.min(S3, (w5 + U3) / D4), G3 = 0, H2 = P3; H2 < L3; ++H2)for(var q2 = H2 * A3 - B3, K3 = V4; K3 < z3; ++K3)for(var j3 = h15 * _4 + f18 * H2 + d15 * K3, X3 = m12 * (b4 - 1 - q2) + g11 * (w5 - 1 - (K3 * D4 - U3)) + y8 * O4, Y3 = 0; Y3 < F5; ++Y3)G3 += c16[j3 + (O4 * F5 + Y3)] * p13[X3 + Y3];
                o43[i34 * _4 + s31 * M4 + u25 * W3 + O4] = G3;
            }
            return r33.toTensor();
        }, o32.prototype.depthwiseConv2DDerFilter = function(t9, e16, n24) {
            Hh([
                t9,
                e16
            ], "depthwiseConv2DDerFilter");
            for(var r33 = n24.strideHeight, o43 = n24.strideWidth, a32 = n24.filterHeight, i34 = n24.filterWidth, s31 = dr(n24.filterShape, "float32"), u25 = n24.padInfo.left, c16 = n24.padInfo.top, l24 = n24.outChannels / n24.inChannels, h15 = this.bufferSync(t9), f18 = this.bufferSync(e16), d15 = 0; d15 < a32; ++d15)for(var p13 = Math.max(0, Math.ceil((c16 - d15) / r33)), v13 = Math.min(n24.outHeight, (n24.inHeight + c16 - d15) / r33), m12 = 0; m12 < i34; ++m12)for(var g11 = Math.max(0, Math.ceil((u25 - m12) / o43)), y8 = Math.min(n24.outWidth, (n24.inWidth + u25 - m12) / o43), x7 = 0; x7 < n24.outChannels; ++x7){
                for(var b4 = Math.trunc(x7 / l24), w5 = x7 % l24, C3 = 0, E5 = 0; E5 < n24.batchSize; ++E5)for(var R5 = p13; R5 < v13; ++R5)for(var I4 = d15 + R5 * r33 - c16, k4 = g11; k4 < y8; ++k4){
                    var S3 = m12 + k4 * o43 - u25;
                    C3 += h15.get(E5, I4, S3, b4) * f18.get(E5, R5, k4, x7);
                }
                s31.set(C3, d15, m12, b4, w5);
            }
            return s31.toTensor();
        }, o32.prototype.tile = function(t9, e16) {
            return Hh(t9, "tile"), ta(this.bufferSync(t9), e16);
        }, o32.prototype.pad = function(t9, e16, n24) {
            Hh(t9, "pad");
            var r33 = e16.map(function(e17, n25) {
                return e17[0] + t9.shape[n25] + e17[1];
            }), o43 = e16.map(function(t10) {
                return t10[0];
            }), a32 = this.bufferSync(t9), i34 = dr(r33, t9.dtype);
            0 !== n24 && i34.values.fill(n24);
            for(var s31 = 0; s31 < t9.size; s31++){
                var u25 = a32.indexToLoc(s31), c16 = u25.map(function(t10, e17) {
                    return t10 + o43[e17];
                });
                i34.set.apply(i34, [
                    a32.get.apply(a32, u25)
                ].concat(c16));
            }
            return i34.toTensor();
        }, o32.prototype.transpose = function(t9, e16) {
            Hh(t9, "transpose");
            for(var n24 = new Array(t9.rank), r33 = 0; r33 < n24.length; r33++)n24[r33] = t9.shape[e16[r33]];
            var o43 = this.readSync(t9.dataId), a32 = dr(n24, t9.dtype), i34 = this.bufferSync(t9);
            for(r33 = 0; r33 < t9.size; ++r33){
                for(var s31 = i34.indexToLoc(r33), u26 = new Array(s31.length), c17 = 0; c17 < u26.length; c17++)u26[c17] = s31[e16[c17]];
                var l24 = a32.locToIndex(u26);
                a32.values[l24] = o43[r33];
            }
            return a32.toTensor();
        }, o32.prototype.gather = function(t9, e16, n24) {
            Hh([
                t9,
                e16
            ], "gather");
            var r33 = t9.shape.slice(), o43 = this.readSync(e16.dataId);
            r33[n24] = o43.length;
            for(var a32 = dr(r33, t9.dtype), i34 = this.bufferSync(t9), s32 = 0; s32 < a32.size; ++s32){
                var u27 = a32.indexToLoc(s32), c18 = u27.slice();
                c18[n24] = o43[u27[n24]];
                var l25 = i34.locToIndex(c18);
                a32.values[s32] = i34.values[l25];
            }
            return a32.toTensor();
        }, o32.prototype.batchToSpaceND = function(t9, e16, n24) {
            Hh([
                t9
            ], "batchToSpaceND");
            var r33 = e16.reduce(function(t10, e17) {
                return t10 * e17;
            }), o43 = zr(t9.shape, e16, r33), a32 = Gr(o43.length, e16.length), i34 = Hr(t9.shape, e16, r33), s32 = qr(n24, e16.length), u28 = Kr(i34, n24, e16.length);
            return t9.reshape(o43).transpose(a32).reshape(i34).slice(s32, u28);
        }, o32.prototype.spaceToBatchND = function(t9, e16, n24) {
            Hh([
                t9
            ], "spaceToBatchND");
            var r33 = e16.reduce(function(t10, e17) {
                return t10 * e17;
            }), o43 = [
                [
                    0,
                    0
                ]
            ];
            o43.push.apply(o43, n24);
            for(var a32 = 1 + e16.length; a32 < t9.shape.length; ++a32)o43.push([
                0,
                0
            ]);
            var i34 = t9.pad(o43), s32 = zr(i34.shape, e16, r33, !1), u28 = Gr(s32.length, e16.length, !1), c19 = Hr(i34.shape, e16, r33, !1);
            return i34.reshape(s32).transpose(u28).reshape(c19);
        }, o32.prototype.pool = function(t9, e16, n24) {
            Hh(t9, "pool");
            for(var r33 = e16.strideHeight, o43 = e16.strideWidth, a32 = e16.dilationHeight, i34 = e16.dilationWidth, s32 = e16.effectiveFilterHeight, u28 = e16.effectiveFilterWidth, c19 = e16.padInfo.top, l26 = e16.padInfo.left, h15 = "max" === n24 ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, f18 = this.readSync(t9.dataId), d15 = dr(e16.outShape, t9.dtype), p13 = d15.values, v13 = e16.outShape[1] * e16.outShape[2] * e16.outShape[3], m12 = e16.outShape[2] * e16.outShape[3], g11 = e16.outShape[3], y8 = 0; y8 < e16.batchSize; ++y8)for(var x7 = y8 * v13, b5 = y8 * t9.strides[0], w6 = 0; w6 < e16.inChannels; ++w6)for(var C4 = 0; C4 < e16.outHeight; ++C4)for(var E6 = C4 * r33 - c19, R6 = Math.max(0, E6), I5 = Math.min(e16.inHeight, s32 + E6), k5 = x7 + C4 * m12, S4 = 0; S4 < e16.outWidth; ++S4){
                for(var A3 = S4 * o43 - l26, D4 = Math.max(0, A3), T4 = Math.min(e16.inWidth, u28 + A3), N5 = h15, F5 = 0, _4 = 0, O4 = R6; O4 < I5; O4 += a32){
                    for(var M4 = b5 + O4 * t9.strides[1], B3 = D4; B3 < T4; B3 += i34){
                        var P3 = f18[M4 + B3 * t9.strides[2] + w6];
                        "max" === n24 && P3 > N5 ? N5 = P3 : "avg" === n24 && (F5 += P3, _4++);
                    }
                    if (isNaN(N5)) break;
                }
                p13[k5 + S4 * g11 + w6] = "avg" === n24 ? F5 / _4 : N5;
            }
            return d15.toTensor();
        }, o32.prototype.maxPool = function(t9, e16) {
            return this.pool(t9, e16, "max");
        }, o32.prototype.maxPoolPositions = function(t9, e16) {
            for(var n24 = dr(e16.outShape, "int32"), r33 = e16.strideHeight, o43 = e16.strideWidth, a32 = e16.dilationHeight, i34 = e16.dilationWidth, s32 = e16.effectiveFilterHeight, u28 = e16.effectiveFilterWidth, c19 = e16.padInfo.top, l26 = e16.padInfo.left, h15 = this.bufferSync(t9), f18 = 0; f18 < e16.batchSize; ++f18)for(var d15 = 0; d15 < e16.inChannels; ++d15)for(var p13 = 0; p13 < e16.outHeight; ++p13){
                for(var v13 = p13 * r33 - c19, m12 = v13; m12 < 0;)m12 += a32;
                for(var g11 = Math.min(e16.inHeight, s32 + v13), y8 = 0; y8 < e16.outWidth; ++y8){
                    for(var x7 = y8 * o43 - l26, b5 = x7; b5 < 0;)b5 += i34;
                    for(var w6 = Math.min(e16.inWidth, u28 + x7), C4 = Number.NEGATIVE_INFINITY, E6 = -1, R6 = m12; R6 < g11; R6 += a32)for(var I5 = R6 - v13, k5 = b5; k5 < w6; k5 += i34){
                        var S4 = k5 - x7, A4 = h15.get(f18, R6, k5, d15);
                        A4 > C4 && (C4 = A4, E6 = I5 * u28 + S4);
                    }
                    n24.set(E6, f18, p13, y8, d15);
                }
            }
            return n24.toTensor();
        }, o32.prototype.maxPoolBackprop = function(t9, e16, n24, r33) {
            Hh([
                e16,
                n24
            ], "maxPoolBackprop");
            for(var o43 = this.maxPoolPositions(e16, r33), a32 = r33.strideHeight, i34 = r33.strideWidth, s32 = r33.dilationHeight, u28 = r33.dilationWidth, c19 = r33.effectiveFilterHeight, l26 = r33.effectiveFilterWidth, h15 = l26 - 1 - r33.padInfo.left, f18 = c19 - 1 - r33.padInfo.top, d15 = dr(e16.shape, "float32"), p13 = this.bufferSync(o43), v14 = this.bufferSync(t9), m13 = 0; m13 < r33.batchSize; ++m13)for(var g12 = 0; g12 < r33.inChannels; ++g12)for(var y9 = 0; y9 < r33.inHeight; ++y9)for(var x8 = 0; x8 < r33.inWidth; ++x8){
                for(var b6 = y9 - f18, w7 = x8 - h15, C5 = 0, E7 = 0; E7 < c19; E7 += s32){
                    var R7 = (b6 + E7) / a32;
                    if (!(R7 < 0 || R7 >= r33.outHeight || Math.floor(R7) !== R7)) for(var I6 = 0; I6 < l26; I6 += u28){
                        var k6 = (w7 + I6) / i34;
                        if (!(k6 < 0 || k6 >= r33.outWidth || Math.floor(k6) !== k6)) {
                            var S5 = c19 * l26 - 1 - p13.get(m13, R7, k6, g12) === E7 * l26 + I6 ? 1 : 0;
                            if (0 !== S5) C5 += v14.get(m13, R7, k6, g12) * S5;
                        }
                    }
                }
                d15.set(C5, m13, y9, x8, g12);
            }
            return d15.toTensor();
        }, o32.prototype.avgPoolBackprop = function(t9, e16, n24) {
            Hh([
                t9,
                e16
            ], "avgPoolBackprop");
            for(var r33 = n24.strideHeight, o43 = n24.strideWidth, a32 = n24.filterHeight, i34 = n24.filterWidth, s32 = n24.dilationHeight, u28 = n24.dilationWidth, c19 = n24.effectiveFilterHeight, l26 = n24.effectiveFilterWidth, h15 = l26 - 1 - n24.padInfo.left, f18 = c19 - 1 - n24.padInfo.top, d15 = dr(e16.shape, "float32"), p13 = 1 / (a32 * i34), v14 = this.bufferSync(t9), m13 = 0; m13 < n24.batchSize; ++m13)for(var g12 = 0; g12 < n24.inChannels; ++g12)for(var y9 = 0; y9 < n24.inHeight; ++y9)for(var x8 = 0; x8 < n24.inWidth; ++x8){
                for(var b7 = y9 - f18, w8 = x8 - h15, C6 = 0, E8 = 0; E8 < c19; E8 += s32){
                    var R8 = (b7 + E8) / r33;
                    if (!(R8 < 0 || R8 >= n24.outHeight || Math.floor(R8) !== R8)) for(var I7 = 0; I7 < l26; I7 += u28){
                        var k7 = (w8 + I7) / o43;
                        if (!(k7 < 0 || k7 >= n24.outWidth || Math.floor(k7) !== k7)) C6 += v14.get(m13, R8, k7, g12);
                    }
                }
                d15.set(C6 * p13, m13, y9, x8, g12);
            }
            return d15.toTensor();
        }, o32.prototype.pool3d = function(t9, e16, n24) {
            Hh(t9, "pool3d");
            for(var r33 = e16.strideDepth, o43 = e16.strideHeight, a32 = e16.strideWidth, i34 = e16.dilationDepth, s32 = e16.dilationHeight, u28 = e16.dilationWidth, c19 = e16.effectiveFilterDepth, l26 = e16.effectiveFilterHeight, h15 = e16.effectiveFilterWidth, f18 = e16.padInfo.front, d15 = e16.padInfo.top, p13 = e16.padInfo.left, v14 = "max" === n24 ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, m13 = this.readSync(t9.dataId), g12 = dr(e16.outShape, t9.dtype), y9 = g12.values, x8 = e16.outShape[1] * e16.outShape[2] * e16.outShape[3] * e16.outShape[4], b8 = e16.outShape[2] * e16.outShape[3] * e16.outShape[4], w9 = e16.outShape[3] * e16.outShape[4], C7 = e16.outShape[4], E9 = 0; E9 < e16.batchSize; ++E9)for(var R9 = E9 * x8, I8 = E9 * t9.strides[0], k8 = 0; k8 < e16.inChannels; ++k8)for(var S6 = 0; S6 < e16.outDepth; ++S6){
                for(var A5 = S6 * r33 - f18, D5 = A5; D5 < 0;)D5 += i34;
                for(var T5 = Math.min(e16.inDepth, c19 + A5), N6 = R9 + S6 * b8, F6 = 0; F6 < e16.outHeight; ++F6){
                    for(var _5 = F6 * o43 - d15, O5 = _5; O5 < 0;)O5 += s32;
                    for(var M5 = Math.min(e16.inHeight, l26 + _5), B4 = N6 + F6 * w9, P4 = 0; P4 < e16.outWidth; ++P4){
                        for(var L3 = P4 * a32 - p13, W3 = L3; W3 < 0;)W3 += u28;
                        for(var U4 = Math.min(e16.inWidth, h15 + L3), V5 = B4 + P4 * C7, z4 = v14, G4 = 0, H3 = 0, q3 = D5; q3 < T5; q3 += i34){
                            for(var K4 = I8 + q3 * t9.strides[1], j4 = O5; j4 < M5; j4 += s32){
                                for(var X4 = K4 + j4 * t9.strides[2], Y4 = W3; Y4 < U4; Y4 += u28){
                                    var $3 = m13[X4 + Y4 * t9.strides[3] + k8];
                                    if ("max" === n24 && $3 > z4 ? z4 = $3 : "avg" === n24 && (G4 += $3, H3++), isNaN(z4)) break;
                                }
                                if (isNaN(z4)) break;
                            }
                            if (isNaN(z4)) break;
                        }
                        y9[V5 + k8] = "avg" === n24 ? G4 / H3 : z4;
                    }
                }
            }
            return g12.toTensor();
        }, o32.prototype.avgPool3d = function(t9, e16) {
            return Hh(t9, "avgPool3d"), this.pool3d(t9, e16, "avg").toFloat();
        }, o32.prototype.avgPool3dBackprop = function(t9, e16, n24) {
            Hh([
                t9,
                e16
            ], "avgPool3dBackprop");
            for(var r33 = n24.strideDepth, o43 = n24.strideHeight, a32 = n24.strideWidth, i34 = n24.filterDepth, s32 = n24.filterHeight, u28 = n24.filterWidth, c19 = n24.dilationDepth, l26 = n24.dilationHeight, h15 = n24.dilationWidth, f18 = n24.effectiveFilterDepth, d15 = n24.effectiveFilterHeight, p13 = n24.effectiveFilterWidth, v14 = f18 - 1 - n24.padInfo.front, m13 = p13 - 1 - n24.padInfo.left, g12 = d15 - 1 - n24.padInfo.top, y9 = dr(e16.shape, "float32"), x8 = 1 / (i34 * s32 * u28), b8 = this.bufferSync(t9), w9 = 0; w9 < n24.batchSize; ++w9)for(var C7 = 0; C7 < n24.inChannels; ++C7)for(var E9 = 0; E9 < n24.inDepth; ++E9)for(var R9 = 0; R9 < n24.inHeight; ++R9)for(var I8 = 0; I8 < n24.inWidth; ++I8){
                for(var k8 = E9 - v14, S6 = R9 - g12, A6 = I8 - m13, D6 = 0, T6 = 0; T6 < f18; T6 += c19){
                    var N7 = (k8 + T6) / r33;
                    if (!(N7 < 0 || N7 >= n24.outDepth || Math.floor(N7) !== N7)) for(var F7 = 0; F7 < d15; F7 += l26){
                        var _6 = (S6 + F7) / o43;
                        if (!(_6 < 0 || _6 >= n24.outHeight || Math.floor(_6) !== _6)) for(var O6 = 0; O6 < p13; O6 += h15){
                            var M6 = (A6 + O6) / a32;
                            if (!(M6 < 0 || M6 >= n24.outWidth || Math.floor(M6) !== M6)) D6 += b8.get(w9, N7, _6, M6, C7);
                        }
                    }
                }
                y9.set(D6 * x8, w9, E9, R9, I8, C7);
            }
            return y9.toTensor();
        }, o32.prototype.maxPool3d = function(t9, e16) {
            return Hh(t9, "maxPool3d"), this.pool3d(t9, e16, "max").toFloat();
        }, o32.prototype.maxPool3dPositions = function(t9, e16) {
            for(var n24 = dr(e16.outShape, "int32"), r33 = e16.strideDepth, o43 = e16.strideHeight, a32 = e16.strideWidth, i34 = e16.dilationDepth, s32 = e16.dilationHeight, u28 = e16.dilationWidth, c19 = e16.effectiveFilterDepth, l26 = e16.effectiveFilterHeight, h15 = e16.effectiveFilterWidth, f18 = e16.padInfo.front, d15 = e16.padInfo.top, p13 = e16.padInfo.left, v14 = this.bufferSync(t9), m13 = 0; m13 < e16.batchSize; ++m13)for(var g12 = 0; g12 < e16.inChannels; ++g12)for(var y9 = 0; y9 < e16.outDepth; ++y9){
                for(var x8 = y9 * r33 - f18, b8 = x8; b8 < 0;)b8 += i34;
                for(var w9 = Math.min(e16.inDepth, c19 + x8), C7 = 0; C7 < e16.outHeight; ++C7){
                    for(var E9 = C7 * o43 - d15, R9 = E9; R9 < 0;)R9 += s32;
                    for(var I8 = Math.min(e16.inHeight, l26 + E9), k9 = 0; k9 < e16.outWidth; ++k9){
                        for(var S7 = k9 * a32 - p13, A7 = S7; A7 < 0;)A7 += u28;
                        for(var D7 = Math.min(e16.inWidth, h15 + S7), T7 = Number.NEGATIVE_INFINITY, N8 = -1, F8 = b8; F8 < w9; F8 += i34)for(var _7 = F8 - x8, O7 = R9; O7 < I8; O7 += s32)for(var M7 = O7 - E9, B5 = A7; B5 < D7; B5 += u28){
                            var P5 = B5 - S7, L4 = v14.get(m13, F8, O7, B5, g12);
                            L4 >= T7 && (T7 = L4, N8 = _7 * l26 * h15 + M7 * l26 + P5);
                        }
                        n24.set(N8, m13, y9, C7, k9, g12);
                    }
                }
            }
            return n24.toTensor();
        }, o32.prototype.maxPool3dBackprop = function(t9, e16, n24, r33) {
            Hh([
                e16,
                n24
            ], "maxPool3dBackprop");
            for(var o43 = this.maxPool3dPositions(e16, r33), a32 = r33.strideDepth, i34 = r33.strideHeight, s32 = r33.strideWidth, u28 = r33.dilationDepth, c19 = r33.dilationHeight, l26 = r33.dilationWidth, h15 = r33.effectiveFilterDepth, f18 = r33.effectiveFilterHeight, d15 = r33.effectiveFilterWidth, p13 = h15 - 1 - r33.padInfo.front, v14 = d15 - 1 - r33.padInfo.left, m13 = f18 - 1 - r33.padInfo.top, g12 = dr(e16.shape, "float32"), y9 = this.bufferSync(o43), x9 = this.bufferSync(t9), b9 = 0; b9 < r33.batchSize; ++b9)for(var w10 = 0; w10 < r33.inChannels; ++w10)for(var C8 = 0; C8 < r33.inDepth; ++C8)for(var E10 = 0; E10 < r33.inHeight; ++E10)for(var R10 = 0; R10 < r33.inWidth; ++R10){
                for(var I9 = C8 - p13, k10 = E10 - m13, S8 = R10 - v14, A8 = 0, D8 = 0; D8 < h15; D8 += u28){
                    var T8 = (I9 + D8) / a32;
                    if (!(T8 < 0 || T8 >= r33.outDepth || Math.floor(T8) !== T8)) for(var N9 = 0; N9 < f18; N9 += c19){
                        var F9 = (k10 + N9) / i34;
                        if (!(F9 < 0 || F9 >= r33.outHeight || Math.floor(F9) !== F9)) for(var _8 = 0; _8 < d15; _8 += l26){
                            var O8 = (S8 + _8) / s32;
                            if (!(O8 < 0 || O8 >= r33.outWidth || Math.floor(O8) !== O8)) {
                                var M8 = h15 * f18 * d15 - 1 - y9.get(b9, T8, F9, O8, w10) === D8 * f18 * d15 + N9 * d15 + _8 ? 1 : 0;
                                if (0 !== M8) A8 += x9.get(b9, T8, F9, O8, w10) * M8;
                            }
                        }
                    }
                }
                g12.set(A8, b9, C8, E10, R10, w10);
            }
            return g12.toTensor();
        }, o32.prototype.cast = function(t9, e16) {
            return Po(t9, e16, this);
        }, o32.prototype.reshape = function(t9, e16) {
            return Lo(t9, e16);
        }, o32.prototype.avgPool = function(t9, e16) {
            return Hh(t9, "avgPool"), this.pool(t9, e16, "avg").toFloat();
        }, o32.prototype.resizeBilinear = function(t9, e16, n24, r33) {
            Hh(t9, "resizeBilinear");
            for(var o43 = t9.shape, a32 = o43[0], i34 = o43[1], s32 = o43[2], u28 = o43[3], c19 = this.readSync(t9.dataId), l26 = new Float32Array(k([
                a32,
                e16,
                n24,
                u28
            ])), h15 = [
                r33 && e16 > 1 ? i34 - 1 : i34,
                r33 && n24 > 1 ? s32 - 1 : s32
            ], f18 = [
                r33 && e16 > 1 ? e16 - 1 : e16,
                r33 && n24 > 1 ? n24 - 1 : n24
            ], d15 = 0, p13 = h15[0] / f18[0], v14 = h15[1] / f18[1], m13 = 0; m13 < a32; m13++)for(var g12 = 0; g12 < e16; g12++)for(var y9 = p13 * g12, x9 = Math.floor(y9), b9 = y9 - x9, w10 = Math.min(i34 - 1, Math.ceil(y9)), C8 = m13 * t9.strides[0] + x9 * t9.strides[1], E10 = m13 * t9.strides[0] + w10 * t9.strides[1], R10 = 0; R10 < n24; R10++)for(var I10 = v14 * R10, S9 = Math.floor(I10), A9 = I10 - S9, D9 = Math.min(s32 - 1, Math.ceil(I10)), T9 = C8 + S9 * t9.strides[2], N10 = E10 + S9 * t9.strides[2], F10 = C8 + D9 * t9.strides[2], _9 = E10 + D9 * t9.strides[2], O9 = 0; O9 < u28; O9++){
                var M9 = c19[T9 + O9], B6 = c19[N10 + O9], P6 = M9 + (c19[F10 + O9] - M9) * A9, L5 = P6 + (B6 + (c19[_9 + O9] - B6) * A9 - P6) * b9;
                l26[d15++] = L5;
            }
            return Fn(l26, [
                a32,
                e16,
                n24,
                u28
            ]);
        }, o32.prototype.resizeBilinearBackprop = function(t9, e16, n24) {
            Hh([
                t9,
                e16
            ], "resizeBilinearBackprop");
            for(var r33 = e16.shape, o43 = r33[0], a32 = r33[1], i34 = r33[2], s32 = r33[3], u28 = t9.shape, c19 = u28[1], l26 = u28[2], h15 = new Float32Array(o43 * a32 * i34 * s32), f18 = [
                n24 && c19 > 1 ? a32 - 1 : a32,
                n24 && l26 > 1 ? i34 - 1 : i34
            ], d15 = [
                n24 && c19 > 1 ? c19 - 1 : c19,
                n24 && l26 > 1 ? l26 - 1 : l26
            ], p13 = f18[0] / d15[0], v14 = f18[1] / d15[1], m13 = this.readSync(t9.dataId), g12 = 0, y9 = 0; y9 < o43; y9++)for(var x9 = y9 * e16.strides[0], b9 = 0; b9 < c19; b9++)for(var w10 = b9 * p13, C8 = Math.floor(w10), E10 = Math.min(Math.ceil(w10), a32 - 1), R10 = x9 + C8 * e16.strides[1], I10 = x9 + E10 * e16.strides[1], k11 = w10 - C8, S9 = 1 - k11, A9 = 0; A9 < l26; A9++)for(var D9 = A9 * v14, T9 = Math.floor(D9), N10 = Math.min(Math.ceil(D9), i34 - 1), F10 = D9 - T9, _9 = 1 - F10, O9 = R10 + T9 * e16.strides[2], M10 = R10 + N10 * e16.strides[2], B7 = I10 + T9 * e16.strides[2], P7 = I10 + N10 * e16.strides[2], L6 = S9 * _9, W4 = S9 * F10, U5 = k11 * _9, V6 = k11 * F10, z5 = 0; z5 < s32; z5++){
                var G5 = m13[g12++];
                h15[O9 + z5] += G5 * L6, h15[M10 + z5] += G5 * W4, h15[B7 + z5] += G5 * U5, h15[P7 + z5] += G5 * V6;
            }
            return Ln(h15, [
                o43,
                i34,
                a32,
                s32
            ], e16.dtype);
        }, o32.prototype.resizeNearestNeighbor = function(t9, e16, n24, r33) {
            Hh(t9, "resizeNearestNeighbor");
            for(var o43 = t9.shape, a32 = o43[0], i34 = o43[1], s32 = o43[2], u28 = o43[3], c19 = this.readSync(t9.dataId), l26 = new Float32Array(a32 * e16 * n24 * u28), h15 = [
                r33 && e16 > 1 ? i34 - 1 : i34,
                r33 && n24 > 1 ? s32 - 1 : s32
            ], f18 = [
                r33 && e16 > 1 ? e16 - 1 : e16,
                r33 && n24 > 1 ? n24 - 1 : n24
            ], d15 = h15[0] / f18[0], p13 = h15[1] / f18[1], v14 = 0, m13 = 0; m13 < a32; m13++)for(var g12 = m13 * t9.strides[0], y9 = 0; y9 < e16; y9++)for(var x9 = d15 * y9, b9 = g12 + Math.min(i34 - 1, r33 ? Math.round(x9) : Math.floor(x9)) * t9.strides[1], w10 = 0; w10 < n24; w10++)for(var C8 = p13 * w10, E10 = b9 + Math.min(s32 - 1, r33 ? Math.round(C8) : Math.floor(C8)) * t9.strides[2], R10 = 0; R10 < u28; R10++){
                var I10 = c19[E10 + R10];
                l26[v14++] = I10;
            }
            return Fn(l26, [
                a32,
                e16,
                n24,
                u28
            ], t9.dtype);
        }, o32.prototype.resizeNearestNeighborBackprop = function(t9, e16, n24) {
            Hh([
                t9,
                e16
            ], "resizeNearestNeighborBackprop");
            for(var r33 = e16.shape, o43 = r33[0], a32 = r33[1], i34 = r33[2], s32 = r33[3], u28 = t9.shape, c19 = u28[1], l26 = u28[2], h15 = new Float32Array(o43 * a32 * i34 * s32), f18 = this.readSync(t9.dataId), d15 = [
                n24 && c19 > 1 ? a32 - 1 : a32,
                n24 && l26 > 1 ? i34 - 1 : i34
            ], p13 = [
                n24 && c19 > 1 ? c19 - 1 : c19,
                n24 && l26 > 1 ? l26 - 1 : l26
            ], v14 = d15[0] / p13[0], m13 = d15[1] / p13[1], g12 = 1 / v14, y9 = 1 / m13, x9 = 2 * Math.ceil(g12) + 2, b9 = 2 * Math.ceil(y9) + 2, w10 = 0; w10 < o43; w10++)for(var C8 = w10 * e16.strides[0], E10 = 0; E10 < a32; E10++)for(var R10 = C8 + E10 * e16.strides[1], I11 = Math.floor(E10 * g12), k11 = Math.floor(I11 - x9 / 2), S9 = 0; S9 < i34; S9++)for(var A9 = R10 + S9 * e16.strides[2], D9 = Math.floor(S9 * y9), T9 = Math.floor(D9 - b9 / 2), N10 = 0; N10 < s32; N10++){
                for(var F10 = 0, _9 = 0; _9 < x9; _9++){
                    var O9 = _9 + k11;
                    if (!(O9 < 0 || O9 >= c19)) {
                        var M10 = C8 + O9 * t9.strides[1], B7 = O9 * v14;
                        if (E10 === Math.min(a32 - 1, n24 ? Math.round(B7) : Math.floor(B7))) for(var P7 = 0; P7 < b9; P7++){
                            var L6 = P7 + T9;
                            if (!(L6 < 0 || L6 >= l26)) {
                                var W4 = M10 + L6 * t9.strides[2], U5 = L6 * m13;
                                S9 === Math.min(i34 - 1, n24 ? Math.round(U5) : Math.floor(U5)) && (F10 += f18[W4 + N10]);
                            }
                        }
                    }
                }
                h15[A9 + N10] = F10;
            }
            return Ln(h15, e16.shape, e16.dtype);
        }, o32.prototype.batchNormalization = function(t9, e16, n24, r33, o43, a32) {
            Hh([
                t9,
                e16,
                n24,
                o43,
                a32
            ], "batchNorm");
            for(var i34 = this.readSync(t9.dataId), s32 = this.readSync(e16.dataId), u28 = this.readSync(n24.dataId), c19 = o43 ? this.readSync(o43.dataId) : new Float32Array([
                1
            ]), l26 = a32 ? this.readSync(a32.dataId) : new Float32Array([
                0
            ]), h15 = new Float32Array(i34.length), f18 = l26.length, d15 = c19.length, p13 = u28.length, v14 = s32.length, m13 = 0, g12 = 0, y9 = 0, x9 = 0, b9 = 0; b9 < i34.length; ++b9)h15[b9] = l26[m13++] + (i34[b9] - s32[g12++]) * c19[y9++] / Math.sqrt(u28[x9++] + r33), m13 >= f18 && (m13 = 0), g12 >= v14 && (g12 = 0), y9 >= d15 && (y9 = 0), x9 >= p13 && (x9 = 0);
            return Ln(h15, t9.shape);
        }, o32.prototype.localResponseNormalization4D = function(t9, e16, n24, r33, o43) {
            Hh(t9, "localResponseNormalization4D");
            var a32 = t9.shape[3], i34 = a32 - 1, s32 = this.readSync(t9.dataId), u28 = t9.size, c19 = new Float32Array(u28);
            function l26(t10) {
                for(var n25 = t10 % a32, r34 = t10 - n25 + Math.max(0, n25 - e16), o44 = t10 - n25 + Math.min(n25 + e16, i34), u29 = 0; r34 <= o44; r34++){
                    var c20 = s32[r34];
                    u29 += c20 * c20;
                }
                return u29;
            }
            for(var h15 = 0; h15 < u28; h15++){
                var f18 = l26(h15), d15 = s32[h15] * Math.pow(n24 + r33 * f18, -o43);
                c19[h15] = d15;
            }
            return Ln(c19, t9.shape);
        }, o32.prototype.LRNGrad = function(t9, e16, n24, r33, o43, a32, i34) {
            Hh(t9, "LRNGrad");
            for(var s32 = t9.shape[3], u28 = this.readSync(t9.dataId), c19 = this.readSync(e16.dataId), l26 = this.readSync(n24.dataId), h15 = new Float32Array(t9.size), f19 = t9.size, d16 = 0; d16 < f19; d16++){
                for(var p13 = d16 % s32, v14 = d16 - p13 + Math.max(0, p13 - r33), m13 = d16 - p13 + Math.min(s32, p13 + r33 + 1), g12 = 0, y9 = v14; y9 < m13; y9++)g12 += Math.pow(c19[y9], 2);
                g12 = a32 * g12 + o43;
                for(y9 = v14; y9 < m13; y9++){
                    var x9 = -2 * a32 * i34 * c19[y9] * l26[d16] / g12;
                    d16 === y9 && (x9 += Math.pow(g12, -i34)), x9 *= u28[d16], h15[y9] += x9;
                }
            }
            return Ln(h15, t9.shape);
        }, o32.prototype.multinomial = function(t9, e16, n24, r33) {
            Hh(t9, "multinomial");
            for(var o43 = e16 ? t9 : go(t9), a32 = o43.shape[0], i34 = o43.shape[1], s32 = Gn([
                a32,
                n24
            ], "int32"), u28 = this.readSync(s32.dataId), c19 = this.readSync(o43.dataId), l26 = 0; l26 < a32; ++l26){
                var h15 = l26 * i34, f19 = new Float32Array(i34 - 1);
                f19[0] = c19[h15];
                for(var d16 = 1; d16 < f19.length; ++d16)f19[d16] = f19[d16 - 1] + c19[h15 + d16];
                for(var p14 = cr(r33.toString()), v15 = l26 * n24, m14 = 0; m14 < n24; ++m14){
                    var g13 = p14();
                    u28[v15 + m14] = f19.length;
                    for(var y10 = 0; y10 < f19.length; y10++)if (g13 < f19[y10]) {
                        u28[v15 + m14] = y10;
                        break;
                    }
                }
            }
            return s32;
        }, o32.prototype.oneHot = function(t9, e16, n24, r33) {
            Hh(t9, "oneHot");
            var o43 = new Float32Array(t9.size * e16);
            o43.fill(r33);
            for(var a32 = this.readSync(t9.dataId), i34 = 0; i34 < t9.size; ++i34)a32[i34] >= 0 && a32[i34] < e16 && (o43[i34 * e16 + a32[i34]] = n24);
            return Bn(o43, [
                t9.size,
                e16
            ], "int32");
        }, o32.prototype.nonMaxSuppression = function(t9, e16, n24, r33, o43) {
            return Hh(t9, "nonMaxSuppression"), jo(this.readSync(t9.dataId), this.readSync(e16.dataId), n24, r33, o43);
        }, o32.prototype.fft = function(t9) {
            return this.fftBatch(t9, !1);
        }, o32.prototype.ifft = function(t9) {
            return this.fftBatch(t9, !0);
        }, o32.prototype.fftBatch = function(t9, e16) {
            for(var n24 = t9.shape[0], r33 = t9.shape[1], o43 = dr(t9.shape, "float32"), a32 = dr(t9.shape, "float32"), i34 = Tn(t9).as2D(n24, r33), s32 = Nn(t9).as2D(n24, r33), u28 = 0; u28 < n24; u28++)for(var c19 = i34.slice([
                u28,
                0
            ], [
                1,
                r33
            ]), l26 = s32.slice([
                u28,
                0
            ], [
                1,
                r33
            ]), h16 = Dn(c19, l26), f20 = this.readSync(this.fftImpl(h16, e16).dataId), d17 = 0; d17 < r33; d17++){
                var p15 = zo(f20, d17);
                o43.values[u28 * r33 + d17] = p15.real, a32.values[u28 * r33 + d17] = p15.imag;
            }
            return Dn(o43.toTensor(), a32.toTensor()).as2D(n24, r33);
        }, o32.prototype.fftImpl = function(t9, e16) {
            var n24 = t9.as1D(), r33 = n24.size;
            if (this.isExponentOf2(r33)) {
                var o43 = this.fftRadix2(n24, r33, e16).as2D(t9.shape[0], t9.shape[1]);
                return e16 && (o43 = Dn(Tn(o43).div(On(r33)), Nn(o43).div(On(r33)))), o43;
            }
            var a32 = this.readSync(t9.dataId), i34 = function(t10) {
                for(var e17 = new Float32Array(t10.length / 2), n25 = new Float32Array(t10.length / 2), r34 = 0; r34 < t10.length; r34 += 2)e17[r34 / 2] = t10[r34], n25[r34 / 2] = t10[r34 + 1];
                return {
                    real: e17,
                    imag: n25
                };
            }(this.fourierTransformByMatmul(a32, r33, e16));
            return Dn(i34.real, i34.imag).as2D(t9.shape[0], t9.shape[1]);
        }, o32.prototype.isExponentOf2 = function(t9) {
            return 0 == (t9 & t9 - 1);
        }, o32.prototype.fftRadix2 = function(t9, e16, n24) {
            if (1 === e16) return t9;
            var r33 = this.readSync(t9.dataId), o44 = e16 / 2, a32 = function(t10) {
                for(var e17 = Math.ceil(t10.length / 4), n25 = new Float32Array(e17), r34 = new Float32Array(e17), o45 = 0; o45 < t10.length; o45 += 4)n25[Math.floor(o45 / 4)] = t10[o45], r34[Math.floor(o45 / 4)] = t10[o45 + 1];
                return {
                    real: n25,
                    imag: r34
                };
            }(r33), i34 = Dn(a32.real, a32.imag).as1D(), s32 = function(t10) {
                for(var e17 = Math.floor(t10.length / 4), n25 = new Float32Array(e17), r34 = new Float32Array(e17), o45 = 2; o45 < t10.length; o45 += 4)n25[Math.floor(o45 / 4)] = t10[o45], r34[Math.floor(o45 / 4)] = t10[o45 + 1];
                return {
                    real: n25,
                    imag: r34
                };
            }(r33), u28 = Dn(s32.real, s32.imag).as1D();
            i34 = this.fftRadix2(i34, o44, n24), u28 = this.fftRadix2(u28, o44, n24);
            var c19 = function(t10, e17) {
                for(var n25 = new Float32Array(t10 / 2), r34 = new Float32Array(t10 / 2), o45 = 0; o45 < Math.ceil(t10 / 2); o45++){
                    var a33 = (e17 ? 2 : -2) * Math.PI * (o45 / t10);
                    n25[o45] = Math.cos(a33), r34[o45] = Math.sin(a33);
                }
                return {
                    real: n25,
                    imag: r34
                };
            }(e16, n24), l26 = Dn(c19.real, c19.imag).mul(u28), h16 = i34.add(l26), f20 = i34.sub(l26), d17 = Tn(h16).concat(Tn(f20)), p16 = Nn(h16).concat(Nn(f20));
            return Dn(d17, p16).as1D();
        }, o32.prototype.fourierTransformByMatmul = function(t9, e16, n24) {
            for(var r33 = new Float32Array(2 * e16), o44 = 0; o44 < e16; o44++){
                for(var a32 = 0, i34 = 0, s32 = 0; s32 < e16; s32++){
                    var u28 = Ho(o44 * s32, e16, n24), c19 = zo(t9, s32);
                    a32 += c19.real * u28.real - c19.imag * u28.imag, i34 += c19.real * u28.imag + c19.imag * u28.real;
                }
                n24 && (a32 /= e16, i34 /= e16), Go(r33, a32, i34, o44);
            }
            return r33;
        }, o32.prototype.depthToSpace = function(t9, e16, n24) {
            C("NHWC" === n24, function() {
                return "Only NHWC dataFormat supported on CPU for depthToSpace. Got " + n24;
            }), C(e16 > 1, function() {
                return "blockSize should be > 1 for depthToSpace, but was: " + e16;
            });
            for(var r33 = t9.shape[0], o44 = t9.shape[1], a34 = t9.shape[2], i35 = t9.shape[3], s33 = o44 * e16, u29 = a34 * e16, c21 = i35 / (e16 * e16), l26 = this.readSync(t9.dataId), h16 = new Float32Array(r33 * s33 * u29 * c21), f20 = 0, d17 = 0; d17 < r33; ++d17)for(var p16 = 0; p16 < s33; ++p16)for(var v16 = Math.floor(p16 / e16), m15 = p16 % e16, g14 = 0; g14 < u29; ++g14)for(var y11 = Math.floor(g14 / e16), x10 = (m15 * e16 + g14 % e16) * c21, b9 = 0; b9 < c21; ++b9){
                var w10 = b9 + x10 + i35 * (y11 + a34 * (v16 + o44 * d17));
                h16[f20++] = l26[w10];
            }
            return Ln(h16, [
                r33,
                s33,
                u29,
                c21
            ]);
        }, o32.prototype.broadcastedBinaryOp = function(t9, e16, n24, r33) {
            var o44 = Ro(t9.shape, e16.shape), a34 = dr(o44, n24), i35 = this.readSync(t9.dataId), s33 = this.readSync(e16.dataId), u29 = Co(t9.shape, o44), c21 = Co(e16.shape, o44), l26 = a34.values;
            if (u29.length + c21.length === 0) for(var h16 = 0; h16 < l26.length; ++h16)l26[h16] = r33(i35[h16 % i35.length], s33[h16 % s33.length]);
            else {
                var f20 = this.bufferSync(t9), d17 = this.bufferSync(e16), p16 = function(n25) {
                    var o45 = a34.indexToLoc(n25), h17 = o45.slice(-t9.rank);
                    u29.forEach(function(t10) {
                        return h17[t10] = 0;
                    });
                    var p17 = f20.locToIndex(h17), v16 = o45.slice(-e16.rank);
                    c21.forEach(function(t10) {
                        return v16[t10] = 0;
                    });
                    var m15 = d17.locToIndex(v16);
                    l26[n25] = r33(i35[p17], s33[m15]);
                };
                for(h16 = 0; h16 < l26.length; ++h16)p16(h16);
            }
            return a34.toTensor();
        }, o32.prototype.broadcastedBinaryComplexOp = function(t9, e16, n24) {
            var r33 = Ro(t9.shape, e16.shape), o44 = dr(r33, "float32"), a34 = dr(r33, "float32"), i35 = this.readSync(t9.dataId), s33 = this.readSync(e16.dataId), u29 = Co(t9.shape, r33), c21 = Co(e16.shape, r33), l26 = o44.values, h16 = a34.values;
            if (u29.length + c21.length === 0) for(var f21 = 0; f21 < l26.length; f21++){
                var d18 = f21 % i35.length, p17 = f21 % s33.length, v16 = n24(i35[2 * d18], i35[2 * d18 + 1], s33[2 * p17], s33[2 * p17 + 1]);
                l26[f21] = v16.real, h16[f21] = v16.imag;
            }
            else {
                var m15 = this.bufferSync(this.data.get(t9.dataId).complexTensors.real), g14 = this.bufferSync(this.data.get(e16.dataId).complexTensors.real), y11 = function(r34) {
                    var a35 = o44.indexToLoc(r34), f22 = a35.slice(-t9.rank);
                    u29.forEach(function(t10) {
                        return f22[t10] = 0;
                    });
                    var d19 = m15.locToIndex(f22), p18 = a35.slice(-e16.rank);
                    c21.forEach(function(t10) {
                        return p18[t10] = 0;
                    });
                    var v17 = g14.locToIndex(p18), y12 = n24(i35[2 * d19], i35[2 * d19 + 1], s33[2 * v17], s33[2 * v17 + 1]);
                    l26[r34] = y12.real, h16[r34] = y12.imag;
                };
                for(f21 = 0; f21 < l26.length; f21++)y11(f21);
            }
            return this.complex(o44.toTensor(), a34.toTensor());
        }, o32.prototype.split = function(t9, e16, n24) {
            return Zo(t9, e16, n24);
        }, o32.prototype.dispose = function() {
        }, o32.prototype.floatPrecision = function() {
            return 32;
        }, o32.prototype.epsilon = function() {
            return 0.0000001;
        }, o32.prototype.cropAndResize = function(t9, e16, n24, r33, o44, a34) {
            for(var i35 = t9.shape, s33 = i35[0], u29 = i35[1], c21 = i35[2], l26 = i35[3], h16 = e16.shape[0], f21 = r33[0], d19 = r33[1], p18 = dr([
                h16,
                f21,
                d19,
                l26
            ], "float32"), v17 = this.readSync(e16.dataId), m16 = this.readSync(n24.dataId), g15 = this.readSync(t9.dataId), y12 = t9.strides, x10 = p18.strides, b9 = 0; b9 < h16; b9++){
                var w11 = 4 * b9, C8 = v17[w11], E10 = v17[w11 + 1], R10 = v17[w11 + 2], I11 = v17[w11 + 3], k11 = m16[b9];
                if (!(k11 >= s33)) for(var S9 = f21 > 1 ? (R10 - C8) * (u29 - 1) / (f21 - 1) : 0, A9 = d19 > 1 ? (I11 - E10) * (c21 - 1) / (d19 - 1) : 0, D9 = 0; D9 < f21; D9++){
                    var T9 = f21 > 1 ? C8 * (u29 - 1) + D9 * S9 : 0.5 * (C8 + R10) * (u29 - 1);
                    if (T9 < 0 || T9 > u29 - 1) for(var N10 = 0; N10 < d19; N10++)for(var F11 = 0; F11 < l26; F11++){
                        var _10 = F11 + N10 * x10[2] + D9 * x10[1] + b9 * x10[0];
                        p18.values[_10] = a34;
                    }
                    else if ("bilinear" === o44) {
                        var O10 = Math.floor(T9), M11 = Math.ceil(T9), B8 = T9 - O10;
                        for(N10 = 0; N10 < d19; N10++){
                            if ((q5 = d19 > 1 ? E10 * (c21 - 1) + N10 * A9 : 0.5 * (E10 + I11) * (c21 - 1)) < 0 || q5 > c21 - 1) for(F11 = 0; F11 < l26; F11++){
                                _10 = F11 + N10 * x10[2] + D9 * x10[1] + b9 * x10[0];
                                p18.values[_10] = a34;
                            }
                            else {
                                var P8 = Math.floor(q5), L7 = Math.ceil(q5), W5 = q5 - P8;
                                for(F11 = 0; F11 < l26; F11++){
                                    var U6 = g15[_10 = F11 + P8 * y12[2] + O10 * y12[1] + k11 * y12[0]], V6 = g15[_10 = F11 + L7 * y12[2] + O10 * y12[1] + k11 * y12[0]], z5 = g15[_10 = F11 + P8 * y12[2] + M11 * y12[1] + k11 * y12[0]], G6 = U6 + (V6 - U6) * W5, H4 = z5 + (g15[_10 = F11 + L7 * y12[2] + M11 * y12[1] + k11 * y12[0]] - z5) * W5;
                                    _10 = F11 + N10 * x10[2] + D9 * x10[1] + b9 * x10[0], p18.values[_10] = G6 + (H4 - G6) * B8;
                                }
                            }
                        }
                    } else for(N10 = 0; N10 < d19; ++N10){
                        var q5;
                        if ((q5 = d19 > 1 ? E10 * (c21 - 1) + N10 * A9 : 0.5 * (E10 + I11) * (c21 - 1)) < 0 || q5 > c21 - 1) for(F11 = 0; F11 < l26; F11++){
                            _10 = F11 + N10 * x10[2] + D9 * x10[1] + b9 * x10[0];
                            p18.values[_10] = a34;
                        }
                        else {
                            var K5 = Math.round(q5), j5 = Math.round(T9);
                            for(F11 = 0; F11 < l26; F11++){
                                var X5 = F11 + K5 * y12[2] + j5 * y12[1] + k11 * y12[0], Y5 = F11 + N10 * x10[2] + D9 * x10[1] + b9 * x10[0];
                                p18.values[Y5] = g15[X5];
                            }
                        }
                    }
                }
            }
            return p18.toTensor();
        }, o32.prototype.sparseToDense = function(t9, e16, n24, r33) {
            var o44 = Zr(0, t9, n24), a34 = o44.sliceRank, i35 = o44.numUpdates, s33 = o44.sliceSize, u29 = o44.strides, c21 = o44.outputSize;
            return this.scatter(t9, e16, n24, c21, s33, i35, a34, u29, r33, !1);
        }, o32.prototype.gatherND = function(t9, e16) {
            var n24 = e16.shape, r33 = n24[n24.length - 1], o44 = jr(t9, e16), a34 = o44[0], i35 = o44[1], s33 = o44[2], u29 = o44[3];
            if (0 === i35) return Fn([], a34, t9.dtype);
            for(var c21 = new gt([
                i35,
                s33
            ], t9.dtype), l26 = this.readSync(e16.dataId), h16 = this.readSync(t9.dataId), f21 = 0; f21 < i35; f21++){
                for(var d19 = [], p18 = 0, v17 = 0; v17 < r33; v17++){
                    var m16 = l26[f21 * r33 + v17];
                    p18 += m16 * u29[v17], d19.push(m16);
                }
                if (p18 < 0 || p18 >= t9.size / s33) throw new Error("Invalid indices: " + d19 + " does not index into " + t9.shape);
                for(var g15 = 0; g15 < s33; g15++)c21.values[f21 * s33 + g15] = h16[p18 * s33 + g15];
            }
            return c21.toTensor().reshape(a34);
        }, o32.prototype.scatterND = function(t9, e16, n24) {
            var r33 = Zr(0, t9, n24), o44 = r33.sliceRank, a34 = r33.numUpdates, i35 = r33.sliceSize, s33 = r33.strides, u29 = r33.outputSize, c21 = On(0);
            return this.scatter(t9, e16, n24, u29, i35, a34, o44, s33, c21, !0);
        }, o32.prototype.fill = function(t9, e16, n24) {
            var r33 = P(n24 = n24 || j(e16), k(t9));
            return r33.fill(e16), Lt.makeTensor(r33, t9, n24, this);
        }, o32.prototype.onesLike = function(t9) {
            if ("string" === t9.dtype) throw new Error("onesLike is not supported for string tensors");
            return this.fill(t9.shape, 1, t9.dtype);
        }, o32.prototype.zerosLike = function(t9) {
            var e16 = P(t9.dtype, k(t9.shape));
            return this.makeOutput(e16, t9.shape, t9.dtype);
        }, o32.prototype.linspace = function(t9, e16, n24) {
            return Wo(t9, e16, n24);
        }, o32.prototype.scatter = function(t9, e16, n24, r33, o44, a34, i35, s33, u29, c21) {
            var l26 = [
                r33 / o44,
                o44
            ], h16 = this.readSync(t9.dataId), f21 = this.readSync(e16.dataId);
            if (0 === r33) return Fn([], n24, e16.dtype);
            var d20 = new gt(l26, e16.dtype);
            d20.values.fill(this.readSync(u29.dataId)[0]);
            for(var p19 = 0; p19 < a34; p19++){
                for(var v18 = [], m17 = 0, g16 = 0; g16 < i35; g16++){
                    var y12 = h16[p19 * i35 + g16];
                    v18.push(y12), m17 += y12 * s33[g16];
                }
                if (m17 < 0 || m17 >= r33 / o44) throw new Error("Invalid indices: " + v18 + " does not index into " + n24);
                for(var x10 = 0; x10 < o44; x10++)c21 ? d20.values[m17 * o44 + x10] += f21[p19 * o44 + x10] : d20.values[m17 * o44 + x10] = 0 === e16.rank ? f21[0] : f21[p19 * o44 + x10];
            }
            return d20.toTensor().reshape(n24);
        }, o32;
    }(bo);
    Lt.registerBackend("cpu", function() {
        return new Kh;
    }, 1);
    for(var jh = 0, Xh = [
        {
            kernelName: "NonMaxSuppressionV5",
            backendName: "cpu",
            kernelFunc: function(t1) {
                var e16 = t1.inputs, n24 = t1.backend, r33 = t1.attrs, o32 = e16, a34 = o32.boxes, i35 = o32.scores, s33 = r33, u29 = s33.maxOutputSize, c21 = s33.iouThreshold, l26 = s33.scoreThreshold, h16 = s33.softNmsSigma, f21 = n24;
                Hh(a34, "NonMaxSuppressionWithScore");
                var d20 = Xo(f21.data.get(a34.dataId).values, f21.data.get(i35.dataId).values, u29, c21, l26, h16);
                return [
                    d20.selectedIndices,
                    d20.selectedScores
                ];
            }
        },
        {
            kernelName: "Square",
            backendName: "cpu",
            kernelFunc: function(t1) {
                var e16 = t1.inputs, n24 = t1.backend, r33 = e16.x, o32 = n24;
                Hh(r33, "square");
                for(var a34 = o32.data.get(r33.dataId).values, i35 = new Float32Array(a34.length), s33 = 0; s33 < a34.length; ++s33){
                    var u29 = a34[s33];
                    i35[s33] = u29 * u29;
                }
                return {
                    dataId: o32.write(i35, r33.shape, r33.dtype),
                    shape: r33.shape,
                    dtype: r33.dtype
                };
            }
        },
        {
            kernelName: eu,
            backendName: "cpu",
            kernelFunc: function(t1) {
                var e16 = t1.inputs, n24 = t1.backend, r33 = e16, o32 = r33.a, a34 = r33.b, i35 = n24;
                Hh([
                    o32,
                    a34
                ], eu);
                var s33 = i35.data.get(o32.dataId).values, u30 = i35.data.get(a34.dataId).values, c21 = function(t9, e17, n25, r34, o44, a35) {
                    var i36 = Ro(t9, e17), s34 = i36.length, u31 = $(i36), c22 = B(o44, k(i36)), l26 = t9.length, h16 = e17.length, f21 = $(t9), d20 = $(e17), p19 = Co(t9, i36), v19 = Co(e17, i36);
                    if (p19.length + v19.length === 0) for(var m18 = 0; m18 < c22.length; ++m18)c22[m18] = a35(n25[m18 % n25.length], r34[m18 % r34.length]);
                    else {
                        var g17 = function(t10) {
                            var e18 = it(t10, s34, u31), o45 = e18.slice(-l26);
                            p19.forEach(function(t11) {
                                return o45[t11] = 0;
                            });
                            var i37 = at(o45, l26, f21), m19 = e18.slice(-h16);
                            v19.forEach(function(t11) {
                                return m19[t11] = 0;
                            });
                            var g18 = at(m19, h16, d20);
                            c22[t10] = a35(n25[i37], r34[g18]);
                        };
                        for(m18 = 0; m18 < c22.length; ++m18)g17(m18);
                    }
                    return [
                        c22,
                        i36
                    ];
                }(o32.shape, a34.shape, s33, u30, o32.dtype, function(t9, e17) {
                    var n25 = t9 - e17;
                    return n25 * n25;
                }), l26 = c21[0], h16 = c21[1];
                return {
                    dataId: i35.write(l26, h16, o32.dtype),
                    shape: h16,
                    dtype: o32.dtype
                };
            }
        }
    ]; jh < Xh.length; jh++)d2(Xh[jh]);
    var Yh, $h = function(t1) {
        this.variableNames = [
            "A"
        ];
        var e16 = ua(), n24 = t1[0], r33 = t1[1];
        this.outputShape = t1, this.userCode = "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + r33 + ".0, " + n24 + ".0);\n\n        vec4 values = " + e16.texture2D + "(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    ";
    }, Qh = function(t1) {
        this.variableNames = [
            "A"
        ], this.packedInputs = !1, this.packedOutput = !0;
        var e16 = ua(), n24 = t1[0], r33 = t1[1];
        this.outputShape = t1, this.userCode = "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(" + r33 + ".0, " + n24 + ".0);\n            vec4 values = " + e16.texture2D + "(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        " + e16.output + " = result;\n      }\n    ";
    };
    for(var Jh = 0, Zh = [
        {
            kernelName: "FromPixels",
            backendName: "webgl",
            kernelFunc: function(t1) {
                var e16 = t1.inputs, n24 = t1.backend, r33 = t1.attrs, o32 = e16.pixels, a34 = r33.numChannels, s33 = "undefined" != typeof HTMLVideoElement && o32 instanceof HTMLVideoElement, u30 = "undefined" != typeof HTMLImageElement && o32 instanceof HTMLImageElement, c21 = s33 ? [
                    o32.videoWidth,
                    o32.videoHeight
                ] : [
                    o32.width,
                    o32.height
                ], l26 = c21[0], h16 = c21[1], f21 = [
                    h16,
                    l26
                ], d20 = [
                    h16,
                    l26,
                    a34
                ];
                (u30 || s33) && (null == Yh && (Yh = document.createElement("canvas").getContext("2d")), Yh.canvas.width = l26, Yh.canvas.height = h16, Yh.drawImage(o32, 0, 0, l26, h16), o32 = Yh.canvas);
                var p19 = n24.makeTensorInfo(f21, "int32");
                n24.texData.get(p19.dataId).usage = zt.PIXELS, n24.gpgpu.uploadPixelDataToTexture(n24.getTexture(p19.dataId), o32);
                var v19 = i15().getBool("WEBGL_PACK") ? new Qh(d20) : new $h(d20), m18 = n24.runWebGLProgram(v19, [
                    p19
                ], "int32");
                return n24.disposeData(p19.dataId), m18;
            }
        },
        {
            kernelName: "NonMaxSuppressionV5",
            backendName: "webgl",
            kernelFunc: function(t1) {
                var e16 = t1.inputs, n24 = t1.backend, r33 = t1.attrs;
                dn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
                var o32 = e16, a34 = o32.boxes, i35 = o32.scores, s33 = r33, u30 = s33.maxOutputSize, c21 = s33.iouThreshold, l26 = s33.scoreThreshold, h16 = s33.softNmsSigma, f21 = n24, d20 = Xo(f21.readSync(a34.dataId), f21.readSync(i35.dataId), u30, c21, l26, h16);
                return [
                    d20.selectedIndices,
                    d20.selectedScores
                ];
            }
        },
        {
            kernelName: "Square",
            backendName: "webgl",
            kernelFunc: function(t1) {
                var e16 = t1.inputs, n24 = t1.backend, r33 = e16.x, o32 = n24, a34 = new Cs(r33.shape, "return x * x;");
                return o32.runWebGLProgram(a34, [
                    r33
                ], r33.dtype);
            }
        },
        {
            kernelName: eu,
            backendName: "webgl",
            kernelFunc: function(t1) {
                var e16 = t1.inputs, n24 = t1.backend, r33 = e16, o32 = r33.a, a34 = r33.b, s33 = n24, u30 = i15().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new La("return (a - b) * (a - b);", o32.shape, a34.shape) : new Ba("return (a - b) * (a - b);", o32.shape, a34.shape);
                return s33.compileAndRun(u30, [
                    o32,
                    a34
                ]);
            }
        }
    ]; Jh < Zh.length; Jh++)d2(Zh[Jh]);
    for(var tf = 0, ef = [
        {
            kernelName: "Square",
            gradFunc: function(t1, e16) {
                var n24 = e16[0];
                return {
                    x: function() {
                        return t1.mul(n24.toFloat().mul(2));
                    }
                };
            }
        },
        {
            kernelName: eu,
            gradFunc: function(t1, e16) {
                var n24 = e16[0], r33 = e16[1], o32 = On(2);
                return {
                    a: function() {
                        return gc(t1, gc(o32, Cc(n24, r33)));
                    },
                    b: function() {
                        return gc(t1, gc(o32, Cc(r33, n24)));
                    }
                };
            }
        }
    ]; tf < ef.length; tf++)p2(ef[tf]);
    var nf = function() {
        function t1() {
        }
        return t1.prototype.fetch = function(t9, e16) {
            return fetch(t9, e16);
        }, t1.prototype.now = function() {
            return performance.now();
        }, t1.prototype.encode = function(t9, e16) {
            if ("utf-8" !== e16 && "utf8" !== e16) throw new Error("Browser's encoder only supports utf-8, but got " + e16);
            return null == this.textEncoder && (this.textEncoder = new TextEncoder), this.textEncoder.encode(t9);
        }, t1.prototype.decode = function(t9, e16) {
            return new TextDecoder(e16).decode(t9);
        }, t1;
    }();
    i15().get("IS_BROWSER") && i15().setPlatform("browser", new nf);
    var rf, of = function() {
        return require("node-fetch");
    }, af = function() {
        function t1() {
            this.util = require("util"), this.textEncoder = new this.util.TextEncoder;
        }
        return t1.prototype.fetch = function(t9, e16) {
            return null != i15().global.fetch ? i15().global.fetch(t9, e16) : (null == rf && (rf = of()), rf(t9, e16));
        }, t1.prototype.now = function() {
            var t9 = process.hrtime();
            return 1000 * t9[0] + t9[1] / 1000000;
        }, t1.prototype.encode = function(t9, e16) {
            if ("utf-8" !== e16 && "utf8" !== e16) throw new Error("Node built-in encoder only supports utf-8, but got " + e16);
            return this.textEncoder.encode(t9);
        }, t1.prototype.decode = function(t9, e16) {
            return 0 === t9.length ? "" : new this.util.TextDecoder(e16).decode(t9);
        }, t1;
    }();
    i15().get("IS_NODE") && i15().setPlatform("node", new af);
    var sf = {
        float32: 4,
        int32: 4,
        uint16: 2,
        uint8: 1,
        bool: 1
    }, uf = 4;
    function cf(t1, e16) {
        for(var n24 = {
        }, r33 = 0, o32 = function(e17) {
            var o44 = e17.name, a34 = e17.dtype, i35 = e17.shape, s33 = k(i35), u30 = void 0;
            if ("quantization" in e17) {
                var c21 = e17.quantization;
                if ("uint8" !== c21.dtype && "uint16" !== c21.dtype) throw new Error("Weight " + e17.name + " has unknown quantization dtype " + c21.dtype + ". Supported quantization dtypes are: 'uint8' and 'uint16'.");
                var l26 = sf[c21.dtype], h16 = t1.slice(r33, r33 + s33 * l26), f21 = "uint8" === c21.dtype ? new Uint8Array(h16) : new Uint16Array(h16);
                if ("float32" === a34) u30 = Float32Array.from(f21, function(t9) {
                    return t9 * c21.scale + c21.min;
                });
                else {
                    if ("int32" !== a34) throw new Error("Unsupported dtype in weight '" + o44 + "': " + a34);
                    u30 = Int32Array.from(f21, function(t9) {
                        return Math.round(t9 * c21.scale + c21.min);
                    });
                }
                r33 += s33 * l26;
            } else if ("string" === a34) {
                var d20 = k(e17.shape);
                u30 = [];
                for(var p19 = 0; p19 < d20; p19++){
                    var v19 = new Uint32Array(t1.slice(r33, r33 + uf))[0];
                    r33 += uf;
                    var m18 = new Uint8Array(t1.slice(r33, r33 + v19));
                    u30.push(m18), r33 += v19;
                }
            } else {
                var g18 = sf[a34];
                h16 = t1.slice(r33, r33 + s33 * g18);
                if ("float32" === a34) u30 = new Float32Array(h16);
                else if ("int32" === a34) u30 = new Int32Array(h16);
                else {
                    if ("bool" !== a34) throw new Error("Unsupported dtype in weight '" + o44 + "': " + a34);
                    u30 = new Uint8Array(h16);
                }
                r33 += s33 * g18;
            }
            n24[o44] = Fn(u30, i35, a34);
        }, a34 = 0, i35 = e16; a34 < i35.length; a34++)o32(i35[a34]);
        return n24;
    }
    function lf(t1) {
        if (null === t1) throw new Error("Invalid input value: " + JSON.stringify(t1));
        var e16 = 0, n24 = [];
        t1.forEach(function(t9) {
            if (e16 += t9.byteLength, n24.push(t9.byteLength === t9.buffer.byteLength ? t9 : new t9.constructor(t9)), !(t9 instanceof Float32Array || t9 instanceof Int32Array || t9 instanceof Uint8Array)) throw new Error("Unsupported TypedArray subtype: " + t9.constructor.name);
        });
        var r33 = new Uint8Array(e16), o32 = 0;
        return n24.forEach(function(t9) {
            r33.set(new Uint8Array(t9.buffer), o32), o32 += t9.byteLength;
        }), r33.buffer;
    }
    var hf = "undefined" != typeof Buffer && ("undefined" == typeof Blob || "undefined" == typeof atob || "undefined" == typeof btoa);
    function ff(t1) {
        return hf ? Buffer.byteLength(t1) : new Blob([
            t1
        ]).size;
    }
    function df(t1) {
        var e16 = 0;
        t1.forEach(function(t9) {
            e16 += t9.byteLength;
        });
        var n24 = new Uint8Array(e16), r33 = 0;
        return t1.forEach(function(t9) {
            n24.set(new Uint8Array(t9), r33), r33 += t9.byteLength;
        }), n24.buffer;
    }
    function pf(t1) {
        for(t1 = t1.trim(); t1.endsWith("/");)t1 = t1.slice(0, t1.length - 1);
        var e16 = t1.split("/");
        return e16[e16.length - 1];
    }
    function vf(t1) {
        if (t1.modelTopology instanceof ArrayBuffer) throw new Error("Expected JSON model topology, received ArrayBuffer.");
        return {
            dateSaved: new Date,
            modelTopologyType: "JSON",
            modelTopologyBytes: null == t1.modelTopology ? 0 : ff(JSON.stringify(t1.modelTopology)),
            weightSpecsBytes: null == t1.weightSpecs ? 0 : ff(JSON.stringify(t1.weightSpecs)),
            weightDataBytes: null == t1.weightData ? 0 : t1.weightData.byteLength
        };
    }
    var mf = function() {
        function t1() {
            this.saveRouters = [], this.loadRouters = [];
        }
        return t1.getInstance = function() {
            return null == t1.instance && (t1.instance = new t1), t1.instance;
        }, t1.registerSaveRouter = function(e16) {
            t1.getInstance().saveRouters.push(e16);
        }, t1.registerLoadRouter = function(e16) {
            t1.getInstance().loadRouters.push(e16);
        }, t1.getSaveHandlers = function(e16) {
            return t1.getHandlers(e16, "save");
        }, t1.getLoadHandlers = function(e16, n24) {
            return t1.getHandlers(e16, "load", n24);
        }, t1.getHandlers = function(e16, n24, r33) {
            var o32 = [];
            return ("load" === n24 ? t1.getInstance().loadRouters : t1.getInstance().saveRouters).forEach(function(t9) {
                var n25 = t9(e16, r33);
                null !== n25 && o32.push(n25);
            }), o32;
        }, t1;
    }(), gf = "://", yf = function() {
        function t1() {
            this.managers = {
            };
        }
        return t1.getInstance = function() {
            return null == t1.instance && (t1.instance = new t1), t1.instance;
        }, t1.registerManager = function(e16, n24) {
            C(null != e16, function() {
                return "scheme must not be undefined or null.";
            }), e16.endsWith(gf) && (e16 = e16.slice(0, e16.indexOf(gf))), C(e16.length > 0, function() {
                return "scheme must not be an empty string.";
            });
            var r33 = t1.getInstance();
            C(null == r33.managers[e16], function() {
                return "A model store manager is already registered for scheme '" + e16 + "'.";
            }), r33.managers[e16] = n24;
        }, t1.getManager = function(t9) {
            var e16 = this.getInstance().managers[t9];
            if (null == e16) throw new Error("Cannot find model manager for scheme '" + t9 + "'");
            return e16;
        }, t1.getSchemes = function() {
            return Object.keys(this.getInstance().managers);
        }, t1;
    }();
    function xf(t1) {
        if (-1 === t1.indexOf(gf)) throw new Error("The url string provided does not contain a scheme. Supported schemes are: " + yf.getSchemes().join(","));
        return {
            scheme: t1.split(gf)[0],
            path: t1.split(gf)[1]
        };
    }
    function bf(t1, e16, o32) {
        return (void 0) === o32 && (o32 = !1), n10(this, void 0, void 0, function() {
            var n24, a34, i35, s33, u30, c22, l27, h17, f22;
            return r17(this, function(r33) {
                switch(r33.label){
                    case 0:
                        return C(t1 !== e16, function() {
                            return "Old path and new path are the same: '" + t1 + "'";
                        }), C((n24 = mf.getLoadHandlers(t1)).length > 0, function() {
                            return "Copying failed because no load handler is found for source URL " + t1 + ".";
                        }), C(n24.length < 2, function() {
                            return "Copying failed because more than one (" + n24.length + ") load handlers for source URL " + t1 + ".";
                        }), a34 = n24[0], C((i35 = mf.getSaveHandlers(e16)).length > 0, function() {
                            return "Copying failed because no save handler is found for destination URL " + e16 + ".";
                        }), C(i35.length < 2, function() {
                            return "Copying failed because more than one (" + n24.length + ") save handlers for destination URL " + e16 + ".";
                        }), s33 = i35[0], u30 = xf(t1).scheme, c22 = xf(t1).path, l27 = u30 === xf(t1).scheme, [
                            4,
                            a34.load()
                        ];
                    case 1:
                        return h17 = r33.sent(), o32 && l27 ? [
                            4,
                            yf.getManager(u30).removeModel(c22)
                        ] : [
                            3,
                            3
                        ];
                    case 2:
                        r33.sent(), r33.label = 3;
                    case 3:
                        return [
                            4,
                            s33.save(h17)
                        ];
                    case 4:
                        return f22 = r33.sent(), !o32 || l27 ? [
                            3,
                            6
                        ] : [
                            4,
                            yf.getManager(u30).removeModel(c22)
                        ];
                    case 5:
                        r33.sent(), r33.label = 6;
                    case 6:
                        return [
                            2,
                            f22.modelArtifactsInfo
                        ];
                }
            });
        });
    }
    var wf = "models_store", Cf = "model_info_store";
    function Ef() {
        if (!i15().getBool("IS_BROWSER")) throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
        var t1 = window || self, e16 = t1.indexedDB || t1.mozIndexedDB || t1.webkitIndexedDB || t1.msIndexedDB || t1.shimIndexedDB;
        if (null == e16) throw new Error("The current browser does not appear to support IndexedDB.");
        return e16;
    }
    function Rf(t1) {
        var e16 = t1.result;
        e16.createObjectStore(wf, {
            keyPath: "modelPath"
        }), e16.createObjectStore(Cf, {
            keyPath: "modelPath"
        });
    }
    var If = function() {
        function t1(t9) {
            if (this.indexedDB = Ef(), null == t9 || !t9) throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
            this.modelPath = t9;
        }
        return t1.prototype.save = function(t9) {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(e16) {
                    if (t9.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
                    return [
                        2,
                        this.databaseAction(this.modelPath, t9)
                    ];
                });
            });
        }, t1.prototype.load = function() {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(t9) {
                    return [
                        2,
                        this.databaseAction(this.modelPath)
                    ];
                });
            });
        }, t1.prototype.databaseAction = function(t9, e16) {
            var n24 = this;
            return new Promise(function(t10, r33) {
                var o32 = n24.indexedDB.open("tensorflowjs", 1);
                o32.onupgradeneeded = function() {
                    return Rf(o32);
                }, o32.onsuccess = function() {
                    var a34 = o32.result;
                    if (null == e16) {
                        var i35 = a34.transaction(wf, "readonly"), s33 = i35.objectStore(wf).get(n24.modelPath);
                        s33.onsuccess = function() {
                            if (null == s33.result) return a34.close(), r33(new Error("Cannot find model with path '" + n24.modelPath + "' in IndexedDB."));
                            t10(s33.result.modelArtifacts);
                        }, s33.onerror = function(t11) {
                            return a34.close(), r33(s33.error);
                        }, i35.oncomplete = function() {
                            return a34.close();
                        };
                    } else {
                        var u30, c22 = vf(e16), l27 = a34.transaction(Cf, "readwrite"), h17 = l27.objectStore(Cf), f22 = h17.put({
                            modelPath: n24.modelPath,
                            modelArtifactsInfo: c22
                        });
                        f22.onsuccess = function() {
                            var o44 = (u30 = a34.transaction(wf, "readwrite")).objectStore(wf).put({
                                modelPath: n24.modelPath,
                                modelArtifacts: e16,
                                modelArtifactsInfo: c22
                            });
                            o44.onsuccess = function() {
                                return t10({
                                    modelArtifactsInfo: c22
                                });
                            }, o44.onerror = function(t11) {
                                var e17 = (h17 = l27.objectStore(Cf)).delete(n24.modelPath);
                                e17.onsuccess = function() {
                                    return a34.close(), r33(o44.error);
                                }, e17.onerror = function(t12) {
                                    return a34.close(), r33(o44.error);
                                };
                            };
                        }, f22.onerror = function(t11) {
                            return a34.close(), r33(f22.error);
                        }, l27.oncomplete = function() {
                            null == u30 ? a34.close() : u30.oncomplete = function() {
                                return a34.close();
                            };
                        };
                    }
                }, o32.onerror = function(t11) {
                    return r33(o32.error);
                };
            });
        }, t1.URL_SCHEME = "indexeddb://", t1;
    }(), kf = function(t1) {
        var e16;
        return i15().getBool("IS_BROWSER") && !Array.isArray(t1) && t1.startsWith(If.URL_SCHEME) ? (e16 = t1.slice(If.URL_SCHEME.length), new If(e16)) : null;
    };
    mf.registerSaveRouter(kf), mf.registerLoadRouter(kf);
    var Sf = function() {
        function t1() {
            this.indexedDB = Ef();
        }
        return t1.prototype.listModels = function() {
            return n10(this, void 0, void 0, function() {
                var t9 = this;
                return r17(this, function(e16) {
                    return [
                        2,
                        new Promise(function(e17, n24) {
                            var r33 = t9.indexedDB.open("tensorflowjs", 1);
                            r33.onupgradeneeded = function() {
                                return Rf(r33);
                            }, r33.onsuccess = function() {
                                var t10 = r33.result, o32 = t10.transaction(Cf, "readonly"), a34 = o32.objectStore(Cf).getAll();
                                a34.onsuccess = function() {
                                    for(var t11 = {
                                    }, n25 = 0, r34 = a34.result; n25 < r34.length; n25++){
                                        var o44 = r34[n25];
                                        t11[o44.modelPath] = o44.modelArtifactsInfo;
                                    }
                                    e17(t11);
                                }, a34.onerror = function(e18) {
                                    return t10.close(), n24(a34.error);
                                }, o32.oncomplete = function() {
                                    return t10.close();
                                };
                            }, r33.onerror = function(t10) {
                                return n24(r33.error);
                            };
                        })
                    ];
                });
            });
        }, t1.prototype.removeModel = function(t9) {
            return n10(this, void 0, void 0, function() {
                var e16 = this;
                return r17(this, function(n24) {
                    var r33;
                    return t9 = (r33 = t9).startsWith(If.URL_SCHEME) ? r33.slice(If.URL_SCHEME.length) : r33, [
                        2,
                        new Promise(function(n25, r34) {
                            var o32 = e16.indexedDB.open("tensorflowjs", 1);
                            o32.onupgradeneeded = function() {
                                return Rf(o32);
                            }, o32.onsuccess = function() {
                                var e17, a34 = o32.result, i36 = a34.transaction(Cf, "readwrite"), s34 = i36.objectStore(Cf), u31 = s34.get(t9);
                                u31.onsuccess = function() {
                                    if (null == u31.result) return a34.close(), r34(new Error("Cannot find model with path '" + t9 + "' in IndexedDB."));
                                    var o45 = s34.delete(t9), i37 = function() {
                                        var o46 = (e17 = a34.transaction(wf, "readwrite")).objectStore(wf).delete(t9);
                                        o46.onsuccess = function() {
                                            return n25(u31.result.modelArtifactsInfo);
                                        }, o46.onerror = function(t10) {
                                            return r34(u31.error);
                                        };
                                    };
                                    o45.onsuccess = i37, o45.onerror = function(t10) {
                                        return i37(), a34.close(), r34(u31.error);
                                    };
                                }, u31.onerror = function(t10) {
                                    return a34.close(), r34(u31.error);
                                }, i36.oncomplete = function() {
                                    null == e17 ? a34.close() : e17.oncomplete = function() {
                                        return a34.close();
                                    };
                                };
                            }, o32.onerror = function(t10) {
                                return r34(o32.error);
                            };
                        })
                    ];
                });
            });
        }, t1;
    }();
    if (i15().getBool("IS_BROWSER")) try {
        yf.registerManager(If.URL_SCHEME, new Sf);
    } catch (t1) {
    }
    var Af = "/", Df = "tensorflowjs_models", Tf = "info", Nf = "model_topology", Ff = "weight_specs", _f = "weight_data", Of = "model_metadata";
    function Mf(t1) {
        return {
            info: [
                Df,
                t1,
                Tf
            ].join(Af),
            topology: [
                Df,
                t1,
                Nf
            ].join(Af),
            weightSpecs: [
                Df,
                t1,
                Ff
            ].join(Af),
            weightData: [
                Df,
                t1,
                _f
            ].join(Af),
            modelMetadata: [
                Df,
                t1,
                Of
            ].join(Af)
        };
    }
    function Bf(t1) {
        var e16 = t1.split(Af);
        if (e16.length < 3) throw new Error("Invalid key format: " + t1);
        return e16.slice(1, e16.length - 1).join(Af);
    }
    var Pf = function() {
        function t1(t9) {
            if (!i15().getBool("IS_BROWSER") || "undefined" == typeof window || (void 0) === window.localStorage) throw new Error("The current environment does not support local storage.");
            if (this.LS = window.localStorage, null == t9 || !t9) throw new Error("For local storage, modelPath must not be null, undefined or empty.");
            this.modelPath = t9, this.keys = Mf(this.modelPath);
        }
        return t1.prototype.save = function(t9) {
            return n10(this, void 0, void 0, function() {
                var e16, n24, o32;
                return r17(this, function(r33) {
                    if (t9.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
                    e16 = JSON.stringify(t9.modelTopology), n24 = JSON.stringify(t9.weightSpecs), o32 = vf(t9);
                    try {
                        return this.LS.setItem(this.keys.info, JSON.stringify(o32)), this.LS.setItem(this.keys.topology, e16), this.LS.setItem(this.keys.weightSpecs, n24), this.LS.setItem(this.keys.weightData, function(t10) {
                            if (hf) return Buffer.from(t10).toString("base64");
                            for(var e17 = new Uint8Array(t10), n25 = "", r34 = 0, o45 = e17.length; r34 < o45; r34++)n25 += String.fromCharCode(e17[r34]);
                            return btoa(n25);
                        }(t9.weightData)), this.LS.setItem(this.keys.modelMetadata, JSON.stringify({
                            format: t9.format,
                            generatedBy: t9.generatedBy,
                            convertedBy: t9.convertedBy,
                            userDefinedMetadata: t9.userDefinedMetadata
                        })), [
                            2,
                            {
                                modelArtifactsInfo: o32
                            }
                        ];
                    } catch (t10) {
                        throw this.LS.removeItem(this.keys.info), this.LS.removeItem(this.keys.topology), this.LS.removeItem(this.keys.weightSpecs), this.LS.removeItem(this.keys.weightData), this.LS.removeItem(this.keys.modelMetadata), new Error("Failed to save model '" + this.modelPath + "' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=" + o32.modelTopologyBytes + ", weightSpecsBytes=" + o32.weightSpecsBytes + ", weightDataBytes=" + o32.weightDataBytes + ".");
                    }
                    return [
                        2
                    ];
                });
            });
        }, t1.prototype.load = function() {
            return n10(this, void 0, void 0, function() {
                var t9, e16, n24, o32, a34, i36, s34;
                return r17(this, function(r33) {
                    if (null == (t9 = JSON.parse(this.LS.getItem(this.keys.info)))) throw new Error("In local storage, there is no model with name '" + this.modelPath + "'");
                    if ("JSON" !== t9.modelTopologyType) throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
                    if (e16 = {
                    }, null == (n24 = JSON.parse(this.LS.getItem(this.keys.topology)))) throw new Error("In local storage, the topology of model '" + this.modelPath + "' is missing.");
                    if (e16.modelTopology = n24, null == (o32 = JSON.parse(this.LS.getItem(this.keys.weightSpecs)))) throw new Error("In local storage, the weight specs of model '" + this.modelPath + "' are missing.");
                    if (e16.weightSpecs = o32, null != (a34 = this.LS.getItem(this.keys.modelMetadata)) && (i36 = JSON.parse(a34), e16.format = i36.format, e16.generatedBy = i36.generatedBy, e16.convertedBy = i36.convertedBy, e16.userDefinedMetadata = i36.userDefinedMetadata), null == (s34 = this.LS.getItem(this.keys.weightData))) throw new Error("In local storage, the binary weight values of model '" + this.modelPath + "' are missing.");
                    return e16.weightData = (function(t10) {
                        if (hf) {
                            var e17 = Buffer.from(t10, "base64");
                            return e17.buffer.slice(e17.byteOffset, e17.byteOffset + e17.byteLength);
                        }
                        for(var n25 = atob(t10), r34 = new Uint8Array(n25.length), o45 = 0; o45 < n25.length; ++o45)r34.set([
                            n25.charCodeAt(o45)
                        ], o45);
                        return r34.buffer;
                    })(s34), [
                        2,
                        e16
                    ];
                });
            });
        }, t1.URL_SCHEME = "localstorage://", t1;
    }(), Lf = function(t1) {
        var e16;
        return i15().getBool("IS_BROWSER") && !Array.isArray(t1) && t1.startsWith(Pf.URL_SCHEME) ? (e16 = t1.slice(Pf.URL_SCHEME.length), new Pf(e16)) : null;
    };
    mf.registerSaveRouter(Lf), mf.registerLoadRouter(Lf);
    var Wf = function() {
        function t1() {
            C(i15().getBool("IS_BROWSER"), function() {
                return "Current environment is not a web browser";
            }), C("undefined" == typeof window || (void 0) !== window.localStorage, function() {
                return "Current browser does not appear to support localStorage";
            }), this.LS = window.localStorage;
        }
        return t1.prototype.listModels = function() {
            return n10(this, void 0, void 0, function() {
                var t9, e16, n24, o32, a34, i36;
                return r17(this, function(r33) {
                    for(t9 = {
                    }, e16 = Df + Af, n24 = Af + Tf, o32 = 0; o32 < this.LS.length; ++o32)(a34 = this.LS.key(o32)).startsWith(e16) && a34.endsWith(n24) && (i36 = Bf(a34), t9[i36] = JSON.parse(this.LS.getItem(a34)));
                    return [
                        2,
                        t9
                    ];
                });
            });
        }, t1.prototype.removeModel = function(t9) {
            return n10(this, void 0, void 0, function() {
                var e16, n24;
                return r17(this, function(r33) {
                    var o32;
                    if (t9 = (o32 = t9).startsWith(Pf.URL_SCHEME) ? o32.slice(Pf.URL_SCHEME.length) : o32, e16 = Mf(t9), null == this.LS.getItem(e16.info)) throw new Error("Cannot find model at path '" + t9 + "'");
                    return n24 = JSON.parse(this.LS.getItem(e16.info)), this.LS.removeItem(e16.info), this.LS.removeItem(e16.topology), this.LS.removeItem(e16.weightSpecs), this.LS.removeItem(e16.weightData), [
                        2,
                        n24
                    ];
                });
            });
        }, t1;
    }();
    if (i15().getBool("IS_BROWSER")) try {
        yf.registerManager(Pf.URL_SCHEME, new Wf);
    } catch (t1) {
    }
    var Uf = "model", Vf = ".json", zf = ".weights.bin";
    function Gf(t1) {
        return new Promise(function(t9) {
            return setTimeout(t9);
        }).then(t1);
    }
    var Hf = function() {
        function t1(e16) {
            if (!i15().getBool("IS_BROWSER")) throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
            e16.startsWith(t1.URL_SCHEME) && (e16 = e16.slice(t1.URL_SCHEME.length)), null != e16 && 0 !== e16.length || (e16 = Uf), this.modelTopologyFileName = e16 + Vf, this.weightDataFileName = e16 + zf;
        }
        return t1.prototype.save = function(t9) {
            return n10(this, void 0, void 0, function() {
                var e16, n24, o32, a34, i36, s34;
                return r17(this, function(r33) {
                    switch(r33.label){
                        case 0:
                            if ("undefined" == typeof document) throw new Error("Browser downloads are not supported in this environment since `document` is not present");
                            if (e16 = window.URL.createObjectURL(new Blob([
                                t9.weightData
                            ], {
                                type: "application/octet-stream"
                            })), !(t9.modelTopology instanceof ArrayBuffer)) return [
                                3,
                                1
                            ];
                            throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
                        case 1:
                            return n24 = [
                                {
                                    paths: [
                                        "./" + this.weightDataFileName
                                    ],
                                    weights: t9.weightSpecs
                                }
                            ], o32 = {
                                modelTopology: t9.modelTopology,
                                format: t9.format,
                                generatedBy: t9.generatedBy,
                                convertedBy: t9.convertedBy,
                                weightsManifest: n24
                            }, a34 = window.URL.createObjectURL(new Blob([
                                JSON.stringify(o32)
                            ], {
                                type: "application/json"
                            })), (i36 = null == this.jsonAnchor ? document.createElement("a") : this.jsonAnchor).download = this.modelTopologyFileName, i36.href = a34, [
                                4,
                                Gf(function() {
                                    return i36.dispatchEvent(new MouseEvent("click"));
                                })
                            ];
                        case 2:
                            return r33.sent(), null == t9.weightData ? [
                                3,
                                4
                            ] : ((s34 = null == this.weightDataAnchor ? document.createElement("a") : this.weightDataAnchor).download = this.weightDataFileName, s34.href = e16, [
                                4,
                                Gf(function() {
                                    return s34.dispatchEvent(new MouseEvent("click"));
                                })
                            ]);
                        case 3:
                            r33.sent(), r33.label = 4;
                        case 4:
                            return [
                                2,
                                {
                                    modelArtifactsInfo: vf(t9)
                                }
                            ];
                    }
                });
            });
        }, t1.URL_SCHEME = "downloads://", t1;
    }(), qf = function() {
        function t1(t9) {
            if (null == t9 || t9.length < 1) throw new Error("When calling browserFiles, at least 1 file is required, but received " + t9);
            this.files = t9;
        }
        return t1.prototype.load = function() {
            return n10(this, void 0, void 0, function() {
                var t9, e16, n24 = this;
                return r17(this, function(r33) {
                    return t9 = this.files[0], e16 = this.files.slice(1), [
                        2,
                        new Promise(function(r34, o32) {
                            var a34 = new FileReader;
                            a34.onload = function(a35) {
                                var i36 = JSON.parse(a35.target.result), s34 = i36.modelTopology;
                                if (null != s34) {
                                    0 === e16.length && r34({
                                        modelTopology: s34
                                    });
                                    var u31 = i36.weightsManifest;
                                    if (null != u31) {
                                        var c23;
                                        try {
                                            c23 = n24.checkManifestAndWeightFiles(u31, e16);
                                        } catch (t10) {
                                            return void o32(t10);
                                        }
                                        var l28 = [], h18 = [], f23 = [];
                                        u31.forEach(function(t10) {
                                            t10.paths.forEach(function(t11) {
                                                h18.push(t11), f23.push(null);
                                            }), l28.push.apply(l28, t10.weights);
                                        }), u31.forEach(function(t10) {
                                            t10.paths.forEach(function(t11) {
                                                var e18 = new FileReader;
                                                e18.onload = function(e19) {
                                                    var n25 = e19.target.result, o45 = h18.indexOf(t11);
                                                    f23[o45] = n25, -1 === f23.indexOf(null) && r34({
                                                        modelTopology: s34,
                                                        weightSpecs: l28,
                                                        weightData: df(f23),
                                                        format: i36.format,
                                                        generatedBy: i36.generatedBy,
                                                        convertedBy: i36.convertedBy,
                                                        userDefinedMetadata: i36.userDefinedMetadata
                                                    });
                                                }, e18.onerror = function(e19) {
                                                    return o32("Failed to weights data from file of path '" + t11 + "'.");
                                                }, e18.readAsArrayBuffer(c23[t11]);
                                            });
                                        });
                                    } else o32(new Error("weightManifest field is missing from file " + t9.name));
                                } else o32(new Error("modelTopology field is missing from file " + t9.name));
                            }, a34.onerror = function(e18) {
                                return o32("Failed to read model topology and weights manifest JSON from file '" + t9.name + "'. BrowserFiles supports loading Keras-style tf.Model artifacts only.");
                            }, a34.readAsText(t9);
                        })
                    ];
                });
            });
        }, t1.prototype.checkManifestAndWeightFiles = function(t9, e16) {
            for(var n24 = [], r33 = e16.map(function(t10) {
                return pf(t10.name);
            }), o32 = {
            }, a34 = 0, i36 = t9; a34 < i36.length; a34++)i36[a34].paths.forEach(function(t10) {
                var a35 = pf(t10);
                if (-1 !== n24.indexOf(a35)) throw new Error("Duplicate file basename found in weights manifest: '" + a35 + "'");
                if (n24.push(a35), -1 === r33.indexOf(a35)) throw new Error("Weight file with basename '" + a35 + "' is not provided.");
                o32[t10] = e16[r33.indexOf(a35)];
            });
            if (n24.length !== e16.length) throw new Error("Mismatch in the number of files in weights manifest (" + n24.length + ") and the number of weight files provided (" + e16.length + ").");
            return o32;
        }, t1;
    }();
    function Kf(t1, e16, n24, r33) {
        !function(t9) {
            C(null != t9 && Array.isArray(t9) && t9.length > 0, function() {
                return "promises must be a none empty array";
            });
        }(t1), (function(t9, e18) {
            C(t9 >= 0 && t9 <= 1, function() {
                return "Progress fraction must be in range [0, 1], but got startFraction " + t9;
            }), C(e18 >= 0 && e18 <= 1, function() {
                return "Progress fraction must be in range [0, 1], but got endFraction " + e18;
            }), C(e18 >= t9, function() {
                return "startFraction must be no more than endFraction, but got startFraction " + t9 + " and endFraction " + e18;
            });
        })(n24 = null == n24 ? 0 : n24, r33 = null == r33 ? 1 : r33);
        var o32 = 0;
        return Promise.all(t1.map(function(a34) {
            return a34.then(function(a35) {
                var i36 = n24 + (++o32) / t1.length * (r33 - n24);
                return e16(i36), a35;
            }), a34;
        }));
    }
    function jf(t1, e16) {
        return n10(this, void 0, void 0, function() {
            var n24, o32, a34, s34, u32, c24, l29, h19, f24;
            return r17(this, function(r33) {
                switch(r33.label){
                    case 0:
                        return null == e16 && (e16 = {
                        }), n24 = null == e16.fetchFunc ? i15().platform.fetch : e16.fetchFunc, o32 = t1.map(function(t9) {
                            return n24(t9, e16.requestInit, {
                                isBinary: !0
                            });
                        }), a34 = 0, s34 = 0.5, null != e16.onProgress ? [
                            3,
                            2
                        ] : [
                            4,
                            Promise.all(o32)
                        ];
                    case 1:
                        return u32 = r33.sent(), [
                            3,
                            4
                        ];
                    case 2:
                        return [
                            4,
                            Kf(o32, e16.onProgress, a34, s34)
                        ];
                    case 3:
                        u32 = r33.sent(), r33.label = 4;
                    case 4:
                        return c24 = u32.map(function(t9) {
                            return t9.arrayBuffer();
                        }), l29 = 0.5, h19 = 1, null != e16.onProgress ? [
                            3,
                            6
                        ] : [
                            4,
                            Promise.all(c24)
                        ];
                    case 5:
                        return f24 = r33.sent(), [
                            3,
                            8
                        ];
                    case 6:
                        return [
                            4,
                            Kf(c24, e16.onProgress, l29, h19)
                        ];
                    case 7:
                        f24 = r33.sent(), r33.label = 8;
                    case 8:
                        return [
                            2,
                            f24
                        ];
                }
            });
        });
    }
    function Xf(t1) {
        var e16 = this;
        return function(o32, a34, i36) {
            return (void 0) === a34 && (a34 = ""), n10(e16, void 0, void 0, function() {
                var e18, n24, s34, u32, c24, l29, h19, f24, d21, p20;
                return r17(this, function(r33) {
                    switch(r33.label){
                        case 0:
                            if (e18 = o32.map(function() {
                                return !1;
                            }), n24 = {
                            }, s34 = null != i36 ? i36.map(function() {
                                return !1;
                            }) : [], u32 = [], o32.forEach(function(t9, r34) {
                                var o45 = 0;
                                t9.weights.forEach(function(t10) {
                                    var a35 = "quantization" in t10 ? t10.quantization.dtype : t10.dtype, c25 = sf[a35] * k(t10.shape), l30 = function() {
                                        e18[r34] = !0, null == n24[r34] && (n24[r34] = []), n24[r34].push({
                                            manifestEntry: t10,
                                            groupOffset: o45,
                                            sizeBytes: c25
                                        });
                                    };
                                    null != i36 ? i36.forEach(function(e19, n25) {
                                        e19 === t10.name && (l30(), s34[n25] = !0);
                                    }) : l30(), u32.push(t10.name), o45 += c25;
                                });
                            }), !s34.every(function(t9) {
                                return t9;
                            })) throw c24 = i36.filter(function(t9, e19) {
                                return !s34[e19];
                            }), new Error("Could not find weights in manifest with names: " + c24.join(", ") + ". \nManifest JSON has weights with names: " + u32.join(", ") + ".");
                            return l29 = e18.reduce(function(t9, e19, n25) {
                                return e19 && t9.push(n25), t9;
                            }, []), h19 = [], l29.forEach(function(t9) {
                                o32[t9].paths.forEach(function(t10) {
                                    var e19 = a34 + (a34.endsWith("/") ? "" : "/") + t10;
                                    h19.push(e19);
                                });
                            }), [
                                4,
                                t1(h19)
                            ];
                        case 1:
                            return f24 = r33.sent(), d21 = {
                            }, p20 = 0, l29.forEach(function(t9) {
                                for(var e19 = o32[t9].paths.length, r34 = 0, a35 = 0; a35 < e19; a35++)r34 += f24[p20 + a35].byteLength;
                                for(var i37 = new ArrayBuffer(r34), s35 = new Uint8Array(i37), u33 = 0, c25 = 0; c25 < e19; c25++){
                                    var l30 = new Uint8Array(f24[p20 + c25]);
                                    s35.set(l30, u33), u33 += l30.byteLength;
                                }
                                n24[t9].forEach(function(t10) {
                                    var e20 = cf(i37.slice(t10.groupOffset, t10.groupOffset + t10.sizeBytes), [
                                        t10.manifestEntry
                                    ]);
                                    for(var n25 in e20)d21[n25] = e20[n25];
                                }), p20 += e19;
                            }), [
                                2,
                                d21
                            ];
                    }
                });
            });
        };
    }
    mf.registerSaveRouter(function(t1) {
        return i15().getBool("IS_BROWSER") && !Array.isArray(t1) && t1.startsWith(Hf.URL_SCHEME) ? (function(t9) {
            (void 0) === t9 && (t9 = "model");
            return new Hf(t9);
        })(t1.slice(Hf.URL_SCHEME.length)) : null;
    });
    var Yf = function() {
        function t1(t9, e16) {
            if (this.DEFAULT_METHOD = "POST", null == e16 && (e16 = {
            }), this.weightPathPrefix = e16.weightPathPrefix, this.onProgress = e16.onProgress, null != e16.fetchFunc ? (C("function" == typeof e16.fetchFunc, function() {
                return "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)";
            }), this.fetch = e16.fetchFunc) : this.fetch = i15().platform.fetch, C(null != t9 && t9.length > 0, function() {
                return "URL path for http must not be null, undefined or empty.";
            }), Array.isArray(t9) && C(2 === t9.length, function() {
                return "URL paths for http must have a length of 2, (actual length is " + t9.length + ").";
            }), this.path = t9, null != e16.requestInit && null != e16.requestInit.body) throw new Error("requestInit is expected to have no pre-existing body, but has one.");
            this.requestInit = e16.requestInit || {
            };
        }
        return t1.prototype.save = function(t9) {
            return n10(this, void 0, void 0, function() {
                var e16, n24, o32, a34;
                return r17(this, function(r33) {
                    switch(r33.label){
                        case 0:
                            if (t9.modelTopology instanceof ArrayBuffer) throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
                            return (e16 = Object.assign({
                                method: this.DEFAULT_METHOD
                            }, this.requestInit)).body = new FormData, n24 = [
                                {
                                    paths: [
                                        "./model.weights.bin"
                                    ],
                                    weights: t9.weightSpecs
                                }
                            ], o32 = {
                                modelTopology: t9.modelTopology,
                                format: t9.format,
                                generatedBy: t9.generatedBy,
                                convertedBy: t9.convertedBy,
                                userDefinedMetadata: t9.userDefinedMetadata,
                                weightsManifest: n24
                            }, e16.body.append("model.json", new Blob([
                                JSON.stringify(o32)
                            ], {
                                type: "application/json"
                            }), "model.json"), null != t9.weightData && e16.body.append("model.weights.bin", new Blob([
                                t9.weightData
                            ], {
                                type: "application/octet-stream"
                            }), "model.weights.bin"), [
                                4,
                                this.fetch(this.path, e16)
                            ];
                        case 1:
                            if ((a34 = r33.sent()).ok) return [
                                2,
                                {
                                    modelArtifactsInfo: vf(t9),
                                    responses: [
                                        a34
                                    ]
                                }
                            ];
                            throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status " + a34.status + ".");
                    }
                });
            });
        }, t1.prototype.load = function() {
            return n10(this, void 0, void 0, function() {
                var t9, e16, n24, o32, a34, i36, s34, u32, c24, l29, h19, f24;
                return r17(this, function(r33) {
                    switch(r33.label){
                        case 0:
                            return [
                                4,
                                this.fetch(this.path, this.requestInit)
                            ];
                        case 1:
                            if (!(t9 = r33.sent()).ok) throw new Error("Request to " + this.path + " failed with status code " + t9.status + ". Please verify this URL points to the model JSON of the model to load.");
                            r33.label = 2;
                        case 2:
                            return r33.trys.push([
                                2,
                                4,
                                ,
                                5
                            ]), [
                                4,
                                t9.json()
                            ];
                        case 3:
                            return e16 = r33.sent(), [
                                3,
                                5
                            ];
                        case 4:
                            throw r33.sent(), n24 = "Failed to parse model JSON of response from " + this.path + ".", this.path.endsWith(".pb") ? n24 += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : n24 += " Please make sure the server is serving valid JSON for this request.", new Error(n24);
                        case 5:
                            if (o32 = e16.modelTopology, a34 = e16.weightsManifest, i36 = e16.generatedBy, s34 = e16.convertedBy, u32 = e16.format, c24 = e16.userDefinedMetadata, null == o32 && null == a34) throw new Error("The JSON from HTTP path " + this.path + " contains neither model topology or manifest for weights.");
                            return null == a34 ? [
                                3,
                                7
                            ] : [
                                4,
                                this.loadWeights(a34)
                            ];
                        case 6:
                            f24 = r33.sent(), l29 = f24[0], h19 = f24[1], r33.label = 7;
                        case 7:
                            return [
                                2,
                                {
                                    modelTopology: o32,
                                    weightSpecs: l29,
                                    weightData: h19,
                                    userDefinedMetadata: c24,
                                    generatedBy: i36,
                                    convertedBy: s34,
                                    format: u32
                                }
                            ];
                    }
                });
            });
        }, t1.prototype.loadWeights = function(t9) {
            return n10(this, void 0, void 0, function() {
                var e16, n24, o32, a34, i36, s34, u32, c24, l29, h19, f24;
                return r17(this, function(r33) {
                    switch(r33.label){
                        case 0:
                            for(e16 = Array.isArray(this.path) ? this.path[1] : this.path, n24 = (function(t10) {
                                var e18 = t10.lastIndexOf("/"), n25 = t10.lastIndexOf("?"), r34 = t10.substring(0, e18), o45 = n25 > e18 ? t10.substring(n25) : "";
                                return [
                                    r34 + "/",
                                    o45
                                ];
                            })(e16), o32 = n24[0], a34 = n24[1], i36 = this.weightPathPrefix || o32, s34 = [], u32 = 0, c24 = t9; u32 < c24.length; u32++)l29 = c24[u32], s34.push.apply(s34, l29.weights);
                            return h19 = [], t9.forEach(function(t10) {
                                t10.paths.forEach(function(t11) {
                                    h19.push(i36 + t11 + a34);
                                });
                            }), [
                                4,
                                jf(h19, {
                                    requestInit: this.requestInit,
                                    fetchFunc: this.fetch,
                                    onProgress: this.onProgress
                                })
                            ];
                        case 1:
                            return f24 = r33.sent(), [
                                2,
                                [
                                    s34,
                                    df(f24)
                                ]
                            ];
                    }
                });
            });
        }, t1.URL_SCHEME_REGEX = /^https?:\/\//, t1;
    }();
    function $f(t1) {
        return null != t1.match(Yf.URL_SCHEME_REGEX);
    }
    var Qf = function(t1, e16) {
        if ("undefined" == typeof fetch) return null;
        return (Array.isArray(t1) ? t1.every(function(t9) {
            return $f(t9);
        }) : $f(t1)) ? Jf(t1, {
            onProgress: e16
        }) : null;
    };
    function Jf(t1, e16) {
        return new Yf(t1, e16);
    }
    mf.registerSaveRouter(Qf), mf.registerLoadRouter(Qf);
    var Zf = function() {
        function t1(t9) {
            this.modelArtifacts = t9;
        }
        return t1.prototype.load = function() {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(t9) {
                    return [
                        2,
                        this.modelArtifacts
                    ];
                });
            });
        }, t1;
    }(), td = function() {
        function t1(t9) {
            this.saveHandler = t9;
        }
        return t1.prototype.save = function(t9) {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(e16) {
                    return [
                        2,
                        this.saveHandler(t9)
                    ];
                });
            });
        }, t1;
    }();
    var ed = Object.freeze({
        browserFiles: function(t1) {
            return new qf(t1);
        },
        browserHTTPRequest: function(t1, e16) {
            return Jf(t1, e16);
        },
        concatenateArrayBuffers: df,
        decodeWeights: cf,
        encodeWeights: function(t1, e16) {
            return n10(this, void 0, void 0, function() {
                var o32, a34, i36, s34, u32, c24 = this;
                return r17(this, function(l29) {
                    switch(l29.label){
                        case 0:
                            for(o32 = [], a34 = [], i36 = Array.isArray(t1) ? t1.map(function(t9) {
                                return t9.name;
                            }) : Object.keys(t1), s34 = function(s35) {
                                var u33 = i36[s35], l31 = Array.isArray(t1) ? t1[s35].tensor : t1[u33];
                                if ("float32" !== l31.dtype && "int32" !== l31.dtype && "bool" !== l31.dtype && "string" !== l31.dtype) throw new Error("Unsupported dtype in weight '" + u33 + "': " + l31.dtype);
                                var h19 = {
                                    name: u33,
                                    shape: l31.shape,
                                    dtype: l31.dtype
                                };
                                if ("string" === l31.dtype) {
                                    var f24 = new Promise(function(t9) {
                                        return n10(c24, void 0, void 0, function() {
                                            var e18, n24, o45, a35, i37, s36, u34;
                                            return r17(this, function(r33) {
                                                switch(r33.label){
                                                    case 0:
                                                        return [
                                                            4,
                                                            l31.bytes()
                                                        ];
                                                    case 1:
                                                        for(e18 = r33.sent(), n24 = e18.reduce(function(t10, e19) {
                                                            return t10 + e19.length;
                                                        }, 0) + uf * e18.length, o45 = new Uint8Array(n24), a35 = 0, i37 = 0; i37 < e18.length; i37++)s36 = e18[i37], u34 = new Uint8Array(new Uint32Array([
                                                            s36.length
                                                        ]).buffer), o45.set(u34, a35), a35 += uf, o45.set(s36, a35), a35 += s36.length;
                                                        return t9(o45), [
                                                            2
                                                        ];
                                                }
                                            });
                                        });
                                    });
                                    a34.push(f24);
                                } else a34.push(l31.data());
                                null != e16 && (h19.group = e16), o32.push(h19);
                            }, u32 = 0; u32 < i36.length; ++u32)s34(u32);
                            return [
                                4,
                                Promise.all(a34)
                            ];
                        case 1:
                            return [
                                2,
                                {
                                    data: lf(l29.sent()),
                                    specs: o32
                                }
                            ];
                    }
                });
            });
        },
        fromMemory: function(t1, e16, n24, r33) {
            return 1 === arguments.length ? null != t1.modelTopology || null != t1.weightSpecs ? new Zf(t1) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new Zf({
                modelTopology: t1
            })) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new Zf({
                modelTopology: t1,
                weightSpecs: e16,
                weightData: n24,
                trainingConfig: r33
            }));
        },
        getLoadHandlers: function(t1, e16) {
            return mf.getLoadHandlers(t1, e16);
        },
        getModelArtifactsInfoForJSON: vf,
        getSaveHandlers: function(t1) {
            return mf.getSaveHandlers(t1);
        },
        http: Jf,
        isHTTPScheme: $f,
        loadWeights: function(t1, e16, o32, a34) {
            return (void 0) === e16 && (e16 = ""), n10(this, void 0, void 0, function() {
                return r17(this, function(n24) {
                    return [
                        2,
                        Xf(function(t9) {
                            return jf(t9, {
                                requestInit: a34
                            });
                        })(t1, e16, o32)
                    ];
                });
            });
        },
        registerLoadRouter: function(t1) {
            return mf.registerLoadRouter(t1);
        },
        registerSaveRouter: function(t1) {
            return mf.registerSaveRouter(t1);
        },
        weightsLoaderFactory: Xf,
        withSaveHandler: function(t1) {
            return new td(t1);
        },
        copyModel: function(t1, e16) {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(n24) {
                    return [
                        2,
                        bf(t1, e16, !1)
                    ];
                });
            });
        },
        listModels: function() {
            return n10(this, void 0, void 0, function() {
                var t1, e16, n24, o32, a34, i36, s34;
                return r17(this, function(r33) {
                    switch(r33.label){
                        case 0:
                            t1 = yf.getSchemes(), e16 = {
                            }, n24 = 0, o32 = t1, r33.label = 1;
                        case 1:
                            return n24 < o32.length ? (a34 = o32[n24], [
                                4,
                                yf.getManager(a34).listModels()
                            ]) : [
                                3,
                                4
                            ];
                        case 2:
                            for(s34 in i36 = r33.sent())e16[a34 + gf + s34] = i36[s34];
                            r33.label = 3;
                        case 3:
                            return n24++, [
                                3,
                                1
                            ];
                        case 4:
                            return [
                                2,
                                e16
                            ];
                    }
                });
            });
        },
        moveModel: function(t1, e16) {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(n24) {
                    return [
                        2,
                        bf(t1, e16, !0)
                    ];
                });
            });
        },
        removeModel: function(t1) {
            return n10(this, void 0, void 0, function() {
                var e16;
                return r17(this, function(n24) {
                    return e16 = xf(t1), [
                        2,
                        yf.getManager(e16.scheme).removeModel(e16.path)
                    ];
                });
            });
        }
    });
    var nd, rd = An({
        confusionMatrix_: function(t1, e16, n24) {
            var r33 = mn(t1, "labels", "confusionMatrix"), o32 = mn(e16, "predictions", "confusionMatrix");
            C(null == n24 || n24 > 0 && Number.isInteger(n24), function() {
                return "If provided, numClasses must be a positive integer, but got " + n24;
            }), C(1 === r33.rank, function() {
                return "Expected the rank of labels to be 1, but got " + r33.rank;
            }), C(1 === o32.rank, function() {
                return "Expected the rank of predictions to be 1, but got " + o32.rank;
            }), C(r33.shape[0] === o32.shape[0], function() {
                return "Mismatch in the number of examples: " + r33.shape[0] + " vs. " + o32.shape[0] + ". Labels and predictions should have the same number of elements.";
            }), C(n24 > 0 && Number.isInteger(n24), function() {
                return "numClasses is required to be a positive integer, but got " + n24;
            });
            var a34 = Rr(r33.asType("int32"), n24), i36 = Rr(o32.asType("int32"), n24);
            return a34.transpose().matMul(i36).asType("int32");
        }
    }), od = Object.freeze({
        confusionMatrix: rd
    });
    var ad = An({
        fromPixels_: function(t1, e16) {
            if ((void 0) === e16 && (e16 = 3), e16 > 4) throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
            if (null == t1) throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
            var n24 = !1, r33 = !1, o32 = !1, a34 = !1, i36 = !1;
            if (t1.data instanceof Uint8Array) n24 = !0;
            else if ("undefined" != typeof ImageData && t1 instanceof ImageData) r33 = !0;
            else if ("undefined" != typeof HTMLVideoElement && t1 instanceof HTMLVideoElement) o32 = !0;
            else if ("undefined" != typeof HTMLImageElement && t1 instanceof HTMLImageElement) a34 = !0;
            else {
                if (null == t1.getContext) throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was " + t1.constructor.name);
                i36 = !0;
            }
            if (o32) {
                if (o32 && t1.readyState < 2) throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");
            }
            if (null != l("FromPixels", Lt.backendName)) return Lt.runKernel("FromPixels", {
                pixels: t1
            }, {
                numChannels: e16
            });
            var s34, u32, c24 = o32 ? [
                t1.videoWidth,
                t1.videoHeight
            ] : [
                t1.width,
                t1.height
            ], h19 = c24[0], f25 = c24[1];
            if (i36 ? s34 = t1.getContext("2d").getImageData(0, 0, h19, f25).data : r33 || n24 ? s34 = t1.data : (a34 || o32) && (null == nd && (nd = document.createElement("canvas").getContext("2d")), nd.canvas.width = h19, nd.canvas.height = f25, nd.drawImage(t1, 0, 0, h19, f25), s34 = nd.getImageData(0, 0, h19, f25).data), 4 === e16) u32 = new Int32Array(s34);
            else {
                var d21 = h19 * f25;
                u32 = new Int32Array(d21 * e16);
                for(var p20 = 0; p20 < d21; p20++)for(var v20 = 0; v20 < e16; ++v20)u32[p20 * e16 + v20] = s34[4 * p20 + v20];
            }
            return Pn(u32, [
                f25,
                h19,
                e16
            ], "int32");
        }
    }), id = Object.freeze({
        toPixels: function(t1, e16) {
            return n10(this, void 0, void 0, function() {
                var n24, o32, a34, i36, s34, u32, c24, l29, h19, f25, d22, p21, v21, m19, g19, y13, x11, b9, w12, C9, E11, R11, I12;
                return r17(this, function(r33) {
                    switch(r33.label){
                        case 0:
                            if (n24 = mn(t1, "img", "toPixels"), t1 instanceof wt || (n24 = n24.toInt()), 2 !== n24.rank && 3 !== n24.rank) throw new Error("toPixels only supports rank 2 or 3 tensors, got rank " + n24.rank + ".");
                            if (o32 = n24.shape.slice(0, 2), a34 = o32[0], i36 = o32[1], (s34 = 2 === n24.rank ? 1 : n24.shape[2]) > 4 || 2 === s34) throw new Error("toPixels only supports depth of size 1, 3 or 4 but got " + s34);
                            return [
                                4,
                                n24.data()
                            ];
                        case 1:
                            return u32 = r33.sent(), c24 = n24.min(), l29 = n24.max(), [
                                4,
                                Promise.all([
                                    c24.data(),
                                    l29.data()
                                ])
                            ];
                        case 2:
                            if (h19 = r33.sent(), f25 = h19[0], d22 = h19[1], p21 = f25[0], v21 = d22[0], c24.dispose(), l29.dispose(), "float32" === n24.dtype) {
                                if (p21 < 0 || v21 > 1) throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [" + p21 + " - " + v21 + "].");
                            } else {
                                if ("int32" !== n24.dtype) throw new Error("Unsupported type for toPixels: " + n24.dtype + ". Please use float32 or int32 tensors.");
                                if (p21 < 0 || v21 > 255) throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [" + p21 + " - " + v21 + "].");
                            }
                            for(m19 = "float32" === n24.dtype ? 255 : 1, g19 = new Uint8ClampedArray(i36 * a34 * 4), y13 = 0; y13 < a34 * i36; ++y13)x11 = void 0, b9 = void 0, w12 = void 0, C9 = void 0, 1 === s34 ? (x11 = u32[y13] * m19, b9 = u32[y13] * m19, w12 = u32[y13] * m19, C9 = 255) : 3 === s34 ? (x11 = u32[3 * y13] * m19, b9 = u32[3 * y13 + 1] * m19, w12 = u32[3 * y13 + 2] * m19, C9 = 255) : 4 === s34 && (x11 = u32[4 * y13] * m19, b9 = u32[4 * y13 + 1] * m19, w12 = u32[4 * y13 + 2] * m19, C9 = u32[4 * y13 + 3] * m19), g19[(E11 = 4 * y13) + 0] = Math.round(x11), g19[E11 + 1] = Math.round(b9), g19[E11 + 2] = Math.round(w12), g19[E11 + 3] = Math.round(C9);
                            return null != e16 && (e16.width = i36, e16.height = a34, R11 = e16.getContext("2d"), I12 = new ImageData(g19, i36, a34), R11.putImageData(I12, 0, 0)), n24 !== t1 && n24.dispose(), [
                                2,
                                g19
                            ];
                    }
                });
            });
        },
        fromPixels: ad
    }), sd = function() {
        function t1() {
        }
        return t1.prototype.getClassName = function() {
            return this.constructor.className;
        }, t1.fromConfig = function(t9, e16) {
            return new t9(e16);
        }, t1;
    }(), ud = function() {
        function t1() {
            this.classNameMap = {
            };
        }
        return t1.getMap = function() {
            return null == t1.instance && (t1.instance = new t1), t1.instance;
        }, t1.register = function(e16) {
            t1.getMap().classNameMap[e16.className] = [
                e16,
                e16.fromConfig
            ];
        }, t1;
    }();
    function cd(t1) {
        C(null != t1.className, function() {
            return "Class being registered does not have the static className property defined.";
        }), C("string" == typeof t1.className, function() {
            return "className is required to be a string, but got type " + typeof t1.className;
        }), C(t1.className.length > 0, function() {
            return "Class being registered has an empty-string as its className, which is disallowed.";
        }), ud.register(t1);
    }
    var ld = Object.freeze({
        Serializable: sd,
        SerializationMap: ud,
        registerClass: cd
    }), hd = 0.001, fd = 0.1;
    function dd() {
        return 32 === Lt.backend.floatPrecision() ? hd : fd;
    }
    function pd(t1, e16, n24) {
        var r33 = !0;
        if ((V(t1) || V(e16)) && (r33 = !1), V(t1) && V(e16) && (r33 = !0), r33) {
            var o32 = t1.constructor.name, a34 = e16.constructor.name;
            if (o32 !== a34) throw new Error("Arrays are of different type. Actual: " + o32 + ". Expected: " + a34);
        }
        if (Array.isArray(t1) && Array.isArray(e16)) {
            var i36 = pn(t1), s34 = pn(e16);
            if (!S(i36, s34)) throw new Error("Arrays have different shapes. Actual: [" + i36 + "]. Expected: [" + s34 + "]");
        }
        var u32 = V(t1) ? t1 : I(t1), c24 = V(e16) ? e16 : I(e16);
        if (u32.length !== c24.length) throw new Error("Arrays have different lengths actual: " + u32.length + " vs expected: " + c24.length + ".\nActual:   " + u32 + ".\nExpected: " + c24 + ".");
        for(var l29 = 0; l29 < c24.length; ++l29){
            var h19 = u32[l29], f25 = c24[l29];
            if (!n24(h19, f25)) throw new Error("Arrays differ: actual[" + l29 + "] = " + h19 + ", expected[" + l29 + "] = " + f25 + ".\nActual:   " + u32 + ".\nExpected: " + c24 + ".");
        }
    }
    function vd(t1, e16, n24) {
        return !isFinite(t1) && !isFinite(e16) || !(isNaN(t1) || isNaN(e16) || Math.abs(t1 - e16) > n24);
    }
    var md = Object.freeze({
        TEST_EPSILON_FLOAT16: fd,
        expectArraysClose: function(t1, e16, n24) {
            return null == n24 && (n24 = dd()), pd(t1, e16, function(t9, e18) {
                return vd(t9, e18, n24);
            });
        },
        testEpsilon: dd,
        expectPromiseToFail: function(t1, e16) {
            t1().then(function() {
                return e16.fail();
            }, function() {
                return e16();
            });
        },
        expectArraysEqual: function(t1, e16) {
            var n24 = "string" == typeof e16 || "number" == typeof e16 || "boolean" == typeof e16 ? [
                e16
            ] : e16;
            return H(t1) || H(t1[0]) || H(e16) || H(e16[0]) ? pd(t1, n24, function(t9, e18) {
                return t9 == e18;
            }) : pd(t1, e16, function(t9, e18) {
                return vd(t9, e18, 0);
            });
        },
        expectNumbersClose: function(t1, e16, n24) {
            if (null == n24 && (n24 = dd()), !vd(t1, e16, n24)) throw new Error("Numbers differ: actual === " + t1 + ", expected === " + e16);
        },
        expectValuesInRange: function(t1, e16, n24) {
            for(var r33 = 0; r33 < t1.length; r33++)if (t1[r33] < e16 || t1[r33] > n24) throw new Error("Value out of range:" + t1[r33] + " low: " + e16 + ", high: " + n24);
        },
        expectArrayBuffersEqual: function(t1, e16) {
            expect(new Float32Array(t1)).toEqual(new Float32Array(e16));
        }
    }), gd = "1.7.0";
    var yd = Object.freeze({
        gpgpu_util: Mi,
        webgl_util: Ge,
        forceHalfFloat: function() {
            i15().set("WEBGL_FORCE_F16_TEXTURES", !0);
        },
        MathBackendWebGL: Zs,
        setWebGLContext: Kt,
        GPGPUContext: Bi
    }), xd = function(t1) {
        function o45() {
            return null !== t1 && t1.apply(this, arguments) || this;
        }
        return e(o45, t1), o45.prototype.minimize = function(t9, e16, n24) {
            (void 0) === e16 && (e16 = !1);
            var r33 = this.computeGradients(t9, n24), o46 = r33.value, a35 = r33.grads;
            if (null != n24) {
                var i37 = n24.map(function(t10) {
                    return {
                        name: t10.name,
                        tensor: a35[t10.name]
                    };
                });
                this.applyGradients(i37);
            } else this.applyGradients(a35);
            return tn(a35), e16 ? o46 : (o46.dispose(), null);
        }, Object.defineProperty(o45.prototype, "iterations", {
            get: function() {
                return null == this.iterations_ && (this.iterations_ = 0), this.iterations_;
            },
            enumerable: !0,
            configurable: !0
        }), o45.prototype.incrementIterations = function() {
            this.iterations_ = this.iterations + 1;
        }, o45.prototype.computeGradients = function(t9, e16) {
            return po(t9, e16);
        }, o45.prototype.dispose = function() {
            null != this.iterations_ && tn(this.iterations_);
        }, o45.prototype.saveIterations = function() {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(t9) {
                    return null == this.iterations_ && (this.iterations_ = 0), [
                        2,
                        {
                            name: "iter",
                            tensor: On(this.iterations_, "int32")
                        }
                    ];
                });
            });
        }, o45.prototype.getWeights = function() {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(t9) {
                    throw new Error("getWeights() is not implemented for this optimizer yet.");
                });
            });
        }, o45.prototype.setWeights = function(t9) {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(t10) {
                    throw new Error("setWeights() is not implemented for this optimizer class " + this.getClassName());
                });
            });
        }, o45.prototype.extractIterations = function(t9) {
            return n10(this, void 0, void 0, function() {
                var e16;
                return r17(this, function(n24) {
                    switch(n24.label){
                        case 0:
                            return e16 = this, [
                                4,
                                t9[0].tensor.data()
                            ];
                        case 1:
                            return e16.iterations_ = n24.sent()[0], [
                                2,
                                t9.slice(1)
                            ];
                    }
                });
            });
        }, o45;
    }(sd);
    Object.defineProperty(xd, Symbol.hasInstance, {
        value: function(t1) {
            return null != t1.minimize && null != t1.computeGradients && null != t1.applyGradients;
        }
    });
    var bd = function(t1) {
        function o45(e16, n24, r33) {
            (void 0) === r33 && (r33 = null);
            var o46 = t1.call(this) || this;
            return o46.learningRate = e16, o46.rho = n24, o46.epsilon = r33, o46.accumulatedGrads = [], o46.accumulatedUpdates = [], null == r33 && (o46.epsilon = Lt.backend.epsilon()), o46;
        }
        return e(o45, t1), o45.prototype.applyGradients = function(t9) {
            var e16 = this;
            (Array.isArray(t9) ? t9.map(function(t10) {
                return t10.name;
            }) : Object.keys(t9)).forEach(function(n24, r33) {
                var o46 = Lt.registeredVariables[n24];
                null == e16.accumulatedGrads[r33] && (e16.accumulatedGrads[r33] = {
                    originalName: n24 + "/accum_grad",
                    variable: Ze(function() {
                        return Xn(o46).variable(!1);
                    })
                }), null == e16.accumulatedUpdates[r33] && (e16.accumulatedUpdates[r33] = {
                    originalName: n24 + "/accum_var",
                    variable: Ze(function() {
                        return Xn(o46).variable(!1);
                    })
                });
                var a35 = Array.isArray(t9) ? t9[r33].tensor : t9[n24];
                if (null != a35) {
                    var i38 = e16.accumulatedGrads[r33].variable, s35 = e16.accumulatedUpdates[r33].variable;
                    Ze(function() {
                        var t10 = i38.mul(e16.rho).add(a35.square().mul(1 - e16.rho)), n25 = s35.add(e16.epsilon).sqrt().div(i38.add(e16.epsilon).sqrt()).mul(a35), r34 = s35.mul(e16.rho).add(n25.square().mul(1 - e16.rho));
                        i38.assign(t10), s35.assign(r34);
                        var u32 = n25.mul(-e16.learningRate).add(o46);
                        o46.assign(u32);
                    });
                }
            }), this.incrementIterations();
        }, o45.prototype.dispose = function() {
            null != this.accumulatedUpdates && (tn(this.accumulatedGrads.map(function(t9) {
                return t9.variable;
            })), tn(this.accumulatedUpdates.map(function(t9) {
                return t9.variable;
            })));
        }, o45.prototype.getWeights = function() {
            return n10(this, void 0, void 0, function() {
                var t9;
                return r17(this, function(e16) {
                    switch(e16.label){
                        case 0:
                            return t9 = this.accumulatedGrads.concat(this.accumulatedUpdates), [
                                4,
                                this.saveIterations()
                            ];
                        case 1:
                            return [
                                2,
                                [
                                    e16.sent()
                                ].concat(t9.map(function(t10) {
                                    return {
                                        name: t10.originalName,
                                        tensor: t10.variable
                                    };
                                }))
                            ];
                    }
                });
            });
        }, o45.prototype.setWeights = function(t9) {
            return n10(this, void 0, void 0, function() {
                var e16;
                return r17(this, function(n24) {
                    switch(n24.label){
                        case 0:
                            return [
                                4,
                                this.extractIterations(t9)
                            ];
                        case 1:
                            return t9 = n24.sent(), e16 = t9.length / 2, this.accumulatedGrads = t9.slice(0, e16).map(function(t10) {
                                return {
                                    originalName: t10.name,
                                    variable: t10.tensor.variable(!1)
                                };
                            }), this.accumulatedUpdates = t9.slice(e16, 2 * e16).map(function(t10) {
                                return {
                                    originalName: t10.name,
                                    variable: t10.tensor.variable(!1)
                                };
                            }), [
                                2
                            ];
                    }
                });
            });
        }, o45.prototype.getConfig = function() {
            return {
                learningRate: this.learningRate,
                rho: this.rho,
                epsilon: this.epsilon
            };
        }, o45.fromConfig = function(t9, e16) {
            return new t9(e16.learningRate, e16.rho, e16.epsilon);
        }, o45.className = "Adadelta", o45;
    }(xd);
    cd(bd);
    var wd = function(t1) {
        function o45(e16, n24) {
            (void 0) === n24 && (n24 = 0.1);
            var r33 = t1.call(this) || this;
            return r33.learningRate = e16, r33.initialAccumulatorValue = n24, r33.accumulatedGrads = [], r33;
        }
        return e(o45, t1), o45.prototype.applyGradients = function(t9) {
            var e16 = this;
            (Array.isArray(t9) ? t9.map(function(t10) {
                return t10.name;
            }) : Object.keys(t9)).forEach(function(n24, r33) {
                var o46 = Lt.registeredVariables[n24];
                if (null == e16.accumulatedGrads[r33]) e16.accumulatedGrads[r33] = {
                    originalName: n24 + "/accumulator",
                    variable: Ze(function() {
                        return Hn(o46.shape, e16.initialAccumulatorValue).variable(!1);
                    })
                };
                var a35 = Array.isArray(t9) ? t9[r33].tensor : t9[n24];
                if (null != a35) {
                    var i39 = e16.accumulatedGrads[r33].variable;
                    Ze(function() {
                        var t10 = i39.add(a35.square());
                        i39.assign(t10);
                        var n25 = a35.div(t10.add(Lt.backend.epsilon()).sqrt()).mul(-e16.learningRate).add(o46);
                        o46.assign(n25);
                    });
                }
            }), this.incrementIterations();
        }, o45.prototype.dispose = function() {
            null != this.accumulatedGrads && tn(this.accumulatedGrads.map(function(t9) {
                return t9.variable;
            }));
        }, o45.prototype.getWeights = function() {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(t9) {
                    switch(t9.label){
                        case 0:
                            return [
                                4,
                                this.saveIterations()
                            ];
                        case 1:
                            return [
                                2,
                                [
                                    t9.sent()
                                ].concat(this.accumulatedGrads.map(function(t10) {
                                    return {
                                        name: t10.originalName,
                                        tensor: t10.variable
                                    };
                                }))
                            ];
                    }
                });
            });
        }, o45.prototype.setWeights = function(t9) {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(e16) {
                    switch(e16.label){
                        case 0:
                            return [
                                4,
                                this.extractIterations(t9)
                            ];
                        case 1:
                            return t9 = e16.sent(), this.accumulatedGrads = t9.map(function(t10) {
                                return {
                                    originalName: t10.name,
                                    variable: t10.tensor.variable(!1)
                                };
                            }), [
                                2
                            ];
                    }
                });
            });
        }, o45.prototype.getConfig = function() {
            return {
                learningRate: this.learningRate,
                initialAccumulatorValue: this.initialAccumulatorValue
            };
        }, o45.fromConfig = function(t9, e16) {
            return new t9(e16.learningRate, e16.initialAccumulatorValue);
        }, o45.className = "Adagrad", o45;
    }(xd);
    cd(wd);
    var Cd = function(t1) {
        function o45(e16, n24, r33, o46) {
            (void 0) === o46 && (o46 = null);
            var a35 = t1.call(this) || this;
            return a35.learningRate = e16, a35.beta1 = n24, a35.beta2 = r33, a35.epsilon = o46, a35.accumulatedFirstMoment = [], a35.accumulatedSecondMoment = [], Ze(function() {
                a35.accBeta1 = On(n24).variable(), a35.accBeta2 = On(r33).variable();
            }), null == o46 && (a35.epsilon = Lt.backend.epsilon()), a35;
        }
        return e(o45, t1), o45.prototype.applyGradients = function(t9) {
            var e16 = this, n24 = Array.isArray(t9) ? t9.map(function(t10) {
                return t10.name;
            }) : Object.keys(t9);
            Ze(function() {
                var r33 = Cc(1, e16.accBeta1), o46 = Cc(1, e16.accBeta2);
                n24.forEach(function(n25, a35) {
                    var i40 = Lt.registeredVariables[n25];
                    null == e16.accumulatedFirstMoment[a35] && (e16.accumulatedFirstMoment[a35] = {
                        originalName: n25 + "/m",
                        variable: Ze(function() {
                            return Xn(i40).variable(!1);
                        })
                    }), null == e16.accumulatedSecondMoment[a35] && (e16.accumulatedSecondMoment[a35] = {
                        originalName: n25 + "/v",
                        variable: Ze(function() {
                            return Xn(i40).variable(!1);
                        })
                    });
                    var s36 = Array.isArray(t9) ? t9[a35].tensor : t9[n25];
                    if (null != s36) {
                        var u32 = e16.accumulatedFirstMoment[a35].variable, c24 = e16.accumulatedSecondMoment[a35].variable, l29 = u32.mul(e16.beta1).add(s36.mul(1 - e16.beta1)), h20 = c24.mul(e16.beta2).add(s36.square().mul(1 - e16.beta2)), f26 = l29.div(r33), d22 = h20.div(o46);
                        u32.assign(l29), c24.assign(h20);
                        var p21 = f26.div(d22.sqrt().add(e16.epsilon)).mul(-e16.learningRate).add(i40);
                        i40.assign(p21);
                    }
                }), e16.accBeta1.assign(e16.accBeta1.mul(e16.beta1)), e16.accBeta2.assign(e16.accBeta2.mul(e16.beta2));
            }), this.incrementIterations();
        }, o45.prototype.dispose = function() {
            this.accBeta1.dispose(), this.accBeta2.dispose(), null != this.accumulatedFirstMoment && tn(this.accumulatedFirstMoment.map(function(t9) {
                return t9.variable;
            })), null != this.accumulatedSecondMoment && tn(this.accumulatedSecondMoment.map(function(t9) {
                return t9.variable;
            }));
        }, o45.prototype.getWeights = function() {
            return n10(this, void 0, void 0, function() {
                var t9;
                return r17(this, function(e16) {
                    switch(e16.label){
                        case 0:
                            return t9 = this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment), [
                                4,
                                this.saveIterations()
                            ];
                        case 1:
                            return [
                                2,
                                [
                                    e16.sent()
                                ].concat(t9.map(function(t10) {
                                    return {
                                        name: t10.originalName,
                                        tensor: t10.variable
                                    };
                                }))
                            ];
                    }
                });
            });
        }, o45.prototype.setWeights = function(t9) {
            return n10(this, void 0, void 0, function() {
                var e16, n24 = this;
                return r17(this, function(r33) {
                    switch(r33.label){
                        case 0:
                            return [
                                4,
                                this.extractIterations(t9)
                            ];
                        case 1:
                            return t9 = r33.sent(), Ze(function() {
                                n24.accBeta1.assign(xc(n24.beta1, n24.iterations_ + 1)), n24.accBeta2.assign(xc(n24.beta2, n24.iterations_ + 1));
                            }), e16 = t9.length / 2, this.accumulatedFirstMoment = t9.slice(0, e16).map(function(t10) {
                                return {
                                    originalName: t10.name,
                                    variable: t10.tensor.variable(!1)
                                };
                            }), this.accumulatedSecondMoment = t9.slice(e16, 2 * e16).map(function(t10) {
                                return {
                                    originalName: t10.name,
                                    variable: t10.tensor.variable(!1)
                                };
                            }), [
                                2
                            ];
                    }
                });
            });
        }, o45.prototype.getConfig = function() {
            return {
                learningRate: this.learningRate,
                beta1: this.beta1,
                beta2: this.beta2,
                epsilon: this.epsilon
            };
        }, o45.fromConfig = function(t9, e16) {
            return new t9(e16.learningRate, e16.beta1, e16.beta2, e16.epsilon);
        }, o45.className = "Adam", o45;
    }(xd);
    cd(Cd);
    var Ed = function(t1) {
        function o45(e16, n24, r33, o46, a35) {
            (void 0) === o46 && (o46 = null), (void 0) === a35 && (a35 = 0);
            var i40 = t1.call(this) || this;
            return i40.learningRate = e16, i40.beta1 = n24, i40.beta2 = r33, i40.epsilon = o46, i40.decay = a35, i40.accumulatedFirstMoment = [], i40.accumulatedWeightedInfNorm = [], Ze(function() {
                i40.iteration = On(0).variable(), i40.accBeta1 = On(n24).variable();
            }), null == o46 && (i40.epsilon = Lt.backend.epsilon()), i40;
        }
        return e(o45, t1), o45.prototype.applyGradients = function(t9) {
            var e16 = this, n24 = Array.isArray(t9) ? t9.map(function(t10) {
                return t10.name;
            }) : Object.keys(t9);
            Ze(function() {
                var r33 = Cc(1, e16.accBeta1), o46 = sc(-e16.learningRate, e16.iteration.mul(e16.decay).add(1));
                n24.forEach(function(n25, a35) {
                    var i40 = Lt.registeredVariables[n25];
                    null == e16.accumulatedFirstMoment[a35] && (e16.accumulatedFirstMoment[a35] = {
                        originalName: n25 + "/m",
                        variable: Xn(i40).variable(!1)
                    }), null == e16.accumulatedWeightedInfNorm[a35] && (e16.accumulatedWeightedInfNorm[a35] = {
                        originalName: n25 + "/v",
                        variable: Xn(i40).variable(!1)
                    });
                    var s36 = Array.isArray(t9) ? t9[a35].tensor : t9[n25];
                    if (null != s36) {
                        var u33 = e16.accumulatedFirstMoment[a35].variable, c25 = e16.accumulatedWeightedInfNorm[a35].variable, l31 = u33.mul(e16.beta1).add(s36.mul(1 - e16.beta1)), h21 = c25.mul(e16.beta2), f27 = s36.abs(), d23 = h21.maximum(f27);
                        u33.assign(l31), c25.assign(d23);
                        var p22 = o46.div(r33).mul(l31.div(d23.add(e16.epsilon))).add(i40);
                        i40.assign(p22);
                    }
                }), e16.iteration.assign(e16.iteration.add(1)), e16.accBeta1.assign(e16.accBeta1.mul(e16.beta1));
            }), this.incrementIterations();
        }, o45.prototype.dispose = function() {
            this.accBeta1.dispose(), this.iteration.dispose(), null != this.accumulatedFirstMoment && tn(this.accumulatedFirstMoment.map(function(t9) {
                return t9.variable;
            })), null != this.accumulatedWeightedInfNorm && tn(this.accumulatedWeightedInfNorm.map(function(t9) {
                return t9.variable;
            }));
        }, o45.prototype.getWeights = function() {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(t9) {
                    throw new Error("getWeights() is not implemented for Adamax yet.");
                });
            });
        }, o45.prototype.setWeights = function(t9) {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(t10) {
                    throw new Error("setWeights() is not implemented for Adamax yet.");
                });
            });
        }, o45.prototype.getConfig = function() {
            return {
                learningRate: this.learningRate,
                beta1: this.beta1,
                beta2: this.beta2,
                epsilon: this.epsilon,
                decay: this.decay
            };
        }, o45.fromConfig = function(t9, e16) {
            return new t9(e16.learningRate, e16.beta1, e16.beta2, e16.epsilon, e16.decay);
        }, o45.className = "Adamax", o45;
    }(xd);
    cd(Ed);
    var Rd = function(t1) {
        function o45(e16) {
            var n24 = t1.call(this) || this;
            return n24.learningRate = e16, n24.setLearningRate(e16), n24;
        }
        return e(o45, t1), o45.prototype.applyGradients = function(t9) {
            var e16 = this;
            (Array.isArray(t9) ? t9.map(function(t10) {
                return t10.name;
            }) : Object.keys(t9)).forEach(function(n24, r33) {
                var o46 = Array.isArray(t9) ? t9[r33].tensor : t9[n24];
                if (null != o46) {
                    var a35 = Lt.registeredVariables[n24];
                    Ze(function() {
                        var t10 = e16.c.mul(o46).add(a35);
                        a35.assign(t10);
                    });
                }
            }), this.incrementIterations();
        }, o45.prototype.setLearningRate = function(t9) {
            this.learningRate = t9, null != this.c && this.c.dispose(), this.c = en(On(-t9));
        }, o45.prototype.dispose = function() {
            this.c.dispose();
        }, o45.prototype.getWeights = function() {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(t9) {
                    switch(t9.label){
                        case 0:
                            return [
                                4,
                                this.saveIterations()
                            ];
                        case 1:
                            return [
                                2,
                                [
                                    t9.sent()
                                ]
                            ];
                    }
                });
            });
        }, o45.prototype.setWeights = function(t9) {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(e16) {
                    switch(e16.label){
                        case 0:
                            return [
                                4,
                                this.extractIterations(t9)
                            ];
                        case 1:
                            if (0 !== (t9 = e16.sent()).length) throw new Error("SGD optimizer does not have settable weights.");
                            return [
                                2
                            ];
                    }
                });
            });
        }, o45.prototype.getConfig = function() {
            return {
                learningRate: this.learningRate
            };
        }, o45.fromConfig = function(t9, e16) {
            return new t9(e16.learningRate);
        }, o45.className = "SGD", o45;
    }(xd);
    cd(Rd);
    var Id = function(t1) {
        function o45(e16, n24, r33) {
            (void 0) === r33 && (r33 = !1);
            var o46 = t1.call(this, e16) || this;
            return o46.learningRate = e16, o46.momentum = n24, o46.useNesterov = r33, o46.accumulations = [], o46.m = On(o46.momentum), o46;
        }
        return e(o45, t1), o45.prototype.applyGradients = function(t9) {
            var e16 = this;
            (Array.isArray(t9) ? t9.map(function(t10) {
                return t10.name;
            }) : Object.keys(t9)).forEach(function(n24, r33) {
                var o46 = Lt.registeredVariables[n24];
                if (null == e16.accumulations[r33]) e16.accumulations[r33] = {
                    originalName: n24 + "/momentum",
                    variable: Ze(function() {
                        return Xn(o46).variable(!1);
                    })
                };
                var a36 = e16.accumulations[r33].variable, i40 = Array.isArray(t9) ? t9[r33].tensor : t9[n24];
                null != i40 && Ze(function() {
                    var t10, n25 = e16.m.mul(a36).add(i40);
                    t10 = e16.useNesterov ? e16.c.mul(i40.add(n25.mul(e16.m))).add(o46) : e16.c.mul(n25).add(o46), a36.assign(n25), o46.assign(t10);
                });
            }), this.incrementIterations();
        }, o45.prototype.dispose = function() {
            this.m.dispose(), null != this.accumulations && tn(this.accumulations.map(function(t9) {
                return t9.variable;
            }));
        }, o45.prototype.setMomentum = function(t9) {
            this.momentum = t9;
        }, o45.prototype.getWeights = function() {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(t9) {
                    switch(t9.label){
                        case 0:
                            return [
                                4,
                                this.saveIterations()
                            ];
                        case 1:
                            return [
                                2,
                                [
                                    t9.sent()
                                ].concat(this.accumulations.map(function(t10) {
                                    return {
                                        name: t10.originalName,
                                        tensor: t10.variable
                                    };
                                }))
                            ];
                    }
                });
            });
        }, o45.prototype.setWeights = function(t9) {
            return n10(this, void 0, void 0, function() {
                return r17(this, function(e16) {
                    switch(e16.label){
                        case 0:
                            return [
                                4,
                                this.extractIterations(t9)
                            ];
                        case 1:
                            return t9 = e16.sent(), this.accumulations = t9.map(function(t10) {
                                return {
                                    originalName: t10.name,
                                    variable: t10.tensor.variable(!1)
                                };
                            }), [
                                2
                            ];
                    }
                });
            });
        }, o45.prototype.getConfig = function() {
            return {
                learningRate: this.learningRate,
                momentum: this.momentum,
                useNesterov: this.useNesterov
            };
        }, o45.fromConfig = function(t9, e16) {
            return new t9(e16.learningRate, e16.momentum, e16.useNesterov);
        }, o45.className = "Momentum", o45;
    }(Rd);
    cd(Id);
    var kd = function(t1) {
        function o45(e16, n24, r33, o46, a36) {
            (void 0) === n24 && (n24 = 0.9), (void 0) === r33 && (r33 = 0), (void 0) === o46 && (o46 = null), (void 0) === a36 && (a36 = !1);
            var i40 = t1.call(this) || this;
            if (i40.learningRate = e16, i40.decay = n24, i40.momentum = r33, i40.epsilon = o46, i40.accumulatedMeanSquares = [], i40.accumulatedMoments = [], i40.accumulatedMeanGrads = [], i40.centered = a36, null == o46 && (i40.epsilon = Lt.backend.epsilon()), null == e16) throw new Error("learningRate for RMSPropOptimizer must be defined.");
            return i40;
        }
        return e(o45, t1), o45.prototype.applyGradients = function(t9) {
            var e16 = this;
            (Array.isArray(t9) ? t9.map(function(t10) {
                return t10.name;
            }) : Object.keys(t9)).forEach(function(n24, r33) {
                var o46 = Lt.registeredVariables[n24];
                null == e16.accumulatedMeanSquares[r33] && (e16.accumulatedMeanSquares[r33] = {
                    originalName: n24 + "/rms",
                    variable: Ze(function() {
                        return Xn(o46).variable(!1);
                    })
                }), null == e16.accumulatedMoments[r33] && (e16.accumulatedMoments[r33] = {
                    originalName: n24 + "/momentum",
                    variable: Ze(function() {
                        return Xn(o46).variable(!1);
                    })
                }), null == e16.accumulatedMeanGrads[r33] && e16.centered && (e16.accumulatedMeanGrads[r33] = {
                    originalName: n24 + "/mg",
                    variable: Ze(function() {
                        return Xn(o46).variable(!1);
                    })
                });
                var a36 = Array.isArray(t9) ? t9[r33].tensor : t9[n24];
                if (null != a36) {
                    var i40 = e16.accumulatedMeanSquares[r33].variable, s36 = e16.accumulatedMoments[r33].variable;
                    Ze(function() {
                        var t10 = i40.mul(e16.decay).add(a36.square().mul(1 - e16.decay));
                        if (e16.centered) {
                            var n25 = e16.accumulatedMeanGrads[r33].variable, u34 = n25.mul(e16.decay).add(a36.mul(1 - e16.decay)), c26 = s36.mul(e16.momentum).add(a36.mul(e16.learningRate).div(t10.sub(u34.square().add(e16.epsilon)).sqrt()));
                            i40.assign(t10), n25.assign(u34), s36.assign(c26);
                            var l32 = o46.sub(c26);
                            o46.assign(l32);
                        } else {
                            var h22 = i40.mul(e16.decay).add(a36.square().mul(1 - e16.decay));
                            c26 = s36.mul(e16.momentum).add(a36.mul(e16.learningRate).div(h22.add(e16.epsilon).sqrt()));
                            i40.assign(h22), s36.assign(c26);
                            l32 = o46.sub(c26);
                            o46.assign(l32);
                        }
                    });
                }
            }), this.incrementIterations();
        }, o45.prototype.dispose = function() {
            null != this.accumulatedMeanSquares && tn(this.accumulatedMeanSquares.map(function(t9) {
                return t9.variable;
            })), null != this.accumulatedMeanGrads && this.centered && tn(this.accumulatedMeanGrads.map(function(t9) {
                return t9.variable;
            })), null != this.accumulatedMoments && tn(this.accumulatedMoments.map(function(t9) {
                return t9.variable;
            }));
        }, o45.prototype.getWeights = function() {
            return n10(this, void 0, void 0, function() {
                var t9;
                return r17(this, function(e16) {
                    switch(e16.label){
                        case 0:
                            return t9 = this.accumulatedMeanSquares.concat(this.accumulatedMoments), this.centered && t9.push.apply(t9, this.accumulatedMeanGrads), [
                                4,
                                this.saveIterations()
                            ];
                        case 1:
                            return [
                                2,
                                [
                                    e16.sent()
                                ].concat(t9.map(function(t10) {
                                    return {
                                        name: t10.originalName,
                                        tensor: t10.variable
                                    };
                                }))
                            ];
                    }
                });
            });
        }, o45.prototype.setWeights = function(t9) {
            return n10(this, void 0, void 0, function() {
                var e16;
                return r17(this, function(n24) {
                    switch(n24.label){
                        case 0:
                            return [
                                4,
                                this.extractIterations(t9)
                            ];
                        case 1:
                            return t9 = n24.sent(), e16 = this.centered ? t9.length / 3 : t9.length / 2, this.accumulatedMeanSquares = t9.slice(0, e16).map(function(t10) {
                                return {
                                    originalName: t10.name,
                                    variable: t10.tensor.variable(!1)
                                };
                            }), this.accumulatedMoments = t9.slice(e16, 2 * e16).map(function(t10) {
                                return {
                                    originalName: t10.name,
                                    variable: t10.tensor.variable(!1)
                                };
                            }), this.centered && (this.accumulatedMeanGrads = t9.slice(2 * e16, 3 * e16).map(function(t10) {
                                return {
                                    originalName: t10.name,
                                    variable: t10.tensor.variable(!1)
                                };
                            })), [
                                2
                            ];
                    }
                });
            });
        }, o45.prototype.getConfig = function() {
            return {
                learningRate: this.learningRate,
                decay: this.decay,
                momentum: this.momentum,
                epsilon: this.epsilon,
                centered: this.centered
            };
        }, o45.fromConfig = function(t9, e16) {
            return new t9(e16.learningRate, e16.decay, e16.momentum, e16.epsilon, e16.centered);
        }, o45.className = "RMSProp", o45;
    }(xd);
    cd(kd);
    var Sd = function() {
        function t1() {
        }
        return t1.sgd = function(t9) {
            return new Rd(t9);
        }, t1.momentum = function(t9, e16, n24) {
            return (void 0) === n24 && (n24 = !1), new Id(t9, e16, n24);
        }, t1.rmsprop = function(t9, e16, n24, r33, o45) {
            return (void 0) === e16 && (e16 = 0.9), (void 0) === n24 && (n24 = 0), (void 0) === r33 && (r33 = null), (void 0) === o45 && (o45 = !1), new kd(t9, e16, n24, r33, o45);
        }, t1.adam = function(t9, e16, n24, r33) {
            return (void 0) === t9 && (t9 = 0.001), (void 0) === e16 && (e16 = 0.9), (void 0) === n24 && (n24 = 0.999), (void 0) === r33 && (r33 = null), new Cd(t9, e16, n24, r33);
        }, t1.adadelta = function(t9, e16, n24) {
            return (void 0) === t9 && (t9 = 0.001), (void 0) === e16 && (e16 = 0.95), (void 0) === n24 && (n24 = null), new bd(t9, e16, n24);
        }, t1.adamax = function(t9, e16, n24, r33, o45) {
            return (void 0) === t9 && (t9 = 0.002), (void 0) === e16 && (e16 = 0.9), (void 0) === n24 && (n24 = 0.999), (void 0) === r33 && (r33 = null), (void 0) === o45 && (o45 = 0), new Ed(t9, e16, n24, r33, o45);
        }, t1.adagrad = function(t9, e16) {
            return (void 0) === e16 && (e16 = 0.1), new wd(t9, e16);
        }, t1;
    }(), Ad = {
        sgd: Sd.sgd,
        momentum: Sd.momentum,
        adadelta: Sd.adadelta,
        adagrad: Sd.adagrad,
        rmsprop: Sd.rmsprop,
        adamax: Sd.adamax,
        adam: Sd.adam
    }, Dd = "undefined" != typeof requestAnimationFrame ? requestAnimationFrame : "undefined" != typeof setImmediate ? setImmediate : function(t1) {
        return t1();
    };
    function Td() {
        return new Promise(function(t1) {
            return Dd(function() {
                return t1();
            });
        });
    }
    wt.prototype.squaredDifference = function(t1) {
        return nu(this, t1);
    }, xt = Gh;
    var tfCore_esm = /*#__PURE__*/ Object.freeze({
        __proto__: null,
        AdadeltaOptimizer: bd,
        AdagradOptimizer: wd,
        AdamOptimizer: Cd,
        AdamaxOptimizer: Ed,
        DataStorage: xo,
        get ENV () {
            return s;
        },
        Environment: o6,
        KernelBackend: bo,
        MomentumOptimizer: Id,
        Optimizer: xd,
        RMSPropOptimizer: kd,
        get Rank () {
            return Ct;
        },
        get Reduction () {
            return ch;
        },
        SGDOptimizer: Rd,
        Tensor: wt,
        TensorBuffer: gt,
        Variable: St,
        abs: ru,
        acos: ou,
        acosh: au,
        add: rc,
        addN: oc,
        addStrict: ac,
        all: Cl,
        any: El,
        argMax: Rl,
        argMin: Il,
        asin: iu,
        asinh: su,
        atan: uu,
        atan2: ic,
        atanh: cu,
        avgPool: fl,
        avgPool3d: vl,
        backend: hn,
        backend_util: Uo,
        basicLSTMCell: zl,
        batchNorm: ju,
        batchNorm2d: Xu,
        batchNorm3d: Yu,
        batchNorm4d: $u,
        batchNormalization: Ku,
        batchNormalization2d: Gu,
        batchNormalization3d: Hu,
        batchNormalization4d: qu,
        batchToSpaceND: vr,
        booleanMaskAsync: Uc,
        broadcastTo: mr,
        browser: id,
        buffer: dr,
        cast: gr,
        ceil: lu,
        clipByValue: hu,
        clone: yr,
        complex: Dn,
        concat: Yn,
        concat1d: $n,
        concat2d: Qn,
        concat3d: Jn,
        concat4d: Zn,
        conv1d: Hc,
        conv2d: qc,
        conv2dTranspose: Zc,
        conv3d: Kc,
        conv3dTranspose: tl,
        cos: fu,
        cosh: du,
        cumsum: xr,
        customGrad: vo,
        deprecationWarn: Xe,
        depthToSpace: br,
        depthwiseConv2d: Yc,
        diag: eh,
        disableDeprecationWarnings: je,
        dispose: tn,
        disposeVariables: Ye,
        div: sc,
        divNoNan: uc,
        divStrict: cc,
        dot: nl,
        dropout: nh,
        elu: _l,
        enableDebugMode: Ke,
        enableProdMode: qe,
        engine: $e,
        env: i15,
        equal: Rc,
        equalStrict: Ic,
        erf: pu,
        exp: vu,
        expandDims: wr,
        expm1: mu,
        eye: Cr,
        fft: Xl,
        fill: Hn,
        findBackend: un,
        findBackendFactory: cn,
        floor: gu,
        floorDiv: lc,
        frame: ih,
        fused: zh,
        gather: Lc,
        gatherND: th,
        gather_util: Xr,
        getBackend: an,
        getGradient: h,
        getKernel: l,
        getKernelsForBackend: f,
        grad: co,
        grads: lo,
        greater: kc,
        greaterEqual: Sc,
        greaterEqualStrict: Ac,
        greaterStrict: Dc,
        hammingWindow: ah,
        hannWindow: oh,
        ifft: Yl,
        imag: Nn,
        image: Oh,
        inTopKAsync: lh,
        io: ed,
        irfft: Ql,
        isFinite: Du,
        isInf: Au,
        isNaN: Su,
        keep: en,
        leakyRelu: Ol,
        less: Tc,
        lessEqual: Nc,
        lessEqualStrict: Fc,
        lessStrict: _c,
        linalg: Ih,
        linspace: qn,
        localResponseNormalization: Ul,
        log: yu,
        log1p: xu,
        logSigmoid: bu,
        logSoftmax: yo,
        logSumExp: kl,
        logicalAnd: Qu,
        logicalNot: Ju,
        logicalOr: Zu,
        logicalXor: tc,
        losses: bh,
        matMul: el,
        math: od,
        max: Sl,
        maxPool: hl,
        maxPool3d: pl,
        maximum: hc,
        maximumStrict: fc,
        mean: Al,
        memory: Qe,
        min: Dl,
        minimum: dc,
        minimumStrict: pc,
        mod: vc,
        modStrict: mc,
        moments: Tl,
        movingAverage: Hl,
        mul: gc,
        mulStrict: yc,
        multiRNNCell: Gl,
        multinomial: Er,
        neg: wu,
        nextFrame: Td,
        norm: Vl,
        notEqual: Oc,
        notEqualStrict: Mc,
        oneHot: Rr,
        ones: zn,
        onesLike: jn,
        op: An,
        outerProduct: rl,
        pad: Ir,
        pad1d: kr,
        pad2d: Sr,
        pad3d: Ar,
        pad4d: Dr,
        pool: dl,
        pow: xc,
        powStrict: bc,
        prelu: Ml,
        print: pr,
        prod: Fl,
        profile: Je,
        rand: Tr,
        randomGamma: Fr,
        randomNormal: Nr,
        randomUniform: _r,
        range: Kn,
        ready: on,
        real: Tn,
        reciprocal: Cu,
        registerBackend: ln,
        registerGradient: p2,
        registerKernel: d2,
        relu: Bl,
        relu6: Pl,
        removeBackend: sn,
        reshape: Or,
        reverse: ol,
        reverse1d: al,
        reverse2d: il,
        reverse3d: sl,
        reverse4d: ul,
        rfft: $l,
        round: Eu,
        rsqrt: Ru,
        scalar: On,
        scatterND: jl,
        scatter_util: to,
        selu: Ll,
        separableConv2d: Jc,
        serialization: ld,
        setBackend: rn,
        setPlatform: fn,
        setdiff1dAsync: Vr,
        sigmoid: Iu,
        sign: ku,
        signal: uh,
        sin: Tu,
        sinh: Nu,
        slice: ml,
        slice1d: gl,
        slice2d: yl,
        slice3d: xl,
        slice4d: bl,
        slice_util: uo,
        softmax: go,
        softplus: Fu,
        spaceToBatchND: Mr,
        sparseToDense: Zl,
        spectral: Jl,
        split: tr,
        sqrt: _u,
        square: tu,
        squaredDifference: nu,
        squaredDifferenceStrict: wc,
        squeeze: Br,
        stack: Pr,
        step: Ou,
        stft: sh,
        stridedSlice: ql,
        sub: Cc,
        subStrict: Ec,
        sum: Nl,
        sumOutType: Tt,
        tan: Mu,
        tanh: Bu,
        tensor: Fn,
        tensor1d: Mn,
        tensor2d: Bn,
        tensor3d: Pn,
        tensor4d: Ln,
        tensor5d: Wn,
        tensor6d: Un,
        tensor_util: Mt,
        test_util: md,
        tidy: Ze,
        tile: Lr,
        time: nn,
        topk: Kl,
        train: Ad,
        transpose: Wl,
        truncatedNormal: Wr,
        unregisterGradient: m2,
        unregisterKernel: v2,
        unsortedSegmentSum: Wc,
        unstack: Ur,
        util: st,
        valueAndGrad: ho,
        valueAndGrads: fo,
        variable: Vn,
        variableGrads: po,
        version_core: gd,
        webgl: yd,
        where: ec,
        whereAsync: nc,
        zeros: Gn,
        zerosLike: Xn
    });
    function drawContour(ctx, points, isClosed) {
        if (isClosed === void 0) isClosed = false;
        ctx.beginPath();
        points.slice(1).forEach(function(_a1, prevIdx) {
            var x11 = _a1.x, y13 = _a1.y;
            var from = points[prevIdx];
            ctx.moveTo(from.x, from.y);
            ctx.lineTo(x11, y13);
        });
        if (isClosed) {
            var from = points[points.length - 1];
            var to1 = points[0];
            if (!from || !to1) return;
            ctx.moveTo(from.x, from.y);
            ctx.lineTo(to1.x, to1.y);
        }
        ctx.stroke();
    }
    /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d24, b9) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d25, b10) {
            d25.__proto__ = b10;
        } || function(d25, b10) {
            for(var p23 in b10)if (b10.hasOwnProperty(p23)) d25[p23] = b10[p23];
        };
        return extendStatics(d24, b9);
    };
    function __extends(d24, b9) {
        extendStatics(d24, b9);
        function __() {
            this.constructor = d24;
        }
        d24.prototype = b9 === null ? Object.create(b9) : (__.prototype = b9.prototype, new __());
    }
    var __assign = function() {
        __assign = Object.assign || function __assign1(t1) {
            for(var s37, i41 = 1, n24 = arguments.length; i41 < n24; i41++){
                s37 = arguments[i41];
                for(var p23 in s37)if (Object.prototype.hasOwnProperty.call(s37, p23)) t1[p23] = s37[p23];
            }
            return t1;
        };
        return __assign.apply(this, arguments);
    };
    function __awaiter(thisArg, _arguments, P9, generator) {
        return new (P9 || (P9 = Promise))(function(resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e16) {
                    reject(e16);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e16) {
                    reject(e16);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : new P9(function(resolve1) {
                    resolve1(result.value);
                }).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _11 = {
            label: 0,
            sent: function() {
                if (t1[0] & 1) throw t1[1];
                return t1[1];
            },
            trys: [],
            ops: []
        }, f28, y13, t1, g19;
        function verb(n24) {
            return function(v21) {
                return step([
                    n24,
                    v21
                ]);
            };
        }
        function step(op) {
            if (f28) throw new TypeError("Generator is already executing.");
            while(_11)try {
                if (f28 = 1, y13 && (t1 = op[0] & 2 ? y13["return"] : op[0] ? y13["throw"] || ((t1 = y13["return"]) && t1.call(y13), 0) : y13.next) && !(t1 = t1.call(y13, op[1])).done) return t1;
                if (y13 = 0, t1) op = [
                    op[0] & 2,
                    t1.value
                ];
                switch(op[0]){
                    case 0:
                    case 1:
                        t1 = op;
                        break;
                    case 4:
                        _11.label++;
                        return {
                            value: op[1],
                            done: false
                        };
                    case 5:
                        _11.label++;
                        y13 = op[1];
                        op = [
                            0
                        ];
                        continue;
                    case 7:
                        op = _11.ops.pop();
                        _11.trys.pop();
                        continue;
                    default:
                        if (!(t1 = _11.trys, t1 = t1.length > 0 && t1[t1.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _11 = 0;
                            continue;
                        }
                        if (op[0] === 3 && (!t1 || op[1] > t1[0] && op[1] < t1[3])) {
                            _11.label = op[1];
                            break;
                        }
                        if (op[0] === 6 && _11.label < t1[1]) {
                            _11.label = t1[1];
                            t1 = op;
                            break;
                        }
                        if (t1 && _11.label < t1[2]) {
                            _11.label = t1[2];
                            _11.ops.push(op);
                            break;
                        }
                        if (t1[2]) _11.ops.pop();
                        _11.trys.pop();
                        continue;
                }
                op = body.call(thisArg, _11);
            } catch (e16) {
                op = [
                    6,
                    e16
                ];
                y13 = 0;
            } finally{
                f28 = t1 = 0;
            }
            if (op[0] & 5) throw op[1];
            return {
                value: op[0] ? op[1] : void 0,
                done: true
            };
        }
        return g19 = {
            next: verb(0),
            "throw": verb(1),
            "return": verb(2)
        }, typeof Symbol === "function" && (g19[Symbol.iterator] = function() {
            return this;
        }), g19;
    }
    function __spreadArrays() {
        for(var s37 = 0, i41 = 0, il1 = arguments.length; i41 < il1; i41++)s37 += arguments[i41].length;
        for(var r33 = Array(s37), k12 = 0, i41 = 0; i41 < il1; i41++)for(var a36 = arguments[i41], j6 = 0, jl1 = a36.length; j6 < jl1; j6++, k12++)r33[k12] = a36[j6];
        return r33;
    }
    var Dimensions = function() {
        function Dimensions1(width, height) {
            if (!isValidNumber(width) || !isValidNumber(height)) throw new Error("Dimensions.constructor - expected width and height to be valid numbers, instead have " + JSON.stringify({
                width: width,
                height: height
            }));
            this._width = width;
            this._height = height;
        }
        Object.defineProperty(Dimensions1.prototype, "width", {
            get: function() {
                return this._width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Dimensions1.prototype, "height", {
            get: function() {
                return this._height;
            },
            enumerable: true,
            configurable: true
        });
        Dimensions1.prototype.reverse = function() {
            return new Dimensions1(1 / this.width, 1 / this.height);
        };
        return Dimensions1;
    }();
    function isTensor(tensor, dim) {
        return tensor instanceof wt && tensor.shape.length === dim;
    }
    function isTensor1D(tensor) {
        return isTensor(tensor, 1);
    }
    function isTensor2D(tensor) {
        return isTensor(tensor, 2);
    }
    function isTensor3D(tensor) {
        return isTensor(tensor, 3);
    }
    function isTensor4D(tensor) {
        return isTensor(tensor, 4);
    }
    function isFloat(num) {
        return num % 1 !== 0;
    }
    function isEven(num) {
        return num % 2 === 0;
    }
    function round(num, prec) {
        if (prec === void 0) prec = 2;
        var f28 = Math.pow(10, prec);
        return Math.floor(num * f28) / f28;
    }
    function isDimensions(obj) {
        return obj && obj.width && obj.height;
    }
    function computeReshapedDimensions(_a1, inputSize) {
        var width = _a1.width, height = _a1.height;
        var scale = inputSize / Math.max(height, width);
        return new Dimensions(Math.round(width * scale), Math.round(height * scale));
    }
    function getCenterPoint(pts) {
        return pts.reduce(function(sum, pt1) {
            return sum.add(pt1);
        }, new Point(0, 0)).div(new Point(pts.length, pts.length));
    }
    function range(num, start, step) {
        return Array(num).fill(0).map(function(_11, i41) {
            return start + i41 * step;
        });
    }
    function isValidNumber(num) {
        return !!num && num !== Infinity && num !== -Infinity && !isNaN(num) || num === 0;
    }
    function isValidProbablitiy(num) {
        return isValidNumber(num) && 0 <= num && num <= 1;
    }
    var index = /*#__PURE__*/ Object.freeze({
        __proto__: null,
        isTensor: isTensor,
        isTensor1D: isTensor1D,
        isTensor2D: isTensor2D,
        isTensor3D: isTensor3D,
        isTensor4D: isTensor4D,
        isFloat: isFloat,
        isEven: isEven,
        round: round,
        isDimensions: isDimensions,
        computeReshapedDimensions: computeReshapedDimensions,
        getCenterPoint: getCenterPoint,
        range: range,
        isValidNumber: isValidNumber,
        isValidProbablitiy: isValidProbablitiy
    });
    var Point = function() {
        function Point1(x11, y13) {
            this._x = x11;
            this._y = y13;
        }
        Object.defineProperty(Point1.prototype, "x", {
            get: function() {
                return this._x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Point1.prototype, "y", {
            get: function() {
                return this._y;
            },
            enumerable: true,
            configurable: true
        });
        Point1.prototype.add = function(pt1) {
            return new Point1(this.x + pt1.x, this.y + pt1.y);
        };
        Point1.prototype.sub = function(pt1) {
            return new Point1(this.x - pt1.x, this.y - pt1.y);
        };
        Point1.prototype.mul = function(pt1) {
            return new Point1(this.x * pt1.x, this.y * pt1.y);
        };
        Point1.prototype.div = function(pt1) {
            return new Point1(this.x / pt1.x, this.y / pt1.y);
        };
        Point1.prototype.abs = function() {
            return new Point1(Math.abs(this.x), Math.abs(this.y));
        };
        Point1.prototype.magnitude = function() {
            return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));
        };
        Point1.prototype.floor = function() {
            return new Point1(Math.floor(this.x), Math.floor(this.y));
        };
        return Point1;
    }();
    var Box = function() {
        function Box1(_box, allowNegativeDimensions) {
            if (allowNegativeDimensions === void 0) allowNegativeDimensions = true;
            var box = _box || {
            };
            var isBbox = [
                box.left,
                box.top,
                box.right,
                box.bottom
            ].every(isValidNumber);
            var isRect = [
                box.x,
                box.y,
                box.width,
                box.height
            ].every(isValidNumber);
            if (!isRect && !isBbox) throw new Error("Box.constructor - expected box to be IBoundingBox | IRect, instead have " + JSON.stringify(box));
            var _a1 = isRect ? [
                box.x,
                box.y,
                box.width,
                box.height
            ] : [
                box.left,
                box.top,
                box.right - box.left,
                box.bottom - box.top
            ], x11 = _a1[0], y13 = _a1[1], width = _a1[2], height = _a1[3];
            Box1.assertIsValidBox({
                x: x11,
                y: y13,
                width: width,
                height: height
            }, 'Box.constructor', allowNegativeDimensions);
            this._x = x11;
            this._y = y13;
            this._width = width;
            this._height = height;
        }
        Box1.isRect = function(rect) {
            return !!rect && [
                rect.x,
                rect.y,
                rect.width,
                rect.height
            ].every(isValidNumber);
        };
        Box1.assertIsValidBox = function(box, callee, allowNegativeDimensions) {
            if (allowNegativeDimensions === void 0) allowNegativeDimensions = false;
            if (!Box1.isRect(box)) throw new Error(callee + " - invalid box: " + JSON.stringify(box) + ", expected object with properties x, y, width, height");
            if (!allowNegativeDimensions && (box.width < 0 || box.height < 0)) throw new Error(callee + " - width (" + box.width + ") and height (" + box.height + ") must be positive numbers");
        };
        Object.defineProperty(Box1.prototype, "x", {
            get: function() {
                return this._x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box1.prototype, "y", {
            get: function() {
                return this._y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box1.prototype, "width", {
            get: function() {
                return this._width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box1.prototype, "height", {
            get: function() {
                return this._height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box1.prototype, "left", {
            get: function() {
                return this.x;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box1.prototype, "top", {
            get: function() {
                return this.y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box1.prototype, "right", {
            get: function() {
                return this.x + this.width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box1.prototype, "bottom", {
            get: function() {
                return this.y + this.height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box1.prototype, "area", {
            get: function() {
                return this.width * this.height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box1.prototype, "topLeft", {
            get: function() {
                return new Point(this.left, this.top);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box1.prototype, "topRight", {
            get: function() {
                return new Point(this.right, this.top);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box1.prototype, "bottomLeft", {
            get: function() {
                return new Point(this.left, this.bottom);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Box1.prototype, "bottomRight", {
            get: function() {
                return new Point(this.right, this.bottom);
            },
            enumerable: true,
            configurable: true
        });
        Box1.prototype.round = function() {
            var _a1 = [
                this.x,
                this.y,
                this.width,
                this.height
            ].map(function(val) {
                return Math.round(val);
            }), x11 = _a1[0], y13 = _a1[1], width = _a1[2], height = _a1[3];
            return new Box1({
                x: x11,
                y: y13,
                width: width,
                height: height
            });
        };
        Box1.prototype.floor = function() {
            var _a1 = [
                this.x,
                this.y,
                this.width,
                this.height
            ].map(function(val) {
                return Math.floor(val);
            }), x11 = _a1[0], y13 = _a1[1], width = _a1[2], height = _a1[3];
            return new Box1({
                x: x11,
                y: y13,
                width: width,
                height: height
            });
        };
        Box1.prototype.toSquare = function() {
            var _a1 = this, x11 = _a1.x, y13 = _a1.y, width = _a1.width, height = _a1.height;
            var diff = Math.abs(width - height);
            if (width < height) {
                x11 -= diff / 2;
                width += diff;
            }
            if (height < width) {
                y13 -= diff / 2;
                height += diff;
            }
            return new Box1({
                x: x11,
                y: y13,
                width: width,
                height: height
            });
        };
        Box1.prototype.rescale = function(s37) {
            var scaleX = isDimensions(s37) ? s37.width : s37;
            var scaleY = isDimensions(s37) ? s37.height : s37;
            return new Box1({
                x: this.x * scaleX,
                y: this.y * scaleY,
                width: this.width * scaleX,
                height: this.height * scaleY
            });
        };
        Box1.prototype.pad = function(padX, padY) {
            var _a1 = [
                this.x - padX / 2,
                this.y - padY / 2,
                this.width + padX,
                this.height + padY
            ], x11 = _a1[0], y13 = _a1[1], width = _a1[2], height = _a1[3];
            return new Box1({
                x: x11,
                y: y13,
                width: width,
                height: height
            });
        };
        Box1.prototype.clipAtImageBorders = function(imgWidth, imgHeight) {
            var _a1 = this, x11 = _a1.x, y13 = _a1.y, right = _a1.right, bottom = _a1.bottom;
            var clippedX = Math.max(x11, 0);
            var clippedY = Math.max(y13, 0);
            var newWidth = right - clippedX;
            var newHeight = bottom - clippedY;
            var clippedWidth = Math.min(newWidth, imgWidth - clippedX);
            var clippedHeight = Math.min(newHeight, imgHeight - clippedY);
            return new Box1({
                x: clippedX,
                y: clippedY,
                width: clippedWidth,
                height: clippedHeight
            }).floor();
        };
        Box1.prototype.shift = function(sx, sy) {
            var _a1 = this, width = _a1.width, height = _a1.height;
            var x11 = this.x + sx;
            var y13 = this.y + sy;
            return new Box1({
                x: x11,
                y: y13,
                width: width,
                height: height
            });
        };
        Box1.prototype.padAtBorders = function(imageHeight, imageWidth) {
            var w12 = this.width + 1;
            var h23 = this.height + 1;
            var dx = 1;
            var dy = 1;
            var edx = w12;
            var edy = h23;
            var x11 = this.left;
            var y13 = this.top;
            var ex = this.right;
            var ey = this.bottom;
            if (ex > imageWidth) {
                edx = -ex + imageWidth + w12;
                ex = imageWidth;
            }
            if (ey > imageHeight) {
                edy = -ey + imageHeight + h23;
                ey = imageHeight;
            }
            if (x11 < 1) {
                edy = 2 - x11;
                x11 = 1;
            }
            if (y13 < 1) {
                edy = 2 - y13;
                y13 = 1;
            }
            return {
                dy: dy,
                edy: edy,
                dx: dx,
                edx: edx,
                y: y13,
                ey: ey,
                x: x11,
                ex: ex,
                w: w12,
                h: h23
            };
        };
        Box1.prototype.calibrate = function(region) {
            return new Box1({
                left: this.left + region.left * this.width,
                top: this.top + region.top * this.height,
                right: this.right + region.right * this.width,
                bottom: this.bottom + region.bottom * this.height
            }).toSquare().round();
        };
        return Box1;
    }();
    var BoundingBox1 = function(_super) {
        __extends(BoundingBox2, _super);
        function BoundingBox2(left, top, right, bottom, allowNegativeDimensions) {
            if (allowNegativeDimensions === void 0) allowNegativeDimensions = false;
            return _super.call(this, {
                left: left,
                top: top,
                right: right,
                bottom: bottom
            }, allowNegativeDimensions) || this;
        }
        return BoundingBox2;
    }(Box);
    var ObjectDetection = function() {
        function ObjectDetection1(score, classScore, className, relativeBox, imageDims) {
            this._imageDims = new Dimensions(imageDims.width, imageDims.height);
            this._score = score;
            this._classScore = classScore;
            this._className = className;
            this._box = new Box(relativeBox).rescale(this._imageDims);
        }
        Object.defineProperty(ObjectDetection1.prototype, "score", {
            get: function() {
                return this._score;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectDetection1.prototype, "classScore", {
            get: function() {
                return this._classScore;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectDetection1.prototype, "className", {
            get: function() {
                return this._className;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectDetection1.prototype, "box", {
            get: function() {
                return this._box;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectDetection1.prototype, "imageDims", {
            get: function() {
                return this._imageDims;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectDetection1.prototype, "imageWidth", {
            get: function() {
                return this.imageDims.width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectDetection1.prototype, "imageHeight", {
            get: function() {
                return this.imageDims.height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ObjectDetection1.prototype, "relativeBox", {
            get: function() {
                return new Box(this._box).rescale(this.imageDims.reverse());
            },
            enumerable: true,
            configurable: true
        });
        ObjectDetection1.prototype.forSize = function(width, height) {
            return new ObjectDetection1(this.score, this.classScore, this.className, this.relativeBox, {
                width: width,
                height: height
            });
        };
        return ObjectDetection1;
    }();
    var FaceDetection1 = function(_super) {
        __extends(FaceDetection2, _super);
        function FaceDetection2(score, relativeBox, imageDims) {
            return _super.call(this, score, score, '', relativeBox, imageDims) || this;
        }
        FaceDetection2.prototype.forSize = function(width, height) {
            var _a1 = _super.prototype.forSize.call(this, width, height), score = _a1.score, relativeBox = _a1.relativeBox, imageDims = _a1.imageDims;
            return new FaceDetection2(score, relativeBox, imageDims);
        };
        return FaceDetection2;
    }(ObjectDetection);
    function iou(box1, box2, isIOU) {
        if (isIOU === void 0) isIOU = true;
        var width = Math.max(0, Math.min(box1.right, box2.right) - Math.max(box1.left, box2.left));
        var height = Math.max(0, Math.min(box1.bottom, box2.bottom) - Math.max(box1.top, box2.top));
        var interSection = width * height;
        return isIOU ? interSection / (box1.area + box2.area - interSection) : interSection / Math.min(box1.area, box2.area);
    }
    function minBbox(pts) {
        var xs1 = pts.map(function(pt1) {
            return pt1.x;
        });
        var ys1 = pts.map(function(pt1) {
            return pt1.y;
        });
        var minX = xs1.reduce(function(min, x11) {
            return x11 < min ? x11 : min;
        }, Infinity);
        var minY = ys1.reduce(function(min, y13) {
            return y13 < min ? y13 : min;
        }, Infinity);
        var maxX = xs1.reduce(function(max, x11) {
            return max < x11 ? x11 : max;
        }, 0);
        var maxY = ys1.reduce(function(max, y13) {
            return max < y13 ? y13 : max;
        }, 0);
        return new BoundingBox1(minX, minY, maxX, maxY);
    }
    function nonMaxSuppression(boxes, scores, iouThreshold, isIOU) {
        if (isIOU === void 0) isIOU = true;
        var indicesSortedByScore = scores.map(function(score, boxIndex) {
            return {
                score: score,
                boxIndex: boxIndex
            };
        }).sort(function(c110, c27) {
            return c110.score - c27.score;
        }).map(function(c27) {
            return c27.boxIndex;
        });
        var pick = [];
        var _loop_1 = function() {
            var curr = indicesSortedByScore.pop();
            pick.push(curr);
            var indices = indicesSortedByScore;
            var outputs = [];
            for(var i41 = 0; i41 < indices.length; i41++){
                var idx = indices[i41];
                var currBox = boxes[curr];
                var idxBox = boxes[idx];
                outputs.push(iou(currBox, idxBox, isIOU));
            }
            indicesSortedByScore = indicesSortedByScore.filter(function(_11, j6) {
                return outputs[j6] <= iouThreshold;
            });
        };
        while(indicesSortedByScore.length > 0)_loop_1();
        return pick;
    }
    function normalize(x11, meanRgb) {
        return Ze(function() {
            var r33 = meanRgb[0], g19 = meanRgb[1], b9 = meanRgb[2];
            var avg_r = Hn(__spreadArrays(x11.shape.slice(0, 3), [
                1
            ]), r33);
            var avg_g = Hn(__spreadArrays(x11.shape.slice(0, 3), [
                1
            ]), g19);
            var avg_b = Hn(__spreadArrays(x11.shape.slice(0, 3), [
                1
            ]), b9);
            var avg_rgb = Yn([
                avg_r,
                avg_g,
                avg_b
            ], 3);
            return Cc(x11, avg_rgb);
        });
    }
    /**
   * Pads the smaller dimension of an image tensor with zeros, such that width === height.
   *
   * @param imgTensor The image tensor.
   * @param isCenterImage (optional, default: false) If true, add an equal amount of padding on
   * both sides of the minor dimension oof the image.
   * @returns The padded tensor with width === height.
   */ function padToSquare(imgTensor, isCenterImage) {
        if (isCenterImage === void 0) isCenterImage = false;
        return Ze(function() {
            var _a1 = imgTensor.shape.slice(1), height = _a1[0], width = _a1[1];
            if (height === width) return imgTensor;
            var dimDiff = Math.abs(height - width);
            var paddingAmount = Math.round(dimDiff * (isCenterImage ? 0.5 : 1));
            var paddingAxis = height > width ? 2 : 1;
            var createPaddingTensor = function(paddingAmount1) {
                var paddingTensorShape = imgTensor.shape.slice();
                paddingTensorShape[paddingAxis] = paddingAmount1;
                return Hn(paddingTensorShape, 0);
            };
            var paddingTensorAppend = createPaddingTensor(paddingAmount);
            var remainingPaddingAmount = dimDiff - paddingTensorAppend.shape[paddingAxis];
            var paddingTensorPrepend = isCenterImage && remainingPaddingAmount ? createPaddingTensor(remainingPaddingAmount) : null;
            var tensorsToStack = [
                paddingTensorPrepend,
                imgTensor,
                paddingTensorAppend
            ].filter(function(t1) {
                return !!t1;
            }).map(function(t1) {
                return t1.toFloat();
            });
            return Yn(tensorsToStack, paddingAxis);
        });
    }
    function shuffleArray(inputArray) {
        var array = inputArray.slice();
        for(var i41 = array.length - 1; i41 > 0; i41--){
            var j6 = Math.floor(Math.random() * (i41 + 1));
            var x11 = array[i41];
            array[i41] = array[j6];
            array[j6] = x11;
        }
        return array;
    }
    function sigmoid(x12) {
        return 1 / (1 + Math.exp(-x12));
    }
    function inverseSigmoid(x12) {
        return Math.log(x12 / (1 - x12));
    }
    var Rect1 = function(_super) {
        __extends(Rect2, _super);
        function Rect2(x12, y13, width, height, allowNegativeDimensions) {
            if (allowNegativeDimensions === void 0) allowNegativeDimensions = false;
            return _super.call(this, {
                x: x12,
                y: y13,
                width: width,
                height: height
            }, allowNegativeDimensions) || this;
        }
        return Rect2;
    }(Box);
    // face alignment constants
    var relX = 0.5;
    var relY = 0.43;
    var relScale = 0.45;
    var FaceLandmarks = function() {
        function FaceLandmarks1(relativeFaceLandmarkPositions, imgDims, shift) {
            if (shift === void 0) shift = new Point(0, 0);
            var width = imgDims.width, height = imgDims.height;
            this._imgDims = new Dimensions(width, height);
            this._shift = shift;
            this._positions = relativeFaceLandmarkPositions.map(function(pt1) {
                return pt1.mul(new Point(width, height)).add(shift);
            });
        }
        Object.defineProperty(FaceLandmarks1.prototype, "shift", {
            get: function() {
                return new Point(this._shift.x, this._shift.y);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FaceLandmarks1.prototype, "imageWidth", {
            get: function() {
                return this._imgDims.width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FaceLandmarks1.prototype, "imageHeight", {
            get: function() {
                return this._imgDims.height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FaceLandmarks1.prototype, "positions", {
            get: function() {
                return this._positions;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FaceLandmarks1.prototype, "relativePositions", {
            get: function() {
                var _this = this;
                return this._positions.map(function(pt1) {
                    return pt1.sub(_this._shift).div(new Point(_this.imageWidth, _this.imageHeight));
                });
            },
            enumerable: true,
            configurable: true
        });
        FaceLandmarks1.prototype.forSize = function(width, height) {
            return new this.constructor(this.relativePositions, {
                width: width,
                height: height
            });
        };
        FaceLandmarks1.prototype.shiftBy = function(x12, y13) {
            return new this.constructor(this.relativePositions, this._imgDims, new Point(x12, y13));
        };
        FaceLandmarks1.prototype.shiftByPoint = function(pt1) {
            return this.shiftBy(pt1.x, pt1.y);
        };
        /**
       * Aligns the face landmarks after face detection from the relative positions of the faces
       * bounding box, or it's current shift. This function should be used to align the face images
       * after face detection has been performed, before they are passed to the face recognition net.
       * This will make the computed face descriptor more accurate.
       *
       * @param detection (optional) The bounding box of the face or the face detection result. If
       * no argument was passed the position of the face landmarks are assumed to be relative to
       * it's current shift.
       * @returns The bounding box of the aligned face.
       */ FaceLandmarks1.prototype.align = function(detection, options) {
            if (options === void 0) options = {
            };
            if (detection) {
                var box = detection instanceof FaceDetection1 ? detection.box.floor() : new Box(detection);
                return this.shiftBy(box.x, box.y).align(null, options);
            }
            var _a1 = Object.assign({
            }, {
                useDlibAlignment: false,
                minBoxPadding: 0.2
            }, options), useDlibAlignment = _a1.useDlibAlignment, minBoxPadding = _a1.minBoxPadding;
            if (useDlibAlignment) return this.alignDlib();
            return this.alignMinBbox(minBoxPadding);
        };
        FaceLandmarks1.prototype.alignDlib = function() {
            var centers = this.getRefPointsForAlignment();
            var leftEyeCenter = centers[0], rightEyeCenter = centers[1], mouthCenter = centers[2];
            var distToMouth = function(pt1) {
                return mouthCenter.sub(pt1).magnitude();
            };
            var eyeToMouthDist = (distToMouth(leftEyeCenter) + distToMouth(rightEyeCenter)) / 2;
            var size = Math.floor(eyeToMouthDist / relScale);
            var refPoint = getCenterPoint(centers);
            // TODO: pad in case rectangle is out of image bounds
            var x12 = Math.floor(Math.max(0, refPoint.x - relX * size));
            var y13 = Math.floor(Math.max(0, refPoint.y - relY * size));
            return new Rect1(x12, y13, Math.min(size, this.imageWidth + x12), Math.min(size, this.imageHeight + y13));
        };
        FaceLandmarks1.prototype.alignMinBbox = function(padding) {
            var box = minBbox(this.positions);
            return box.pad(box.width * padding, box.height * padding);
        };
        FaceLandmarks1.prototype.getRefPointsForAlignment = function() {
            throw new Error('getRefPointsForAlignment not implemented by base class');
        };
        return FaceLandmarks1;
    }();
    var FaceLandmarks51 = function(_super) {
        __extends(FaceLandmarks52, _super);
        function FaceLandmarks52() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FaceLandmarks52.prototype.getRefPointsForAlignment = function() {
            var pts = this.positions;
            return [
                pts[0],
                pts[1],
                getCenterPoint([
                    pts[3],
                    pts[4]
                ])
            ];
        };
        return FaceLandmarks52;
    }(FaceLandmarks);
    var FaceLandmarks681 = function(_super) {
        __extends(FaceLandmarks682, _super);
        function FaceLandmarks682() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FaceLandmarks682.prototype.getJawOutline = function() {
            return this.positions.slice(0, 17);
        };
        FaceLandmarks682.prototype.getLeftEyeBrow = function() {
            return this.positions.slice(17, 22);
        };
        FaceLandmarks682.prototype.getRightEyeBrow = function() {
            return this.positions.slice(22, 27);
        };
        FaceLandmarks682.prototype.getNose = function() {
            return this.positions.slice(27, 36);
        };
        FaceLandmarks682.prototype.getLeftEye = function() {
            return this.positions.slice(36, 42);
        };
        FaceLandmarks682.prototype.getRightEye = function() {
            return this.positions.slice(42, 48);
        };
        FaceLandmarks682.prototype.getMouth = function() {
            return this.positions.slice(48, 68);
        };
        FaceLandmarks682.prototype.getRefPointsForAlignment = function() {
            return [
                this.getLeftEye(),
                this.getRightEye(),
                this.getMouth()
            ].map(getCenterPoint);
        };
        return FaceLandmarks682;
    }(FaceLandmarks);
    var FaceMatch = function() {
        function FaceMatch1(label, distance) {
            this._label = label;
            this._distance = distance;
        }
        Object.defineProperty(FaceMatch1.prototype, "label", {
            get: function() {
                return this._label;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FaceMatch1.prototype, "distance", {
            get: function() {
                return this._distance;
            },
            enumerable: true,
            configurable: true
        });
        FaceMatch1.prototype.toString = function(withDistance) {
            if (withDistance === void 0) withDistance = true;
            return "" + this.label + (withDistance ? " (" + round(this.distance) + ")" : '');
        };
        return FaceMatch1;
    }();
    var LabeledBox1 = function(_super) {
        __extends(LabeledBox2, _super);
        function LabeledBox2(box, label) {
            var _this = _super.call(this, box) || this;
            _this._label = label;
            return _this;
        }
        LabeledBox2.assertIsValidLabeledBox = function(box, callee) {
            Box.assertIsValidBox(box, callee);
            if (!isValidNumber(box.label)) throw new Error(callee + " - expected property label (" + box.label + ") to be a number");
        };
        Object.defineProperty(LabeledBox2.prototype, "label", {
            get: function() {
                return this._label;
            },
            enumerable: true,
            configurable: true
        });
        return LabeledBox2;
    }(Box);
    var LabeledFaceDescriptors = function() {
        function LabeledFaceDescriptors1(label, descriptors) {
            if (!(typeof label === 'string')) throw new Error('LabeledFaceDescriptors - constructor expected label to be a string');
            if (!Array.isArray(descriptors) || descriptors.some(function(desc) {
                return !(desc instanceof Float32Array);
            })) throw new Error('LabeledFaceDescriptors - constructor expected descriptors to be an array of Float32Array');
            this._label = label;
            this._descriptors = descriptors;
        }
        Object.defineProperty(LabeledFaceDescriptors1.prototype, "label", {
            get: function() {
                return this._label;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LabeledFaceDescriptors1.prototype, "descriptors", {
            get: function() {
                return this._descriptors;
            },
            enumerable: true,
            configurable: true
        });
        LabeledFaceDescriptors1.prototype.toJSON = function() {
            return {
                label: this.label,
                descriptors: this.descriptors.map(function(d24) {
                    return Array.from(d24);
                })
            };
        };
        LabeledFaceDescriptors1.fromJSON = function(json) {
            var descriptors = json.descriptors.map(function(d24) {
                return new Float32Array(d24);
            });
            return new LabeledFaceDescriptors1(json.label, descriptors);
        };
        return LabeledFaceDescriptors1;
    }();
    var PredictedBox1 = function(_super) {
        __extends(PredictedBox2, _super);
        function PredictedBox2(box, label, score, classScore) {
            var _this = _super.call(this, box, label) || this;
            _this._score = score;
            _this._classScore = classScore;
            return _this;
        }
        PredictedBox2.assertIsValidPredictedBox = function(box, callee) {
            LabeledBox1.assertIsValidLabeledBox(box, callee);
            if (!isValidProbablitiy(box.score) || !isValidProbablitiy(box.classScore)) throw new Error(callee + " - expected properties score (" + box.score + ") and (" + box.classScore + ") to be a number between [0, 1]");
        };
        Object.defineProperty(PredictedBox2.prototype, "score", {
            get: function() {
                return this._score;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PredictedBox2.prototype, "classScore", {
            get: function() {
                return this._classScore;
            },
            enumerable: true,
            configurable: true
        });
        return PredictedBox2;
    }(LabeledBox1);
    function isWithFaceDetection(obj) {
        return obj['detection'] instanceof FaceDetection1;
    }
    function extendWithFaceDetection(sourceObj, detection) {
        var extension = {
            detection: detection
        };
        return Object.assign({
        }, sourceObj, extension);
    }
    function createBrowserEnv() {
        var fetch = window['fetch'] || function() {
            throw new Error('fetch - missing fetch implementation for browser environment');
        };
        var readFile = function() {
            throw new Error('readFile - filesystem not available for browser environment');
        };
        return {
            Canvas: HTMLCanvasElement,
            CanvasRenderingContext2D: CanvasRenderingContext2D,
            Image: HTMLImageElement,
            ImageData: ImageData,
            Video: HTMLVideoElement,
            createCanvasElement: function() {
                return document.createElement('canvas');
            },
            createImageElement: function() {
                return document.createElement('img');
            },
            fetch: fetch,
            readFile: readFile
        };
    }
    function createFileSystem(fs1) {
        var requireFsError = '';
        if (!fs1) try {
            fs1 = require('fs');
        } catch (err) {
            requireFsError = err.toString();
        }
        var readFile = fs1 ? function(filePath) {
            return new Promise(function(res, rej) {
                fs1.readFile(filePath, function(err, buffer) {
                    return err ? rej(err) : res(buffer);
                });
            });
        } : function() {
            throw new Error("readFile - failed to require fs in nodejs environment with error: " + requireFsError);
        };
        return {
            readFile: readFile
        };
    }
    function createNodejsEnv() {
        var Canvas = global['Canvas'] || global['HTMLCanvasElement'];
        var Image1 = global['Image'] || global['HTMLImageElement'];
        var createCanvasElement = function() {
            if (Canvas) return new Canvas();
            throw new Error('createCanvasElement - missing Canvas implementation for nodejs environment');
        };
        var createImageElement = function() {
            if (Image1) return new Image1();
            throw new Error('createImageElement - missing Image implementation for nodejs environment');
        };
        var fetch = global['fetch'] || function() {
            throw new Error('fetch - missing fetch implementation for nodejs environment');
        };
        var fileSystem = createFileSystem();
        return __assign({
            Canvas: Canvas || function() {
                function Canvas1() {
                }
                return Canvas1;
            }(),
            CanvasRenderingContext2D: global['CanvasRenderingContext2D'] || function() {
                function class_1() {
                }
                return class_1;
            }(),
            Image: Image1 || function() {
                function Image2() {
                }
                return Image2;
            }(),
            ImageData: global['ImageData'] || function() {
                function class_2() {
                }
                return class_2;
            }(),
            Video: global['HTMLVideoElement'] || function() {
                function class_3() {
                }
                return class_3;
            }(),
            createCanvasElement: createCanvasElement,
            createImageElement: createImageElement,
            fetch: fetch
        }, fileSystem);
    }
    function isBrowser() {
        return typeof window === 'object' && typeof document !== 'undefined' && typeof HTMLImageElement !== 'undefined' && typeof HTMLCanvasElement !== 'undefined' && typeof HTMLVideoElement !== 'undefined' && typeof ImageData !== 'undefined' && typeof CanvasRenderingContext2D !== 'undefined';
    }
    function isNodejs() {
        return typeof global === 'object' && typeof require === 'function' && typeof module !== 'undefined' && typeof process !== 'undefined' && !!process.version;
    }
    var environment;
    function getEnv() {
        if (!environment) throw new Error('getEnv - environment is not defined, check isNodejs() and isBrowser()');
        return environment;
    }
    function setEnv(env) {
        environment = env;
    }
    function initialize() {
        // check for isBrowser() first to prevent electron renderer process
        // to be initialized with wrong environment due to isNodejs() returning true
        if (isBrowser()) setEnv(createBrowserEnv());
        if (isNodejs()) setEnv(createNodejsEnv());
    }
    function monkeyPatch(env) {
        if (!environment) initialize();
        if (!environment) throw new Error('monkeyPatch - environment is not defined, check isNodejs() and isBrowser()');
        var _a1 = env.Canvas, Canvas = _a1 === void 0 ? environment.Canvas : _a1, _b = env.Image, Image1 = _b === void 0 ? environment.Image : _b;
        environment.Canvas = Canvas;
        environment.Image = Image1;
        environment.createCanvasElement = env.createCanvasElement || function() {
            return new Canvas();
        };
        environment.createImageElement = env.createImageElement || function() {
            return new Image1();
        };
        environment.ImageData = env.ImageData || environment.ImageData;
        environment.Video = env.Video || environment.Video;
        environment.fetch = env.fetch || environment.fetch;
        environment.readFile = env.readFile || environment.readFile;
    }
    var env = {
        getEnv: getEnv,
        setEnv: setEnv,
        initialize: initialize,
        createBrowserEnv: createBrowserEnv,
        createFileSystem: createFileSystem,
        createNodejsEnv: createNodejsEnv,
        monkeyPatch: monkeyPatch,
        isBrowser: isBrowser,
        isNodejs: isNodejs
    };
    initialize();
    function resolveInput(arg) {
        if (!env.isNodejs() && typeof arg === 'string') return document.getElementById(arg);
        return arg;
    }
    function getContext2dOrThrow(canvasArg) {
        var _a1 = env.getEnv(), Canvas = _a1.Canvas, CanvasRenderingContext2D1 = _a1.CanvasRenderingContext2D;
        if (canvasArg instanceof CanvasRenderingContext2D1) return canvasArg;
        var canvas = resolveInput(canvasArg);
        if (!(canvas instanceof Canvas)) throw new Error('resolveContext2d - expected canvas to be of instance of Canvas');
        var ctx = canvas.getContext('2d');
        if (!ctx) throw new Error('resolveContext2d - canvas 2d context is null');
        return ctx;
    }
    var AnchorPosition;
    (function(AnchorPosition1) {
        AnchorPosition1["TOP_LEFT"] = "TOP_LEFT";
        AnchorPosition1["TOP_RIGHT"] = "TOP_RIGHT";
        AnchorPosition1["BOTTOM_LEFT"] = "BOTTOM_LEFT";
        AnchorPosition1["BOTTOM_RIGHT"] = "BOTTOM_RIGHT";
    })(AnchorPosition || (AnchorPosition = {
    }));
    var DrawTextFieldOptions = function() {
        function DrawTextFieldOptions1(options) {
            if (options === void 0) options = {
            };
            var anchorPosition = options.anchorPosition, backgroundColor = options.backgroundColor, fontColor = options.fontColor, fontSize = options.fontSize, fontStyle = options.fontStyle, padding = options.padding;
            this.anchorPosition = anchorPosition || AnchorPosition.TOP_LEFT;
            this.backgroundColor = backgroundColor || 'rgba(0, 0, 0, 0.5)';
            this.fontColor = fontColor || 'rgba(255, 255, 255, 1)';
            this.fontSize = fontSize || 14;
            this.fontStyle = fontStyle || 'Georgia';
            this.padding = padding || 4;
        }
        return DrawTextFieldOptions1;
    }();
    var DrawTextField = function() {
        function DrawTextField1(text, anchor, options) {
            if (options === void 0) options = {
            };
            this.text = typeof text === 'string' ? [
                text
            ] : text instanceof DrawTextField1 ? text.text : text;
            this.anchor = anchor;
            this.options = new DrawTextFieldOptions(options);
        }
        DrawTextField1.prototype.measureWidth = function(ctx) {
            var padding = this.options.padding;
            return this.text.map(function(l33) {
                return ctx.measureText(l33).width;
            }).reduce(function(w0, w12) {
                return w0 < w12 ? w12 : w0;
            }, 0) + 2 * padding;
        };
        DrawTextField1.prototype.measureHeight = function() {
            var _a1 = this.options, fontSize = _a1.fontSize, padding = _a1.padding;
            return this.text.length * fontSize + 2 * padding;
        };
        DrawTextField1.prototype.getUpperLeft = function(ctx, canvasDims) {
            var anchorPosition = this.options.anchorPosition;
            var isShiftLeft = anchorPosition === AnchorPosition.BOTTOM_RIGHT || anchorPosition === AnchorPosition.TOP_RIGHT;
            var isShiftTop = anchorPosition === AnchorPosition.BOTTOM_LEFT || anchorPosition === AnchorPosition.BOTTOM_RIGHT;
            var textFieldWidth = this.measureWidth(ctx);
            var textFieldHeight = this.measureHeight();
            var x12 = isShiftLeft ? this.anchor.x - textFieldWidth : this.anchor.x;
            var y13 = isShiftTop ? this.anchor.y - textFieldHeight : this.anchor.y;
            // adjust anchor if text box exceeds canvas borders
            if (canvasDims) {
                var width = canvasDims.width, height = canvasDims.height;
                var newX = Math.max(Math.min(x12, width - textFieldWidth), 0);
                var newY = Math.max(Math.min(y13, height - textFieldHeight), 0);
                return {
                    x: newX,
                    y: newY
                };
            }
            return {
                x: x12,
                y: y13
            };
        };
        DrawTextField1.prototype.draw = function(canvasArg) {
            var canvas = resolveInput(canvasArg);
            var ctx = getContext2dOrThrow(canvas);
            var _a1 = this.options, backgroundColor = _a1.backgroundColor, fontColor = _a1.fontColor, fontSize = _a1.fontSize, fontStyle = _a1.fontStyle, padding = _a1.padding;
            ctx.font = fontSize + "px " + fontStyle;
            var maxTextWidth = this.measureWidth(ctx);
            var textHeight = this.measureHeight();
            ctx.fillStyle = backgroundColor;
            var upperLeft = this.getUpperLeft(ctx, canvas);
            ctx.fillRect(upperLeft.x, upperLeft.y, maxTextWidth, textHeight);
            ctx.fillStyle = fontColor;
            this.text.forEach(function(textLine, i41) {
                var x12 = padding + upperLeft.x;
                var y13 = padding + upperLeft.y + (i41 + 1) * fontSize;
                ctx.fillText(textLine, x12, y13);
            });
        };
        return DrawTextField1;
    }();
    var DrawBoxOptions = function() {
        function DrawBoxOptions1(options) {
            if (options === void 0) options = {
            };
            var boxColor = options.boxColor, lineWidth = options.lineWidth, label = options.label, drawLabelOptions = options.drawLabelOptions;
            this.boxColor = boxColor || 'rgba(0, 0, 255, 1)';
            this.lineWidth = lineWidth || 2;
            this.label = label;
            var defaultDrawLabelOptions = {
                anchorPosition: AnchorPosition.BOTTOM_LEFT,
                backgroundColor: this.boxColor
            };
            this.drawLabelOptions = new DrawTextFieldOptions(Object.assign({
            }, defaultDrawLabelOptions, drawLabelOptions));
        }
        return DrawBoxOptions1;
    }();
    var DrawBox = function() {
        function DrawBox1(box, options) {
            if (options === void 0) options = {
            };
            this.box = new Box(box);
            this.options = new DrawBoxOptions(options);
        }
        DrawBox1.prototype.draw = function(canvasArg) {
            var ctx = getContext2dOrThrow(canvasArg);
            var _a1 = this.options, boxColor = _a1.boxColor, lineWidth = _a1.lineWidth;
            var _b = this.box, x12 = _b.x, y13 = _b.y, width = _b.width, height = _b.height;
            ctx.strokeStyle = boxColor;
            ctx.lineWidth = lineWidth;
            ctx.strokeRect(x12, y13, width, height);
            var label = this.options.label;
            if (label) new DrawTextField([
                label
            ], {
                x: x12 - lineWidth / 2,
                y: y13
            }, this.options.drawLabelOptions).draw(canvasArg);
        };
        return DrawBox1;
    }();
    function drawDetections(canvasArg, detections) {
        var detectionsArray = Array.isArray(detections) ? detections : [
            detections
        ];
        detectionsArray.forEach(function(det) {
            var score = det instanceof FaceDetection1 ? det.score : isWithFaceDetection(det) ? det.detection.score : undefined;
            var box = det instanceof FaceDetection1 ? det.box : isWithFaceDetection(det) ? det.detection.box : new Box(det);
            var label = score ? "" + round(score) : undefined;
            new DrawBox(box, {
                label: label
            }).draw(canvasArg);
        });
    }
    function isMediaLoaded(media) {
        var _a1 = env.getEnv(), Image1 = _a1.Image, Video = _a1.Video;
        return media instanceof Image1 && media.complete || media instanceof Video && media.readyState >= 3;
    }
    function awaitMediaLoaded(media) {
        return new Promise(function(resolve, reject) {
            if (media instanceof env.getEnv().Canvas || isMediaLoaded(media)) return resolve();
            function onLoad(e16) {
                if (!e16.currentTarget) return;
                e16.currentTarget.removeEventListener('load', onLoad);
                e16.currentTarget.removeEventListener('error', onError);
                resolve(e16);
            }
            function onError(e16) {
                if (!e16.currentTarget) return;
                e16.currentTarget.removeEventListener('load', onLoad);
                e16.currentTarget.removeEventListener('error', onError);
                reject(e16);
            }
            media.addEventListener('load', onLoad);
            media.addEventListener('error', onError);
        });
    }
    function bufferToImage(buf) {
        return new Promise(function(resolve, reject) {
            if (!(buf instanceof Blob)) return reject('bufferToImage - expected buf to be of type: Blob');
            var reader = new FileReader();
            reader.onload = function() {
                if (typeof reader.result !== 'string') return reject('bufferToImage - expected reader.result to be a string, in onload');
                var img = env.getEnv().createImageElement();
                img.onload = function() {
                    return resolve(img);
                };
                img.onerror = reject;
                img.src = reader.result;
            };
            reader.onerror = reject;
            reader.readAsDataURL(buf);
        });
    }
    function getMediaDimensions(input) {
        var _a1 = env.getEnv(), Image1 = _a1.Image, Video = _a1.Video;
        if (input instanceof Image1) return new Dimensions(input.naturalWidth, input.naturalHeight);
        if (input instanceof Video) return new Dimensions(input.videoWidth, input.videoHeight);
        return new Dimensions(input.width, input.height);
    }
    function createCanvas(_a1) {
        var width = _a1.width, height = _a1.height;
        var createCanvasElement = env.getEnv().createCanvasElement;
        var canvas = createCanvasElement();
        canvas.width = width;
        canvas.height = height;
        return canvas;
    }
    function createCanvasFromMedia(media, dims) {
        var ImageData1 = env.getEnv().ImageData;
        if (!(media instanceof ImageData1) && !isMediaLoaded(media)) throw new Error('createCanvasFromMedia - media has not finished loading yet');
        var _a1 = dims || getMediaDimensions(media), width = _a1.width, height = _a1.height;
        var canvas = createCanvas({
            width: width,
            height: height
        });
        if (media instanceof ImageData1) getContext2dOrThrow(canvas).putImageData(media, 0, 0);
        else getContext2dOrThrow(canvas).drawImage(media, 0, 0, width, height);
        return canvas;
    }
    function imageTensorToCanvas(imgTensor, canvas) {
        return __awaiter(this, void 0, void 0, function() {
            var targetCanvas, _a1, height, width, numChannels, imgTensor3D;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        targetCanvas = canvas || env.getEnv().createCanvasElement();
                        _a1 = imgTensor.shape.slice(isTensor4D(imgTensor) ? 1 : 0), height = _a1[0], width = _a1[1], numChannels = _a1[2];
                        imgTensor3D = Ze(function() {
                            return imgTensor.as3D(height, width, numChannels).toInt();
                        });
                        return [
                            4 /*yield*/ ,
                            id.toPixels(imgTensor3D, targetCanvas)
                        ];
                    case 1:
                        _b.sent();
                        imgTensor3D.dispose();
                        return [
                            2 /*return*/ ,
                            targetCanvas
                        ];
                }
            });
        });
    }
    function isMediaElement(input) {
        var _a1 = env.getEnv(), Image1 = _a1.Image, Canvas = _a1.Canvas, Video = _a1.Video;
        return input instanceof Image1 || input instanceof Canvas || input instanceof Video;
    }
    function imageToSquare(input, inputSize, centerImage) {
        if (centerImage === void 0) centerImage = false;
        var _a1 = env.getEnv(), Image1 = _a1.Image, Canvas = _a1.Canvas;
        if (!(input instanceof Image1 || input instanceof Canvas)) throw new Error('imageToSquare - expected arg0 to be HTMLImageElement | HTMLCanvasElement');
        var dims = getMediaDimensions(input);
        var scale = inputSize / Math.max(dims.height, dims.width);
        var width = scale * dims.width;
        var height = scale * dims.height;
        var targetCanvas = createCanvas({
            width: inputSize,
            height: inputSize
        });
        var inputCanvas = input instanceof Canvas ? input : createCanvasFromMedia(input);
        var offset = Math.abs(width - height) / 2;
        var dx = centerImage && width < height ? offset : 0;
        var dy = centerImage && height < width ? offset : 0;
        getContext2dOrThrow(targetCanvas).drawImage(inputCanvas, dx, dy, width, height);
        return targetCanvas;
    }
    var NetInput = function() {
        function NetInput1(inputs, treatAsBatchInput) {
            var _this = this;
            if (treatAsBatchInput === void 0) treatAsBatchInput = false;
            this._imageTensors = [];
            this._canvases = [];
            this._treatAsBatchInput = false;
            this._inputDimensions = [];
            if (!Array.isArray(inputs)) throw new Error("NetInput.constructor - expected inputs to be an Array of TResolvedNetInput or to be instanceof tf.Tensor4D, instead have " + inputs);
            this._treatAsBatchInput = treatAsBatchInput;
            this._batchSize = inputs.length;
            inputs.forEach(function(input, idx) {
                if (isTensor3D(input)) {
                    _this._imageTensors[idx] = input;
                    _this._inputDimensions[idx] = input.shape;
                    return;
                }
                if (isTensor4D(input)) {
                    var batchSize = input.shape[0];
                    if (batchSize !== 1) throw new Error("NetInput - tf.Tensor4D with batchSize " + batchSize + " passed, but not supported in input array");
                    _this._imageTensors[idx] = input;
                    _this._inputDimensions[idx] = input.shape.slice(1);
                    return;
                }
                var canvas = input instanceof env.getEnv().Canvas ? input : createCanvasFromMedia(input);
                _this._canvases[idx] = canvas;
                _this._inputDimensions[idx] = [
                    canvas.height,
                    canvas.width,
                    3
                ];
            });
        }
        Object.defineProperty(NetInput1.prototype, "imageTensors", {
            get: function() {
                return this._imageTensors;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NetInput1.prototype, "canvases", {
            get: function() {
                return this._canvases;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NetInput1.prototype, "isBatchInput", {
            get: function() {
                return this.batchSize > 1 || this._treatAsBatchInput;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NetInput1.prototype, "batchSize", {
            get: function() {
                return this._batchSize;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NetInput1.prototype, "inputDimensions", {
            get: function() {
                return this._inputDimensions;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NetInput1.prototype, "inputSize", {
            get: function() {
                return this._inputSize;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NetInput1.prototype, "reshapedInputDimensions", {
            get: function() {
                var _this = this;
                return range(this.batchSize, 0, 1).map(function(_11, batchIdx) {
                    return _this.getReshapedInputDimensions(batchIdx);
                });
            },
            enumerable: true,
            configurable: true
        });
        NetInput1.prototype.getInput = function(batchIdx) {
            return this.canvases[batchIdx] || this.imageTensors[batchIdx];
        };
        NetInput1.prototype.getInputDimensions = function(batchIdx) {
            return this._inputDimensions[batchIdx];
        };
        NetInput1.prototype.getInputHeight = function(batchIdx) {
            return this._inputDimensions[batchIdx][0];
        };
        NetInput1.prototype.getInputWidth = function(batchIdx) {
            return this._inputDimensions[batchIdx][1];
        };
        NetInput1.prototype.getReshapedInputDimensions = function(batchIdx) {
            if (typeof this.inputSize !== 'number') throw new Error('getReshapedInputDimensions - inputSize not set, toBatchTensor has not been called yet');
            var width = this.getInputWidth(batchIdx);
            var height = this.getInputHeight(batchIdx);
            return computeReshapedDimensions({
                width: width,
                height: height
            }, this.inputSize);
        };
        /**
       * Create a batch tensor from all input canvases and tensors
       * with size [batchSize, inputSize, inputSize, 3].
       *
       * @param inputSize Height and width of the tensor.
       * @param isCenterImage (optional, default: false) If true, add an equal amount of padding on
       * both sides of the minor dimension oof the image.
       * @returns The batch tensor.
       */ NetInput1.prototype.toBatchTensor = function(inputSize, isCenterInputs) {
            var _this = this;
            if (isCenterInputs === void 0) isCenterInputs = true;
            this._inputSize = inputSize;
            return Ze(function() {
                var inputTensors = range(_this.batchSize, 0, 1).map(function(batchIdx) {
                    var input = _this.getInput(batchIdx);
                    if (input instanceof wt) {
                        var imgTensor = isTensor4D(input) ? input : input.expandDims();
                        imgTensor = padToSquare(imgTensor, isCenterInputs);
                        if (imgTensor.shape[1] !== inputSize || imgTensor.shape[2] !== inputSize) imgTensor = Oh.resizeBilinear(imgTensor, [
                            inputSize,
                            inputSize
                        ]);
                        return imgTensor.as3D(inputSize, inputSize, 3);
                    }
                    if (input instanceof env.getEnv().Canvas) return id.fromPixels(imageToSquare(input, inputSize, isCenterInputs));
                    throw new Error("toBatchTensor - at batchIdx " + batchIdx + ", expected input to be instanceof tf.Tensor or instanceof HTMLCanvasElement, instead have " + input);
                });
                var batchTensor = Pr(inputTensors.map(function(t1) {
                    return t1.toFloat();
                })).as4D(_this.batchSize, inputSize, inputSize, 3);
                return batchTensor;
            });
        };
        return NetInput1;
    }();
    /**
   * Validates the input to make sure, they are valid net inputs and awaits all media elements
   * to be finished loading.
   *
   * @param input The input, which can be a media element or an array of different media elements.
   * @returns A NetInput instance, which can be passed into one of the neural networks.
   */ function toNetInput(inputs) {
        return __awaiter(this, void 0, void 0, function() {
            var inputArgArray, getIdxHint, inputArray;
            return __generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        if (inputs instanceof NetInput) return [
                            2 /*return*/ ,
                            inputs
                        ];
                        inputArgArray = Array.isArray(inputs) ? inputs : [
                            inputs
                        ];
                        if (!inputArgArray.length) throw new Error('toNetInput - empty array passed as input');
                        getIdxHint = function(idx) {
                            return Array.isArray(inputs) ? " at input index " + idx + ":" : '';
                        };
                        inputArray = inputArgArray.map(resolveInput);
                        inputArray.forEach(function(input, i41) {
                            if (!isMediaElement(input) && !isTensor3D(input) && !isTensor4D(input)) {
                                if (typeof inputArgArray[i41] === 'string') throw new Error("toNetInput -" + getIdxHint(i41) + " string passed, but could not resolve HTMLElement for element id " + inputArgArray[i41]);
                                throw new Error("toNetInput -" + getIdxHint(i41) + " expected media to be of type HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | tf.Tensor3D, or to be an element id");
                            }
                            if (isTensor4D(input)) {
                                // if tf.Tensor4D is passed in the input array, the batch size has to be 1
                                var batchSize = input.shape[0];
                                if (batchSize !== 1) throw new Error("toNetInput -" + getIdxHint(i41) + " tf.Tensor4D with batchSize " + batchSize + " passed, but not supported in input array");
                            }
                        });
                        // wait for all media elements being loaded
                        return [
                            4 /*yield*/ ,
                            Promise.all(inputArray.map(function(input) {
                                return isMediaElement(input) && awaitMediaLoaded(input);
                            }))
                        ];
                    case 1:
                        // wait for all media elements being loaded
                        _a1.sent();
                        return [
                            2 /*return*/ ,
                            new NetInput(inputArray, Array.isArray(inputs))
                        ];
                }
            });
        });
    }
    /**
   * Extracts the image regions containing the detected faces.
   *
   * @param input The image that face detection has been performed on.
   * @param detections The face detection results or face bounding boxes for that image.
   * @returns The Canvases of the corresponding image region for each detected face.
   */ function extractFaces(input, detections) {
        return __awaiter(this, void 0, void 0, function() {
            var Canvas, canvas, netInput, tensorOrCanvas, _a1, ctx, boxes;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        Canvas = env.getEnv().Canvas;
                        canvas = input;
                        if (!!(input instanceof Canvas)) return [
                            3 /*break*/ ,
                            5
                        ];
                        return [
                            4 /*yield*/ ,
                            toNetInput(input)
                        ];
                    case 1:
                        netInput = _b.sent();
                        if (netInput.batchSize > 1) throw new Error('extractFaces - batchSize > 1 not supported');
                        tensorOrCanvas = netInput.getInput(0);
                        if (!(tensorOrCanvas instanceof Canvas)) return [
                            3 /*break*/ ,
                            2
                        ];
                        _a1 = tensorOrCanvas;
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 2:
                        return [
                            4 /*yield*/ ,
                            imageTensorToCanvas(tensorOrCanvas)
                        ];
                    case 3:
                        _a1 = _b.sent();
                        _b.label = 4;
                    case 4:
                        canvas = _a1;
                        _b.label = 5;
                    case 5:
                        ctx = getContext2dOrThrow(canvas);
                        boxes = detections.map(function(det) {
                            return det instanceof FaceDetection1 ? det.forSize(canvas.width, canvas.height).box.floor() : det;
                        }).map(function(box) {
                            return box.clipAtImageBorders(canvas.width, canvas.height);
                        });
                        return [
                            2 /*return*/ ,
                            boxes.map(function(_a2) {
                                var x12 = _a2.x, y13 = _a2.y, width = _a2.width, height = _a2.height;
                                var faceImg = createCanvas({
                                    width: width,
                                    height: height
                                });
                                getContext2dOrThrow(faceImg).putImageData(ctx.getImageData(x12, y13, width, height), 0, 0);
                                return faceImg;
                            })
                        ];
                }
            });
        });
    }
    /**
   * Extracts the tensors of the image regions containing the detected faces.
   * Useful if you want to compute the face descriptors for the face images.
   * Using this method is faster then extracting a canvas for each face and
   * converting them to tensors individually.
   *
   * @param imageTensor The image tensor that face detection has been performed on.
   * @param detections The face detection results or face bounding boxes for that image.
   * @returns Tensors of the corresponding image region for each detected face.
   */ function extractFaceTensors(imageTensor, detections) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a1) {
                if (!isTensor3D(imageTensor) && !isTensor4D(imageTensor)) throw new Error('extractFaceTensors - expected image tensor to be 3D or 4D');
                if (isTensor4D(imageTensor) && imageTensor.shape[0] > 1) throw new Error('extractFaceTensors - batchSize > 1 not supported');
                return [
                    2 /*return*/ ,
                    Ze(function() {
                        var _a2 = imageTensor.shape.slice(isTensor4D(imageTensor) ? 1 : 0), imgHeight = _a2[0], imgWidth = _a2[1], numChannels = _a2[2];
                        var boxes = detections.map(function(det) {
                            return det instanceof FaceDetection1 ? det.forSize(imgWidth, imgHeight).box : det;
                        }).map(function(box) {
                            return box.clipAtImageBorders(imgWidth, imgHeight);
                        });
                        var faceTensors = boxes.map(function(_a3) {
                            var x12 = _a3.x, y13 = _a3.y, width = _a3.width, height = _a3.height;
                            return xl(imageTensor.as3D(imgHeight, imgWidth, numChannels), [
                                y13,
                                x12,
                                0
                            ], [
                                height,
                                width,
                                numChannels
                            ]);
                        });
                        return faceTensors;
                    })
                ];
            });
        });
    }
    function fetchOrThrow(url, init) {
        return __awaiter(this, void 0, void 0, function() {
            var fetch, res;
            return __generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        fetch = env.getEnv().fetch;
                        return [
                            4 /*yield*/ ,
                            fetch(url, init)
                        ];
                    case 1:
                        res = _a1.sent();
                        if (!(res.status < 400)) throw new Error("failed to fetch: (" + res.status + ") " + res.statusText + ", from url: " + res.url);
                        return [
                            2 /*return*/ ,
                            res
                        ];
                }
            });
        });
    }
    function fetchImage(uri) {
        return __awaiter(this, void 0, void 0, function() {
            var res, blob;
            return __generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            fetchOrThrow(uri)
                        ];
                    case 1:
                        res = _a1.sent();
                        return [
                            4 /*yield*/ ,
                            res.blob()
                        ];
                    case 2:
                        blob = _a1.sent();
                        if (!blob.type.startsWith('image/')) throw new Error("fetchImage - expected blob type to be of type image/*, instead have: " + blob.type + ", for url: " + res.url);
                        return [
                            2 /*return*/ ,
                            bufferToImage(blob)
                        ];
                }
            });
        });
    }
    function fetchJson(uri) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            fetchOrThrow(uri)
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _a1.sent().json()
                        ];
                }
            });
        });
    }
    function fetchNetWeights(uri) {
        return __awaiter(this, void 0, void 0, function() {
            var _a1;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        _a1 = Float32Array.bind;
                        return [
                            4 /*yield*/ ,
                            fetchOrThrow(uri)
                        ];
                    case 1:
                        return [
                            4 /*yield*/ ,
                            _b.sent().arrayBuffer()
                        ];
                    case 2:
                        return [
                            2 /*return*/ ,
                            new (_a1.apply(Float32Array, [
                                void 0,
                                _b.sent()
                            ]))()
                        ];
                }
            });
        });
    }
    function getModelUris(uri, defaultModelName) {
        var defaultManifestFilename = defaultModelName + "-weights_manifest.json";
        if (!uri) return {
            modelBaseUri: '',
            manifestUri: defaultManifestFilename
        };
        if (uri === '/') return {
            modelBaseUri: '/',
            manifestUri: "/" + defaultManifestFilename
        };
        var protocol = uri.startsWith('http://') ? 'http://' : uri.startsWith('https://') ? 'https://' : '';
        uri = uri.replace(protocol, '');
        var parts = uri.split('/').filter(function(s37) {
            return s37;
        });
        var manifestFile = uri.endsWith('.json') ? parts[parts.length - 1] : defaultManifestFilename;
        var modelBaseUri = protocol + (uri.endsWith('.json') ? parts.slice(0, parts.length - 1) : parts).join('/');
        modelBaseUri = uri.startsWith('/') ? "/" + modelBaseUri : modelBaseUri;
        return {
            modelBaseUri: modelBaseUri,
            manifestUri: modelBaseUri === '/' ? "/" + manifestFile : modelBaseUri + "/" + manifestFile
        };
    }
    function loadWeightMap(uri, defaultModelName) {
        return __awaiter(this, void 0, void 0, function() {
            var _a1, manifestUri, modelBaseUri, manifest;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        _a1 = getModelUris(uri, defaultModelName), manifestUri = _a1.manifestUri, modelBaseUri = _a1.modelBaseUri;
                        return [
                            4 /*yield*/ ,
                            fetchJson(manifestUri)
                        ];
                    case 1:
                        manifest = _b.sent();
                        return [
                            2 /*return*/ ,
                            ed.loadWeights(manifest, modelBaseUri)
                        ];
                }
            });
        });
    }
    function matchDimensions(input, reference, useMediaDimensions) {
        if (useMediaDimensions === void 0) useMediaDimensions = false;
        var _a1 = useMediaDimensions ? getMediaDimensions(reference) : reference, width = _a1.width, height = _a1.height;
        input.width = width;
        input.height = height;
        return {
            width: width,
            height: height
        };
    }
    var NeuralNetwork = function() {
        function NeuralNetwork1(_name) {
            this._name = _name;
            this._params = undefined;
            this._paramMappings = [];
        }
        Object.defineProperty(NeuralNetwork1.prototype, "params", {
            get: function() {
                return this._params;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NeuralNetwork1.prototype, "paramMappings", {
            get: function() {
                return this._paramMappings;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NeuralNetwork1.prototype, "isLoaded", {
            get: function() {
                return !!this.params;
            },
            enumerable: true,
            configurable: true
        });
        NeuralNetwork1.prototype.getParamFromPath = function(paramPath) {
            var _a1 = this.traversePropertyPath(paramPath), obj = _a1.obj, objProp = _a1.objProp;
            return obj[objProp];
        };
        NeuralNetwork1.prototype.reassignParamFromPath = function(paramPath, tensor) {
            var _a1 = this.traversePropertyPath(paramPath), obj = _a1.obj, objProp = _a1.objProp;
            obj[objProp].dispose();
            obj[objProp] = tensor;
        };
        NeuralNetwork1.prototype.getParamList = function() {
            var _this = this;
            return this._paramMappings.map(function(_a1) {
                var paramPath = _a1.paramPath;
                return {
                    path: paramPath,
                    tensor: _this.getParamFromPath(paramPath)
                };
            });
        };
        NeuralNetwork1.prototype.getTrainableParams = function() {
            return this.getParamList().filter(function(param) {
                return param.tensor instanceof St;
            });
        };
        NeuralNetwork1.prototype.getFrozenParams = function() {
            return this.getParamList().filter(function(param) {
                return !(param.tensor instanceof St);
            });
        };
        NeuralNetwork1.prototype.variable = function() {
            var _this = this;
            this.getFrozenParams().forEach(function(_a1) {
                var path = _a1.path, tensor = _a1.tensor;
                _this.reassignParamFromPath(path, tensor.variable());
            });
        };
        NeuralNetwork1.prototype.freeze = function() {
            var _this = this;
            this.getTrainableParams().forEach(function(_a1) {
                var path = _a1.path, variable = _a1.tensor;
                var tensor = Fn(variable.dataSync());
                variable.dispose();
                _this.reassignParamFromPath(path, tensor);
            });
        };
        NeuralNetwork1.prototype.dispose = function(throwOnRedispose) {
            if (throwOnRedispose === void 0) throwOnRedispose = true;
            this.getParamList().forEach(function(param) {
                if (throwOnRedispose && param.tensor.isDisposed) throw new Error("param tensor has already been disposed for path " + param.path);
                param.tensor.dispose();
            });
            this._params = undefined;
        };
        NeuralNetwork1.prototype.serializeParams = function() {
            return new Float32Array(this.getParamList().map(function(_a1) {
                var tensor = _a1.tensor;
                return Array.from(tensor.dataSync());
            }).reduce(function(flat, arr) {
                return flat.concat(arr);
            }));
        };
        NeuralNetwork1.prototype.load = function(weightsOrUrl) {
            return __awaiter(this, void 0, void 0, function() {
                return __generator(this, function(_a1) {
                    switch(_a1.label){
                        case 0:
                            if (weightsOrUrl instanceof Float32Array) {
                                this.extractWeights(weightsOrUrl);
                                return [
                                    2 /*return*/ 
                                ];
                            }
                            return [
                                4 /*yield*/ ,
                                this.loadFromUri(weightsOrUrl)
                            ];
                        case 1:
                            _a1.sent();
                            return [
                                2 /*return*/ 
                            ];
                    }
                });
            });
        };
        NeuralNetwork1.prototype.loadFromUri = function(uri) {
            return __awaiter(this, void 0, void 0, function() {
                var weightMap;
                return __generator(this, function(_a1) {
                    switch(_a1.label){
                        case 0:
                            if (uri && typeof uri !== 'string') throw new Error(this._name + ".loadFromUri - expected model uri");
                            return [
                                4 /*yield*/ ,
                                loadWeightMap(uri, this.getDefaultModelName())
                            ];
                        case 1:
                            weightMap = _a1.sent();
                            this.loadFromWeightMap(weightMap);
                            return [
                                2 /*return*/ 
                            ];
                    }
                });
            });
        };
        NeuralNetwork1.prototype.loadFromDisk = function(filePath) {
            return __awaiter(this, void 0, void 0, function() {
                var readFile, _a1, manifestUri, modelBaseUri, fetchWeightsFromDisk, loadWeights, manifest, _b, _c1, weightMap;
                return __generator(this, function(_d) {
                    switch(_d.label){
                        case 0:
                            if (filePath && typeof filePath !== 'string') throw new Error(this._name + ".loadFromDisk - expected model file path");
                            readFile = env.getEnv().readFile;
                            _a1 = getModelUris(filePath, this.getDefaultModelName()), manifestUri = _a1.manifestUri, modelBaseUri = _a1.modelBaseUri;
                            fetchWeightsFromDisk = function(filePaths) {
                                return Promise.all(filePaths.map(function(filePath1) {
                                    return readFile(filePath1).then(function(buf) {
                                        return buf.buffer;
                                    });
                                }));
                            };
                            loadWeights = ed.weightsLoaderFactory(fetchWeightsFromDisk);
                            _c1 = (_b = JSON).parse;
                            return [
                                4 /*yield*/ ,
                                readFile(manifestUri)
                            ];
                        case 1:
                            manifest = _c1.apply(_b, [
                                _d.sent().toString()
                            ]);
                            return [
                                4 /*yield*/ ,
                                loadWeights(manifest, modelBaseUri)
                            ];
                        case 2:
                            weightMap = _d.sent();
                            this.loadFromWeightMap(weightMap);
                            return [
                                2 /*return*/ 
                            ];
                    }
                });
            });
        };
        NeuralNetwork1.prototype.loadFromWeightMap = function(weightMap) {
            var _a1 = this.extractParamsFromWeigthMap(weightMap), paramMappings = _a1.paramMappings, params = _a1.params;
            this._paramMappings = paramMappings;
            this._params = params;
        };
        NeuralNetwork1.prototype.extractWeights = function(weights) {
            var _a1 = this.extractParams(weights), paramMappings = _a1.paramMappings, params = _a1.params;
            this._paramMappings = paramMappings;
            this._params = params;
        };
        NeuralNetwork1.prototype.traversePropertyPath = function(paramPath) {
            if (!this.params) throw new Error("traversePropertyPath - model has no loaded params");
            var result = paramPath.split('/').reduce(function(res, objProp) {
                if (!res.nextObj.hasOwnProperty(objProp)) throw new Error("traversePropertyPath - object does not have property " + objProp + ", for path " + paramPath);
                return {
                    obj: res.nextObj,
                    objProp: objProp,
                    nextObj: res.nextObj[objProp]
                };
            }, {
                nextObj: this.params
            });
            var obj = result.obj, objProp = result.objProp;
            if (!obj || !objProp || !(obj[objProp] instanceof wt)) throw new Error("traversePropertyPath - parameter is not a tensor, for path " + paramPath);
            return {
                obj: obj,
                objProp: objProp
            };
        };
        return NeuralNetwork1;
    }();
    function depthwiseSeparableConv(x12, params, stride) {
        return Ze(function() {
            var out = Jc(x12, params.depthwise_filter, params.pointwise_filter, stride, 'same');
            out = rc(out, params.bias);
            return out;
        });
    }
    function denseBlock3(x12, denseBlockParams, isFirstLayer) {
        if (isFirstLayer === void 0) isFirstLayer = false;
        return Ze(function() {
            var out1 = Bl(isFirstLayer ? rc(qc(x12, denseBlockParams.conv0.filters, [
                2,
                2
            ], 'same'), denseBlockParams.conv0.bias) : depthwiseSeparableConv(x12, denseBlockParams.conv0, [
                2,
                2
            ]));
            var out2 = depthwiseSeparableConv(out1, denseBlockParams.conv1, [
                1,
                1
            ]);
            var in3 = Bl(rc(out1, out2));
            var out3 = depthwiseSeparableConv(in3, denseBlockParams.conv2, [
                1,
                1
            ]);
            return Bl(rc(out1, rc(out2, out3)));
        });
    }
    function denseBlock4(x12, denseBlockParams, isFirstLayer, isScaleDown) {
        if (isFirstLayer === void 0) isFirstLayer = false;
        if (isScaleDown === void 0) isScaleDown = true;
        return Ze(function() {
            var out1 = Bl(isFirstLayer ? rc(qc(x12, denseBlockParams.conv0.filters, isScaleDown ? [
                2,
                2
            ] : [
                1,
                1
            ], 'same'), denseBlockParams.conv0.bias) : depthwiseSeparableConv(x12, denseBlockParams.conv0, isScaleDown ? [
                2,
                2
            ] : [
                1,
                1
            ]));
            var out2 = depthwiseSeparableConv(out1, denseBlockParams.conv1, [
                1,
                1
            ]);
            var in3 = Bl(rc(out1, out2));
            var out3 = depthwiseSeparableConv(in3, denseBlockParams.conv2, [
                1,
                1
            ]);
            var in4 = Bl(rc(out1, rc(out2, out3)));
            var out4 = depthwiseSeparableConv(in4, denseBlockParams.conv3, [
                1,
                1
            ]);
            return Bl(rc(out1, rc(out2, rc(out3, out4))));
        });
    }
    function convLayer(x12, params, padding, withRelu) {
        if (padding === void 0) padding = 'same';
        if (withRelu === void 0) withRelu = false;
        return Ze(function() {
            var out = rc(qc(x12, params.filters, [
                1,
                1
            ], padding), params.bias);
            return withRelu ? Bl(out) : out;
        });
    }
    function disposeUnusedWeightTensors(weightMap, paramMappings) {
        Object.keys(weightMap).forEach(function(path) {
            if (!paramMappings.some(function(pm) {
                return pm.originalPath === path;
            })) weightMap[path].dispose();
        });
    }
    function extractConvParamsFactory(extractWeights, paramMappings) {
        return function(channelsIn, channelsOut, filterSize, mappedPrefix) {
            var filters = Ln(extractWeights(channelsIn * channelsOut * filterSize * filterSize), [
                filterSize,
                filterSize,
                channelsIn,
                channelsOut
            ]);
            var bias = Mn(extractWeights(channelsOut));
            paramMappings.push({
                paramPath: mappedPrefix + "/filters"
            }, {
                paramPath: mappedPrefix + "/bias"
            });
            return {
                filters: filters,
                bias: bias
            };
        };
    }
    function extractFCParamsFactory(extractWeights, paramMappings) {
        return function(channelsIn, channelsOut, mappedPrefix) {
            var fc_weights = Bn(extractWeights(channelsIn * channelsOut), [
                channelsIn,
                channelsOut
            ]);
            var fc_bias = Mn(extractWeights(channelsOut));
            paramMappings.push({
                paramPath: mappedPrefix + "/weights"
            }, {
                paramPath: mappedPrefix + "/bias"
            });
            return {
                weights: fc_weights,
                bias: fc_bias
            };
        };
    }
    var SeparableConvParams = function() {
        function SeparableConvParams1(depthwise_filter, pointwise_filter, bias) {
            this.depthwise_filter = depthwise_filter;
            this.pointwise_filter = pointwise_filter;
            this.bias = bias;
        }
        return SeparableConvParams1;
    }();
    function extractSeparableConvParamsFactory(extractWeights, paramMappings) {
        return function(channelsIn, channelsOut, mappedPrefix) {
            var depthwise_filter = Ln(extractWeights(9 * channelsIn), [
                3,
                3,
                channelsIn,
                1
            ]);
            var pointwise_filter = Ln(extractWeights(channelsIn * channelsOut), [
                1,
                1,
                channelsIn,
                channelsOut
            ]);
            var bias = Mn(extractWeights(channelsOut));
            paramMappings.push({
                paramPath: mappedPrefix + "/depthwise_filter"
            }, {
                paramPath: mappedPrefix + "/pointwise_filter"
            }, {
                paramPath: mappedPrefix + "/bias"
            });
            return new SeparableConvParams(depthwise_filter, pointwise_filter, bias);
        };
    }
    function loadSeparableConvParamsFactory(extractWeightEntry) {
        return function(prefix) {
            var depthwise_filter = extractWeightEntry(prefix + "/depthwise_filter", 4);
            var pointwise_filter = extractWeightEntry(prefix + "/pointwise_filter", 4);
            var bias = extractWeightEntry(prefix + "/bias", 1);
            return new SeparableConvParams(depthwise_filter, pointwise_filter, bias);
        };
    }
    function extractWeightEntryFactory(weightMap, paramMappings) {
        return function(originalPath, paramRank, mappedPath) {
            var tensor = weightMap[originalPath];
            if (!isTensor(tensor, paramRank)) throw new Error("expected weightMap[" + originalPath + "] to be a Tensor" + paramRank + "D, instead have " + tensor);
            paramMappings.push({
                originalPath: originalPath,
                paramPath: mappedPath || originalPath
            });
            return tensor;
        };
    }
    function extractWeightsFactory(weights) {
        var remainingWeights = weights;
        function extractWeights(numWeights) {
            var ret = remainingWeights.slice(0, numWeights);
            remainingWeights = remainingWeights.slice(numWeights);
            return ret;
        }
        function getRemainingWeights() {
            return remainingWeights;
        }
        return {
            extractWeights: extractWeights,
            getRemainingWeights: getRemainingWeights
        };
    }
    function extractorsFactory(extractWeights, paramMappings) {
        var extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);
        var extractSeparableConvParams = extractSeparableConvParamsFactory(extractWeights, paramMappings);
        function extractDenseBlock3Params(channelsIn, channelsOut, mappedPrefix, isFirstLayer) {
            if (isFirstLayer === void 0) isFirstLayer = false;
            var conv0 = isFirstLayer ? extractConvParams(channelsIn, channelsOut, 3, mappedPrefix + "/conv0") : extractSeparableConvParams(channelsIn, channelsOut, mappedPrefix + "/conv0");
            var conv1 = extractSeparableConvParams(channelsOut, channelsOut, mappedPrefix + "/conv1");
            var conv2 = extractSeparableConvParams(channelsOut, channelsOut, mappedPrefix + "/conv2");
            return {
                conv0: conv0,
                conv1: conv1,
                conv2: conv2
            };
        }
        function extractDenseBlock4Params(channelsIn, channelsOut, mappedPrefix, isFirstLayer) {
            if (isFirstLayer === void 0) isFirstLayer = false;
            var _a1 = extractDenseBlock3Params(channelsIn, channelsOut, mappedPrefix, isFirstLayer), conv0 = _a1.conv0, conv1 = _a1.conv1, conv2 = _a1.conv2;
            var conv3 = extractSeparableConvParams(channelsOut, channelsOut, mappedPrefix + "/conv3");
            return {
                conv0: conv0,
                conv1: conv1,
                conv2: conv2,
                conv3: conv3
            };
        }
        return {
            extractDenseBlock3Params: extractDenseBlock3Params,
            extractDenseBlock4Params: extractDenseBlock4Params
        };
    }
    function extractParams(weights) {
        var paramMappings = [];
        var _a1 = extractWeightsFactory(weights), extractWeights = _a1.extractWeights, getRemainingWeights = _a1.getRemainingWeights;
        var extractDenseBlock4Params = extractorsFactory(extractWeights, paramMappings).extractDenseBlock4Params;
        var dense0 = extractDenseBlock4Params(3, 32, 'dense0', true);
        var dense1 = extractDenseBlock4Params(32, 64, 'dense1');
        var dense2 = extractDenseBlock4Params(64, 128, 'dense2');
        var dense3 = extractDenseBlock4Params(128, 256, 'dense3');
        if (getRemainingWeights().length !== 0) throw new Error("weights remaing after extract: " + getRemainingWeights().length);
        return {
            paramMappings: paramMappings,
            params: {
                dense0: dense0,
                dense1: dense1,
                dense2: dense2,
                dense3: dense3
            }
        };
    }
    function loadConvParamsFactory(extractWeightEntry) {
        return function(prefix) {
            var filters = extractWeightEntry(prefix + "/filters", 4);
            var bias = extractWeightEntry(prefix + "/bias", 1);
            return {
                filters: filters,
                bias: bias
            };
        };
    }
    function loadParamsFactory(weightMap, paramMappings) {
        var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);
        var extractConvParams = loadConvParamsFactory(extractWeightEntry);
        var extractSeparableConvParams = loadSeparableConvParamsFactory(extractWeightEntry);
        function extractDenseBlock3Params(prefix, isFirstLayer) {
            if (isFirstLayer === void 0) isFirstLayer = false;
            var conv0 = isFirstLayer ? extractConvParams(prefix + "/conv0") : extractSeparableConvParams(prefix + "/conv0");
            var conv1 = extractSeparableConvParams(prefix + "/conv1");
            var conv2 = extractSeparableConvParams(prefix + "/conv2");
            return {
                conv0: conv0,
                conv1: conv1,
                conv2: conv2
            };
        }
        function extractDenseBlock4Params(prefix, isFirstLayer) {
            if (isFirstLayer === void 0) isFirstLayer = false;
            var conv0 = isFirstLayer ? extractConvParams(prefix + "/conv0") : extractSeparableConvParams(prefix + "/conv0");
            var conv1 = extractSeparableConvParams(prefix + "/conv1");
            var conv2 = extractSeparableConvParams(prefix + "/conv2");
            var conv3 = extractSeparableConvParams(prefix + "/conv3");
            return {
                conv0: conv0,
                conv1: conv1,
                conv2: conv2,
                conv3: conv3
            };
        }
        return {
            extractDenseBlock3Params: extractDenseBlock3Params,
            extractDenseBlock4Params: extractDenseBlock4Params
        };
    }
    function extractParamsFromWeigthMap(weightMap) {
        var paramMappings = [];
        var extractDenseBlock4Params = loadParamsFactory(weightMap, paramMappings).extractDenseBlock4Params;
        var params = {
            dense0: extractDenseBlock4Params('dense0', true),
            dense1: extractDenseBlock4Params('dense1'),
            dense2: extractDenseBlock4Params('dense2'),
            dense3: extractDenseBlock4Params('dense3')
        };
        disposeUnusedWeightTensors(weightMap, paramMappings);
        return {
            params: params,
            paramMappings: paramMappings
        };
    }
    var FaceFeatureExtractor1 = function(_super) {
        __extends(FaceFeatureExtractor2, _super);
        function FaceFeatureExtractor2() {
            return _super.call(this, 'FaceFeatureExtractor') || this;
        }
        FaceFeatureExtractor2.prototype.forwardInput = function(input) {
            var params = this.params;
            if (!params) throw new Error('FaceFeatureExtractor - load model before inference');
            return Ze(function() {
                var batchTensor = input.toBatchTensor(112, true);
                var meanRgb = [
                    122.782,
                    117.001,
                    104.298
                ];
                var normalized = normalize(batchTensor, meanRgb).div(On(255));
                var out = denseBlock4(normalized, params.dense0, true);
                out = denseBlock4(out, params.dense1);
                out = denseBlock4(out, params.dense2);
                out = denseBlock4(out, params.dense3);
                out = fl(out, [
                    7,
                    7
                ], [
                    2,
                    2
                ], 'valid');
                return out;
            });
        };
        FaceFeatureExtractor2.prototype.forward = function(input) {
            return __awaiter(this, void 0, void 0, function() {
                var _a1;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            _a1 = this.forwardInput;
                            return [
                                4 /*yield*/ ,
                                toNetInput(input)
                            ];
                        case 1:
                            return [
                                2 /*return*/ ,
                                _a1.apply(this, [
                                    _b.sent()
                                ])
                            ];
                    }
                });
            });
        };
        FaceFeatureExtractor2.prototype.getDefaultModelName = function() {
            return 'face_feature_extractor_model';
        };
        FaceFeatureExtractor2.prototype.extractParamsFromWeigthMap = function(weightMap) {
            return extractParamsFromWeigthMap(weightMap);
        };
        FaceFeatureExtractor2.prototype.extractParams = function(weights) {
            return extractParams(weights);
        };
        return FaceFeatureExtractor2;
    }(NeuralNetwork);
    function fullyConnectedLayer(x12, params) {
        return Ze(function() {
            return rc(el(x12, params.weights), params.bias);
        });
    }
    function extractParams$1(weights, channelsIn, channelsOut) {
        var paramMappings = [];
        var _a1 = extractWeightsFactory(weights), extractWeights = _a1.extractWeights, getRemainingWeights = _a1.getRemainingWeights;
        var extractFCParams = extractFCParamsFactory(extractWeights, paramMappings);
        var fc1 = extractFCParams(channelsIn, channelsOut, 'fc');
        if (getRemainingWeights().length !== 0) throw new Error("weights remaing after extract: " + getRemainingWeights().length);
        return {
            paramMappings: paramMappings,
            params: {
                fc: fc1
            }
        };
    }
    function extractParamsFromWeigthMap$1(weightMap) {
        var paramMappings = [];
        var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);
        function extractFcParams(prefix) {
            var weights = extractWeightEntry(prefix + "/weights", 2);
            var bias = extractWeightEntry(prefix + "/bias", 1);
            return {
                weights: weights,
                bias: bias
            };
        }
        var params = {
            fc: extractFcParams('fc')
        };
        disposeUnusedWeightTensors(weightMap, paramMappings);
        return {
            params: params,
            paramMappings: paramMappings
        };
    }
    function seperateWeightMaps(weightMap) {
        var featureExtractorMap = {
        };
        var classifierMap = {
        };
        Object.keys(weightMap).forEach(function(key) {
            var map = key.startsWith('fc') ? classifierMap : featureExtractorMap;
            map[key] = weightMap[key];
        });
        return {
            featureExtractorMap: featureExtractorMap,
            classifierMap: classifierMap
        };
    }
    var FaceProcessor1 = function(_super) {
        __extends(FaceProcessor2, _super);
        function FaceProcessor2(_name, faceFeatureExtractor) {
            var _this = _super.call(this, _name) || this;
            _this._faceFeatureExtractor = faceFeatureExtractor;
            return _this;
        }
        Object.defineProperty(FaceProcessor2.prototype, "faceFeatureExtractor", {
            get: function() {
                return this._faceFeatureExtractor;
            },
            enumerable: true,
            configurable: true
        });
        FaceProcessor2.prototype.runNet = function(input) {
            var _this = this;
            var params = this.params;
            if (!params) throw new Error(this._name + " - load model before inference");
            return Ze(function() {
                var bottleneckFeatures = input instanceof NetInput ? _this.faceFeatureExtractor.forwardInput(input) : input;
                return fullyConnectedLayer(bottleneckFeatures.as2D(bottleneckFeatures.shape[0], -1), params.fc);
            });
        };
        FaceProcessor2.prototype.dispose = function(throwOnRedispose) {
            if (throwOnRedispose === void 0) throwOnRedispose = true;
            this.faceFeatureExtractor.dispose(throwOnRedispose);
            _super.prototype.dispose.call(this, throwOnRedispose);
        };
        FaceProcessor2.prototype.loadClassifierParams = function(weights) {
            var _a1 = this.extractClassifierParams(weights), params = _a1.params, paramMappings = _a1.paramMappings;
            this._params = params;
            this._paramMappings = paramMappings;
        };
        FaceProcessor2.prototype.extractClassifierParams = function(weights) {
            return extractParams$1(weights, this.getClassifierChannelsIn(), this.getClassifierChannelsOut());
        };
        FaceProcessor2.prototype.extractParamsFromWeigthMap = function(weightMap) {
            var _a1 = seperateWeightMaps(weightMap), featureExtractorMap = _a1.featureExtractorMap, classifierMap = _a1.classifierMap;
            this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);
            return extractParamsFromWeigthMap$1(classifierMap);
        };
        FaceProcessor2.prototype.extractParams = function(weights) {
            var cIn = this.getClassifierChannelsIn();
            var cOut = this.getClassifierChannelsOut();
            var classifierWeightSize = cOut * cIn + cOut;
            var featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);
            var classifierWeights = weights.slice(weights.length - classifierWeightSize);
            this.faceFeatureExtractor.extractWeights(featureExtractorWeights);
            return this.extractClassifierParams(classifierWeights);
        };
        return FaceProcessor2;
    }(NeuralNetwork);
    var FACE_EXPRESSION_LABELS = [
        'neutral',
        'happy',
        'sad',
        'angry',
        'fearful',
        'disgusted',
        'surprised'
    ];
    var FaceExpressions = function() {
        function FaceExpressions1(probabilities) {
            var _this = this;
            if (probabilities.length !== 7) throw new Error("FaceExpressions.constructor - expected probabilities.length to be 7, have: " + probabilities.length);
            FACE_EXPRESSION_LABELS.forEach(function(expression, idx) {
                _this[expression] = probabilities[idx];
            });
        }
        FaceExpressions1.prototype.asSortedArray = function() {
            var _this = this;
            return FACE_EXPRESSION_LABELS.map(function(expression) {
                return {
                    expression: expression,
                    probability: _this[expression]
                };
            }).sort(function(e0, e16) {
                return e16.probability - e0.probability;
            });
        };
        return FaceExpressions1;
    }();
    var FaceExpressionNet1 = function(_super) {
        __extends(FaceExpressionNet2, _super);
        function FaceExpressionNet2(faceFeatureExtractor) {
            if (faceFeatureExtractor === void 0) faceFeatureExtractor = new FaceFeatureExtractor1();
            return _super.call(this, 'FaceExpressionNet', faceFeatureExtractor) || this;
        }
        FaceExpressionNet2.prototype.forwardInput = function(input) {
            var _this = this;
            return Ze(function() {
                return go(_this.runNet(input));
            });
        };
        FaceExpressionNet2.prototype.forward = function(input) {
            return __awaiter(this, void 0, void 0, function() {
                var _a1;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            _a1 = this.forwardInput;
                            return [
                                4 /*yield*/ ,
                                toNetInput(input)
                            ];
                        case 1:
                            return [
                                2 /*return*/ ,
                                _a1.apply(this, [
                                    _b.sent()
                                ])
                            ];
                    }
                });
            });
        };
        FaceExpressionNet2.prototype.predictExpressions = function(input) {
            return __awaiter(this, void 0, void 0, function() {
                var netInput, out, probabilitesByBatch, predictionsByBatch;
                var _this = this;
                return __generator(this, function(_a1) {
                    switch(_a1.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                toNetInput(input)
                            ];
                        case 1:
                            netInput = _a1.sent();
                            return [
                                4 /*yield*/ ,
                                this.forwardInput(netInput)
                            ];
                        case 2:
                            out = _a1.sent();
                            return [
                                4 /*yield*/ ,
                                Promise.all(Ur(out).map(function(t1) {
                                    return __awaiter(_this, void 0, void 0, function() {
                                        var data;
                                        return __generator(this, function(_a2) {
                                            switch(_a2.label){
                                                case 0:
                                                    return [
                                                        4 /*yield*/ ,
                                                        t1.data()
                                                    ];
                                                case 1:
                                                    data = _a2.sent();
                                                    t1.dispose();
                                                    return [
                                                        2 /*return*/ ,
                                                        data
                                                    ];
                                            }
                                        });
                                    });
                                }))
                            ];
                        case 3:
                            probabilitesByBatch = _a1.sent();
                            out.dispose();
                            predictionsByBatch = probabilitesByBatch.map(function(probabilites) {
                                return new FaceExpressions(probabilites);
                            });
                            return [
                                2 /*return*/ ,
                                netInput.isBatchInput ? predictionsByBatch : predictionsByBatch[0]
                            ];
                    }
                });
            });
        };
        FaceExpressionNet2.prototype.getDefaultModelName = function() {
            return 'face_expression_model';
        };
        FaceExpressionNet2.prototype.getClassifierChannelsIn = function() {
            return 256;
        };
        FaceExpressionNet2.prototype.getClassifierChannelsOut = function() {
            return 7;
        };
        return FaceExpressionNet2;
    }(FaceProcessor1);
    function isWithFaceExpressions(obj) {
        return obj['expressions'] instanceof FaceExpressions;
    }
    function extendWithFaceExpressions(sourceObj, expressions) {
        var extension = {
            expressions: expressions
        };
        return Object.assign({
        }, sourceObj, extension);
    }
    function drawFaceExpressions(canvasArg, faceExpressions, minConfidence, textFieldAnchor) {
        if (minConfidence === void 0) minConfidence = 0.1;
        var faceExpressionsArray = Array.isArray(faceExpressions) ? faceExpressions : [
            faceExpressions
        ];
        faceExpressionsArray.forEach(function(e16) {
            var expr = e16 instanceof FaceExpressions ? e16 : isWithFaceExpressions(e16) ? e16.expressions : undefined;
            if (!expr) throw new Error('drawFaceExpressions - expected faceExpressions to be FaceExpressions | WithFaceExpressions<{}> or array thereof');
            var sorted = expr.asSortedArray();
            var resultsToDisplay = sorted.filter(function(expr1) {
                return expr1.probability > minConfidence;
            });
            var anchor = isWithFaceDetection(e16) ? e16.detection.box.bottomLeft : textFieldAnchor || new Point(0, 0);
            var drawTextField = new DrawTextField(resultsToDisplay.map(function(expr1) {
                return expr1.expression + " (" + round(expr1.probability) + ")";
            }), anchor);
            drawTextField.draw(canvasArg);
        });
    }
    function isWithFaceLandmarks(obj) {
        return isWithFaceDetection(obj) && obj['landmarks'] instanceof FaceLandmarks && obj['unshiftedLandmarks'] instanceof FaceLandmarks && obj['alignedRect'] instanceof FaceDetection1;
    }
    function extendWithFaceLandmarks(sourceObj, unshiftedLandmarks) {
        var shift = sourceObj.detection.box;
        var landmarks = unshiftedLandmarks.shiftBy(shift.x, shift.y);
        var rect = landmarks.align();
        var imageDims = sourceObj.detection.imageDims;
        var alignedRect = new FaceDetection1(sourceObj.detection.score, rect.rescale(imageDims.reverse()), imageDims);
        var extension = {
            landmarks: landmarks,
            unshiftedLandmarks: unshiftedLandmarks,
            alignedRect: alignedRect
        };
        return Object.assign({
        }, sourceObj, extension);
    }
    var DrawFaceLandmarksOptions = function() {
        function DrawFaceLandmarksOptions1(options) {
            if (options === void 0) options = {
            };
            var _a1 = options.drawLines, drawLines = _a1 === void 0 ? true : _a1, _b = options.drawPoints, drawPoints = _b === void 0 ? true : _b, lineWidth = options.lineWidth, lineColor = options.lineColor, pointSize = options.pointSize, pointColor = options.pointColor;
            this.drawLines = drawLines;
            this.drawPoints = drawPoints;
            this.lineWidth = lineWidth || 1;
            this.pointSize = pointSize || 2;
            this.lineColor = lineColor || 'rgba(0, 255, 255, 1)';
            this.pointColor = pointColor || 'rgba(255, 0, 255, 1)';
        }
        return DrawFaceLandmarksOptions1;
    }();
    var DrawFaceLandmarks = function() {
        function DrawFaceLandmarks1(faceLandmarks, options) {
            if (options === void 0) options = {
            };
            this.faceLandmarks = faceLandmarks;
            this.options = new DrawFaceLandmarksOptions(options);
        }
        DrawFaceLandmarks1.prototype.draw = function(canvasArg) {
            var ctx = getContext2dOrThrow(canvasArg);
            var _a1 = this.options, drawLines = _a1.drawLines, drawPoints = _a1.drawPoints, lineWidth = _a1.lineWidth, lineColor = _a1.lineColor, pointSize = _a1.pointSize, pointColor = _a1.pointColor;
            if (drawLines && this.faceLandmarks instanceof FaceLandmarks681) {
                ctx.strokeStyle = lineColor;
                ctx.lineWidth = lineWidth;
                drawContour(ctx, this.faceLandmarks.getJawOutline());
                drawContour(ctx, this.faceLandmarks.getLeftEyeBrow());
                drawContour(ctx, this.faceLandmarks.getRightEyeBrow());
                drawContour(ctx, this.faceLandmarks.getNose());
                drawContour(ctx, this.faceLandmarks.getLeftEye(), true);
                drawContour(ctx, this.faceLandmarks.getRightEye(), true);
                drawContour(ctx, this.faceLandmarks.getMouth(), true);
            }
            if (drawPoints) {
                ctx.strokeStyle = pointColor;
                ctx.fillStyle = pointColor;
                var drawPoint = function(pt1) {
                    ctx.beginPath();
                    ctx.arc(pt1.x, pt1.y, pointSize, 0, 2 * Math.PI);
                    ctx.fill();
                };
                this.faceLandmarks.positions.forEach(drawPoint);
            }
        };
        return DrawFaceLandmarks1;
    }();
    function drawFaceLandmarks(canvasArg, faceLandmarks) {
        var faceLandmarksArray = Array.isArray(faceLandmarks) ? faceLandmarks : [
            faceLandmarks
        ];
        faceLandmarksArray.forEach(function(f28) {
            var landmarks = f28 instanceof FaceLandmarks ? f28 : isWithFaceLandmarks(f28) ? f28.landmarks : undefined;
            if (!landmarks) throw new Error('drawFaceLandmarks - expected faceExpressions to be FaceLandmarks | WithFaceLandmarks<WithFaceDetection<{}>> or array thereof');
            new DrawFaceLandmarks(landmarks).draw(canvasArg);
        });
    }
    var index$1 = /*#__PURE__*/ Object.freeze({
        __proto__: null,
        drawContour: drawContour,
        drawDetections: drawDetections,
        drawFaceExpressions: drawFaceExpressions,
        DrawBoxOptions: DrawBoxOptions,
        DrawBox: DrawBox,
        DrawFaceLandmarksOptions: DrawFaceLandmarksOptions,
        DrawFaceLandmarks: DrawFaceLandmarks,
        drawFaceLandmarks: drawFaceLandmarks,
        get AnchorPosition () {
            return AnchorPosition;
        },
        DrawTextFieldOptions: DrawTextFieldOptions,
        DrawTextField: DrawTextField
    });
    function extractorsFactory$1(extractWeights, paramMappings) {
        var extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);
        var extractSeparableConvParams = extractSeparableConvParamsFactory(extractWeights, paramMappings);
        function extractReductionBlockParams(channelsIn, channelsOut, mappedPrefix) {
            var separable_conv0 = extractSeparableConvParams(channelsIn, channelsOut, mappedPrefix + "/separable_conv0");
            var separable_conv1 = extractSeparableConvParams(channelsOut, channelsOut, mappedPrefix + "/separable_conv1");
            var expansion_conv = extractConvParams(channelsIn, channelsOut, 1, mappedPrefix + "/expansion_conv");
            return {
                separable_conv0: separable_conv0,
                separable_conv1: separable_conv1,
                expansion_conv: expansion_conv
            };
        }
        function extractMainBlockParams(channels, mappedPrefix) {
            var separable_conv0 = extractSeparableConvParams(channels, channels, mappedPrefix + "/separable_conv0");
            var separable_conv1 = extractSeparableConvParams(channels, channels, mappedPrefix + "/separable_conv1");
            var separable_conv2 = extractSeparableConvParams(channels, channels, mappedPrefix + "/separable_conv2");
            return {
                separable_conv0: separable_conv0,
                separable_conv1: separable_conv1,
                separable_conv2: separable_conv2
            };
        }
        return {
            extractConvParams: extractConvParams,
            extractSeparableConvParams: extractSeparableConvParams,
            extractReductionBlockParams: extractReductionBlockParams,
            extractMainBlockParams: extractMainBlockParams
        };
    }
    function extractParams$2(weights, numMainBlocks) {
        var paramMappings = [];
        var _a1 = extractWeightsFactory(weights), extractWeights = _a1.extractWeights, getRemainingWeights = _a1.getRemainingWeights;
        var _b = extractorsFactory$1(extractWeights, paramMappings), extractConvParams = _b.extractConvParams, extractSeparableConvParams = _b.extractSeparableConvParams, extractReductionBlockParams = _b.extractReductionBlockParams, extractMainBlockParams = _b.extractMainBlockParams;
        var entry_flow_conv_in = extractConvParams(3, 32, 3, 'entry_flow/conv_in');
        var entry_flow_reduction_block_0 = extractReductionBlockParams(32, 64, 'entry_flow/reduction_block_0');
        var entry_flow_reduction_block_1 = extractReductionBlockParams(64, 128, 'entry_flow/reduction_block_1');
        var entry_flow = {
            conv_in: entry_flow_conv_in,
            reduction_block_0: entry_flow_reduction_block_0,
            reduction_block_1: entry_flow_reduction_block_1
        };
        var middle_flow = {
        };
        range(numMainBlocks, 0, 1).forEach(function(idx) {
            middle_flow["main_block_" + idx] = extractMainBlockParams(128, "middle_flow/main_block_" + idx);
        });
        var exit_flow_reduction_block = extractReductionBlockParams(128, 256, 'exit_flow/reduction_block');
        var exit_flow_separable_conv = extractSeparableConvParams(256, 512, 'exit_flow/separable_conv');
        var exit_flow = {
            reduction_block: exit_flow_reduction_block,
            separable_conv: exit_flow_separable_conv
        };
        if (getRemainingWeights().length !== 0) throw new Error("weights remaing after extract: " + getRemainingWeights().length);
        return {
            paramMappings: paramMappings,
            params: {
                entry_flow: entry_flow,
                middle_flow: middle_flow,
                exit_flow: exit_flow
            }
        };
    }
    function loadParamsFactory$1(weightMap, paramMappings) {
        var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);
        var extractConvParams = loadConvParamsFactory(extractWeightEntry);
        var extractSeparableConvParams = loadSeparableConvParamsFactory(extractWeightEntry);
        function extractReductionBlockParams(mappedPrefix) {
            var separable_conv0 = extractSeparableConvParams(mappedPrefix + "/separable_conv0");
            var separable_conv1 = extractSeparableConvParams(mappedPrefix + "/separable_conv1");
            var expansion_conv = extractConvParams(mappedPrefix + "/expansion_conv");
            return {
                separable_conv0: separable_conv0,
                separable_conv1: separable_conv1,
                expansion_conv: expansion_conv
            };
        }
        function extractMainBlockParams(mappedPrefix) {
            var separable_conv0 = extractSeparableConvParams(mappedPrefix + "/separable_conv0");
            var separable_conv1 = extractSeparableConvParams(mappedPrefix + "/separable_conv1");
            var separable_conv2 = extractSeparableConvParams(mappedPrefix + "/separable_conv2");
            return {
                separable_conv0: separable_conv0,
                separable_conv1: separable_conv1,
                separable_conv2: separable_conv2
            };
        }
        return {
            extractConvParams: extractConvParams,
            extractSeparableConvParams: extractSeparableConvParams,
            extractReductionBlockParams: extractReductionBlockParams,
            extractMainBlockParams: extractMainBlockParams
        };
    }
    function extractParamsFromWeigthMap$2(weightMap, numMainBlocks) {
        var paramMappings = [];
        var _a1 = loadParamsFactory$1(weightMap, paramMappings), extractConvParams = _a1.extractConvParams, extractSeparableConvParams = _a1.extractSeparableConvParams, extractReductionBlockParams = _a1.extractReductionBlockParams, extractMainBlockParams = _a1.extractMainBlockParams;
        var entry_flow_conv_in = extractConvParams('entry_flow/conv_in');
        var entry_flow_reduction_block_0 = extractReductionBlockParams('entry_flow/reduction_block_0');
        var entry_flow_reduction_block_1 = extractReductionBlockParams('entry_flow/reduction_block_1');
        var entry_flow = {
            conv_in: entry_flow_conv_in,
            reduction_block_0: entry_flow_reduction_block_0,
            reduction_block_1: entry_flow_reduction_block_1
        };
        var middle_flow = {
        };
        range(numMainBlocks, 0, 1).forEach(function(idx) {
            middle_flow["main_block_" + idx] = extractMainBlockParams("middle_flow/main_block_" + idx);
        });
        var exit_flow_reduction_block = extractReductionBlockParams('exit_flow/reduction_block');
        var exit_flow_separable_conv = extractSeparableConvParams('exit_flow/separable_conv');
        var exit_flow = {
            reduction_block: exit_flow_reduction_block,
            separable_conv: exit_flow_separable_conv
        };
        disposeUnusedWeightTensors(weightMap, paramMappings);
        return {
            params: {
                entry_flow: entry_flow,
                middle_flow: middle_flow,
                exit_flow: exit_flow
            },
            paramMappings: paramMappings
        };
    }
    function conv(x12, params, stride) {
        return rc(qc(x12, params.filters, stride, 'same'), params.bias);
    }
    function reductionBlock(x12, params, isActivateInput) {
        if (isActivateInput === void 0) isActivateInput = true;
        var out = isActivateInput ? Bl(x12) : x12;
        out = depthwiseSeparableConv(out, params.separable_conv0, [
            1,
            1
        ]);
        out = depthwiseSeparableConv(Bl(out), params.separable_conv1, [
            1,
            1
        ]);
        out = hl(out, [
            3,
            3
        ], [
            2,
            2
        ], 'same');
        out = rc(out, conv(x12, params.expansion_conv, [
            2,
            2
        ]));
        return out;
    }
    function mainBlock(x12, params) {
        var out = depthwiseSeparableConv(Bl(x12), params.separable_conv0, [
            1,
            1
        ]);
        out = depthwiseSeparableConv(Bl(out), params.separable_conv1, [
            1,
            1
        ]);
        out = depthwiseSeparableConv(Bl(out), params.separable_conv2, [
            1,
            1
        ]);
        out = rc(out, x12);
        return out;
    }
    var TinyXception1 = function(_super) {
        __extends(TinyXception2, _super);
        function TinyXception2(numMainBlocks) {
            var _this = _super.call(this, 'TinyXception') || this;
            _this._numMainBlocks = numMainBlocks;
            return _this;
        }
        TinyXception2.prototype.forwardInput = function(input) {
            var _this = this;
            var params = this.params;
            if (!params) throw new Error('TinyXception - load model before inference');
            return Ze(function() {
                var batchTensor = input.toBatchTensor(112, true);
                var meanRgb = [
                    122.782,
                    117.001,
                    104.298
                ];
                var normalized = normalize(batchTensor, meanRgb).div(On(256));
                var out = Bl(conv(normalized, params.entry_flow.conv_in, [
                    2,
                    2
                ]));
                out = reductionBlock(out, params.entry_flow.reduction_block_0, false);
                out = reductionBlock(out, params.entry_flow.reduction_block_1);
                range(_this._numMainBlocks, 0, 1).forEach(function(idx) {
                    out = mainBlock(out, params.middle_flow["main_block_" + idx]);
                });
                out = reductionBlock(out, params.exit_flow.reduction_block);
                out = Bl(depthwiseSeparableConv(out, params.exit_flow.separable_conv, [
                    1,
                    1
                ]));
                return out;
            });
        };
        TinyXception2.prototype.forward = function(input) {
            return __awaiter(this, void 0, void 0, function() {
                var _a1;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            _a1 = this.forwardInput;
                            return [
                                4 /*yield*/ ,
                                toNetInput(input)
                            ];
                        case 1:
                            return [
                                2 /*return*/ ,
                                _a1.apply(this, [
                                    _b.sent()
                                ])
                            ];
                    }
                });
            });
        };
        TinyXception2.prototype.getDefaultModelName = function() {
            return 'tiny_xception_model';
        };
        TinyXception2.prototype.extractParamsFromWeigthMap = function(weightMap) {
            return extractParamsFromWeigthMap$2(weightMap, this._numMainBlocks);
        };
        TinyXception2.prototype.extractParams = function(weights) {
            return extractParams$2(weights, this._numMainBlocks);
        };
        return TinyXception2;
    }(NeuralNetwork);
    function extractParams$3(weights) {
        var paramMappings = [];
        var _a1 = extractWeightsFactory(weights), extractWeights = _a1.extractWeights, getRemainingWeights = _a1.getRemainingWeights;
        var extractFCParams = extractFCParamsFactory(extractWeights, paramMappings);
        var age = extractFCParams(512, 1, 'fc/age');
        var gender = extractFCParams(512, 2, 'fc/gender');
        if (getRemainingWeights().length !== 0) throw new Error("weights remaing after extract: " + getRemainingWeights().length);
        return {
            paramMappings: paramMappings,
            params: {
                fc: {
                    age: age,
                    gender: gender
                }
            }
        };
    }
    function extractParamsFromWeigthMap$3(weightMap) {
        var paramMappings = [];
        var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);
        function extractFcParams(prefix) {
            var weights = extractWeightEntry(prefix + "/weights", 2);
            var bias = extractWeightEntry(prefix + "/bias", 1);
            return {
                weights: weights,
                bias: bias
            };
        }
        var params = {
            fc: {
                age: extractFcParams('fc/age'),
                gender: extractFcParams('fc/gender')
            }
        };
        disposeUnusedWeightTensors(weightMap, paramMappings);
        return {
            params: params,
            paramMappings: paramMappings
        };
    }
    (function(Gender) {
        Gender["FEMALE"] = "female";
        Gender["MALE"] = "male";
    })(exports.Gender || (exports.Gender = {
    }));
    var AgeGenderNet1 = function(_super) {
        __extends(AgeGenderNet2, _super);
        function AgeGenderNet2(faceFeatureExtractor) {
            if (faceFeatureExtractor === void 0) faceFeatureExtractor = new TinyXception1(2);
            var _this = _super.call(this, 'AgeGenderNet') || this;
            _this._faceFeatureExtractor = faceFeatureExtractor;
            return _this;
        }
        Object.defineProperty(AgeGenderNet2.prototype, "faceFeatureExtractor", {
            get: function() {
                return this._faceFeatureExtractor;
            },
            enumerable: true,
            configurable: true
        });
        AgeGenderNet2.prototype.runNet = function(input) {
            var _this = this;
            var params = this.params;
            if (!params) throw new Error(this._name + " - load model before inference");
            return Ze(function() {
                var bottleneckFeatures = input instanceof NetInput ? _this.faceFeatureExtractor.forwardInput(input) : input;
                var pooled = fl(bottleneckFeatures, [
                    7,
                    7
                ], [
                    2,
                    2
                ], 'valid').as2D(bottleneckFeatures.shape[0], -1);
                var age = fullyConnectedLayer(pooled, params.fc.age).as1D();
                var gender = fullyConnectedLayer(pooled, params.fc.gender);
                return {
                    age: age,
                    gender: gender
                };
            });
        };
        AgeGenderNet2.prototype.forwardInput = function(input) {
            var _this = this;
            return Ze(function() {
                var _a1 = _this.runNet(input), age = _a1.age, gender = _a1.gender;
                return {
                    age: age,
                    gender: go(gender)
                };
            });
        };
        AgeGenderNet2.prototype.forward = function(input) {
            return __awaiter(this, void 0, void 0, function() {
                var _a1;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            _a1 = this.forwardInput;
                            return [
                                4 /*yield*/ ,
                                toNetInput(input)
                            ];
                        case 1:
                            return [
                                2 /*return*/ ,
                                _a1.apply(this, [
                                    _b.sent()
                                ])
                            ];
                    }
                });
            });
        };
        AgeGenderNet2.prototype.predictAgeAndGender = function(input) {
            return __awaiter(this, void 0, void 0, function() {
                var netInput, out, ages, genders, ageAndGenderTensors, predictionsByBatch;
                var _this = this;
                return __generator(this, function(_a1) {
                    switch(_a1.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                toNetInput(input)
                            ];
                        case 1:
                            netInput = _a1.sent();
                            return [
                                4 /*yield*/ ,
                                this.forwardInput(netInput)
                            ];
                        case 2:
                            out = _a1.sent();
                            ages = Ur(out.age);
                            genders = Ur(out.gender);
                            ageAndGenderTensors = ages.map(function(ageTensor, i41) {
                                return {
                                    ageTensor: ageTensor,
                                    genderTensor: genders[i41]
                                };
                            });
                            return [
                                4 /*yield*/ ,
                                Promise.all(ageAndGenderTensors.map(function(_a2) {
                                    var ageTensor = _a2.ageTensor, genderTensor = _a2.genderTensor;
                                    return __awaiter(_this, void 0, void 0, function() {
                                        var age, probMale, isMale, gender, genderProbability;
                                        return __generator(this, function(_b) {
                                            switch(_b.label){
                                                case 0:
                                                    return [
                                                        4 /*yield*/ ,
                                                        ageTensor.data()
                                                    ];
                                                case 1:
                                                    age = _b.sent()[0];
                                                    return [
                                                        4 /*yield*/ ,
                                                        genderTensor.data()
                                                    ];
                                                case 2:
                                                    probMale = _b.sent()[0];
                                                    isMale = probMale > 0.5;
                                                    gender = isMale ? exports.Gender.MALE : exports.Gender.FEMALE;
                                                    genderProbability = isMale ? probMale : 1 - probMale;
                                                    ageTensor.dispose();
                                                    genderTensor.dispose();
                                                    return [
                                                        2 /*return*/ ,
                                                        {
                                                            age: age,
                                                            gender: gender,
                                                            genderProbability: genderProbability
                                                        }
                                                    ];
                                            }
                                        });
                                    });
                                }))
                            ];
                        case 3:
                            predictionsByBatch = _a1.sent();
                            out.age.dispose();
                            out.gender.dispose();
                            return [
                                2 /*return*/ ,
                                netInput.isBatchInput ? predictionsByBatch : predictionsByBatch[0]
                            ];
                    }
                });
            });
        };
        AgeGenderNet2.prototype.getDefaultModelName = function() {
            return 'age_gender_model';
        };
        AgeGenderNet2.prototype.dispose = function(throwOnRedispose) {
            if (throwOnRedispose === void 0) throwOnRedispose = true;
            this.faceFeatureExtractor.dispose(throwOnRedispose);
            _super.prototype.dispose.call(this, throwOnRedispose);
        };
        AgeGenderNet2.prototype.loadClassifierParams = function(weights) {
            var _a1 = this.extractClassifierParams(weights), params = _a1.params, paramMappings = _a1.paramMappings;
            this._params = params;
            this._paramMappings = paramMappings;
        };
        AgeGenderNet2.prototype.extractClassifierParams = function(weights) {
            return extractParams$3(weights);
        };
        AgeGenderNet2.prototype.extractParamsFromWeigthMap = function(weightMap) {
            var _a1 = seperateWeightMaps(weightMap), featureExtractorMap = _a1.featureExtractorMap, classifierMap = _a1.classifierMap;
            this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap);
            return extractParamsFromWeigthMap$3(classifierMap);
        };
        AgeGenderNet2.prototype.extractParams = function(weights) {
            var classifierWeightSize = 1539;
            var featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize);
            var classifierWeights = weights.slice(weights.length - classifierWeightSize);
            this.faceFeatureExtractor.extractWeights(featureExtractorWeights);
            return this.extractClassifierParams(classifierWeights);
        };
        return AgeGenderNet2;
    }(NeuralNetwork);
    var FaceLandmark68NetBase1 = function(_super) {
        __extends(FaceLandmark68NetBase2, _super);
        function FaceLandmark68NetBase2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        FaceLandmark68NetBase2.prototype.postProcess = function(output, inputSize, originalDimensions) {
            var inputDimensions = originalDimensions.map(function(_a1) {
                var width = _a1.width, height = _a1.height;
                var scale = inputSize / Math.max(height, width);
                return {
                    width: width * scale,
                    height: height * scale
                };
            });
            var batchSize = inputDimensions.length;
            return Ze(function() {
                var createInterleavedTensor = function(fillX, fillY) {
                    return Pr([
                        Hn([
                            68
                        ], fillX),
                        Hn([
                            68
                        ], fillY)
                    ], 1).as2D(1, 136).as1D();
                };
                var getPadding = function(batchIdx, cond) {
                    var _a1 = inputDimensions[batchIdx], width = _a1.width, height = _a1.height;
                    return cond(width, height) ? Math.abs(width - height) / 2 : 0;
                };
                var getPaddingX = function(batchIdx) {
                    return getPadding(batchIdx, function(w12, h23) {
                        return w12 < h23;
                    });
                };
                var getPaddingY = function(batchIdx) {
                    return getPadding(batchIdx, function(w12, h23) {
                        return h23 < w12;
                    });
                };
                var landmarkTensors = output.mul(Hn([
                    batchSize,
                    136
                ], inputSize)).sub(Pr(Array.from(Array(batchSize), function(_11, batchIdx) {
                    return createInterleavedTensor(getPaddingX(batchIdx), getPaddingY(batchIdx));
                }))).div(Pr(Array.from(Array(batchSize), function(_11, batchIdx) {
                    return createInterleavedTensor(inputDimensions[batchIdx].width, inputDimensions[batchIdx].height);
                })));
                return landmarkTensors;
            });
        };
        FaceLandmark68NetBase2.prototype.forwardInput = function(input) {
            var _this = this;
            return Ze(function() {
                var out = _this.runNet(input);
                return _this.postProcess(out, input.inputSize, input.inputDimensions.map(function(_a1) {
                    var height = _a1[0], width = _a1[1];
                    return {
                        height: height,
                        width: width
                    };
                }));
            });
        };
        FaceLandmark68NetBase2.prototype.forward = function(input) {
            return __awaiter(this, void 0, void 0, function() {
                var _a1;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            _a1 = this.forwardInput;
                            return [
                                4 /*yield*/ ,
                                toNetInput(input)
                            ];
                        case 1:
                            return [
                                2 /*return*/ ,
                                _a1.apply(this, [
                                    _b.sent()
                                ])
                            ];
                    }
                });
            });
        };
        FaceLandmark68NetBase2.prototype.detectLandmarks = function(input) {
            return __awaiter(this, void 0, void 0, function() {
                var netInput, landmarkTensors, landmarksForBatch;
                var _this = this;
                return __generator(this, function(_a1) {
                    switch(_a1.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                toNetInput(input)
                            ];
                        case 1:
                            netInput = _a1.sent();
                            landmarkTensors = Ze(function() {
                                return Ur(_this.forwardInput(netInput));
                            });
                            return [
                                4 /*yield*/ ,
                                Promise.all(landmarkTensors.map(function(landmarkTensor, batchIdx) {
                                    return __awaiter(_this, void 0, void 0, function() {
                                        var landmarksArray, _a2, _b, xCoords, yCoords;
                                        return __generator(this, function(_c1) {
                                            switch(_c1.label){
                                                case 0:
                                                    _b = (_a2 = Array).from;
                                                    return [
                                                        4 /*yield*/ ,
                                                        landmarkTensor.data()
                                                    ];
                                                case 1:
                                                    landmarksArray = _b.apply(_a2, [
                                                        _c1.sent()
                                                    ]);
                                                    xCoords = landmarksArray.filter(function(_11, i41) {
                                                        return isEven(i41);
                                                    });
                                                    yCoords = landmarksArray.filter(function(_11, i41) {
                                                        return !isEven(i41);
                                                    });
                                                    return [
                                                        2 /*return*/ ,
                                                        new FaceLandmarks681(Array(68).fill(0).map(function(_11, i41) {
                                                            return new Point(xCoords[i41], yCoords[i41]);
                                                        }), {
                                                            height: netInput.getInputHeight(batchIdx),
                                                            width: netInput.getInputWidth(batchIdx)
                                                        })
                                                    ];
                                            }
                                        });
                                    });
                                }))
                            ];
                        case 2:
                            landmarksForBatch = _a1.sent();
                            landmarkTensors.forEach(function(t1) {
                                return t1.dispose();
                            });
                            return [
                                2 /*return*/ ,
                                netInput.isBatchInput ? landmarksForBatch : landmarksForBatch[0]
                            ];
                    }
                });
            });
        };
        FaceLandmark68NetBase2.prototype.getClassifierChannelsOut = function() {
            return 136;
        };
        return FaceLandmark68NetBase2;
    }(FaceProcessor1);
    var FaceLandmark68Net1 = function(_super) {
        __extends(FaceLandmark68Net2, _super);
        function FaceLandmark68Net2(faceFeatureExtractor) {
            if (faceFeatureExtractor === void 0) faceFeatureExtractor = new FaceFeatureExtractor1();
            return _super.call(this, 'FaceLandmark68Net', faceFeatureExtractor) || this;
        }
        FaceLandmark68Net2.prototype.getDefaultModelName = function() {
            return 'face_landmark_68_model';
        };
        FaceLandmark68Net2.prototype.getClassifierChannelsIn = function() {
            return 256;
        };
        return FaceLandmark68Net2;
    }(FaceLandmark68NetBase1);
    function extractParamsFromWeigthMapTiny(weightMap) {
        var paramMappings = [];
        var extractDenseBlock3Params = loadParamsFactory(weightMap, paramMappings).extractDenseBlock3Params;
        var params = {
            dense0: extractDenseBlock3Params('dense0', true),
            dense1: extractDenseBlock3Params('dense1'),
            dense2: extractDenseBlock3Params('dense2')
        };
        disposeUnusedWeightTensors(weightMap, paramMappings);
        return {
            params: params,
            paramMappings: paramMappings
        };
    }
    function extractParamsTiny(weights) {
        var paramMappings = [];
        var _a1 = extractWeightsFactory(weights), extractWeights = _a1.extractWeights, getRemainingWeights = _a1.getRemainingWeights;
        var extractDenseBlock3Params = extractorsFactory(extractWeights, paramMappings).extractDenseBlock3Params;
        var dense0 = extractDenseBlock3Params(3, 32, 'dense0', true);
        var dense1 = extractDenseBlock3Params(32, 64, 'dense1');
        var dense2 = extractDenseBlock3Params(64, 128, 'dense2');
        if (getRemainingWeights().length !== 0) throw new Error("weights remaing after extract: " + getRemainingWeights().length);
        return {
            paramMappings: paramMappings,
            params: {
                dense0: dense0,
                dense1: dense1,
                dense2: dense2
            }
        };
    }
    var TinyFaceFeatureExtractor1 = function(_super) {
        __extends(TinyFaceFeatureExtractor2, _super);
        function TinyFaceFeatureExtractor2() {
            return _super.call(this, 'TinyFaceFeatureExtractor') || this;
        }
        TinyFaceFeatureExtractor2.prototype.forwardInput = function(input) {
            var params = this.params;
            if (!params) throw new Error('TinyFaceFeatureExtractor - load model before inference');
            return Ze(function() {
                var batchTensor = input.toBatchTensor(112, true);
                var meanRgb = [
                    122.782,
                    117.001,
                    104.298
                ];
                var normalized = normalize(batchTensor, meanRgb).div(On(255));
                var out = denseBlock3(normalized, params.dense0, true);
                out = denseBlock3(out, params.dense1);
                out = denseBlock3(out, params.dense2);
                out = fl(out, [
                    14,
                    14
                ], [
                    2,
                    2
                ], 'valid');
                return out;
            });
        };
        TinyFaceFeatureExtractor2.prototype.forward = function(input) {
            return __awaiter(this, void 0, void 0, function() {
                var _a1;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            _a1 = this.forwardInput;
                            return [
                                4 /*yield*/ ,
                                toNetInput(input)
                            ];
                        case 1:
                            return [
                                2 /*return*/ ,
                                _a1.apply(this, [
                                    _b.sent()
                                ])
                            ];
                    }
                });
            });
        };
        TinyFaceFeatureExtractor2.prototype.getDefaultModelName = function() {
            return 'face_feature_extractor_tiny_model';
        };
        TinyFaceFeatureExtractor2.prototype.extractParamsFromWeigthMap = function(weightMap) {
            return extractParamsFromWeigthMapTiny(weightMap);
        };
        TinyFaceFeatureExtractor2.prototype.extractParams = function(weights) {
            return extractParamsTiny(weights);
        };
        return TinyFaceFeatureExtractor2;
    }(NeuralNetwork);
    var FaceLandmark68TinyNet1 = function(_super) {
        __extends(FaceLandmark68TinyNet2, _super);
        function FaceLandmark68TinyNet2(faceFeatureExtractor) {
            if (faceFeatureExtractor === void 0) faceFeatureExtractor = new TinyFaceFeatureExtractor1();
            return _super.call(this, 'FaceLandmark68TinyNet', faceFeatureExtractor) || this;
        }
        FaceLandmark68TinyNet2.prototype.getDefaultModelName = function() {
            return 'face_landmark_68_tiny_model';
        };
        FaceLandmark68TinyNet2.prototype.getClassifierChannelsIn = function() {
            return 128;
        };
        return FaceLandmark68TinyNet2;
    }(FaceLandmark68NetBase1);
    var FaceLandmarkNet1 = function(_super) {
        __extends(FaceLandmarkNet2, _super);
        function FaceLandmarkNet2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return FaceLandmarkNet2;
    }(FaceLandmark68Net1);
    function scale(x12, params) {
        return rc(gc(x12, params.weights), params.biases);
    }
    function convLayer$1(x12, params, strides, withRelu, padding) {
        if (padding === void 0) padding = 'same';
        var _a1 = params.conv, filters = _a1.filters, bias = _a1.bias;
        var out = qc(x12, filters, strides, padding);
        out = rc(out, bias);
        out = scale(out, params.scale);
        return withRelu ? Bl(out) : out;
    }
    function conv$1(x12, params) {
        return convLayer$1(x12, params, [
            1,
            1
        ], true);
    }
    function convNoRelu(x12, params) {
        return convLayer$1(x12, params, [
            1,
            1
        ], false);
    }
    function convDown(x12, params) {
        return convLayer$1(x12, params, [
            2,
            2
        ], true, 'valid');
    }
    function extractorsFactory$2(extractWeights, paramMappings) {
        function extractFilterValues(numFilterValues, numFilters, filterSize) {
            var weights = extractWeights(numFilterValues);
            var depth = weights.length / (numFilters * filterSize * filterSize);
            if (isFloat(depth)) throw new Error("depth has to be an integer: " + depth + ", weights.length: " + weights.length + ", numFilters: " + numFilters + ", filterSize: " + filterSize);
            return Ze(function() {
                return Wl(Ln(weights, [
                    numFilters,
                    depth,
                    filterSize,
                    filterSize
                ]), [
                    2,
                    3,
                    1,
                    0
                ]);
            });
        }
        function extractConvParams(numFilterValues, numFilters, filterSize, mappedPrefix) {
            var filters = extractFilterValues(numFilterValues, numFilters, filterSize);
            var bias = Mn(extractWeights(numFilters));
            paramMappings.push({
                paramPath: mappedPrefix + "/filters"
            }, {
                paramPath: mappedPrefix + "/bias"
            });
            return {
                filters: filters,
                bias: bias
            };
        }
        function extractScaleLayerParams(numWeights, mappedPrefix) {
            var weights = Mn(extractWeights(numWeights));
            var biases = Mn(extractWeights(numWeights));
            paramMappings.push({
                paramPath: mappedPrefix + "/weights"
            }, {
                paramPath: mappedPrefix + "/biases"
            });
            return {
                weights: weights,
                biases: biases
            };
        }
        function extractConvLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix) {
            var conv1 = extractConvParams(numFilterValues, numFilters, filterSize, mappedPrefix + "/conv");
            var scale1 = extractScaleLayerParams(numFilters, mappedPrefix + "/scale");
            return {
                conv: conv1,
                scale: scale1
            };
        }
        function extractResidualLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix, isDown) {
            if (isDown === void 0) isDown = false;
            var conv1 = extractConvLayerParams((isDown ? 0.5 : 1) * numFilterValues, numFilters, filterSize, mappedPrefix + "/conv1");
            var conv2 = extractConvLayerParams(numFilterValues, numFilters, filterSize, mappedPrefix + "/conv2");
            return {
                conv1: conv1,
                conv2: conv2
            };
        }
        return {
            extractConvLayerParams: extractConvLayerParams,
            extractResidualLayerParams: extractResidualLayerParams
        };
    }
    function extractParams$4(weights) {
        var _a1 = extractWeightsFactory(weights), extractWeights = _a1.extractWeights, getRemainingWeights = _a1.getRemainingWeights;
        var paramMappings = [];
        var _b = extractorsFactory$2(extractWeights, paramMappings), extractConvLayerParams = _b.extractConvLayerParams, extractResidualLayerParams = _b.extractResidualLayerParams;
        var conv32_down = extractConvLayerParams(4704, 32, 7, 'conv32_down');
        var conv32_1 = extractResidualLayerParams(9216, 32, 3, 'conv32_1');
        var conv32_2 = extractResidualLayerParams(9216, 32, 3, 'conv32_2');
        var conv32_3 = extractResidualLayerParams(9216, 32, 3, 'conv32_3');
        var conv64_down = extractResidualLayerParams(36864, 64, 3, 'conv64_down', true);
        var conv64_1 = extractResidualLayerParams(36864, 64, 3, 'conv64_1');
        var conv64_2 = extractResidualLayerParams(36864, 64, 3, 'conv64_2');
        var conv64_3 = extractResidualLayerParams(36864, 64, 3, 'conv64_3');
        var conv128_down = extractResidualLayerParams(147456, 128, 3, 'conv128_down', true);
        var conv128_1 = extractResidualLayerParams(147456, 128, 3, 'conv128_1');
        var conv128_2 = extractResidualLayerParams(147456, 128, 3, 'conv128_2');
        var conv256_down = extractResidualLayerParams(589824, 256, 3, 'conv256_down', true);
        var conv256_1 = extractResidualLayerParams(589824, 256, 3, 'conv256_1');
        var conv256_2 = extractResidualLayerParams(589824, 256, 3, 'conv256_2');
        var conv256_down_out = extractResidualLayerParams(589824, 256, 3, 'conv256_down_out');
        var fc1 = Ze(function() {
            return Wl(Bn(extractWeights(32768), [
                128,
                256
            ]), [
                1,
                0
            ]);
        });
        paramMappings.push({
            paramPath: "fc"
        });
        if (getRemainingWeights().length !== 0) throw new Error("weights remaing after extract: " + getRemainingWeights().length);
        var params = {
            conv32_down: conv32_down,
            conv32_1: conv32_1,
            conv32_2: conv32_2,
            conv32_3: conv32_3,
            conv64_down: conv64_down,
            conv64_1: conv64_1,
            conv64_2: conv64_2,
            conv64_3: conv64_3,
            conv128_down: conv128_down,
            conv128_1: conv128_1,
            conv128_2: conv128_2,
            conv256_down: conv256_down,
            conv256_1: conv256_1,
            conv256_2: conv256_2,
            conv256_down_out: conv256_down_out,
            fc: fc1
        };
        return {
            params: params,
            paramMappings: paramMappings
        };
    }
    function extractorsFactory$3(weightMap, paramMappings) {
        var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);
        function extractScaleLayerParams(prefix) {
            var weights = extractWeightEntry(prefix + "/scale/weights", 1);
            var biases = extractWeightEntry(prefix + "/scale/biases", 1);
            return {
                weights: weights,
                biases: biases
            };
        }
        function extractConvLayerParams(prefix) {
            var filters = extractWeightEntry(prefix + "/conv/filters", 4);
            var bias = extractWeightEntry(prefix + "/conv/bias", 1);
            var scale1 = extractScaleLayerParams(prefix);
            return {
                conv: {
                    filters: filters,
                    bias: bias
                },
                scale: scale1
            };
        }
        function extractResidualLayerParams(prefix) {
            return {
                conv1: extractConvLayerParams(prefix + "/conv1"),
                conv2: extractConvLayerParams(prefix + "/conv2")
            };
        }
        return {
            extractConvLayerParams: extractConvLayerParams,
            extractResidualLayerParams: extractResidualLayerParams
        };
    }
    function extractParamsFromWeigthMap$4(weightMap) {
        var paramMappings = [];
        var _a1 = extractorsFactory$3(weightMap, paramMappings), extractConvLayerParams = _a1.extractConvLayerParams, extractResidualLayerParams = _a1.extractResidualLayerParams;
        var conv32_down = extractConvLayerParams('conv32_down');
        var conv32_1 = extractResidualLayerParams('conv32_1');
        var conv32_2 = extractResidualLayerParams('conv32_2');
        var conv32_3 = extractResidualLayerParams('conv32_3');
        var conv64_down = extractResidualLayerParams('conv64_down');
        var conv64_1 = extractResidualLayerParams('conv64_1');
        var conv64_2 = extractResidualLayerParams('conv64_2');
        var conv64_3 = extractResidualLayerParams('conv64_3');
        var conv128_down = extractResidualLayerParams('conv128_down');
        var conv128_1 = extractResidualLayerParams('conv128_1');
        var conv128_2 = extractResidualLayerParams('conv128_2');
        var conv256_down = extractResidualLayerParams('conv256_down');
        var conv256_1 = extractResidualLayerParams('conv256_1');
        var conv256_2 = extractResidualLayerParams('conv256_2');
        var conv256_down_out = extractResidualLayerParams('conv256_down_out');
        var fc1 = weightMap['fc'];
        paramMappings.push({
            originalPath: 'fc',
            paramPath: 'fc'
        });
        if (!isTensor2D(fc1)) throw new Error("expected weightMap[fc] to be a Tensor2D, instead have " + fc1);
        var params = {
            conv32_down: conv32_down,
            conv32_1: conv32_1,
            conv32_2: conv32_2,
            conv32_3: conv32_3,
            conv64_down: conv64_down,
            conv64_1: conv64_1,
            conv64_2: conv64_2,
            conv64_3: conv64_3,
            conv128_down: conv128_down,
            conv128_1: conv128_1,
            conv128_2: conv128_2,
            conv256_down: conv256_down,
            conv256_1: conv256_1,
            conv256_2: conv256_2,
            conv256_down_out: conv256_down_out,
            fc: fc1
        };
        disposeUnusedWeightTensors(weightMap, paramMappings);
        return {
            params: params,
            paramMappings: paramMappings
        };
    }
    function residual(x12, params) {
        var out = conv$1(x12, params.conv1);
        out = convNoRelu(out, params.conv2);
        out = rc(out, x12);
        out = Bl(out);
        return out;
    }
    function residualDown(x12, params) {
        var out = convDown(x12, params.conv1);
        out = convNoRelu(out, params.conv2);
        var pooled = fl(x12, 2, 2, 'valid');
        var zeros = Gn(pooled.shape);
        var isPad = pooled.shape[3] !== out.shape[3];
        var isAdjustShape = pooled.shape[1] !== out.shape[1] || pooled.shape[2] !== out.shape[2];
        if (isAdjustShape) {
            var padShapeX = __spreadArrays(out.shape);
            padShapeX[1] = 1;
            var zerosW = Gn(padShapeX);
            out = Yn([
                out,
                zerosW
            ], 1);
            var padShapeY = __spreadArrays(out.shape);
            padShapeY[2] = 1;
            var zerosH = Gn(padShapeY);
            out = Yn([
                out,
                zerosH
            ], 2);
        }
        pooled = isPad ? Yn([
            pooled,
            zeros
        ], 3) : pooled;
        out = rc(pooled, out);
        out = Bl(out);
        return out;
    }
    var FaceRecognitionNet1 = function(_super) {
        __extends(FaceRecognitionNet2, _super);
        function FaceRecognitionNet2() {
            return _super.call(this, 'FaceRecognitionNet') || this;
        }
        FaceRecognitionNet2.prototype.forwardInput = function(input) {
            var params = this.params;
            if (!params) throw new Error('FaceRecognitionNet - load model before inference');
            return Ze(function() {
                var batchTensor = input.toBatchTensor(150, true).toFloat();
                var meanRgb = [
                    122.782,
                    117.001,
                    104.298
                ];
                var normalized = normalize(batchTensor, meanRgb).div(On(256));
                var out = convDown(normalized, params.conv32_down);
                out = hl(out, 3, 2, 'valid');
                out = residual(out, params.conv32_1);
                out = residual(out, params.conv32_2);
                out = residual(out, params.conv32_3);
                out = residualDown(out, params.conv64_down);
                out = residual(out, params.conv64_1);
                out = residual(out, params.conv64_2);
                out = residual(out, params.conv64_3);
                out = residualDown(out, params.conv128_down);
                out = residual(out, params.conv128_1);
                out = residual(out, params.conv128_2);
                out = residualDown(out, params.conv256_down);
                out = residual(out, params.conv256_1);
                out = residual(out, params.conv256_2);
                out = residualDown(out, params.conv256_down_out);
                var globalAvg = out.mean([
                    1,
                    2
                ]);
                var fullyConnected = el(globalAvg, params.fc);
                return fullyConnected;
            });
        };
        FaceRecognitionNet2.prototype.forward = function(input) {
            return __awaiter(this, void 0, void 0, function() {
                var _a1;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            _a1 = this.forwardInput;
                            return [
                                4 /*yield*/ ,
                                toNetInput(input)
                            ];
                        case 1:
                            return [
                                2 /*return*/ ,
                                _a1.apply(this, [
                                    _b.sent()
                                ])
                            ];
                    }
                });
            });
        };
        FaceRecognitionNet2.prototype.computeFaceDescriptor = function(input) {
            return __awaiter(this, void 0, void 0, function() {
                var netInput, faceDescriptorTensors, faceDescriptorsForBatch;
                var _this = this;
                return __generator(this, function(_a1) {
                    switch(_a1.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                toNetInput(input)
                            ];
                        case 1:
                            netInput = _a1.sent();
                            faceDescriptorTensors = Ze(function() {
                                return Ur(_this.forwardInput(netInput));
                            });
                            return [
                                4 /*yield*/ ,
                                Promise.all(faceDescriptorTensors.map(function(t1) {
                                    return t1.data();
                                }))
                            ];
                        case 2:
                            faceDescriptorsForBatch = _a1.sent();
                            faceDescriptorTensors.forEach(function(t1) {
                                return t1.dispose();
                            });
                            return [
                                2 /*return*/ ,
                                netInput.isBatchInput ? faceDescriptorsForBatch : faceDescriptorsForBatch[0]
                            ];
                    }
                });
            });
        };
        FaceRecognitionNet2.prototype.getDefaultModelName = function() {
            return 'face_recognition_model';
        };
        FaceRecognitionNet2.prototype.extractParamsFromWeigthMap = function(weightMap) {
            return extractParamsFromWeigthMap$4(weightMap);
        };
        FaceRecognitionNet2.prototype.extractParams = function(weights) {
            return extractParams$4(weights);
        };
        return FaceRecognitionNet2;
    }(NeuralNetwork);
    function createFaceRecognitionNet(weights) {
        var net = new FaceRecognitionNet1();
        net.extractWeights(weights);
        return net;
    }
    function extendWithFaceDescriptor(sourceObj, descriptor) {
        var extension = {
            descriptor: descriptor
        };
        return Object.assign({
        }, sourceObj, extension);
    }
    function isWithAge(obj) {
        return typeof obj['age'] === 'number';
    }
    function extendWithAge(sourceObj, age) {
        var extension = {
            age: age
        };
        return Object.assign({
        }, sourceObj, extension);
    }
    function isWithGender(obj) {
        return (obj['gender'] === exports.Gender.MALE || obj['gender'] === exports.Gender.FEMALE) && isValidProbablitiy(obj['genderProbability']);
    }
    function extendWithGender(sourceObj, gender, genderProbability) {
        var extension = {
            gender: gender,
            genderProbability: genderProbability
        };
        return Object.assign({
        }, sourceObj, extension);
    }
    var MtcnnOptions = function() {
        function MtcnnOptions1(_a1) {
            var _b = _a1 === void 0 ? {
            } : _a1, minFaceSize = _b.minFaceSize, scaleFactor = _b.scaleFactor, maxNumScales = _b.maxNumScales, scoreThresholds = _b.scoreThresholds, scaleSteps = _b.scaleSteps;
            this._name = 'MtcnnOptions';
            this._minFaceSize = minFaceSize || 20;
            this._scaleFactor = scaleFactor || 0.709;
            this._maxNumScales = maxNumScales || 10;
            this._scoreThresholds = scoreThresholds || [
                0.6,
                0.7,
                0.7
            ];
            this._scaleSteps = scaleSteps;
            if (typeof this._minFaceSize !== 'number' || this._minFaceSize < 0) throw new Error(this._name + " - expected minFaceSize to be a number > 0");
            if (typeof this._scaleFactor !== 'number' || this._scaleFactor <= 0 || this._scaleFactor >= 1) throw new Error(this._name + " - expected scaleFactor to be a number between 0 and 1");
            if (typeof this._maxNumScales !== 'number' || this._maxNumScales < 0) throw new Error(this._name + " - expected maxNumScales to be a number > 0");
            if (!Array.isArray(this._scoreThresholds) || this._scoreThresholds.length !== 3 || this._scoreThresholds.some(function(th1) {
                return typeof th1 !== 'number';
            })) throw new Error(this._name + " - expected scoreThresholds to be an array of numbers of length 3");
            if (this._scaleSteps && (!Array.isArray(this._scaleSteps) || this._scaleSteps.some(function(th1) {
                return typeof th1 !== 'number';
            }))) throw new Error(this._name + " - expected scaleSteps to be an array of numbers");
        }
        Object.defineProperty(MtcnnOptions1.prototype, "minFaceSize", {
            get: function() {
                return this._minFaceSize;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MtcnnOptions1.prototype, "scaleFactor", {
            get: function() {
                return this._scaleFactor;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MtcnnOptions1.prototype, "maxNumScales", {
            get: function() {
                return this._maxNumScales;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MtcnnOptions1.prototype, "scoreThresholds", {
            get: function() {
                return this._scoreThresholds;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MtcnnOptions1.prototype, "scaleSteps", {
            get: function() {
                return this._scaleSteps;
            },
            enumerable: true,
            configurable: true
        });
        return MtcnnOptions1;
    }();
    function extractorsFactory$4(extractWeights, paramMappings) {
        function extractDepthwiseConvParams(numChannels, mappedPrefix) {
            var filters = Ln(extractWeights(9 * numChannels), [
                3,
                3,
                numChannels,
                1
            ]);
            var batch_norm_scale = Mn(extractWeights(numChannels));
            var batch_norm_offset = Mn(extractWeights(numChannels));
            var batch_norm_mean = Mn(extractWeights(numChannels));
            var batch_norm_variance = Mn(extractWeights(numChannels));
            paramMappings.push({
                paramPath: mappedPrefix + "/filters"
            }, {
                paramPath: mappedPrefix + "/batch_norm_scale"
            }, {
                paramPath: mappedPrefix + "/batch_norm_offset"
            }, {
                paramPath: mappedPrefix + "/batch_norm_mean"
            }, {
                paramPath: mappedPrefix + "/batch_norm_variance"
            });
            return {
                filters: filters,
                batch_norm_scale: batch_norm_scale,
                batch_norm_offset: batch_norm_offset,
                batch_norm_mean: batch_norm_mean,
                batch_norm_variance: batch_norm_variance
            };
        }
        function extractConvParams(channelsIn, channelsOut, filterSize, mappedPrefix, isPointwiseConv) {
            var filters = Ln(extractWeights(channelsIn * channelsOut * filterSize * filterSize), [
                filterSize,
                filterSize,
                channelsIn,
                channelsOut
            ]);
            var bias = Mn(extractWeights(channelsOut));
            paramMappings.push({
                paramPath: mappedPrefix + "/filters"
            }, {
                paramPath: mappedPrefix + "/" + (isPointwiseConv ? 'batch_norm_offset' : 'bias')
            });
            return {
                filters: filters,
                bias: bias
            };
        }
        function extractPointwiseConvParams(channelsIn, channelsOut, filterSize, mappedPrefix) {
            var _a1 = extractConvParams(channelsIn, channelsOut, filterSize, mappedPrefix, true), filters = _a1.filters, bias = _a1.bias;
            return {
                filters: filters,
                batch_norm_offset: bias
            };
        }
        function extractConvPairParams(channelsIn, channelsOut, mappedPrefix) {
            var depthwise_conv = extractDepthwiseConvParams(channelsIn, mappedPrefix + "/depthwise_conv");
            var pointwise_conv = extractPointwiseConvParams(channelsIn, channelsOut, 1, mappedPrefix + "/pointwise_conv");
            return {
                depthwise_conv: depthwise_conv,
                pointwise_conv: pointwise_conv
            };
        }
        function extractMobilenetV1Params() {
            var conv_0 = extractPointwiseConvParams(3, 32, 3, 'mobilenetv1/conv_0');
            var conv_1 = extractConvPairParams(32, 64, 'mobilenetv1/conv_1');
            var conv_2 = extractConvPairParams(64, 128, 'mobilenetv1/conv_2');
            var conv_3 = extractConvPairParams(128, 128, 'mobilenetv1/conv_3');
            var conv_4 = extractConvPairParams(128, 256, 'mobilenetv1/conv_4');
            var conv_5 = extractConvPairParams(256, 256, 'mobilenetv1/conv_5');
            var conv_6 = extractConvPairParams(256, 512, 'mobilenetv1/conv_6');
            var conv_7 = extractConvPairParams(512, 512, 'mobilenetv1/conv_7');
            var conv_8 = extractConvPairParams(512, 512, 'mobilenetv1/conv_8');
            var conv_9 = extractConvPairParams(512, 512, 'mobilenetv1/conv_9');
            var conv_10 = extractConvPairParams(512, 512, 'mobilenetv1/conv_10');
            var conv_11 = extractConvPairParams(512, 512, 'mobilenetv1/conv_11');
            var conv_12 = extractConvPairParams(512, 1024, 'mobilenetv1/conv_12');
            var conv_13 = extractConvPairParams(1024, 1024, 'mobilenetv1/conv_13');
            return {
                conv_0: conv_0,
                conv_1: conv_1,
                conv_2: conv_2,
                conv_3: conv_3,
                conv_4: conv_4,
                conv_5: conv_5,
                conv_6: conv_6,
                conv_7: conv_7,
                conv_8: conv_8,
                conv_9: conv_9,
                conv_10: conv_10,
                conv_11: conv_11,
                conv_12: conv_12,
                conv_13: conv_13
            };
        }
        function extractPredictionLayerParams() {
            var conv_0 = extractPointwiseConvParams(1024, 256, 1, 'prediction_layer/conv_0');
            var conv_1 = extractPointwiseConvParams(256, 512, 3, 'prediction_layer/conv_1');
            var conv_2 = extractPointwiseConvParams(512, 128, 1, 'prediction_layer/conv_2');
            var conv_3 = extractPointwiseConvParams(128, 256, 3, 'prediction_layer/conv_3');
            var conv_4 = extractPointwiseConvParams(256, 128, 1, 'prediction_layer/conv_4');
            var conv_5 = extractPointwiseConvParams(128, 256, 3, 'prediction_layer/conv_5');
            var conv_6 = extractPointwiseConvParams(256, 64, 1, 'prediction_layer/conv_6');
            var conv_7 = extractPointwiseConvParams(64, 128, 3, 'prediction_layer/conv_7');
            var box_encoding_0_predictor = extractConvParams(512, 12, 1, 'prediction_layer/box_predictor_0/box_encoding_predictor');
            var class_predictor_0 = extractConvParams(512, 9, 1, 'prediction_layer/box_predictor_0/class_predictor');
            var box_encoding_1_predictor = extractConvParams(1024, 24, 1, 'prediction_layer/box_predictor_1/box_encoding_predictor');
            var class_predictor_1 = extractConvParams(1024, 18, 1, 'prediction_layer/box_predictor_1/class_predictor');
            var box_encoding_2_predictor = extractConvParams(512, 24, 1, 'prediction_layer/box_predictor_2/box_encoding_predictor');
            var class_predictor_2 = extractConvParams(512, 18, 1, 'prediction_layer/box_predictor_2/class_predictor');
            var box_encoding_3_predictor = extractConvParams(256, 24, 1, 'prediction_layer/box_predictor_3/box_encoding_predictor');
            var class_predictor_3 = extractConvParams(256, 18, 1, 'prediction_layer/box_predictor_3/class_predictor');
            var box_encoding_4_predictor = extractConvParams(256, 24, 1, 'prediction_layer/box_predictor_4/box_encoding_predictor');
            var class_predictor_4 = extractConvParams(256, 18, 1, 'prediction_layer/box_predictor_4/class_predictor');
            var box_encoding_5_predictor = extractConvParams(128, 24, 1, 'prediction_layer/box_predictor_5/box_encoding_predictor');
            var class_predictor_5 = extractConvParams(128, 18, 1, 'prediction_layer/box_predictor_5/class_predictor');
            var box_predictor_0 = {
                box_encoding_predictor: box_encoding_0_predictor,
                class_predictor: class_predictor_0
            };
            var box_predictor_1 = {
                box_encoding_predictor: box_encoding_1_predictor,
                class_predictor: class_predictor_1
            };
            var box_predictor_2 = {
                box_encoding_predictor: box_encoding_2_predictor,
                class_predictor: class_predictor_2
            };
            var box_predictor_3 = {
                box_encoding_predictor: box_encoding_3_predictor,
                class_predictor: class_predictor_3
            };
            var box_predictor_4 = {
                box_encoding_predictor: box_encoding_4_predictor,
                class_predictor: class_predictor_4
            };
            var box_predictor_5 = {
                box_encoding_predictor: box_encoding_5_predictor,
                class_predictor: class_predictor_5
            };
            return {
                conv_0: conv_0,
                conv_1: conv_1,
                conv_2: conv_2,
                conv_3: conv_3,
                conv_4: conv_4,
                conv_5: conv_5,
                conv_6: conv_6,
                conv_7: conv_7,
                box_predictor_0: box_predictor_0,
                box_predictor_1: box_predictor_1,
                box_predictor_2: box_predictor_2,
                box_predictor_3: box_predictor_3,
                box_predictor_4: box_predictor_4,
                box_predictor_5: box_predictor_5
            };
        }
        return {
            extractMobilenetV1Params: extractMobilenetV1Params,
            extractPredictionLayerParams: extractPredictionLayerParams
        };
    }
    function extractParams$5(weights) {
        var paramMappings = [];
        var _a1 = extractWeightsFactory(weights), extractWeights = _a1.extractWeights, getRemainingWeights = _a1.getRemainingWeights;
        var _b = extractorsFactory$4(extractWeights, paramMappings), extractMobilenetV1Params = _b.extractMobilenetV1Params, extractPredictionLayerParams = _b.extractPredictionLayerParams;
        var mobilenetv1 = extractMobilenetV1Params();
        var prediction_layer = extractPredictionLayerParams();
        var extra_dim = Pn(extractWeights(20472), [
            1,
            5118,
            4
        ]);
        var output_layer = {
            extra_dim: extra_dim
        };
        paramMappings.push({
            paramPath: 'output_layer/extra_dim'
        });
        if (getRemainingWeights().length !== 0) throw new Error("weights remaing after extract: " + getRemainingWeights().length);
        return {
            params: {
                mobilenetv1: mobilenetv1,
                prediction_layer: prediction_layer,
                output_layer: output_layer
            },
            paramMappings: paramMappings
        };
    }
    function extractorsFactory$5(weightMap, paramMappings) {
        var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);
        function extractPointwiseConvParams(prefix, idx, mappedPrefix) {
            var filters = extractWeightEntry(prefix + "/Conv2d_" + idx + "_pointwise/weights", 4, mappedPrefix + "/filters");
            var batch_norm_offset = extractWeightEntry(prefix + "/Conv2d_" + idx + "_pointwise/convolution_bn_offset", 1, mappedPrefix + "/batch_norm_offset");
            return {
                filters: filters,
                batch_norm_offset: batch_norm_offset
            };
        }
        function extractConvPairParams(idx) {
            var mappedPrefix = "mobilenetv1/conv_" + idx;
            var prefixDepthwiseConv = "MobilenetV1/Conv2d_" + idx + "_depthwise";
            var mappedPrefixDepthwiseConv = mappedPrefix + "/depthwise_conv";
            var mappedPrefixPointwiseConv = mappedPrefix + "/pointwise_conv";
            var filters = extractWeightEntry(prefixDepthwiseConv + "/depthwise_weights", 4, mappedPrefixDepthwiseConv + "/filters");
            var batch_norm_scale = extractWeightEntry(prefixDepthwiseConv + "/BatchNorm/gamma", 1, mappedPrefixDepthwiseConv + "/batch_norm_scale");
            var batch_norm_offset = extractWeightEntry(prefixDepthwiseConv + "/BatchNorm/beta", 1, mappedPrefixDepthwiseConv + "/batch_norm_offset");
            var batch_norm_mean = extractWeightEntry(prefixDepthwiseConv + "/BatchNorm/moving_mean", 1, mappedPrefixDepthwiseConv + "/batch_norm_mean");
            var batch_norm_variance = extractWeightEntry(prefixDepthwiseConv + "/BatchNorm/moving_variance", 1, mappedPrefixDepthwiseConv + "/batch_norm_variance");
            return {
                depthwise_conv: {
                    filters: filters,
                    batch_norm_scale: batch_norm_scale,
                    batch_norm_offset: batch_norm_offset,
                    batch_norm_mean: batch_norm_mean,
                    batch_norm_variance: batch_norm_variance
                },
                pointwise_conv: extractPointwiseConvParams('MobilenetV1', idx, mappedPrefixPointwiseConv)
            };
        }
        function extractMobilenetV1Params() {
            return {
                conv_0: extractPointwiseConvParams('MobilenetV1', 0, 'mobilenetv1/conv_0'),
                conv_1: extractConvPairParams(1),
                conv_2: extractConvPairParams(2),
                conv_3: extractConvPairParams(3),
                conv_4: extractConvPairParams(4),
                conv_5: extractConvPairParams(5),
                conv_6: extractConvPairParams(6),
                conv_7: extractConvPairParams(7),
                conv_8: extractConvPairParams(8),
                conv_9: extractConvPairParams(9),
                conv_10: extractConvPairParams(10),
                conv_11: extractConvPairParams(11),
                conv_12: extractConvPairParams(12),
                conv_13: extractConvPairParams(13)
            };
        }
        function extractConvParams(prefix, mappedPrefix) {
            var filters = extractWeightEntry(prefix + "/weights", 4, mappedPrefix + "/filters");
            var bias = extractWeightEntry(prefix + "/biases", 1, mappedPrefix + "/bias");
            return {
                filters: filters,
                bias: bias
            };
        }
        function extractBoxPredictorParams(idx) {
            var box_encoding_predictor = extractConvParams("Prediction/BoxPredictor_" + idx + "/BoxEncodingPredictor", "prediction_layer/box_predictor_" + idx + "/box_encoding_predictor");
            var class_predictor = extractConvParams("Prediction/BoxPredictor_" + idx + "/ClassPredictor", "prediction_layer/box_predictor_" + idx + "/class_predictor");
            return {
                box_encoding_predictor: box_encoding_predictor,
                class_predictor: class_predictor
            };
        }
        function extractPredictionLayerParams() {
            return {
                conv_0: extractPointwiseConvParams('Prediction', 0, 'prediction_layer/conv_0'),
                conv_1: extractPointwiseConvParams('Prediction', 1, 'prediction_layer/conv_1'),
                conv_2: extractPointwiseConvParams('Prediction', 2, 'prediction_layer/conv_2'),
                conv_3: extractPointwiseConvParams('Prediction', 3, 'prediction_layer/conv_3'),
                conv_4: extractPointwiseConvParams('Prediction', 4, 'prediction_layer/conv_4'),
                conv_5: extractPointwiseConvParams('Prediction', 5, 'prediction_layer/conv_5'),
                conv_6: extractPointwiseConvParams('Prediction', 6, 'prediction_layer/conv_6'),
                conv_7: extractPointwiseConvParams('Prediction', 7, 'prediction_layer/conv_7'),
                box_predictor_0: extractBoxPredictorParams(0),
                box_predictor_1: extractBoxPredictorParams(1),
                box_predictor_2: extractBoxPredictorParams(2),
                box_predictor_3: extractBoxPredictorParams(3),
                box_predictor_4: extractBoxPredictorParams(4),
                box_predictor_5: extractBoxPredictorParams(5)
            };
        }
        return {
            extractMobilenetV1Params: extractMobilenetV1Params,
            extractPredictionLayerParams: extractPredictionLayerParams
        };
    }
    function extractParamsFromWeigthMap$5(weightMap) {
        var paramMappings = [];
        var _a1 = extractorsFactory$5(weightMap, paramMappings), extractMobilenetV1Params = _a1.extractMobilenetV1Params, extractPredictionLayerParams = _a1.extractPredictionLayerParams;
        var extra_dim = weightMap['Output/extra_dim'];
        paramMappings.push({
            originalPath: 'Output/extra_dim',
            paramPath: 'output_layer/extra_dim'
        });
        if (!isTensor3D(extra_dim)) throw new Error("expected weightMap['Output/extra_dim'] to be a Tensor3D, instead have " + extra_dim);
        var params = {
            mobilenetv1: extractMobilenetV1Params(),
            prediction_layer: extractPredictionLayerParams(),
            output_layer: {
                extra_dim: extra_dim
            }
        };
        disposeUnusedWeightTensors(weightMap, paramMappings);
        return {
            params: params,
            paramMappings: paramMappings
        };
    }
    function pointwiseConvLayer(x12, params, strides) {
        return Ze(function() {
            var out = qc(x12, params.filters, strides, 'same');
            out = rc(out, params.batch_norm_offset);
            return hu(out, 0, 6);
        });
    }
    var epsilon = 0.0010000000474974513;
    function depthwiseConvLayer(x12, params, strides) {
        return Ze(function() {
            var out = Yc(x12, params.filters, strides, 'same');
            out = ju(out, params.batch_norm_mean, params.batch_norm_variance, params.batch_norm_offset, params.batch_norm_scale, epsilon);
            return hu(out, 0, 6);
        });
    }
    function getStridesForLayerIdx(layerIdx) {
        return [
            2,
            4,
            6,
            12
        ].some(function(idx) {
            return idx === layerIdx;
        }) ? [
            2,
            2
        ] : [
            1,
            1
        ];
    }
    function mobileNetV1(x12, params) {
        return Ze(function() {
            var conv11 = null;
            var out = pointwiseConvLayer(x12, params.conv_0, [
                2,
                2
            ]);
            var convPairParams = [
                params.conv_1,
                params.conv_2,
                params.conv_3,
                params.conv_4,
                params.conv_5,
                params.conv_6,
                params.conv_7,
                params.conv_8,
                params.conv_9,
                params.conv_10,
                params.conv_11,
                params.conv_12,
                params.conv_13
            ];
            convPairParams.forEach(function(param, i41) {
                var layerIdx = i41 + 1;
                var depthwiseConvStrides = getStridesForLayerIdx(layerIdx);
                out = depthwiseConvLayer(out, param.depthwise_conv, depthwiseConvStrides);
                out = pointwiseConvLayer(out, param.pointwise_conv, [
                    1,
                    1
                ]);
                if (layerIdx === 11) conv11 = out;
            });
            if (conv11 === null) throw new Error('mobileNetV1 - output of conv layer 11 is null');
            return {
                out: out,
                conv11: conv11
            };
        });
    }
    function nonMaxSuppression$1(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {
        var numBoxes = boxes.shape[0];
        var outputSize = Math.min(maxOutputSize, numBoxes);
        var candidates = scores.map(function(score, boxIndex) {
            return {
                score: score,
                boxIndex: boxIndex
            };
        }).filter(function(c27) {
            return c27.score > scoreThreshold;
        }).sort(function(c110, c27) {
            return c27.score - c110.score;
        });
        var suppressFunc = function(x12) {
            return x12 <= iouThreshold ? 1 : 0;
        };
        var selected = [];
        candidates.forEach(function(c27) {
            if (selected.length >= outputSize) return;
            var originalScore = c27.score;
            for(var j7 = selected.length - 1; j7 >= 0; --j7){
                var iou1 = IOU(boxes, c27.boxIndex, selected[j7]);
                if (iou1 === 0) continue;
                c27.score *= suppressFunc(iou1);
                if (c27.score <= scoreThreshold) break;
            }
            if (originalScore === c27.score) selected.push(c27.boxIndex);
        });
        return selected;
    }
    function IOU(boxes, i41, j7) {
        var boxesData = boxes.arraySync();
        var yminI = Math.min(boxesData[i41][0], boxesData[i41][2]);
        var xminI = Math.min(boxesData[i41][1], boxesData[i41][3]);
        var ymaxI = Math.max(boxesData[i41][0], boxesData[i41][2]);
        var xmaxI = Math.max(boxesData[i41][1], boxesData[i41][3]);
        var yminJ = Math.min(boxesData[j7][0], boxesData[j7][2]);
        var xminJ = Math.min(boxesData[j7][1], boxesData[j7][3]);
        var ymaxJ = Math.max(boxesData[j7][0], boxesData[j7][2]);
        var xmaxJ = Math.max(boxesData[j7][1], boxesData[j7][3]);
        var areaI = (ymaxI - yminI) * (xmaxI - xminI);
        var areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);
        if (areaI <= 0 || areaJ <= 0) return 0;
        var intersectionYmin = Math.max(yminI, yminJ);
        var intersectionXmin = Math.max(xminI, xminJ);
        var intersectionYmax = Math.min(ymaxI, ymaxJ);
        var intersectionXmax = Math.min(xmaxI, xmaxJ);
        var intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0) * Math.max(intersectionXmax - intersectionXmin, 0);
        return intersectionArea / (areaI + areaJ - intersectionArea);
    }
    function getCenterCoordinatesAndSizesLayer(x12) {
        var vec = Ur(Wl(x12, [
            1,
            0
        ]));
        var sizes = [
            Cc(vec[2], vec[0]),
            Cc(vec[3], vec[1])
        ];
        var centers = [
            rc(vec[0], sc(sizes[0], On(2))),
            rc(vec[1], sc(sizes[1], On(2)))
        ];
        return {
            sizes: sizes,
            centers: centers
        };
    }
    function decodeBoxesLayer(x0, x12) {
        var _a1 = getCenterCoordinatesAndSizesLayer(x0), sizes = _a1.sizes, centers = _a1.centers;
        var vec = Ur(Wl(x12, [
            1,
            0
        ]));
        var div0_out = sc(gc(vu(sc(vec[2], On(5))), sizes[0]), On(2));
        var add0_out = rc(gc(sc(vec[0], On(10)), sizes[0]), centers[0]);
        var div1_out = sc(gc(vu(sc(vec[3], On(5))), sizes[1]), On(2));
        var add1_out = rc(gc(sc(vec[1], On(10)), sizes[1]), centers[1]);
        return Wl(Pr([
            Cc(add0_out, div0_out),
            Cc(add1_out, div1_out),
            rc(add0_out, div0_out),
            rc(add1_out, div1_out)
        ]), [
            1,
            0
        ]);
    }
    function outputLayer(boxPredictions, classPredictions, params) {
        return Ze(function() {
            var batchSize = boxPredictions.shape[0];
            var boxes = decodeBoxesLayer(Or(Lr(params.extra_dim, [
                batchSize,
                1,
                1
            ]), [
                -1,
                4
            ]), Or(boxPredictions, [
                -1,
                4
            ]));
            boxes = Or(boxes, [
                batchSize,
                boxes.shape[0] / batchSize,
                4
            ]);
            var scoresAndClasses = Iu(ml(classPredictions, [
                0,
                0,
                1
            ], [
                -1,
                -1,
                -1
            ]));
            var scores = ml(scoresAndClasses, [
                0,
                0,
                0
            ], [
                -1,
                -1,
                1
            ]);
            scores = Or(scores, [
                batchSize,
                scores.shape[1]
            ]);
            var boxesByBatch = Ur(boxes);
            var scoresByBatch = Ur(scores);
            return {
                boxes: boxesByBatch,
                scores: scoresByBatch
            };
        });
    }
    function boxPredictionLayer(x12, params) {
        return Ze(function() {
            var batchSize = x12.shape[0];
            var boxPredictionEncoding = Or(convLayer(x12, params.box_encoding_predictor), [
                batchSize,
                -1,
                1,
                4
            ]);
            var classPrediction = Or(convLayer(x12, params.class_predictor), [
                batchSize,
                -1,
                3
            ]);
            return {
                boxPredictionEncoding: boxPredictionEncoding,
                classPrediction: classPrediction
            };
        });
    }
    function predictionLayer(x12, conv11, params) {
        return Ze(function() {
            var conv0 = pointwiseConvLayer(x12, params.conv_0, [
                1,
                1
            ]);
            var conv1 = pointwiseConvLayer(conv0, params.conv_1, [
                2,
                2
            ]);
            var conv2 = pointwiseConvLayer(conv1, params.conv_2, [
                1,
                1
            ]);
            var conv3 = pointwiseConvLayer(conv2, params.conv_3, [
                2,
                2
            ]);
            var conv4 = pointwiseConvLayer(conv3, params.conv_4, [
                1,
                1
            ]);
            var conv5 = pointwiseConvLayer(conv4, params.conv_5, [
                2,
                2
            ]);
            var conv6 = pointwiseConvLayer(conv5, params.conv_6, [
                1,
                1
            ]);
            var conv7 = pointwiseConvLayer(conv6, params.conv_7, [
                2,
                2
            ]);
            var boxPrediction0 = boxPredictionLayer(conv11, params.box_predictor_0);
            var boxPrediction1 = boxPredictionLayer(x12, params.box_predictor_1);
            var boxPrediction2 = boxPredictionLayer(conv1, params.box_predictor_2);
            var boxPrediction3 = boxPredictionLayer(conv3, params.box_predictor_3);
            var boxPrediction4 = boxPredictionLayer(conv5, params.box_predictor_4);
            var boxPrediction5 = boxPredictionLayer(conv7, params.box_predictor_5);
            var boxPredictions = Yn([
                boxPrediction0.boxPredictionEncoding,
                boxPrediction1.boxPredictionEncoding,
                boxPrediction2.boxPredictionEncoding,
                boxPrediction3.boxPredictionEncoding,
                boxPrediction4.boxPredictionEncoding,
                boxPrediction5.boxPredictionEncoding
            ], 1);
            var classPredictions = Yn([
                boxPrediction0.classPrediction,
                boxPrediction1.classPrediction,
                boxPrediction2.classPrediction,
                boxPrediction3.classPrediction,
                boxPrediction4.classPrediction,
                boxPrediction5.classPrediction
            ], 1);
            return {
                boxPredictions: boxPredictions,
                classPredictions: classPredictions
            };
        });
    }
    var SsdMobilenetv1Options = function() {
        function SsdMobilenetv1Options1(_a1) {
            var _b = _a1 === void 0 ? {
            } : _a1, minConfidence = _b.minConfidence, maxResults = _b.maxResults;
            this._name = 'SsdMobilenetv1Options';
            this._minConfidence = minConfidence || 0.5;
            this._maxResults = maxResults || 100;
            if (typeof this._minConfidence !== 'number' || this._minConfidence <= 0 || this._minConfidence >= 1) throw new Error(this._name + " - expected minConfidence to be a number between 0 and 1");
            if (typeof this._maxResults !== 'number') throw new Error(this._name + " - expected maxResults to be a number");
        }
        Object.defineProperty(SsdMobilenetv1Options1.prototype, "minConfidence", {
            get: function() {
                return this._minConfidence;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SsdMobilenetv1Options1.prototype, "maxResults", {
            get: function() {
                return this._maxResults;
            },
            enumerable: true,
            configurable: true
        });
        return SsdMobilenetv1Options1;
    }();
    var SsdMobilenetv11 = function(_super) {
        __extends(SsdMobilenetv12, _super);
        function SsdMobilenetv12() {
            return _super.call(this, 'SsdMobilenetv1') || this;
        }
        SsdMobilenetv12.prototype.forwardInput = function(input) {
            var params = this.params;
            if (!params) throw new Error('SsdMobilenetv1 - load model before inference');
            return Ze(function() {
                var batchTensor = input.toBatchTensor(512, false).toFloat();
                var x12 = Cc(gc(batchTensor, On(0.007843137718737125)), On(1));
                var features = mobileNetV1(x12, params.mobilenetv1);
                var _a1 = predictionLayer(features.out, features.conv11, params.prediction_layer), boxPredictions = _a1.boxPredictions, classPredictions = _a1.classPredictions;
                return outputLayer(boxPredictions, classPredictions, params.output_layer);
            });
        };
        SsdMobilenetv12.prototype.forward = function(input) {
            return __awaiter(this, void 0, void 0, function() {
                var _a1;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            _a1 = this.forwardInput;
                            return [
                                4 /*yield*/ ,
                                toNetInput(input)
                            ];
                        case 1:
                            return [
                                2 /*return*/ ,
                                _a1.apply(this, [
                                    _b.sent()
                                ])
                            ];
                    }
                });
            });
        };
        SsdMobilenetv12.prototype.locateFaces = function(input, options) {
            if (options === void 0) options = {
            };
            return __awaiter(this, void 0, void 0, function() {
                var _a1, maxResults, minConfidence, netInput, _b, _boxes, _scores, boxes, scores, i41, scoresData, _c1, _d, iouThreshold, indices, reshapedDims, inputSize, padX, padY, boxesData, results;
                return __generator(this, function(_e1) {
                    switch(_e1.label){
                        case 0:
                            _a1 = new SsdMobilenetv1Options(options), maxResults = _a1.maxResults, minConfidence = _a1.minConfidence;
                            return [
                                4 /*yield*/ ,
                                toNetInput(input)
                            ];
                        case 1:
                            netInput = _e1.sent();
                            _b = this.forwardInput(netInput), _boxes = _b.boxes, _scores = _b.scores;
                            boxes = _boxes[0];
                            scores = _scores[0];
                            for(i41 = 1; i41 < _boxes.length; i41++){
                                _boxes[i41].dispose();
                                _scores[i41].dispose();
                            }
                            _d = (_c1 = Array).from;
                            return [
                                4 /*yield*/ ,
                                scores.data()
                            ];
                        case 2:
                            scoresData = _d.apply(_c1, [
                                _e1.sent()
                            ]);
                            iouThreshold = 0.5;
                            indices = nonMaxSuppression$1(boxes, scoresData, maxResults, iouThreshold, minConfidence);
                            reshapedDims = netInput.getReshapedInputDimensions(0);
                            inputSize = netInput.inputSize;
                            padX = inputSize / reshapedDims.width;
                            padY = inputSize / reshapedDims.height;
                            boxesData = boxes.arraySync();
                            results = indices.map(function(idx) {
                                var _a2 = [
                                    Math.max(0, boxesData[idx][0]),
                                    Math.min(1, boxesData[idx][2])
                                ].map(function(val) {
                                    return val * padY;
                                }), top = _a2[0], bottom = _a2[1];
                                var _b1 = [
                                    Math.max(0, boxesData[idx][1]),
                                    Math.min(1, boxesData[idx][3])
                                ].map(function(val) {
                                    return val * padX;
                                }), left = _b1[0], right = _b1[1];
                                return new FaceDetection1(scoresData[idx], new Rect1(left, top, right - left, bottom - top), {
                                    height: netInput.getInputHeight(0),
                                    width: netInput.getInputWidth(0)
                                });
                            });
                            boxes.dispose();
                            scores.dispose();
                            return [
                                2 /*return*/ ,
                                results
                            ];
                    }
                });
            });
        };
        SsdMobilenetv12.prototype.getDefaultModelName = function() {
            return 'ssd_mobilenetv1_model';
        };
        SsdMobilenetv12.prototype.extractParamsFromWeigthMap = function(weightMap) {
            return extractParamsFromWeigthMap$5(weightMap);
        };
        SsdMobilenetv12.prototype.extractParams = function(weights) {
            return extractParams$5(weights);
        };
        return SsdMobilenetv12;
    }(NeuralNetwork);
    function createSsdMobilenetv1(weights) {
        var net = new SsdMobilenetv11();
        net.extractWeights(weights);
        return net;
    }
    function createFaceDetectionNet(weights) {
        return createSsdMobilenetv1(weights);
    }
    // alias for backward compatibily
    var FaceDetectionNet1 = function(_super) {
        __extends(FaceDetectionNet2, _super);
        function FaceDetectionNet2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return FaceDetectionNet2;
    }(SsdMobilenetv11);
    var IOU_THRESHOLD = 0.4;
    var BOX_ANCHORS = [
        new Point(0.738768, 0.874946),
        new Point(2.42204, 2.65704),
        new Point(4.30971, 7.04493),
        new Point(10.246, 4.59428),
        new Point(12.6868, 11.8741)
    ];
    var BOX_ANCHORS_SEPARABLE = [
        new Point(1.603231, 2.094468),
        new Point(6.041143, 7.080126),
        new Point(2.882459, 3.518061),
        new Point(4.266906, 5.178857),
        new Point(9.041765, 10.66308)
    ];
    var MEAN_RGB_SEPARABLE = [
        117.001,
        114.697,
        97.404
    ];
    var DEFAULT_MODEL_NAME = 'tiny_yolov2_model';
    var DEFAULT_MODEL_NAME_SEPARABLE_CONV = 'tiny_yolov2_separable_conv_model';
    var isNumber = function(arg) {
        return typeof arg === 'number';
    };
    function validateConfig(config) {
        if (!config) throw new Error("invalid config: " + config);
        if (typeof config.withSeparableConvs !== 'boolean') throw new Error("config.withSeparableConvs has to be a boolean, have: " + config.withSeparableConvs);
        if (!isNumber(config.iouThreshold) || config.iouThreshold < 0 || config.iouThreshold > 1) throw new Error("config.iouThreshold has to be a number between [0, 1], have: " + config.iouThreshold);
        if (!Array.isArray(config.classes) || !config.classes.length || !config.classes.every(function(c27) {
            return typeof c27 === 'string';
        })) throw new Error("config.classes has to be an array class names: string[], have: " + JSON.stringify(config.classes));
        if (!Array.isArray(config.anchors) || !config.anchors.length || !config.anchors.map(function(a36) {
            return a36 || {
            };
        }).every(function(a36) {
            return isNumber(a36.x) && isNumber(a36.y);
        })) throw new Error("config.anchors has to be an array of { x: number, y: number }, have: " + JSON.stringify(config.anchors));
        if (config.meanRgb && (!Array.isArray(config.meanRgb) || config.meanRgb.length !== 3 || !config.meanRgb.every(isNumber))) throw new Error("config.meanRgb has to be an array of shape [number, number, number], have: " + JSON.stringify(config.meanRgb));
    }
    function leaky(x12) {
        return Ze(function() {
            var min = gc(x12, On(0.10000000149011612));
            return rc(Bl(Cc(x12, min)), min);
        //return tf.maximum(x, min)
        });
    }
    function convWithBatchNorm(x12, params) {
        return Ze(function() {
            var out = Ir(x12, [
                [
                    0,
                    0
                ],
                [
                    1,
                    1
                ],
                [
                    1,
                    1
                ],
                [
                    0,
                    0
                ]
            ]);
            out = qc(out, params.conv.filters, [
                1,
                1
            ], 'valid');
            out = Cc(out, params.bn.sub);
            out = gc(out, params.bn.truediv);
            out = rc(out, params.conv.bias);
            return leaky(out);
        });
    }
    function depthwiseSeparableConv$1(x12, params) {
        return Ze(function() {
            var out = Ir(x12, [
                [
                    0,
                    0
                ],
                [
                    1,
                    1
                ],
                [
                    1,
                    1
                ],
                [
                    0,
                    0
                ]
            ]);
            out = Jc(out, params.depthwise_filter, params.pointwise_filter, [
                1,
                1
            ], 'valid');
            out = rc(out, params.bias);
            return leaky(out);
        });
    }
    function extractorsFactory$6(extractWeights, paramMappings) {
        var extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);
        function extractBatchNormParams(size, mappedPrefix) {
            var sub = Mn(extractWeights(size));
            var truediv = Mn(extractWeights(size));
            paramMappings.push({
                paramPath: mappedPrefix + "/sub"
            }, {
                paramPath: mappedPrefix + "/truediv"
            });
            return {
                sub: sub,
                truediv: truediv
            };
        }
        function extractConvWithBatchNormParams(channelsIn, channelsOut, mappedPrefix) {
            var conv1 = extractConvParams(channelsIn, channelsOut, 3, mappedPrefix + "/conv");
            var bn1 = extractBatchNormParams(channelsOut, mappedPrefix + "/bn");
            return {
                conv: conv1,
                bn: bn1
            };
        }
        var extractSeparableConvParams = extractSeparableConvParamsFactory(extractWeights, paramMappings);
        return {
            extractConvParams: extractConvParams,
            extractConvWithBatchNormParams: extractConvWithBatchNormParams,
            extractSeparableConvParams: extractSeparableConvParams
        };
    }
    function extractParams$6(weights, config, boxEncodingSize, filterSizes) {
        var _a1 = extractWeightsFactory(weights), extractWeights = _a1.extractWeights, getRemainingWeights = _a1.getRemainingWeights;
        var paramMappings = [];
        var _b = extractorsFactory$6(extractWeights, paramMappings), extractConvParams = _b.extractConvParams, extractConvWithBatchNormParams = _b.extractConvWithBatchNormParams, extractSeparableConvParams = _b.extractSeparableConvParams;
        var params;
        if (config.withSeparableConvs) {
            var s0 = filterSizes[0], s110 = filterSizes[1], s210 = filterSizes[2], s37 = filterSizes[3], s41 = filterSizes[4], s51 = filterSizes[5], s63 = filterSizes[6], s71 = filterSizes[7], s81 = filterSizes[8];
            var conv0 = config.isFirstLayerConv2d ? extractConvParams(s0, s110, 3, 'conv0') : extractSeparableConvParams(s0, s110, 'conv0');
            var conv1 = extractSeparableConvParams(s110, s210, 'conv1');
            var conv2 = extractSeparableConvParams(s210, s37, 'conv2');
            var conv3 = extractSeparableConvParams(s37, s41, 'conv3');
            var conv4 = extractSeparableConvParams(s41, s51, 'conv4');
            var conv5 = extractSeparableConvParams(s51, s63, 'conv5');
            var conv6 = s71 ? extractSeparableConvParams(s63, s71, 'conv6') : undefined;
            var conv7 = s81 ? extractSeparableConvParams(s71, s81, 'conv7') : undefined;
            var conv8 = extractConvParams(s81 || s71 || s63, 5 * boxEncodingSize, 1, 'conv8');
            params = {
                conv0: conv0,
                conv1: conv1,
                conv2: conv2,
                conv3: conv3,
                conv4: conv4,
                conv5: conv5,
                conv6: conv6,
                conv7: conv7,
                conv8: conv8
            };
        } else {
            var s0 = filterSizes[0], s110 = filterSizes[1], s210 = filterSizes[2], s37 = filterSizes[3], s41 = filterSizes[4], s51 = filterSizes[5], s63 = filterSizes[6], s71 = filterSizes[7], s81 = filterSizes[8];
            var conv0 = extractConvWithBatchNormParams(s0, s110, 'conv0');
            var conv1 = extractConvWithBatchNormParams(s110, s210, 'conv1');
            var conv2 = extractConvWithBatchNormParams(s210, s37, 'conv2');
            var conv3 = extractConvWithBatchNormParams(s37, s41, 'conv3');
            var conv4 = extractConvWithBatchNormParams(s41, s51, 'conv4');
            var conv5 = extractConvWithBatchNormParams(s51, s63, 'conv5');
            var conv6 = extractConvWithBatchNormParams(s63, s71, 'conv6');
            var conv7 = extractConvWithBatchNormParams(s71, s81, 'conv7');
            var conv8 = extractConvParams(s81, 5 * boxEncodingSize, 1, 'conv8');
            params = {
                conv0: conv0,
                conv1: conv1,
                conv2: conv2,
                conv3: conv3,
                conv4: conv4,
                conv5: conv5,
                conv6: conv6,
                conv7: conv7,
                conv8: conv8
            };
        }
        if (getRemainingWeights().length !== 0) throw new Error("weights remaing after extract: " + getRemainingWeights().length);
        return {
            params: params,
            paramMappings: paramMappings
        };
    }
    function extractorsFactory$7(weightMap, paramMappings) {
        var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);
        function extractBatchNormParams(prefix) {
            var sub = extractWeightEntry(prefix + "/sub", 1);
            var truediv = extractWeightEntry(prefix + "/truediv", 1);
            return {
                sub: sub,
                truediv: truediv
            };
        }
        function extractConvParams(prefix) {
            var filters = extractWeightEntry(prefix + "/filters", 4);
            var bias = extractWeightEntry(prefix + "/bias", 1);
            return {
                filters: filters,
                bias: bias
            };
        }
        function extractConvWithBatchNormParams(prefix) {
            var conv1 = extractConvParams(prefix + "/conv");
            var bn1 = extractBatchNormParams(prefix + "/bn");
            return {
                conv: conv1,
                bn: bn1
            };
        }
        var extractSeparableConvParams = loadSeparableConvParamsFactory(extractWeightEntry);
        return {
            extractConvParams: extractConvParams,
            extractConvWithBatchNormParams: extractConvWithBatchNormParams,
            extractSeparableConvParams: extractSeparableConvParams
        };
    }
    function extractParamsFromWeigthMap$6(weightMap, config) {
        var paramMappings = [];
        var _a1 = extractorsFactory$7(weightMap, paramMappings), extractConvParams = _a1.extractConvParams, extractConvWithBatchNormParams = _a1.extractConvWithBatchNormParams, extractSeparableConvParams = _a1.extractSeparableConvParams;
        var params;
        if (config.withSeparableConvs) {
            var numFilters = config.filterSizes && config.filterSizes.length || 9;
            params = {
                conv0: config.isFirstLayerConv2d ? extractConvParams('conv0') : extractSeparableConvParams('conv0'),
                conv1: extractSeparableConvParams('conv1'),
                conv2: extractSeparableConvParams('conv2'),
                conv3: extractSeparableConvParams('conv3'),
                conv4: extractSeparableConvParams('conv4'),
                conv5: extractSeparableConvParams('conv5'),
                conv6: numFilters > 7 ? extractSeparableConvParams('conv6') : undefined,
                conv7: numFilters > 8 ? extractSeparableConvParams('conv7') : undefined,
                conv8: extractConvParams('conv8')
            };
        } else params = {
            conv0: extractConvWithBatchNormParams('conv0'),
            conv1: extractConvWithBatchNormParams('conv1'),
            conv2: extractConvWithBatchNormParams('conv2'),
            conv3: extractConvWithBatchNormParams('conv3'),
            conv4: extractConvWithBatchNormParams('conv4'),
            conv5: extractConvWithBatchNormParams('conv5'),
            conv6: extractConvWithBatchNormParams('conv6'),
            conv7: extractConvWithBatchNormParams('conv7'),
            conv8: extractConvParams('conv8')
        };
        disposeUnusedWeightTensors(weightMap, paramMappings);
        return {
            params: params,
            paramMappings: paramMappings
        };
    }
    (function(TinyYolov2SizeType) {
        TinyYolov2SizeType[TinyYolov2SizeType["XS"] = 224] = "XS";
        TinyYolov2SizeType[TinyYolov2SizeType["SM"] = 320] = "SM";
        TinyYolov2SizeType[TinyYolov2SizeType["MD"] = 416] = "MD";
        TinyYolov2SizeType[TinyYolov2SizeType["LG"] = 608] = "LG";
    })(exports.TinyYolov2SizeType || (exports.TinyYolov2SizeType = {
    }));
    var TinyYolov2Options = function() {
        function TinyYolov2Options1(_a1) {
            var _b = _a1 === void 0 ? {
            } : _a1, inputSize = _b.inputSize, scoreThreshold = _b.scoreThreshold;
            this._name = 'TinyYolov2Options';
            this._inputSize = inputSize || 416;
            this._scoreThreshold = scoreThreshold || 0.5;
            if (typeof this._inputSize !== 'number' || this._inputSize % 32 !== 0) throw new Error(this._name + " - expected inputSize to be a number divisible by 32");
            if (typeof this._scoreThreshold !== 'number' || this._scoreThreshold <= 0 || this._scoreThreshold >= 1) throw new Error(this._name + " - expected scoreThreshold to be a number between 0 and 1");
        }
        Object.defineProperty(TinyYolov2Options1.prototype, "inputSize", {
            get: function() {
                return this._inputSize;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TinyYolov2Options1.prototype, "scoreThreshold", {
            get: function() {
                return this._scoreThreshold;
            },
            enumerable: true,
            configurable: true
        });
        return TinyYolov2Options1;
    }();
    var TinyYolov2Base1 = function(_super) {
        __extends(TinyYolov2Base2, _super);
        function TinyYolov2Base2(config) {
            var _this = _super.call(this, 'TinyYolov2') || this;
            validateConfig(config);
            _this._config = config;
            return _this;
        }
        Object.defineProperty(TinyYolov2Base2.prototype, "config", {
            get: function() {
                return this._config;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TinyYolov2Base2.prototype, "withClassScores", {
            get: function() {
                return this.config.withClassScores || this.config.classes.length > 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TinyYolov2Base2.prototype, "boxEncodingSize", {
            get: function() {
                return 5 + (this.withClassScores ? this.config.classes.length : 0);
            },
            enumerable: true,
            configurable: true
        });
        TinyYolov2Base2.prototype.runTinyYolov2 = function(x12, params) {
            var out = convWithBatchNorm(x12, params.conv0);
            out = hl(out, [
                2,
                2
            ], [
                2,
                2
            ], 'same');
            out = convWithBatchNorm(out, params.conv1);
            out = hl(out, [
                2,
                2
            ], [
                2,
                2
            ], 'same');
            out = convWithBatchNorm(out, params.conv2);
            out = hl(out, [
                2,
                2
            ], [
                2,
                2
            ], 'same');
            out = convWithBatchNorm(out, params.conv3);
            out = hl(out, [
                2,
                2
            ], [
                2,
                2
            ], 'same');
            out = convWithBatchNorm(out, params.conv4);
            out = hl(out, [
                2,
                2
            ], [
                2,
                2
            ], 'same');
            out = convWithBatchNorm(out, params.conv5);
            out = hl(out, [
                2,
                2
            ], [
                1,
                1
            ], 'same');
            out = convWithBatchNorm(out, params.conv6);
            out = convWithBatchNorm(out, params.conv7);
            return convLayer(out, params.conv8, 'valid', false);
        };
        TinyYolov2Base2.prototype.runMobilenet = function(x12, params) {
            var out = this.config.isFirstLayerConv2d ? leaky(convLayer(x12, params.conv0, 'valid', false)) : depthwiseSeparableConv$1(x12, params.conv0);
            out = hl(out, [
                2,
                2
            ], [
                2,
                2
            ], 'same');
            out = depthwiseSeparableConv$1(out, params.conv1);
            out = hl(out, [
                2,
                2
            ], [
                2,
                2
            ], 'same');
            out = depthwiseSeparableConv$1(out, params.conv2);
            out = hl(out, [
                2,
                2
            ], [
                2,
                2
            ], 'same');
            out = depthwiseSeparableConv$1(out, params.conv3);
            out = hl(out, [
                2,
                2
            ], [
                2,
                2
            ], 'same');
            out = depthwiseSeparableConv$1(out, params.conv4);
            out = hl(out, [
                2,
                2
            ], [
                2,
                2
            ], 'same');
            out = depthwiseSeparableConv$1(out, params.conv5);
            out = hl(out, [
                2,
                2
            ], [
                1,
                1
            ], 'same');
            out = params.conv6 ? depthwiseSeparableConv$1(out, params.conv6) : out;
            out = params.conv7 ? depthwiseSeparableConv$1(out, params.conv7) : out;
            return convLayer(out, params.conv8, 'valid', false);
        };
        TinyYolov2Base2.prototype.forwardInput = function(input, inputSize) {
            var _this = this;
            var params = this.params;
            if (!params) throw new Error('TinyYolov2 - load model before inference');
            return Ze(function() {
                var batchTensor = input.toBatchTensor(inputSize, false).toFloat();
                batchTensor = _this.config.meanRgb ? normalize(batchTensor, _this.config.meanRgb) : batchTensor;
                batchTensor = batchTensor.div(On(256));
                return _this.config.withSeparableConvs ? _this.runMobilenet(batchTensor, params) : _this.runTinyYolov2(batchTensor, params);
            });
        };
        TinyYolov2Base2.prototype.forward = function(input, inputSize) {
            return __awaiter(this, void 0, void 0, function() {
                var _a1;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            _a1 = this.forwardInput;
                            return [
                                4 /*yield*/ ,
                                toNetInput(input)
                            ];
                        case 1:
                            return [
                                4 /*yield*/ ,
                                _a1.apply(this, [
                                    _b.sent(),
                                    inputSize
                                ])
                            ];
                        case 2:
                            return [
                                2 /*return*/ ,
                                _b.sent()
                            ];
                    }
                });
            });
        };
        TinyYolov2Base2.prototype.detect = function(input, forwardParams) {
            if (forwardParams === void 0) forwardParams = {
            };
            return __awaiter(this, void 0, void 0, function() {
                var _a1, inputSize, scoreThreshold, netInput, out, out0, inputDimensions, results, boxes, scores, classScores, classNames, indices, detections;
                var _this = this;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            _a1 = new TinyYolov2Options(forwardParams), inputSize = _a1.inputSize, scoreThreshold = _a1.scoreThreshold;
                            return [
                                4 /*yield*/ ,
                                toNetInput(input)
                            ];
                        case 1:
                            netInput = _b.sent();
                            return [
                                4 /*yield*/ ,
                                this.forwardInput(netInput, inputSize)
                            ];
                        case 2:
                            out = _b.sent();
                            out0 = Ze(function() {
                                return Ur(out)[0].expandDims();
                            });
                            inputDimensions = {
                                width: netInput.getInputWidth(0),
                                height: netInput.getInputHeight(0)
                            };
                            return [
                                4 /*yield*/ ,
                                this.extractBoxes(out0, netInput.getReshapedInputDimensions(0), scoreThreshold)
                            ];
                        case 3:
                            results = _b.sent();
                            out.dispose();
                            out0.dispose();
                            boxes = results.map(function(res) {
                                return res.box;
                            });
                            scores = results.map(function(res) {
                                return res.score;
                            });
                            classScores = results.map(function(res) {
                                return res.classScore;
                            });
                            classNames = results.map(function(res) {
                                return _this.config.classes[res.label];
                            });
                            indices = nonMaxSuppression(boxes.map(function(box) {
                                return box.rescale(inputSize);
                            }), scores, this.config.iouThreshold, true);
                            detections = indices.map(function(idx) {
                                return new ObjectDetection(scores[idx], classScores[idx], classNames[idx], boxes[idx], inputDimensions);
                            });
                            return [
                                2 /*return*/ ,
                                detections
                            ];
                    }
                });
            });
        };
        TinyYolov2Base2.prototype.getDefaultModelName = function() {
            return '';
        };
        TinyYolov2Base2.prototype.extractParamsFromWeigthMap = function(weightMap) {
            return extractParamsFromWeigthMap$6(weightMap, this.config);
        };
        TinyYolov2Base2.prototype.extractParams = function(weights) {
            var filterSizes = this.config.filterSizes || TinyYolov2Base2.DEFAULT_FILTER_SIZES;
            var numFilters = filterSizes ? filterSizes.length : undefined;
            if (numFilters !== 7 && numFilters !== 8 && numFilters !== 9) throw new Error("TinyYolov2 - expected 7 | 8 | 9 convolutional filters, but found " + numFilters + " filterSizes in config");
            return extractParams$6(weights, this.config, this.boxEncodingSize, filterSizes);
        };
        TinyYolov2Base2.prototype.extractBoxes = function(outputTensor, inputBlobDimensions, scoreThreshold) {
            return __awaiter(this, void 0, void 0, function() {
                var width, height, inputSize, correctionFactorX, correctionFactorY, numCells, numBoxes, _a1, boxesTensor, scoresTensor, classScoresTensor, results, scoresData, boxesData, row, col, anchor, score, ctX, ctY, width_1, height_1, x12, y13, pos, _b, classScore, label, _c1;
                var _this = this;
                return __generator(this, function(_d) {
                    switch(_d.label){
                        case 0:
                            width = inputBlobDimensions.width, height = inputBlobDimensions.height;
                            inputSize = Math.max(width, height);
                            correctionFactorX = inputSize / width;
                            correctionFactorY = inputSize / height;
                            numCells = outputTensor.shape[1];
                            numBoxes = this.config.anchors.length;
                            _a1 = Ze(function() {
                                var reshaped = outputTensor.reshape([
                                    numCells,
                                    numCells,
                                    numBoxes,
                                    _this.boxEncodingSize
                                ]);
                                var boxes = reshaped.slice([
                                    0,
                                    0,
                                    0,
                                    0
                                ], [
                                    numCells,
                                    numCells,
                                    numBoxes,
                                    4
                                ]);
                                var scores = reshaped.slice([
                                    0,
                                    0,
                                    0,
                                    4
                                ], [
                                    numCells,
                                    numCells,
                                    numBoxes,
                                    1
                                ]);
                                var classScores = _this.withClassScores ? go(reshaped.slice([
                                    0,
                                    0,
                                    0,
                                    5
                                ], [
                                    numCells,
                                    numCells,
                                    numBoxes,
                                    _this.config.classes.length
                                ]), 3) : On(0);
                                return [
                                    boxes,
                                    scores,
                                    classScores
                                ];
                            }), boxesTensor = _a1[0], scoresTensor = _a1[1], classScoresTensor = _a1[2];
                            results = [];
                            return [
                                4 /*yield*/ ,
                                scoresTensor.array()
                            ];
                        case 1:
                            scoresData = _d.sent();
                            return [
                                4 /*yield*/ ,
                                boxesTensor.array()
                            ];
                        case 2:
                            boxesData = _d.sent();
                            row = 0;
                            _d.label = 3;
                        case 3:
                            if (!(row < numCells)) return [
                                3 /*break*/ ,
                                12
                            ];
                            col = 0;
                            _d.label = 4;
                        case 4:
                            if (!(col < numCells)) return [
                                3 /*break*/ ,
                                11
                            ];
                            anchor = 0;
                            _d.label = 5;
                        case 5:
                            if (!(anchor < numBoxes)) return [
                                3 /*break*/ ,
                                10
                            ];
                            score = sigmoid(scoresData[row][col][anchor][0]);
                            if (!(!scoreThreshold || score > scoreThreshold)) return [
                                3 /*break*/ ,
                                9
                            ];
                            ctX = (col + sigmoid(boxesData[row][col][anchor][0])) / numCells * correctionFactorX;
                            ctY = (row + sigmoid(boxesData[row][col][anchor][1])) / numCells * correctionFactorY;
                            width_1 = Math.exp(boxesData[row][col][anchor][2]) * this.config.anchors[anchor].x / numCells * correctionFactorX;
                            height_1 = Math.exp(boxesData[row][col][anchor][3]) * this.config.anchors[anchor].y / numCells * correctionFactorY;
                            x12 = ctX - width_1 / 2;
                            y13 = ctY - height_1 / 2;
                            pos = {
                                row: row,
                                col: col,
                                anchor: anchor
                            };
                            if (!this.withClassScores) return [
                                3 /*break*/ ,
                                7
                            ];
                            return [
                                4 /*yield*/ ,
                                this.extractPredictedClass(classScoresTensor, pos)
                            ];
                        case 6:
                            _c1 = _d.sent();
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case 7:
                            _c1 = {
                                classScore: 1,
                                label: 0
                            };
                            _d.label = 8;
                        case 8:
                            _b = _c1, classScore = _b.classScore, label = _b.label;
                            results.push(__assign({
                                box: new BoundingBox1(x12, y13, x12 + width_1, y13 + height_1),
                                score: score,
                                classScore: score * classScore,
                                label: label
                            }, pos));
                            _d.label = 9;
                        case 9:
                            anchor++;
                            return [
                                3 /*break*/ ,
                                5
                            ];
                        case 10:
                            col++;
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case 11:
                            row++;
                            return [
                                3 /*break*/ ,
                                3
                            ];
                        case 12:
                            boxesTensor.dispose();
                            scoresTensor.dispose();
                            classScoresTensor.dispose();
                            return [
                                2 /*return*/ ,
                                results
                            ];
                    }
                });
            });
        };
        TinyYolov2Base2.prototype.extractPredictedClass = function(classesTensor, pos) {
            return __awaiter(this, void 0, void 0, function() {
                var row, col, anchor, classesData;
                return __generator(this, function(_a1) {
                    switch(_a1.label){
                        case 0:
                            row = pos.row, col = pos.col, anchor = pos.anchor;
                            return [
                                4 /*yield*/ ,
                                classesTensor.array()
                            ];
                        case 1:
                            classesData = _a1.sent();
                            return [
                                2 /*return*/ ,
                                Array(this.config.classes.length).fill(0).map(function(_11, i41) {
                                    return classesData[row][col][anchor][i41];
                                }).map(function(classScore, label) {
                                    return {
                                        classScore: classScore,
                                        label: label
                                    };
                                }).reduce(function(max, curr) {
                                    return max.classScore > curr.classScore ? max : curr;
                                })
                            ];
                    }
                });
            });
        };
        TinyYolov2Base2.DEFAULT_FILTER_SIZES = [
            3,
            16,
            32,
            64,
            128,
            256,
            512,
            1024,
            1024
        ];
        return TinyYolov2Base2;
    }(NeuralNetwork);
    var TinyYolov21 = function(_super) {
        __extends(TinyYolov22, _super);
        function TinyYolov22(withSeparableConvs) {
            if (withSeparableConvs === void 0) withSeparableConvs = true;
            var _this = this;
            var config = Object.assign({
            }, {
                withSeparableConvs: withSeparableConvs,
                iouThreshold: IOU_THRESHOLD,
                classes: [
                    'face'
                ]
            }, withSeparableConvs ? {
                anchors: BOX_ANCHORS_SEPARABLE,
                meanRgb: MEAN_RGB_SEPARABLE
            } : {
                anchors: BOX_ANCHORS,
                withClassScores: true
            });
            _this = _super.call(this, config) || this;
            return _this;
        }
        Object.defineProperty(TinyYolov22.prototype, "withSeparableConvs", {
            get: function() {
                return this.config.withSeparableConvs;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TinyYolov22.prototype, "anchors", {
            get: function() {
                return this.config.anchors;
            },
            enumerable: true,
            configurable: true
        });
        TinyYolov22.prototype.locateFaces = function(input, forwardParams) {
            return __awaiter(this, void 0, void 0, function() {
                var objectDetections;
                return __generator(this, function(_a1) {
                    switch(_a1.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                this.detect(input, forwardParams)
                            ];
                        case 1:
                            objectDetections = _a1.sent();
                            return [
                                2 /*return*/ ,
                                objectDetections.map(function(det) {
                                    return new FaceDetection1(det.score, det.relativeBox, {
                                        width: det.imageWidth,
                                        height: det.imageHeight
                                    });
                                })
                            ];
                    }
                });
            });
        };
        TinyYolov22.prototype.getDefaultModelName = function() {
            return this.withSeparableConvs ? DEFAULT_MODEL_NAME_SEPARABLE_CONV : DEFAULT_MODEL_NAME;
        };
        TinyYolov22.prototype.extractParamsFromWeigthMap = function(weightMap) {
            return _super.prototype.extractParamsFromWeigthMap.call(this, weightMap);
        };
        return TinyYolov22;
    }(TinyYolov2Base1);
    function createTinyYolov2(weights, withSeparableConvs) {
        if (withSeparableConvs === void 0) withSeparableConvs = true;
        var net = new TinyYolov21(withSeparableConvs);
        net.extractWeights(weights);
        return net;
    }
    var TinyFaceDetectorOptions1 = function(_super) {
        __extends(TinyFaceDetectorOptions2, _super);
        function TinyFaceDetectorOptions2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._name = 'TinyFaceDetectorOptions';
            return _this;
        }
        return TinyFaceDetectorOptions2;
    }(TinyYolov2Options);
    var ComposableTask = function() {
        function ComposableTask1() {
        }
        ComposableTask1.prototype.then = function(onfulfilled) {
            return __awaiter(this, void 0, void 0, function() {
                var _a1;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            _a1 = onfulfilled;
                            return [
                                4 /*yield*/ ,
                                this.run()
                            ];
                        case 1:
                            return [
                                2 /*return*/ ,
                                _a1.apply(void 0, [
                                    _b.sent()
                                ])
                            ];
                    }
                });
            });
        };
        ComposableTask1.prototype.run = function() {
            return __awaiter(this, void 0, void 0, function() {
                return __generator(this, function(_a1) {
                    throw new Error('ComposableTask - run is not implemented');
                });
            });
        };
        return ComposableTask1;
    }();
    function extractAllFacesAndComputeResults(parentResults, input, computeResults, extractedFaces, getRectForAlignment) {
        if (getRectForAlignment === void 0) getRectForAlignment = function(_a1) {
            var alignedRect = _a1.alignedRect;
            return alignedRect;
        };
        return __awaiter(this, void 0, void 0, function() {
            var faceBoxes, faces, _a1, _b, results;
            return __generator(this, function(_c1) {
                switch(_c1.label){
                    case 0:
                        faceBoxes = parentResults.map(function(parentResult) {
                            return isWithFaceLandmarks(parentResult) ? getRectForAlignment(parentResult) : parentResult.detection;
                        });
                        _a1 = extractedFaces;
                        if (_a1) return [
                            3 /*break*/ ,
                            5
                        ];
                        if (!(input instanceof wt)) return [
                            3 /*break*/ ,
                            2
                        ];
                        return [
                            4 /*yield*/ ,
                            extractFaceTensors(input, faceBoxes)
                        ];
                    case 1:
                        _b = _c1.sent();
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 2:
                        return [
                            4 /*yield*/ ,
                            extractFaces(input, faceBoxes)
                        ];
                    case 3:
                        _b = _c1.sent();
                        _c1.label = 4;
                    case 4:
                        _a1 = _b;
                        _c1.label = 5;
                    case 5:
                        faces = _a1;
                        return [
                            4 /*yield*/ ,
                            computeResults(faces)
                        ];
                    case 6:
                        results = _c1.sent();
                        faces.forEach(function(f28) {
                            return f28 instanceof wt && f28.dispose();
                        });
                        return [
                            2 /*return*/ ,
                            results
                        ];
                }
            });
        });
    }
    function extractSingleFaceAndComputeResult(parentResult, input, computeResult, extractedFaces, getRectForAlignment) {
        return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_a1) {
                return [
                    2 /*return*/ ,
                    extractAllFacesAndComputeResults([
                        parentResult
                    ], input, function(faces) {
                        return __awaiter(_this, void 0, void 0, function() {
                            return __generator(this, function(_a2) {
                                return [
                                    2 /*return*/ ,
                                    computeResult(faces[0])
                                ];
                            });
                        });
                    }, extractedFaces, getRectForAlignment)
                ];
            });
        });
    }
    function bgrToRgbTensor(tensor) {
        return Ze(function() {
            return Pr(Ur(tensor, 3).reverse(), 3);
        });
    }
    var CELL_STRIDE = 2;
    var CELL_SIZE = 12;
    function extractorsFactory$8(extractWeights, paramMappings) {
        var extractConvParams = extractConvParamsFactory(extractWeights, paramMappings);
        var extractFCParams = extractFCParamsFactory(extractWeights, paramMappings);
        function extractPReluParams(size, paramPath) {
            var alpha = Mn(extractWeights(size));
            paramMappings.push({
                paramPath: paramPath
            });
            return alpha;
        }
        function extractSharedParams(numFilters, mappedPrefix, isRnet) {
            if (isRnet === void 0) isRnet = false;
            var conv1 = extractConvParams(numFilters[0], numFilters[1], 3, mappedPrefix + "/conv1");
            var prelu1_alpha = extractPReluParams(numFilters[1], mappedPrefix + "/prelu1_alpha");
            var conv2 = extractConvParams(numFilters[1], numFilters[2], 3, mappedPrefix + "/conv2");
            var prelu2_alpha = extractPReluParams(numFilters[2], mappedPrefix + "/prelu2_alpha");
            var conv3 = extractConvParams(numFilters[2], numFilters[3], isRnet ? 2 : 3, mappedPrefix + "/conv3");
            var prelu3_alpha = extractPReluParams(numFilters[3], mappedPrefix + "/prelu3_alpha");
            return {
                conv1: conv1,
                prelu1_alpha: prelu1_alpha,
                conv2: conv2,
                prelu2_alpha: prelu2_alpha,
                conv3: conv3,
                prelu3_alpha: prelu3_alpha
            };
        }
        function extractPNetParams() {
            var sharedParams = extractSharedParams([
                3,
                10,
                16,
                32
            ], 'pnet');
            var conv4_1 = extractConvParams(32, 2, 1, 'pnet/conv4_1');
            var conv4_2 = extractConvParams(32, 4, 1, 'pnet/conv4_2');
            return __assign(__assign({
            }, sharedParams), {
                conv4_1: conv4_1,
                conv4_2: conv4_2
            });
        }
        function extractRNetParams() {
            var sharedParams = extractSharedParams([
                3,
                28,
                48,
                64
            ], 'rnet', true);
            var fc1 = extractFCParams(576, 128, 'rnet/fc1');
            var prelu4_alpha = extractPReluParams(128, 'rnet/prelu4_alpha');
            var fc2_1 = extractFCParams(128, 2, 'rnet/fc2_1');
            var fc2_2 = extractFCParams(128, 4, 'rnet/fc2_2');
            return __assign(__assign({
            }, sharedParams), {
                fc1: fc1,
                prelu4_alpha: prelu4_alpha,
                fc2_1: fc2_1,
                fc2_2: fc2_2
            });
        }
        function extractONetParams() {
            var sharedParams = extractSharedParams([
                3,
                32,
                64,
                64
            ], 'onet');
            var conv4 = extractConvParams(64, 128, 2, 'onet/conv4');
            var prelu4_alpha = extractPReluParams(128, 'onet/prelu4_alpha');
            var fc1 = extractFCParams(1152, 256, 'onet/fc1');
            var prelu5_alpha = extractPReluParams(256, 'onet/prelu5_alpha');
            var fc2_1 = extractFCParams(256, 2, 'onet/fc2_1');
            var fc2_2 = extractFCParams(256, 4, 'onet/fc2_2');
            var fc2_3 = extractFCParams(256, 10, 'onet/fc2_3');
            return __assign(__assign({
            }, sharedParams), {
                conv4: conv4,
                prelu4_alpha: prelu4_alpha,
                fc1: fc1,
                prelu5_alpha: prelu5_alpha,
                fc2_1: fc2_1,
                fc2_2: fc2_2,
                fc2_3: fc2_3
            });
        }
        return {
            extractPNetParams: extractPNetParams,
            extractRNetParams: extractRNetParams,
            extractONetParams: extractONetParams
        };
    }
    function extractParams$7(weights) {
        var _a1 = extractWeightsFactory(weights), extractWeights = _a1.extractWeights, getRemainingWeights = _a1.getRemainingWeights;
        var paramMappings = [];
        var _b = extractorsFactory$8(extractWeights, paramMappings), extractPNetParams = _b.extractPNetParams, extractRNetParams = _b.extractRNetParams, extractONetParams = _b.extractONetParams;
        var pnet = extractPNetParams();
        var rnet = extractRNetParams();
        var onet = extractONetParams();
        if (getRemainingWeights().length !== 0) throw new Error("weights remaing after extract: " + getRemainingWeights().length);
        return {
            params: {
                pnet: pnet,
                rnet: rnet,
                onet: onet
            },
            paramMappings: paramMappings
        };
    }
    function extractorsFactory$9(weightMap, paramMappings) {
        var extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings);
        function extractConvParams(prefix) {
            var filters = extractWeightEntry(prefix + "/weights", 4, prefix + "/filters");
            var bias = extractWeightEntry(prefix + "/bias", 1);
            return {
                filters: filters,
                bias: bias
            };
        }
        function extractFCParams(prefix) {
            var weights = extractWeightEntry(prefix + "/weights", 2);
            var bias = extractWeightEntry(prefix + "/bias", 1);
            return {
                weights: weights,
                bias: bias
            };
        }
        function extractPReluParams(paramPath) {
            return extractWeightEntry(paramPath, 1);
        }
        function extractSharedParams(prefix) {
            var conv1 = extractConvParams(prefix + "/conv1");
            var prelu1_alpha = extractPReluParams(prefix + "/prelu1_alpha");
            var conv2 = extractConvParams(prefix + "/conv2");
            var prelu2_alpha = extractPReluParams(prefix + "/prelu2_alpha");
            var conv3 = extractConvParams(prefix + "/conv3");
            var prelu3_alpha = extractPReluParams(prefix + "/prelu3_alpha");
            return {
                conv1: conv1,
                prelu1_alpha: prelu1_alpha,
                conv2: conv2,
                prelu2_alpha: prelu2_alpha,
                conv3: conv3,
                prelu3_alpha: prelu3_alpha
            };
        }
        function extractPNetParams() {
            var sharedParams = extractSharedParams('pnet');
            var conv4_1 = extractConvParams('pnet/conv4_1');
            var conv4_2 = extractConvParams('pnet/conv4_2');
            return __assign(__assign({
            }, sharedParams), {
                conv4_1: conv4_1,
                conv4_2: conv4_2
            });
        }
        function extractRNetParams() {
            var sharedParams = extractSharedParams('rnet');
            var fc1 = extractFCParams('rnet/fc1');
            var prelu4_alpha = extractPReluParams('rnet/prelu4_alpha');
            var fc2_1 = extractFCParams('rnet/fc2_1');
            var fc2_2 = extractFCParams('rnet/fc2_2');
            return __assign(__assign({
            }, sharedParams), {
                fc1: fc1,
                prelu4_alpha: prelu4_alpha,
                fc2_1: fc2_1,
                fc2_2: fc2_2
            });
        }
        function extractONetParams() {
            var sharedParams = extractSharedParams('onet');
            var conv4 = extractConvParams('onet/conv4');
            var prelu4_alpha = extractPReluParams('onet/prelu4_alpha');
            var fc1 = extractFCParams('onet/fc1');
            var prelu5_alpha = extractPReluParams('onet/prelu5_alpha');
            var fc2_1 = extractFCParams('onet/fc2_1');
            var fc2_2 = extractFCParams('onet/fc2_2');
            var fc2_3 = extractFCParams('onet/fc2_3');
            return __assign(__assign({
            }, sharedParams), {
                conv4: conv4,
                prelu4_alpha: prelu4_alpha,
                fc1: fc1,
                prelu5_alpha: prelu5_alpha,
                fc2_1: fc2_1,
                fc2_2: fc2_2,
                fc2_3: fc2_3
            });
        }
        return {
            extractPNetParams: extractPNetParams,
            extractRNetParams: extractRNetParams,
            extractONetParams: extractONetParams
        };
    }
    function extractParamsFromWeigthMap$7(weightMap) {
        var paramMappings = [];
        var _a1 = extractorsFactory$9(weightMap, paramMappings), extractPNetParams = _a1.extractPNetParams, extractRNetParams = _a1.extractRNetParams, extractONetParams = _a1.extractONetParams;
        var pnet = extractPNetParams();
        var rnet = extractRNetParams();
        var onet = extractONetParams();
        disposeUnusedWeightTensors(weightMap, paramMappings);
        return {
            params: {
                pnet: pnet,
                rnet: rnet,
                onet: onet
            },
            paramMappings: paramMappings
        };
    }
    function getSizesForScale(scale1, _a1) {
        var height = _a1[0], width = _a1[1];
        return {
            height: Math.floor(height * scale1),
            width: Math.floor(width * scale1)
        };
    }
    function pyramidDown(minFaceSize, scaleFactor, dims) {
        var height = dims[0], width = dims[1];
        var m19 = CELL_SIZE / minFaceSize;
        var scales = [];
        var minLayer = Math.min(height, width) * m19;
        var exp = 0;
        while(minLayer >= 12){
            scales.push(m19 * Math.pow(scaleFactor, exp));
            minLayer = minLayer * scaleFactor;
            exp += 1;
        }
        return scales;
    }
    var MtcnnBox1 = function(_super) {
        __extends(MtcnnBox2, _super);
        function MtcnnBox2(left, top, right, bottom) {
            return _super.call(this, {
                left: left,
                top: top,
                right: right,
                bottom: bottom
            }, true) || this;
        }
        return MtcnnBox2;
    }(Box);
    function normalize$1(x12) {
        return Ze(function() {
            return gc(Cc(x12, On(127.5)), On(0.0078125));
        });
    }
    function prelu(x12, alpha) {
        return Ze(function() {
            return rc(Bl(x12), gc(alpha, wu(Bl(wu(x12)))));
        });
    }
    function sharedLayer(x12, params, isPnet) {
        if (isPnet === void 0) isPnet = false;
        return Ze(function() {
            var out = convLayer(x12, params.conv1, 'valid');
            out = prelu(out, params.prelu1_alpha);
            out = hl(out, isPnet ? [
                2,
                2
            ] : [
                3,
                3
            ], [
                2,
                2
            ], 'same');
            out = convLayer(out, params.conv2, 'valid');
            out = prelu(out, params.prelu2_alpha);
            out = isPnet ? out : hl(out, [
                3,
                3
            ], [
                2,
                2
            ], 'valid');
            out = convLayer(out, params.conv3, 'valid');
            out = prelu(out, params.prelu3_alpha);
            return out;
        });
    }
    function PNet(x12, params) {
        return Ze(function() {
            var out = sharedLayer(x12, params, true);
            var conv1 = convLayer(out, params.conv4_1, 'valid');
            var max = wr(Sl(conv1, 3), 3);
            var prob = go(Cc(conv1, max), 3);
            var regions = convLayer(out, params.conv4_2, 'valid');
            return {
                prob: prob,
                regions: regions
            };
        });
    }
    function rescaleAndNormalize(x12, scale1) {
        return Ze(function() {
            var _a1 = getSizesForScale(scale1, x12.shape.slice(1)), height = _a1.height, width = _a1.width;
            var resized = Oh.resizeBilinear(x12, [
                height,
                width
            ]);
            var normalized = normalize$1(resized);
            return Wl(normalized, [
                0,
                2,
                1,
                3
            ]);
        });
    }
    function extractBoundingBoxes(scoresTensor, regionsTensor, scale1, scoreThreshold) {
        // TODO: fix this!, maybe better to use tf.gather here
        var indices = [];
        var scoresData = scoresTensor.arraySync();
        for(var y13 = 0; y13 < scoresTensor.shape[0]; y13++){
            for(var x12 = 0; x12 < scoresTensor.shape[1]; x12++)if (scoresData[y13][x12] >= scoreThreshold) indices.push(new Point(x12, y13));
        }
        var boundingBoxes = indices.map(function(idx) {
            var cell = new BoundingBox1(Math.round((idx.y * CELL_STRIDE + 1) / scale1), Math.round((idx.x * CELL_STRIDE + 1) / scale1), Math.round((idx.y * CELL_STRIDE + CELL_SIZE) / scale1), Math.round((idx.x * CELL_STRIDE + CELL_SIZE) / scale1));
            var score = scoresData[idx.y][idx.x];
            var regionsData = regionsTensor.arraySync();
            var region = new MtcnnBox1(regionsData[idx.y][idx.x][0], regionsData[idx.y][idx.x][1], regionsData[idx.y][idx.x][2], regionsData[idx.y][idx.x][3]);
            return {
                cell: cell,
                score: score,
                region: region
            };
        });
        return boundingBoxes;
    }
    function stage1(imgTensor, scales, scoreThreshold, params, stats) {
        stats.stage1 = [];
        var pnetOutputs = scales.map(function(scale1) {
            return Ze(function() {
                var statsForScale = {
                    scale: scale1
                };
                var resized = rescaleAndNormalize(imgTensor, scale1);
                var ts1 = Date.now();
                var _a1 = PNet(resized, params), prob = _a1.prob, regions = _a1.regions;
                statsForScale.pnet = Date.now() - ts1;
                var scoresTensor = Ur(Ur(prob, 3)[1])[0];
                var regionsTensor = Ur(regions)[0];
                return {
                    scoresTensor: scoresTensor,
                    regionsTensor: regionsTensor,
                    scale: scale1,
                    statsForScale: statsForScale
                };
            });
        });
        var boxesForScale = pnetOutputs.map(function(_a1) {
            var scoresTensor = _a1.scoresTensor, regionsTensor = _a1.regionsTensor, scale1 = _a1.scale, statsForScale = _a1.statsForScale;
            var boundingBoxes = extractBoundingBoxes(scoresTensor, regionsTensor, scale1, scoreThreshold);
            scoresTensor.dispose();
            regionsTensor.dispose();
            if (!boundingBoxes.length) {
                stats.stage1.push(statsForScale);
                return [];
            }
            var ts1 = Date.now();
            var indices = nonMaxSuppression(boundingBoxes.map(function(bbox) {
                return bbox.cell;
            }), boundingBoxes.map(function(bbox) {
                return bbox.score;
            }), 0.5);
            statsForScale.nms = Date.now() - ts1;
            statsForScale.numBoxes = indices.length;
            stats.stage1.push(statsForScale);
            return indices.map(function(boxIdx) {
                return boundingBoxes[boxIdx];
            });
        });
        var allBoxes = boxesForScale.reduce(function(all, boxes) {
            return all.concat(boxes);
        }, []);
        var finalBoxes = [];
        var finalScores = [];
        if (allBoxes.length > 0) {
            var ts1 = Date.now();
            var indices = nonMaxSuppression(allBoxes.map(function(bbox) {
                return bbox.cell;
            }), allBoxes.map(function(bbox) {
                return bbox.score;
            }), 0.7);
            stats.stage1_nms = Date.now() - ts1;
            finalScores = indices.map(function(idx) {
                return allBoxes[idx].score;
            });
            finalBoxes = indices.map(function(idx) {
                return allBoxes[idx];
            }).map(function(_a1) {
                var cell = _a1.cell, region = _a1.region;
                return new BoundingBox1(cell.left + region.left * cell.width, cell.top + region.top * cell.height, cell.right + region.right * cell.width, cell.bottom + region.bottom * cell.height).toSquare().round();
            });
        }
        return {
            boxes: finalBoxes,
            scores: finalScores
        };
    }
    function extractImagePatches(img, boxes, _a1) {
        var width = _a1.width, height = _a1.height;
        return __awaiter(this, void 0, void 0, function() {
            var imgCtx, bitmaps, imagePatchesDatas;
            var _this = this;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        imgCtx = getContext2dOrThrow(img);
                        return [
                            4 /*yield*/ ,
                            Promise.all(boxes.map(function(box) {
                                return __awaiter(_this, void 0, void 0, function() {
                                    var _a2, y13, ey, x13, ex, fromX, fromY, imgData;
                                    return __generator(this, function(_b1) {
                                        _a2 = box.padAtBorders(img.height, img.width), y13 = _a2.y, ey = _a2.ey, x13 = _a2.x, ex = _a2.ex;
                                        fromX = x13 - 1;
                                        fromY = y13 - 1;
                                        imgData = imgCtx.getImageData(fromX, fromY, ex - fromX, ey - fromY);
                                        return [
                                            2 /*return*/ ,
                                            env.isNodejs() ? createCanvasFromMedia(imgData) : createImageBitmap(imgData)
                                        ];
                                    });
                                });
                            }))
                        ];
                    case 1:
                        bitmaps = _b.sent();
                        imagePatchesDatas = [];
                        bitmaps.forEach(function(bmp) {
                            var patch = createCanvas({
                                width: width,
                                height: height
                            });
                            var patchCtx = getContext2dOrThrow(patch);
                            patchCtx.drawImage(bmp, 0, 0, width, height);
                            var data = patchCtx.getImageData(0, 0, width, height).data;
                            var currData = [];
                            // RGBA -> BGR
                            for(var i41 = 0; i41 < data.length; i41 += 4){
                                currData.push(data[i41 + 2]);
                                currData.push(data[i41 + 1]);
                                currData.push(data[i41]);
                            }
                            imagePatchesDatas.push(currData);
                        });
                        return [
                            2 /*return*/ ,
                            imagePatchesDatas.map(function(data) {
                                var t1 = Ze(function() {
                                    var imagePatchTensor = Wl(Ln(data, [
                                        1,
                                        width,
                                        height,
                                        3
                                    ]), [
                                        0,
                                        2,
                                        1,
                                        3
                                    ]).toFloat();
                                    return normalize$1(imagePatchTensor);
                                });
                                return t1;
                            })
                        ];
                }
            });
        });
    }
    function RNet(x13, params) {
        return Ze(function() {
            var convOut = sharedLayer(x13, params);
            var vectorized = Or(convOut, [
                convOut.shape[0],
                params.fc1.weights.shape[0]
            ]);
            var fc1 = fullyConnectedLayer(vectorized, params.fc1);
            var prelu4 = prelu(fc1, params.prelu4_alpha);
            var fc2_1 = fullyConnectedLayer(prelu4, params.fc2_1);
            var max = wr(Sl(fc2_1, 1), 1);
            var prob = go(Cc(fc2_1, max), 1);
            var regions = fullyConnectedLayer(prelu4, params.fc2_2);
            var scores = Ur(prob, 1)[1];
            return {
                scores: scores,
                regions: regions
            };
        });
    }
    function stage2(img, inputBoxes, scoreThreshold, params, stats) {
        return __awaiter(this, void 0, void 0, function() {
            var ts2, rnetInputs, rnetOuts, scoresTensor, scores, _a1, _b, indices, filteredBoxes, filteredScores, finalBoxes, finalScores, indicesNms, regions_1;
            return __generator(this, function(_c1) {
                switch(_c1.label){
                    case 0:
                        ts2 = Date.now();
                        return [
                            4 /*yield*/ ,
                            extractImagePatches(img, inputBoxes, {
                                width: 24,
                                height: 24
                            })
                        ];
                    case 1:
                        rnetInputs = _c1.sent();
                        stats.stage2_extractImagePatches = Date.now() - ts2;
                        ts2 = Date.now();
                        rnetOuts = rnetInputs.map(function(rnetInput) {
                            var out = RNet(rnetInput, params);
                            rnetInput.dispose();
                            return out;
                        });
                        stats.stage2_rnet = Date.now() - ts2;
                        scoresTensor = rnetOuts.length > 1 ? Yn(rnetOuts.map(function(out) {
                            return out.scores;
                        })) : rnetOuts[0].scores;
                        _b = (_a1 = Array).from;
                        return [
                            4 /*yield*/ ,
                            scoresTensor.data()
                        ];
                    case 2:
                        scores = _b.apply(_a1, [
                            _c1.sent()
                        ]);
                        scoresTensor.dispose();
                        indices = scores.map(function(score, idx) {
                            return {
                                score: score,
                                idx: idx
                            };
                        }).filter(function(c27) {
                            return c27.score > scoreThreshold;
                        }).map(function(_a2) {
                            var idx = _a2.idx;
                            return idx;
                        });
                        filteredBoxes = indices.map(function(idx) {
                            return inputBoxes[idx];
                        });
                        filteredScores = indices.map(function(idx) {
                            return scores[idx];
                        });
                        finalBoxes = [];
                        finalScores = [];
                        if (filteredBoxes.length > 0) {
                            ts2 = Date.now();
                            indicesNms = nonMaxSuppression(filteredBoxes, filteredScores, 0.7);
                            stats.stage2_nms = Date.now() - ts2;
                            regions_1 = indicesNms.map(function(idx) {
                                var regionsData = rnetOuts[indices[idx]].regions.arraySync();
                                return new MtcnnBox1(regionsData[0][0], regionsData[0][1], regionsData[0][2], regionsData[0][3]);
                            });
                            finalScores = indicesNms.map(function(idx) {
                                return filteredScores[idx];
                            });
                            finalBoxes = indicesNms.map(function(idx, i41) {
                                return filteredBoxes[idx].calibrate(regions_1[i41]);
                            });
                        }
                        rnetOuts.forEach(function(t1) {
                            t1.regions.dispose();
                            t1.scores.dispose();
                        });
                        return [
                            2 /*return*/ ,
                            {
                                boxes: finalBoxes,
                                scores: finalScores
                            }
                        ];
                }
            });
        });
    }
    function ONet(x13, params) {
        return Ze(function() {
            var out = sharedLayer(x13, params);
            out = hl(out, [
                2,
                2
            ], [
                2,
                2
            ], 'same');
            out = convLayer(out, params.conv4, 'valid');
            out = prelu(out, params.prelu4_alpha);
            var vectorized = Or(out, [
                out.shape[0],
                params.fc1.weights.shape[0]
            ]);
            var fc1 = fullyConnectedLayer(vectorized, params.fc1);
            var prelu5 = prelu(fc1, params.prelu5_alpha);
            var fc2_1 = fullyConnectedLayer(prelu5, params.fc2_1);
            var max = wr(Sl(fc2_1, 1), 1);
            var prob = go(Cc(fc2_1, max), 1);
            var regions = fullyConnectedLayer(prelu5, params.fc2_2);
            var points = fullyConnectedLayer(prelu5, params.fc2_3);
            var scores = Ur(prob, 1)[1];
            return {
                scores: scores,
                regions: regions,
                points: points
            };
        });
    }
    function stage3(img, inputBoxes, scoreThreshold, params, stats) {
        return __awaiter(this, void 0, void 0, function() {
            var ts2, onetInputs, onetOuts, scoresTensor, scores, _a1, _b, indices, filteredRegions, filteredBoxes, filteredScores, finalBoxes, finalScores, points, indicesNms;
            return __generator(this, function(_c1) {
                switch(_c1.label){
                    case 0:
                        ts2 = Date.now();
                        return [
                            4 /*yield*/ ,
                            extractImagePatches(img, inputBoxes, {
                                width: 48,
                                height: 48
                            })
                        ];
                    case 1:
                        onetInputs = _c1.sent();
                        stats.stage3_extractImagePatches = Date.now() - ts2;
                        ts2 = Date.now();
                        onetOuts = onetInputs.map(function(onetInput) {
                            var out = ONet(onetInput, params);
                            onetInput.dispose();
                            return out;
                        });
                        stats.stage3_onet = Date.now() - ts2;
                        scoresTensor = onetOuts.length > 1 ? Yn(onetOuts.map(function(out) {
                            return out.scores;
                        })) : onetOuts[0].scores;
                        _b = (_a1 = Array).from;
                        return [
                            4 /*yield*/ ,
                            scoresTensor.data()
                        ];
                    case 2:
                        scores = _b.apply(_a1, [
                            _c1.sent()
                        ]);
                        scoresTensor.dispose();
                        indices = scores.map(function(score, idx) {
                            return {
                                score: score,
                                idx: idx
                            };
                        }).filter(function(c27) {
                            return c27.score > scoreThreshold;
                        }).map(function(_a2) {
                            var idx = _a2.idx;
                            return idx;
                        });
                        filteredRegions = indices.map(function(idx) {
                            var regionsData = onetOuts[idx].regions.arraySync();
                            return new MtcnnBox1(regionsData[0][0], regionsData[0][1], regionsData[0][2], regionsData[0][3]);
                        });
                        filteredBoxes = indices.map(function(idx, i41) {
                            return inputBoxes[idx].calibrate(filteredRegions[i41]);
                        });
                        filteredScores = indices.map(function(idx) {
                            return scores[idx];
                        });
                        finalBoxes = [];
                        finalScores = [];
                        points = [];
                        if (filteredBoxes.length > 0) {
                            ts2 = Date.now();
                            indicesNms = nonMaxSuppression(filteredBoxes, filteredScores, 0.7, false);
                            stats.stage3_nms = Date.now() - ts2;
                            finalBoxes = indicesNms.map(function(idx) {
                                return filteredBoxes[idx];
                            });
                            finalScores = indicesNms.map(function(idx) {
                                return filteredScores[idx];
                            });
                            points = indicesNms.map(function(idx, i41) {
                                return Array(5).fill(0).map(function(_11, ptIdx) {
                                    var pointsData = onetOuts[idx].points.arraySync();
                                    return new Point(pointsData[0][ptIdx] * (finalBoxes[i41].width + 1) + finalBoxes[i41].left, pointsData[0][ptIdx + 5] * (finalBoxes[i41].height + 1) + finalBoxes[i41].top);
                                });
                            });
                        }
                        onetOuts.forEach(function(t1) {
                            t1.regions.dispose();
                            t1.scores.dispose();
                            t1.points.dispose();
                        });
                        return [
                            2 /*return*/ ,
                            {
                                boxes: finalBoxes,
                                scores: finalScores,
                                points: points
                            }
                        ];
                }
            });
        });
    }
    var Mtcnn1 = function(_super) {
        __extends(Mtcnn2, _super);
        function Mtcnn2() {
            return _super.call(this, 'Mtcnn') || this;
        }
        Mtcnn2.prototype.load = function(weightsOrUrl) {
            return __awaiter(this, void 0, void 0, function() {
                return __generator(this, function(_a1) {
                    console.warn('mtcnn is deprecated and will be removed soon');
                    return [
                        2 /*return*/ ,
                        _super.prototype.load.call(this, weightsOrUrl)
                    ];
                });
            });
        };
        Mtcnn2.prototype.loadFromDisk = function(filePath) {
            return __awaiter(this, void 0, void 0, function() {
                return __generator(this, function(_a1) {
                    console.warn('mtcnn is deprecated and will be removed soon');
                    return [
                        2 /*return*/ ,
                        _super.prototype.loadFromDisk.call(this, filePath)
                    ];
                });
            });
        };
        Mtcnn2.prototype.forwardInput = function(input, forwardParams) {
            if (forwardParams === void 0) forwardParams = {
            };
            return __awaiter(this, void 0, void 0, function() {
                var params, inputCanvas, stats, tsTotal, imgTensor, onReturn, _a1, height, width, _b, minFaceSize, scaleFactor, maxNumScales, scoreThresholds, scaleSteps, scales, ts2, out1, out2, out3, results;
                return __generator(this, function(_c1) {
                    switch(_c1.label){
                        case 0:
                            params = this.params;
                            if (!params) throw new Error('Mtcnn - load model before inference');
                            inputCanvas = input.canvases[0];
                            if (!inputCanvas) throw new Error('Mtcnn - inputCanvas is not defined, note that passing tensors into Mtcnn.forwardInput is not supported yet.');
                            stats = {
                            };
                            tsTotal = Date.now();
                            imgTensor = Ze(function() {
                                return bgrToRgbTensor(wr(id.fromPixels(inputCanvas)).toFloat());
                            });
                            onReturn = function(results1) {
                                // dispose tensors on return
                                imgTensor.dispose();
                                stats.total = Date.now() - tsTotal;
                                return results1;
                            };
                            _a1 = imgTensor.shape.slice(1), height = _a1[0], width = _a1[1];
                            _b = new MtcnnOptions(forwardParams), minFaceSize = _b.minFaceSize, scaleFactor = _b.scaleFactor, maxNumScales = _b.maxNumScales, scoreThresholds = _b.scoreThresholds, scaleSteps = _b.scaleSteps;
                            scales = (scaleSteps || pyramidDown(minFaceSize, scaleFactor, [
                                height,
                                width
                            ])).filter(function(scale1) {
                                var sizes = getSizesForScale(scale1, [
                                    height,
                                    width
                                ]);
                                return Math.min(sizes.width, sizes.height) > CELL_SIZE;
                            }).slice(0, maxNumScales);
                            stats.scales = scales;
                            stats.pyramid = scales.map(function(scale1) {
                                return getSizesForScale(scale1, [
                                    height,
                                    width
                                ]);
                            });
                            ts2 = Date.now();
                            return [
                                4 /*yield*/ ,
                                stage1(imgTensor, scales, scoreThresholds[0], params.pnet, stats)
                            ];
                        case 1:
                            out1 = _c1.sent();
                            stats.total_stage1 = Date.now() - ts2;
                            if (!out1.boxes.length) return [
                                2 /*return*/ ,
                                onReturn({
                                    results: [],
                                    stats: stats
                                })
                            ];
                            stats.stage2_numInputBoxes = out1.boxes.length;
                            // using the inputCanvas to extract and resize the image patches, since it is faster
                            // than doing this on the gpu
                            ts2 = Date.now();
                            return [
                                4 /*yield*/ ,
                                stage2(inputCanvas, out1.boxes, scoreThresholds[1], params.rnet, stats)
                            ];
                        case 2:
                            out2 = _c1.sent();
                            stats.total_stage2 = Date.now() - ts2;
                            if (!out2.boxes.length) return [
                                2 /*return*/ ,
                                onReturn({
                                    results: [],
                                    stats: stats
                                })
                            ];
                            stats.stage3_numInputBoxes = out2.boxes.length;
                            ts2 = Date.now();
                            return [
                                4 /*yield*/ ,
                                stage3(inputCanvas, out2.boxes, scoreThresholds[2], params.onet, stats)
                            ];
                        case 3:
                            out3 = _c1.sent();
                            stats.total_stage3 = Date.now() - ts2;
                            results = out3.boxes.map(function(box, idx) {
                                return extendWithFaceLandmarks(extendWithFaceDetection({
                                }, new FaceDetection1(out3.scores[idx], new Rect1(box.left / width, box.top / height, box.width / width, box.height / height), {
                                    height: height,
                                    width: width
                                })), new FaceLandmarks51(out3.points[idx].map(function(pt1) {
                                    return pt1.sub(new Point(box.left, box.top)).div(new Point(box.width, box.height));
                                }), {
                                    width: box.width,
                                    height: box.height
                                }));
                            });
                            return [
                                2 /*return*/ ,
                                onReturn({
                                    results: results,
                                    stats: stats
                                })
                            ];
                    }
                });
            });
        };
        Mtcnn2.prototype.forward = function(input, forwardParams) {
            if (forwardParams === void 0) forwardParams = {
            };
            return __awaiter(this, void 0, void 0, function() {
                var _a1;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            _a1 = this.forwardInput;
                            return [
                                4 /*yield*/ ,
                                toNetInput(input)
                            ];
                        case 1:
                            return [
                                4 /*yield*/ ,
                                _a1.apply(this, [
                                    _b.sent(),
                                    forwardParams
                                ])
                            ];
                        case 2:
                            return [
                                2 /*return*/ ,
                                _b.sent().results
                            ];
                    }
                });
            });
        };
        Mtcnn2.prototype.forwardWithStats = function(input, forwardParams) {
            if (forwardParams === void 0) forwardParams = {
            };
            return __awaiter(this, void 0, void 0, function() {
                var _a1;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            _a1 = this.forwardInput;
                            return [
                                4 /*yield*/ ,
                                toNetInput(input)
                            ];
                        case 1:
                            return [
                                2 /*return*/ ,
                                _a1.apply(this, [
                                    _b.sent(),
                                    forwardParams
                                ])
                            ];
                    }
                });
            });
        };
        Mtcnn2.prototype.getDefaultModelName = function() {
            return 'mtcnn_model';
        };
        Mtcnn2.prototype.extractParamsFromWeigthMap = function(weightMap) {
            return extractParamsFromWeigthMap$7(weightMap);
        };
        Mtcnn2.prototype.extractParams = function(weights) {
            return extractParams$7(weights);
        };
        return Mtcnn2;
    }(NeuralNetwork);
    var IOU_THRESHOLD$1 = 0.4;
    var BOX_ANCHORS$1 = [
        new Point(1.603231, 2.094468),
        new Point(6.041143, 7.080126),
        new Point(2.882459, 3.518061),
        new Point(4.266906, 5.178857),
        new Point(9.041765, 10.66308)
    ];
    var MEAN_RGB = [
        117.001,
        114.697,
        97.404
    ];
    var TinyFaceDetector1 = function(_super) {
        __extends(TinyFaceDetector2, _super);
        function TinyFaceDetector2() {
            var _this = this;
            var config = {
                withSeparableConvs: true,
                iouThreshold: IOU_THRESHOLD$1,
                classes: [
                    'face'
                ],
                anchors: BOX_ANCHORS$1,
                meanRgb: MEAN_RGB,
                isFirstLayerConv2d: true,
                filterSizes: [
                    3,
                    16,
                    32,
                    64,
                    128,
                    256,
                    512
                ]
            };
            _this = _super.call(this, config) || this;
            return _this;
        }
        Object.defineProperty(TinyFaceDetector2.prototype, "anchors", {
            get: function() {
                return this.config.anchors;
            },
            enumerable: true,
            configurable: true
        });
        TinyFaceDetector2.prototype.locateFaces = function(input, forwardParams) {
            return __awaiter(this, void 0, void 0, function() {
                var objectDetections;
                return __generator(this, function(_a1) {
                    switch(_a1.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                this.detect(input, forwardParams)
                            ];
                        case 1:
                            objectDetections = _a1.sent();
                            return [
                                2 /*return*/ ,
                                objectDetections.map(function(det) {
                                    return new FaceDetection1(det.score, det.relativeBox, {
                                        width: det.imageWidth,
                                        height: det.imageHeight
                                    });
                                })
                            ];
                    }
                });
            });
        };
        TinyFaceDetector2.prototype.getDefaultModelName = function() {
            return 'tiny_face_detector_model';
        };
        TinyFaceDetector2.prototype.extractParamsFromWeigthMap = function(weightMap) {
            return _super.prototype.extractParamsFromWeigthMap.call(this, weightMap);
        };
        return TinyFaceDetector2;
    }(TinyYolov2Base1);
    var nets = {
        ssdMobilenetv1: new SsdMobilenetv11(),
        tinyFaceDetector: new TinyFaceDetector1(),
        tinyYolov2: new TinyYolov21(),
        mtcnn: new Mtcnn1(),
        faceLandmark68Net: new FaceLandmark68Net1(),
        faceLandmark68TinyNet: new FaceLandmark68TinyNet1(),
        faceRecognitionNet: new FaceRecognitionNet1(),
        faceExpressionNet: new FaceExpressionNet1(),
        ageGenderNet: new AgeGenderNet1()
    };
    /**
   * Attempts to detect all faces in an image using SSD Mobilenetv1 Network.
   *
   * @param input The input image.
   * @param options (optional, default: see SsdMobilenetv1Options constructor for default parameters).
   * @returns Bounding box of each face with score.
   */ var ssdMobilenetv1 = function(input, options) {
        return nets.ssdMobilenetv1.locateFaces(input, options);
    };
    /**
   * Attempts to detect all faces in an image using the Tiny Face Detector.
   *
   * @param input The input image.
   * @param options (optional, default: see TinyFaceDetectorOptions constructor for default parameters).
   * @returns Bounding box of each face with score.
   */ var tinyFaceDetector = function(input, options) {
        return nets.tinyFaceDetector.locateFaces(input, options);
    };
    /**
   * Attempts to detect all faces in an image using the Tiny Yolov2 Network.
   *
   * @param input The input image.
   * @param options (optional, default: see TinyYolov2Options constructor for default parameters).
   * @returns Bounding box of each face with score.
   */ var tinyYolov2 = function(input, options) {
        return nets.tinyYolov2.locateFaces(input, options);
    };
    /**
   * Attempts to detect all faces in an image and the 5 point face landmarks
   * of each detected face using the MTCNN Network.
   *
   * @param input The input image.
   * @param options (optional, default: see MtcnnOptions constructor for default parameters).
   * @returns Bounding box of each face with score and 5 point face landmarks.
   */ var mtcnn = function(input, options) {
        return nets.mtcnn.forward(input, options);
    };
    /**
   * Detects the 68 point face landmark positions of the face shown in an image.
   *
   * @param inputs The face image extracted from the bounding box of a face. Can
   * also be an array of input images, which will be batch processed.
   * @returns 68 point face landmarks or array thereof in case of batch input.
   */ var detectFaceLandmarks = function(input) {
        return nets.faceLandmark68Net.detectLandmarks(input);
    };
    /**
   * Detects the 68 point face landmark positions of the face shown in an image
   * using a tinier version of the 68 point face landmark model, which is slightly
   * faster at inference, but also slightly less accurate.
   *
   * @param inputs The face image extracted from the bounding box of a face. Can
   * also be an array of input images, which will be batch processed.
   * @returns 68 point face landmarks or array thereof in case of batch input.
   */ var detectFaceLandmarksTiny = function(input) {
        return nets.faceLandmark68TinyNet.detectLandmarks(input);
    };
    /**
   * Computes a 128 entry vector (face descriptor / face embeddings) from the face shown in an image,
   * which uniquely represents the features of that persons face. The computed face descriptor can
   * be used to measure the similarity between faces, by computing the euclidean distance of two
   * face descriptors.
   *
   * @param inputs The face image extracted from the aligned bounding box of a face. Can
   * also be an array of input images, which will be batch processed.
   * @returns Face descriptor with 128 entries or array thereof in case of batch input.
   */ var computeFaceDescriptor = function(input) {
        return nets.faceRecognitionNet.computeFaceDescriptor(input);
    };
    /**
   * Recognizes the facial expressions from a face image.
   *
   * @param inputs The face image extracted from the bounding box of a face. Can
   * also be an array of input images, which will be batch processed.
   * @returns Facial expressions with corresponding probabilities or array thereof in case of batch input.
   */ var recognizeFaceExpressions = function(input) {
        return nets.faceExpressionNet.predictExpressions(input);
    };
    /**
   * Predicts age and gender from a face image.
   *
   * @param inputs The face image extracted from the bounding box of a face. Can
   * also be an array of input images, which will be batch processed.
   * @returns Predictions with age, gender and gender probability or array thereof in case of batch input.
   */ var predictAgeAndGender = function(input) {
        return nets.ageGenderNet.predictAgeAndGender(input);
    };
    var loadSsdMobilenetv1Model = function(url) {
        return nets.ssdMobilenetv1.load(url);
    };
    var loadTinyFaceDetectorModel = function(url) {
        return nets.tinyFaceDetector.load(url);
    };
    var loadMtcnnModel = function(url) {
        return nets.mtcnn.load(url);
    };
    var loadTinyYolov2Model = function(url) {
        return nets.tinyYolov2.load(url);
    };
    var loadFaceLandmarkModel = function(url) {
        return nets.faceLandmark68Net.load(url);
    };
    var loadFaceLandmarkTinyModel = function(url) {
        return nets.faceLandmark68TinyNet.load(url);
    };
    var loadFaceRecognitionModel = function(url) {
        return nets.faceRecognitionNet.load(url);
    };
    var loadFaceExpressionModel = function(url) {
        return nets.faceExpressionNet.load(url);
    };
    var loadAgeGenderModel = function(url) {
        return nets.ageGenderNet.load(url);
    };
    // backward compatibility
    var loadFaceDetectionModel = loadSsdMobilenetv1Model;
    var locateFaces = ssdMobilenetv1;
    var detectLandmarks = detectFaceLandmarks;
    var PredictFaceExpressionsTaskBase1 = function(_super) {
        __extends(PredictFaceExpressionsTaskBase2, _super);
        function PredictFaceExpressionsTaskBase2(parentTask, input, extractedFaces) {
            var _this = _super.call(this) || this;
            _this.parentTask = parentTask;
            _this.input = input;
            _this.extractedFaces = extractedFaces;
            return _this;
        }
        return PredictFaceExpressionsTaskBase2;
    }(ComposableTask);
    var PredictAllFaceExpressionsTask1 = function(_super) {
        __extends(PredictAllFaceExpressionsTask2, _super);
        function PredictAllFaceExpressionsTask2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PredictAllFaceExpressionsTask2.prototype.run = function() {
            return __awaiter(this, void 0, void 0, function() {
                var parentResults, faceExpressionsByFace;
                var _this = this;
                return __generator(this, function(_a1) {
                    switch(_a1.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                this.parentTask
                            ];
                        case 1:
                            parentResults = _a1.sent();
                            return [
                                4 /*yield*/ ,
                                extractAllFacesAndComputeResults(parentResults, this.input, function(faces) {
                                    return __awaiter(_this, void 0, void 0, function() {
                                        return __generator(this, function(_a2) {
                                            switch(_a2.label){
                                                case 0:
                                                    return [
                                                        4 /*yield*/ ,
                                                        Promise.all(faces.map(function(face) {
                                                            return nets.faceExpressionNet.predictExpressions(face);
                                                        }))
                                                    ];
                                                case 1:
                                                    return [
                                                        2 /*return*/ ,
                                                        _a2.sent()
                                                    ];
                                            }
                                        });
                                    });
                                }, this.extractedFaces)
                            ];
                        case 2:
                            faceExpressionsByFace = _a1.sent();
                            return [
                                2 /*return*/ ,
                                parentResults.map(function(parentResult, i41) {
                                    return extendWithFaceExpressions(parentResult, faceExpressionsByFace[i41]);
                                })
                            ];
                    }
                });
            });
        };
        PredictAllFaceExpressionsTask2.prototype.withAgeAndGender = function() {
            return new PredictAllAgeAndGenderTask1(this, this.input);
        };
        return PredictAllFaceExpressionsTask2;
    }(PredictFaceExpressionsTaskBase1);
    var PredictSingleFaceExpressionsTask1 = function(_super) {
        __extends(PredictSingleFaceExpressionsTask2, _super);
        function PredictSingleFaceExpressionsTask2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PredictSingleFaceExpressionsTask2.prototype.run = function() {
            return __awaiter(this, void 0, void 0, function() {
                var parentResult, faceExpressions;
                return __generator(this, function(_a1) {
                    switch(_a1.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                this.parentTask
                            ];
                        case 1:
                            parentResult = _a1.sent();
                            if (!parentResult) return [
                                2 /*return*/ 
                            ];
                            return [
                                4 /*yield*/ ,
                                extractSingleFaceAndComputeResult(parentResult, this.input, function(face) {
                                    return nets.faceExpressionNet.predictExpressions(face);
                                }, this.extractedFaces)
                            ];
                        case 2:
                            faceExpressions = _a1.sent();
                            return [
                                2 /*return*/ ,
                                extendWithFaceExpressions(parentResult, faceExpressions)
                            ];
                    }
                });
            });
        };
        PredictSingleFaceExpressionsTask2.prototype.withAgeAndGender = function() {
            return new PredictSingleAgeAndGenderTask1(this, this.input);
        };
        return PredictSingleFaceExpressionsTask2;
    }(PredictFaceExpressionsTaskBase1);
    var PredictAllFaceExpressionsWithFaceAlignmentTask1 = function(_super) {
        __extends(PredictAllFaceExpressionsWithFaceAlignmentTask2, _super);
        function PredictAllFaceExpressionsWithFaceAlignmentTask2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PredictAllFaceExpressionsWithFaceAlignmentTask2.prototype.withAgeAndGender = function() {
            return new PredictAllAgeAndGenderWithFaceAlignmentTask1(this, this.input);
        };
        PredictAllFaceExpressionsWithFaceAlignmentTask2.prototype.withFaceDescriptors = function() {
            return new ComputeAllFaceDescriptorsTask1(this, this.input);
        };
        return PredictAllFaceExpressionsWithFaceAlignmentTask2;
    }(PredictAllFaceExpressionsTask1);
    var PredictSingleFaceExpressionsWithFaceAlignmentTask1 = function(_super) {
        __extends(PredictSingleFaceExpressionsWithFaceAlignmentTask2, _super);
        function PredictSingleFaceExpressionsWithFaceAlignmentTask2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PredictSingleFaceExpressionsWithFaceAlignmentTask2.prototype.withAgeAndGender = function() {
            return new PredictSingleAgeAndGenderWithFaceAlignmentTask1(this, this.input);
        };
        PredictSingleFaceExpressionsWithFaceAlignmentTask2.prototype.withFaceDescriptor = function() {
            return new ComputeSingleFaceDescriptorTask1(this, this.input);
        };
        return PredictSingleFaceExpressionsWithFaceAlignmentTask2;
    }(PredictSingleFaceExpressionsTask1);
    var PredictAgeAndGenderTaskBase1 = function(_super) {
        __extends(PredictAgeAndGenderTaskBase2, _super);
        function PredictAgeAndGenderTaskBase2(parentTask, input, extractedFaces) {
            var _this = _super.call(this) || this;
            _this.parentTask = parentTask;
            _this.input = input;
            _this.extractedFaces = extractedFaces;
            return _this;
        }
        return PredictAgeAndGenderTaskBase2;
    }(ComposableTask);
    var PredictAllAgeAndGenderTask1 = function(_super) {
        __extends(PredictAllAgeAndGenderTask2, _super);
        function PredictAllAgeAndGenderTask2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PredictAllAgeAndGenderTask2.prototype.run = function() {
            return __awaiter(this, void 0, void 0, function() {
                var parentResults, ageAndGenderByFace;
                var _this = this;
                return __generator(this, function(_a1) {
                    switch(_a1.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                this.parentTask
                            ];
                        case 1:
                            parentResults = _a1.sent();
                            return [
                                4 /*yield*/ ,
                                extractAllFacesAndComputeResults(parentResults, this.input, function(faces) {
                                    return __awaiter(_this, void 0, void 0, function() {
                                        return __generator(this, function(_a2) {
                                            switch(_a2.label){
                                                case 0:
                                                    return [
                                                        4 /*yield*/ ,
                                                        Promise.all(faces.map(function(face) {
                                                            return nets.ageGenderNet.predictAgeAndGender(face);
                                                        }))
                                                    ];
                                                case 1:
                                                    return [
                                                        2 /*return*/ ,
                                                        _a2.sent()
                                                    ];
                                            }
                                        });
                                    });
                                }, this.extractedFaces)
                            ];
                        case 2:
                            ageAndGenderByFace = _a1.sent();
                            return [
                                2 /*return*/ ,
                                parentResults.map(function(parentResult, i41) {
                                    var _a2 = ageAndGenderByFace[i41], age = _a2.age, gender = _a2.gender, genderProbability = _a2.genderProbability;
                                    return extendWithAge(extendWithGender(parentResult, gender, genderProbability), age);
                                })
                            ];
                    }
                });
            });
        };
        PredictAllAgeAndGenderTask2.prototype.withFaceExpressions = function() {
            return new PredictAllFaceExpressionsTask1(this, this.input);
        };
        return PredictAllAgeAndGenderTask2;
    }(PredictAgeAndGenderTaskBase1);
    var PredictSingleAgeAndGenderTask1 = function(_super) {
        __extends(PredictSingleAgeAndGenderTask2, _super);
        function PredictSingleAgeAndGenderTask2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PredictSingleAgeAndGenderTask2.prototype.run = function() {
            return __awaiter(this, void 0, void 0, function() {
                var parentResult, _a1, age, gender, genderProbability;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                this.parentTask
                            ];
                        case 1:
                            parentResult = _b.sent();
                            if (!parentResult) return [
                                2 /*return*/ 
                            ];
                            return [
                                4 /*yield*/ ,
                                extractSingleFaceAndComputeResult(parentResult, this.input, function(face) {
                                    return nets.ageGenderNet.predictAgeAndGender(face);
                                }, this.extractedFaces)
                            ];
                        case 2:
                            _a1 = _b.sent(), age = _a1.age, gender = _a1.gender, genderProbability = _a1.genderProbability;
                            return [
                                2 /*return*/ ,
                                extendWithAge(extendWithGender(parentResult, gender, genderProbability), age)
                            ];
                    }
                });
            });
        };
        PredictSingleAgeAndGenderTask2.prototype.withFaceExpressions = function() {
            return new PredictSingleFaceExpressionsTask1(this, this.input);
        };
        return PredictSingleAgeAndGenderTask2;
    }(PredictAgeAndGenderTaskBase1);
    var PredictAllAgeAndGenderWithFaceAlignmentTask1 = function(_super) {
        __extends(PredictAllAgeAndGenderWithFaceAlignmentTask2, _super);
        function PredictAllAgeAndGenderWithFaceAlignmentTask2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PredictAllAgeAndGenderWithFaceAlignmentTask2.prototype.withFaceExpressions = function() {
            return new PredictAllFaceExpressionsWithFaceAlignmentTask1(this, this.input);
        };
        PredictAllAgeAndGenderWithFaceAlignmentTask2.prototype.withFaceDescriptors = function() {
            return new ComputeAllFaceDescriptorsTask1(this, this.input);
        };
        return PredictAllAgeAndGenderWithFaceAlignmentTask2;
    }(PredictAllAgeAndGenderTask1);
    var PredictSingleAgeAndGenderWithFaceAlignmentTask1 = function(_super) {
        __extends(PredictSingleAgeAndGenderWithFaceAlignmentTask2, _super);
        function PredictSingleAgeAndGenderWithFaceAlignmentTask2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PredictSingleAgeAndGenderWithFaceAlignmentTask2.prototype.withFaceExpressions = function() {
            return new PredictSingleFaceExpressionsWithFaceAlignmentTask1(this, this.input);
        };
        PredictSingleAgeAndGenderWithFaceAlignmentTask2.prototype.withFaceDescriptor = function() {
            return new ComputeSingleFaceDescriptorTask1(this, this.input);
        };
        return PredictSingleAgeAndGenderWithFaceAlignmentTask2;
    }(PredictSingleAgeAndGenderTask1);
    var ComputeFaceDescriptorsTaskBase1 = function(_super) {
        __extends(ComputeFaceDescriptorsTaskBase2, _super);
        function ComputeFaceDescriptorsTaskBase2(parentTask, input) {
            var _this = _super.call(this) || this;
            _this.parentTask = parentTask;
            _this.input = input;
            return _this;
        }
        return ComputeFaceDescriptorsTaskBase2;
    }(ComposableTask);
    var ComputeAllFaceDescriptorsTask1 = function(_super) {
        __extends(ComputeAllFaceDescriptorsTask2, _super);
        function ComputeAllFaceDescriptorsTask2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ComputeAllFaceDescriptorsTask2.prototype.run = function() {
            return __awaiter(this, void 0, void 0, function() {
                var parentResults, descriptors;
                return __generator(this, function(_a1) {
                    switch(_a1.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                this.parentTask
                            ];
                        case 1:
                            parentResults = _a1.sent();
                            return [
                                4 /*yield*/ ,
                                extractAllFacesAndComputeResults(parentResults, this.input, function(faces) {
                                    return Promise.all(faces.map(function(face) {
                                        return nets.faceRecognitionNet.computeFaceDescriptor(face);
                                    }));
                                }, null, function(parentResult) {
                                    return parentResult.landmarks.align(null, {
                                        useDlibAlignment: true
                                    });
                                })
                            ];
                        case 2:
                            descriptors = _a1.sent();
                            return [
                                2 /*return*/ ,
                                descriptors.map(function(descriptor, i41) {
                                    return extendWithFaceDescriptor(parentResults[i41], descriptor);
                                })
                            ];
                    }
                });
            });
        };
        ComputeAllFaceDescriptorsTask2.prototype.withFaceExpressions = function() {
            return new PredictAllFaceExpressionsWithFaceAlignmentTask1(this, this.input);
        };
        ComputeAllFaceDescriptorsTask2.prototype.withAgeAndGender = function() {
            return new PredictAllAgeAndGenderWithFaceAlignmentTask1(this, this.input);
        };
        return ComputeAllFaceDescriptorsTask2;
    }(ComputeFaceDescriptorsTaskBase1);
    var ComputeSingleFaceDescriptorTask1 = function(_super) {
        __extends(ComputeSingleFaceDescriptorTask2, _super);
        function ComputeSingleFaceDescriptorTask2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ComputeSingleFaceDescriptorTask2.prototype.run = function() {
            return __awaiter(this, void 0, void 0, function() {
                var parentResult, descriptor;
                return __generator(this, function(_a1) {
                    switch(_a1.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                this.parentTask
                            ];
                        case 1:
                            parentResult = _a1.sent();
                            if (!parentResult) return [
                                2 /*return*/ 
                            ];
                            return [
                                4 /*yield*/ ,
                                extractSingleFaceAndComputeResult(parentResult, this.input, function(face) {
                                    return nets.faceRecognitionNet.computeFaceDescriptor(face);
                                }, null, function(parentResult1) {
                                    return parentResult1.landmarks.align(null, {
                                        useDlibAlignment: true
                                    });
                                })
                            ];
                        case 2:
                            descriptor = _a1.sent();
                            return [
                                2 /*return*/ ,
                                extendWithFaceDescriptor(parentResult, descriptor)
                            ];
                    }
                });
            });
        };
        ComputeSingleFaceDescriptorTask2.prototype.withFaceExpressions = function() {
            return new PredictSingleFaceExpressionsWithFaceAlignmentTask1(this, this.input);
        };
        ComputeSingleFaceDescriptorTask2.prototype.withAgeAndGender = function() {
            return new PredictSingleAgeAndGenderWithFaceAlignmentTask1(this, this.input);
        };
        return ComputeSingleFaceDescriptorTask2;
    }(ComputeFaceDescriptorsTaskBase1);
    var DetectFaceLandmarksTaskBase1 = function(_super) {
        __extends(DetectFaceLandmarksTaskBase2, _super);
        function DetectFaceLandmarksTaskBase2(parentTask, input, useTinyLandmarkNet) {
            var _this = _super.call(this) || this;
            _this.parentTask = parentTask;
            _this.input = input;
            _this.useTinyLandmarkNet = useTinyLandmarkNet;
            return _this;
        }
        Object.defineProperty(DetectFaceLandmarksTaskBase2.prototype, "landmarkNet", {
            get: function() {
                return this.useTinyLandmarkNet ? nets.faceLandmark68TinyNet : nets.faceLandmark68Net;
            },
            enumerable: true,
            configurable: true
        });
        return DetectFaceLandmarksTaskBase2;
    }(ComposableTask);
    var DetectAllFaceLandmarksTask1 = function(_super) {
        __extends(DetectAllFaceLandmarksTask2, _super);
        function DetectAllFaceLandmarksTask2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DetectAllFaceLandmarksTask2.prototype.run = function() {
            return __awaiter(this, void 0, void 0, function() {
                var parentResults, detections, faces, _a1, faceLandmarksByFace;
                var _this = this;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                this.parentTask
                            ];
                        case 1:
                            parentResults = _b.sent();
                            detections = parentResults.map(function(res) {
                                return res.detection;
                            });
                            if (!(this.input instanceof wt)) return [
                                3 /*break*/ ,
                                3
                            ];
                            return [
                                4 /*yield*/ ,
                                extractFaceTensors(this.input, detections)
                            ];
                        case 2:
                            _a1 = _b.sent();
                            return [
                                3 /*break*/ ,
                                5
                            ];
                        case 3:
                            return [
                                4 /*yield*/ ,
                                extractFaces(this.input, detections)
                            ];
                        case 4:
                            _a1 = _b.sent();
                            _b.label = 5;
                        case 5:
                            faces = _a1;
                            return [
                                4 /*yield*/ ,
                                Promise.all(faces.map(function(face) {
                                    return _this.landmarkNet.detectLandmarks(face);
                                }))
                            ];
                        case 6:
                            faceLandmarksByFace = _b.sent();
                            faces.forEach(function(f28) {
                                return f28 instanceof wt && f28.dispose();
                            });
                            return [
                                2 /*return*/ ,
                                parentResults.map(function(parentResult, i41) {
                                    return extendWithFaceLandmarks(parentResult, faceLandmarksByFace[i41]);
                                })
                            ];
                    }
                });
            });
        };
        DetectAllFaceLandmarksTask2.prototype.withFaceExpressions = function() {
            return new PredictAllFaceExpressionsWithFaceAlignmentTask1(this, this.input);
        };
        DetectAllFaceLandmarksTask2.prototype.withAgeAndGender = function() {
            return new PredictAllAgeAndGenderWithFaceAlignmentTask1(this, this.input);
        };
        DetectAllFaceLandmarksTask2.prototype.withFaceDescriptors = function() {
            return new ComputeAllFaceDescriptorsTask1(this, this.input);
        };
        return DetectAllFaceLandmarksTask2;
    }(DetectFaceLandmarksTaskBase1);
    var DetectSingleFaceLandmarksTask1 = function(_super) {
        __extends(DetectSingleFaceLandmarksTask2, _super);
        function DetectSingleFaceLandmarksTask2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DetectSingleFaceLandmarksTask2.prototype.run = function() {
            return __awaiter(this, void 0, void 0, function() {
                var parentResult, detection, faces, _a1, landmarks;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                this.parentTask
                            ];
                        case 1:
                            parentResult = _b.sent();
                            if (!parentResult) return [
                                2 /*return*/ 
                            ];
                            detection = parentResult.detection;
                            if (!(this.input instanceof wt)) return [
                                3 /*break*/ ,
                                3
                            ];
                            return [
                                4 /*yield*/ ,
                                extractFaceTensors(this.input, [
                                    detection
                                ])
                            ];
                        case 2:
                            _a1 = _b.sent();
                            return [
                                3 /*break*/ ,
                                5
                            ];
                        case 3:
                            return [
                                4 /*yield*/ ,
                                extractFaces(this.input, [
                                    detection
                                ])
                            ];
                        case 4:
                            _a1 = _b.sent();
                            _b.label = 5;
                        case 5:
                            faces = _a1;
                            return [
                                4 /*yield*/ ,
                                this.landmarkNet.detectLandmarks(faces[0])
                            ];
                        case 6:
                            landmarks = _b.sent();
                            faces.forEach(function(f28) {
                                return f28 instanceof wt && f28.dispose();
                            });
                            return [
                                2 /*return*/ ,
                                extendWithFaceLandmarks(parentResult, landmarks)
                            ];
                    }
                });
            });
        };
        DetectSingleFaceLandmarksTask2.prototype.withFaceExpressions = function() {
            return new PredictSingleFaceExpressionsWithFaceAlignmentTask1(this, this.input);
        };
        DetectSingleFaceLandmarksTask2.prototype.withAgeAndGender = function() {
            return new PredictSingleAgeAndGenderWithFaceAlignmentTask1(this, this.input);
        };
        DetectSingleFaceLandmarksTask2.prototype.withFaceDescriptor = function() {
            return new ComputeSingleFaceDescriptorTask1(this, this.input);
        };
        return DetectSingleFaceLandmarksTask2;
    }(DetectFaceLandmarksTaskBase1);
    var DetectFacesTaskBase1 = function(_super) {
        __extends(DetectFacesTaskBase2, _super);
        function DetectFacesTaskBase2(input, options) {
            if (options === void 0) options = new SsdMobilenetv1Options();
            var _this = _super.call(this) || this;
            _this.input = input;
            _this.options = options;
            return _this;
        }
        return DetectFacesTaskBase2;
    }(ComposableTask);
    var DetectAllFacesTask1 = function(_super) {
        __extends(DetectAllFacesTask2, _super);
        function DetectAllFacesTask2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DetectAllFacesTask2.prototype.run = function() {
            return __awaiter(this, void 0, void 0, function() {
                var _a1, input, options, faceDetectionFunction;
                return __generator(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            _a1 = this, input = _a1.input, options = _a1.options;
                            if (!(options instanceof MtcnnOptions)) return [
                                3 /*break*/ ,
                                2
                            ];
                            return [
                                4 /*yield*/ ,
                                nets.mtcnn.forward(input, options)
                            ];
                        case 1:
                            return [
                                2 /*return*/ ,
                                _b.sent().map(function(result) {
                                    return result.detection;
                                })
                            ];
                        case 2:
                            faceDetectionFunction = options instanceof TinyFaceDetectorOptions1 ? function(input1) {
                                return nets.tinyFaceDetector.locateFaces(input1, options);
                            } : options instanceof SsdMobilenetv1Options ? function(input1) {
                                return nets.ssdMobilenetv1.locateFaces(input1, options);
                            } : options instanceof TinyYolov2Options ? function(input1) {
                                return nets.tinyYolov2.locateFaces(input1, options);
                            } : null;
                            if (!faceDetectionFunction) throw new Error('detectFaces - expected options to be instance of TinyFaceDetectorOptions | SsdMobilenetv1Options | MtcnnOptions | TinyYolov2Options');
                            return [
                                2 /*return*/ ,
                                faceDetectionFunction(input)
                            ];
                    }
                });
            });
        };
        DetectAllFacesTask2.prototype.runAndExtendWithFaceDetections = function() {
            var _this = this;
            return new Promise(function(res) {
                return __awaiter(_this, void 0, void 0, function() {
                    var detections;
                    return __generator(this, function(_a1) {
                        switch(_a1.label){
                            case 0:
                                return [
                                    4 /*yield*/ ,
                                    this.run()
                                ];
                            case 1:
                                detections = _a1.sent();
                                return [
                                    2 /*return*/ ,
                                    res(detections.map(function(detection) {
                                        return extendWithFaceDetection({
                                        }, detection);
                                    }))
                                ];
                        }
                    });
                });
            });
        };
        DetectAllFacesTask2.prototype.withFaceLandmarks = function(useTinyLandmarkNet) {
            if (useTinyLandmarkNet === void 0) useTinyLandmarkNet = false;
            return new DetectAllFaceLandmarksTask1(this.runAndExtendWithFaceDetections(), this.input, useTinyLandmarkNet);
        };
        DetectAllFacesTask2.prototype.withFaceExpressions = function() {
            return new PredictAllFaceExpressionsTask1(this.runAndExtendWithFaceDetections(), this.input);
        };
        DetectAllFacesTask2.prototype.withAgeAndGender = function() {
            return new PredictAllAgeAndGenderTask1(this.runAndExtendWithFaceDetections(), this.input);
        };
        return DetectAllFacesTask2;
    }(DetectFacesTaskBase1);
    var DetectSingleFaceTask1 = function(_super) {
        __extends(DetectSingleFaceTask2, _super);
        function DetectSingleFaceTask2() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DetectSingleFaceTask2.prototype.run = function() {
            return __awaiter(this, void 0, void 0, function() {
                var faceDetections, faceDetectionWithHighestScore;
                return __generator(this, function(_a1) {
                    switch(_a1.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                new DetectAllFacesTask1(this.input, this.options)
                            ];
                        case 1:
                            faceDetections = _a1.sent();
                            faceDetectionWithHighestScore = faceDetections[0];
                            faceDetections.forEach(function(faceDetection) {
                                if (faceDetection.score > faceDetectionWithHighestScore.score) faceDetectionWithHighestScore = faceDetection;
                            });
                            return [
                                2 /*return*/ ,
                                faceDetectionWithHighestScore
                            ];
                    }
                });
            });
        };
        DetectSingleFaceTask2.prototype.runAndExtendWithFaceDetection = function() {
            var _this = this;
            return new Promise(function(res) {
                return __awaiter(_this, void 0, void 0, function() {
                    var detection;
                    return __generator(this, function(_a1) {
                        switch(_a1.label){
                            case 0:
                                return [
                                    4 /*yield*/ ,
                                    this.run()
                                ];
                            case 1:
                                detection = _a1.sent();
                                return [
                                    2 /*return*/ ,
                                    res(detection ? extendWithFaceDetection({
                                    }, detection) : undefined)
                                ];
                        }
                    });
                });
            });
        };
        DetectSingleFaceTask2.prototype.withFaceLandmarks = function(useTinyLandmarkNet) {
            if (useTinyLandmarkNet === void 0) useTinyLandmarkNet = false;
            return new DetectSingleFaceLandmarksTask1(this.runAndExtendWithFaceDetection(), this.input, useTinyLandmarkNet);
        };
        DetectSingleFaceTask2.prototype.withFaceExpressions = function() {
            return new PredictSingleFaceExpressionsTask1(this.runAndExtendWithFaceDetection(), this.input);
        };
        DetectSingleFaceTask2.prototype.withAgeAndGender = function() {
            return new PredictSingleAgeAndGenderTask1(this.runAndExtendWithFaceDetection(), this.input);
        };
        return DetectSingleFaceTask2;
    }(DetectFacesTaskBase1);
    function detectSingleFace(input, options) {
        if (options === void 0) options = new SsdMobilenetv1Options();
        return new DetectSingleFaceTask1(input, options);
    }
    function detectAllFaces(input, options) {
        if (options === void 0) options = new SsdMobilenetv1Options();
        return new DetectAllFacesTask1(input, options);
    }
    // export allFaces API for backward compatibility
    function allFacesSsdMobilenetv1(input, minConfidence) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        console.warn('allFacesSsdMobilenetv1 is deprecated and will be removed soon, use the high level api instead');
                        return [
                            4 /*yield*/ ,
                            detectAllFaces(input, new SsdMobilenetv1Options(minConfidence ? {
                                minConfidence: minConfidence
                            } : {
                            })).withFaceLandmarks().withFaceDescriptors()
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _a1.sent()
                        ];
                }
            });
        });
    }
    function allFacesTinyYolov2(input, forwardParams) {
        if (forwardParams === void 0) forwardParams = {
        };
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        console.warn('allFacesTinyYolov2 is deprecated and will be removed soon, use the high level api instead');
                        return [
                            4 /*yield*/ ,
                            detectAllFaces(input, new TinyYolov2Options(forwardParams)).withFaceLandmarks().withFaceDescriptors()
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _a1.sent()
                        ];
                }
            });
        });
    }
    function allFacesMtcnn(input, forwardParams) {
        if (forwardParams === void 0) forwardParams = {
        };
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        console.warn('allFacesMtcnn is deprecated and will be removed soon, use the high level api instead');
                        return [
                            4 /*yield*/ ,
                            detectAllFaces(input, new MtcnnOptions(forwardParams)).withFaceLandmarks().withFaceDescriptors()
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _a1.sent()
                        ];
                }
            });
        });
    }
    var allFaces = allFacesSsdMobilenetv1;
    function euclideanDistance(arr1, arr2) {
        if (arr1.length !== arr2.length) throw new Error('euclideanDistance: arr1.length !== arr2.length');
        var desc1 = Array.from(arr1);
        var desc2 = Array.from(arr2);
        return Math.sqrt(desc1.map(function(val, i41) {
            return val - desc2[i41];
        }).reduce(function(res, diff) {
            return res + Math.pow(diff, 2);
        }, 0));
    }
    var FaceMatcher = function() {
        function FaceMatcher1(inputs, distanceThreshold) {
            if (distanceThreshold === void 0) distanceThreshold = 0.6;
            this._distanceThreshold = distanceThreshold;
            var inputArray = Array.isArray(inputs) ? inputs : [
                inputs
            ];
            if (!inputArray.length) throw new Error("FaceRecognizer.constructor - expected atleast one input");
            var count = 1;
            var createUniqueLabel = function() {
                return "person " + count++;
            };
            this._labeledDescriptors = inputArray.map(function(desc) {
                if (desc instanceof LabeledFaceDescriptors) return desc;
                if (desc instanceof Float32Array) return new LabeledFaceDescriptors(createUniqueLabel(), [
                    desc
                ]);
                if (desc.descriptor && desc.descriptor instanceof Float32Array) return new LabeledFaceDescriptors(createUniqueLabel(), [
                    desc.descriptor
                ]);
                throw new Error("FaceRecognizer.constructor - expected inputs to be of type LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array | Array<LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array>");
            });
        }
        Object.defineProperty(FaceMatcher1.prototype, "labeledDescriptors", {
            get: function() {
                return this._labeledDescriptors;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FaceMatcher1.prototype, "distanceThreshold", {
            get: function() {
                return this._distanceThreshold;
            },
            enumerable: true,
            configurable: true
        });
        FaceMatcher1.prototype.computeMeanDistance = function(queryDescriptor, descriptors) {
            return descriptors.map(function(d24) {
                return euclideanDistance(d24, queryDescriptor);
            }).reduce(function(d110, d24) {
                return d110 + d24;
            }, 0) / (descriptors.length || 1);
        };
        FaceMatcher1.prototype.matchDescriptor = function(queryDescriptor) {
            var _this = this;
            return this.labeledDescriptors.map(function(_a1) {
                var descriptors = _a1.descriptors, label = _a1.label;
                return new FaceMatch(label, _this.computeMeanDistance(queryDescriptor, descriptors));
            }).reduce(function(best, curr) {
                return best.distance < curr.distance ? best : curr;
            });
        };
        FaceMatcher1.prototype.findBestMatch = function(queryDescriptor) {
            var bestMatch = this.matchDescriptor(queryDescriptor);
            return bestMatch.distance < this.distanceThreshold ? bestMatch : new FaceMatch('unknown', bestMatch.distance);
        };
        FaceMatcher1.prototype.toJSON = function() {
            return {
                distanceThreshold: this.distanceThreshold,
                labeledDescriptors: this.labeledDescriptors.map(function(ld1) {
                    return ld1.toJSON();
                })
            };
        };
        FaceMatcher1.fromJSON = function(json) {
            var labeledDescriptors = json.labeledDescriptors.map(function(ld1) {
                return LabeledFaceDescriptors.fromJSON(ld1);
            });
            return new FaceMatcher1(labeledDescriptors, json.distanceThreshold);
        };
        return FaceMatcher1;
    }();
    function createMtcnn(weights) {
        var net = new Mtcnn1();
        net.extractWeights(weights);
        return net;
    }
    function createTinyFaceDetector(weights) {
        var net = new TinyFaceDetector1();
        net.extractWeights(weights);
        return net;
    }
    function resizeResults(results, dimensions) {
        var _a1 = new Dimensions(dimensions.width, dimensions.height), width = _a1.width, height = _a1.height;
        if (width <= 0 || height <= 0) throw new Error("resizeResults - invalid dimensions: " + JSON.stringify({
            width: width,
            height: height
        }));
        if (Array.isArray(results)) return results.map(function(obj) {
            return resizeResults(obj, {
                width: width,
                height: height
            });
        });
        if (isWithFaceLandmarks(results)) {
            var resizedDetection = results.detection.forSize(width, height);
            var resizedLandmarks = results.unshiftedLandmarks.forSize(resizedDetection.box.width, resizedDetection.box.height);
            return extendWithFaceLandmarks(extendWithFaceDetection(results, resizedDetection), resizedLandmarks);
        }
        if (isWithFaceDetection(results)) return extendWithFaceDetection(results, results.detection.forSize(width, height));
        if (results instanceof FaceLandmarks || results instanceof FaceDetection1) return results.forSize(width, height);
        return results;
    }
    exports.AgeGenderNet = AgeGenderNet1;
    exports.BoundingBox = BoundingBox1;
    exports.Box = Box;
    exports.ComposableTask = ComposableTask;
    exports.ComputeAllFaceDescriptorsTask = ComputeAllFaceDescriptorsTask1;
    exports.ComputeFaceDescriptorsTaskBase = ComputeFaceDescriptorsTaskBase1;
    exports.ComputeSingleFaceDescriptorTask = ComputeSingleFaceDescriptorTask1;
    exports.DetectAllFaceLandmarksTask = DetectAllFaceLandmarksTask1;
    exports.DetectAllFacesTask = DetectAllFacesTask1;
    exports.DetectFaceLandmarksTaskBase = DetectFaceLandmarksTaskBase1;
    exports.DetectFacesTaskBase = DetectFacesTaskBase1;
    exports.DetectSingleFaceLandmarksTask = DetectSingleFaceLandmarksTask1;
    exports.DetectSingleFaceTask = DetectSingleFaceTask1;
    exports.Dimensions = Dimensions;
    exports.FACE_EXPRESSION_LABELS = FACE_EXPRESSION_LABELS;
    exports.FaceDetection = FaceDetection1;
    exports.FaceDetectionNet = FaceDetectionNet1;
    exports.FaceExpressionNet = FaceExpressionNet1;
    exports.FaceExpressions = FaceExpressions;
    exports.FaceLandmark68Net = FaceLandmark68Net1;
    exports.FaceLandmark68TinyNet = FaceLandmark68TinyNet1;
    exports.FaceLandmarkNet = FaceLandmarkNet1;
    exports.FaceLandmarks = FaceLandmarks;
    exports.FaceLandmarks5 = FaceLandmarks51;
    exports.FaceLandmarks68 = FaceLandmarks681;
    exports.FaceMatch = FaceMatch;
    exports.FaceMatcher = FaceMatcher;
    exports.FaceRecognitionNet = FaceRecognitionNet1;
    exports.LabeledBox = LabeledBox1;
    exports.LabeledFaceDescriptors = LabeledFaceDescriptors;
    exports.Mtcnn = Mtcnn1;
    exports.MtcnnOptions = MtcnnOptions;
    exports.NetInput = NetInput;
    exports.NeuralNetwork = NeuralNetwork;
    exports.ObjectDetection = ObjectDetection;
    exports.Point = Point;
    exports.PredictedBox = PredictedBox1;
    exports.Rect = Rect1;
    exports.SsdMobilenetv1 = SsdMobilenetv11;
    exports.SsdMobilenetv1Options = SsdMobilenetv1Options;
    exports.TinyFaceDetector = TinyFaceDetector1;
    exports.TinyFaceDetectorOptions = TinyFaceDetectorOptions1;
    exports.TinyYolov2 = TinyYolov21;
    exports.TinyYolov2Options = TinyYolov2Options;
    exports.allFaces = allFaces;
    exports.allFacesMtcnn = allFacesMtcnn;
    exports.allFacesSsdMobilenetv1 = allFacesSsdMobilenetv1;
    exports.allFacesTinyYolov2 = allFacesTinyYolov2;
    exports.awaitMediaLoaded = awaitMediaLoaded;
    exports.bufferToImage = bufferToImage;
    exports.computeFaceDescriptor = computeFaceDescriptor;
    exports.createCanvas = createCanvas;
    exports.createCanvasFromMedia = createCanvasFromMedia;
    exports.createFaceDetectionNet = createFaceDetectionNet;
    exports.createFaceRecognitionNet = createFaceRecognitionNet;
    exports.createMtcnn = createMtcnn;
    exports.createSsdMobilenetv1 = createSsdMobilenetv1;
    exports.createTinyFaceDetector = createTinyFaceDetector;
    exports.createTinyYolov2 = createTinyYolov2;
    exports.detectAllFaces = detectAllFaces;
    exports.detectFaceLandmarks = detectFaceLandmarks;
    exports.detectFaceLandmarksTiny = detectFaceLandmarksTiny;
    exports.detectLandmarks = detectLandmarks;
    exports.detectSingleFace = detectSingleFace;
    exports.draw = index$1;
    exports.env = env;
    exports.euclideanDistance = euclideanDistance;
    exports.extendWithAge = extendWithAge;
    exports.extendWithFaceDescriptor = extendWithFaceDescriptor;
    exports.extendWithFaceDetection = extendWithFaceDetection;
    exports.extendWithFaceExpressions = extendWithFaceExpressions;
    exports.extendWithFaceLandmarks = extendWithFaceLandmarks;
    exports.extendWithGender = extendWithGender;
    exports.extractFaceTensors = extractFaceTensors;
    exports.extractFaces = extractFaces;
    exports.fetchImage = fetchImage;
    exports.fetchJson = fetchJson;
    exports.fetchNetWeights = fetchNetWeights;
    exports.fetchOrThrow = fetchOrThrow;
    exports.getContext2dOrThrow = getContext2dOrThrow;
    exports.getMediaDimensions = getMediaDimensions;
    exports.imageTensorToCanvas = imageTensorToCanvas;
    exports.imageToSquare = imageToSquare;
    exports.inverseSigmoid = inverseSigmoid;
    exports.iou = iou;
    exports.isMediaElement = isMediaElement;
    exports.isMediaLoaded = isMediaLoaded;
    exports.isWithAge = isWithAge;
    exports.isWithFaceDetection = isWithFaceDetection;
    exports.isWithFaceExpressions = isWithFaceExpressions;
    exports.isWithFaceLandmarks = isWithFaceLandmarks;
    exports.isWithGender = isWithGender;
    exports.loadAgeGenderModel = loadAgeGenderModel;
    exports.loadFaceDetectionModel = loadFaceDetectionModel;
    exports.loadFaceExpressionModel = loadFaceExpressionModel;
    exports.loadFaceLandmarkModel = loadFaceLandmarkModel;
    exports.loadFaceLandmarkTinyModel = loadFaceLandmarkTinyModel;
    exports.loadFaceRecognitionModel = loadFaceRecognitionModel;
    exports.loadMtcnnModel = loadMtcnnModel;
    exports.loadSsdMobilenetv1Model = loadSsdMobilenetv1Model;
    exports.loadTinyFaceDetectorModel = loadTinyFaceDetectorModel;
    exports.loadTinyYolov2Model = loadTinyYolov2Model;
    exports.loadWeightMap = loadWeightMap;
    exports.locateFaces = locateFaces;
    exports.matchDimensions = matchDimensions;
    exports.minBbox = minBbox;
    exports.mtcnn = mtcnn;
    exports.nets = nets;
    exports.nonMaxSuppression = nonMaxSuppression;
    exports.normalize = normalize;
    exports.padToSquare = padToSquare;
    exports.predictAgeAndGender = predictAgeAndGender;
    exports.recognizeFaceExpressions = recognizeFaceExpressions;
    exports.resizeResults = resizeResults;
    exports.resolveInput = resolveInput;
    exports.shuffleArray = shuffleArray;
    exports.sigmoid = sigmoid;
    exports.ssdMobilenetv1 = ssdMobilenetv1;
    exports.tf = tfCore_esm;
    exports.tinyFaceDetector = tinyFaceDetector;
    exports.tinyYolov2 = tinyYolov2;
    exports.toNetInput = toNetInput;
    exports.utils = index;
    exports.validateConfig = validateConfig;
    Object.defineProperty(exports, '__esModule', {
        value: true
    });
});

},{"buffer":"bpNHw","process":"6Upk8","crypto":"94ani","node-fetch":"gRcLX","util":"jtUga","fs":"8VSUO"}],"94ani":[function(require,module,exports) {
'use strict';
exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes');
exports.createHash = exports.Hash = require('create-hash');
exports.createHmac = exports.Hmac = require('create-hmac');
var algos = require('browserify-sign/algos');
var algoKeys = Object.keys(algos);
var hashes = [
    'sha1',
    'sha224',
    'sha256',
    'sha384',
    'sha512',
    'md5',
    'rmd160'
].concat(algoKeys);
exports.getHashes = function() {
    return hashes;
};
var p = require('pbkdf2');
exports.pbkdf2 = p.pbkdf2;
exports.pbkdf2Sync = p.pbkdf2Sync;
var aes = require('browserify-cipher');
exports.Cipher = aes.Cipher;
exports.createCipher = aes.createCipher;
exports.Cipheriv = aes.Cipheriv;
exports.createCipheriv = aes.createCipheriv;
exports.Decipher = aes.Decipher;
exports.createDecipher = aes.createDecipher;
exports.Decipheriv = aes.Decipheriv;
exports.createDecipheriv = aes.createDecipheriv;
exports.getCiphers = aes.getCiphers;
exports.listCiphers = aes.listCiphers;
var dh = require('diffie-hellman');
exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
exports.getDiffieHellman = dh.getDiffieHellman;
exports.createDiffieHellman = dh.createDiffieHellman;
exports.DiffieHellman = dh.DiffieHellman;
var sign = require('browserify-sign');
exports.createSign = sign.createSign;
exports.Sign = sign.Sign;
exports.createVerify = sign.createVerify;
exports.Verify = sign.Verify;
exports.createECDH = require('create-ecdh');
var publicEncrypt = require('public-encrypt');
exports.publicEncrypt = publicEncrypt.publicEncrypt;
exports.privateEncrypt = publicEncrypt.privateEncrypt;
exports.publicDecrypt = publicEncrypt.publicDecrypt;
exports.privateDecrypt = publicEncrypt.privateDecrypt;
// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })
var rf = require('randomfill');
exports.randomFill = rf.randomFill;
exports.randomFillSync = rf.randomFillSync;
exports.createCredentials = function() {
    throw new Error([
        'sorry, createCredentials is not implemented yet',
        'we accept pull requests',
        'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'));
};
exports.constants = {
    'DH_CHECK_P_NOT_SAFE_PRIME': 2,
    'DH_CHECK_P_NOT_PRIME': 1,
    'DH_UNABLE_TO_CHECK_GENERATOR': 4,
    'DH_NOT_SUITABLE_GENERATOR': 8,
    'NPN_ENABLED': 1,
    'ALPN_ENABLED': 1,
    'RSA_PKCS1_PADDING': 1,
    'RSA_SSLV23_PADDING': 2,
    'RSA_NO_PADDING': 3,
    'RSA_PKCS1_OAEP_PADDING': 4,
    'RSA_X931_PADDING': 5,
    'RSA_PKCS1_PSS_PADDING': 6,
    'POINT_CONVERSION_COMPRESSED': 2,
    'POINT_CONVERSION_UNCOMPRESSED': 4,
    'POINT_CONVERSION_HYBRID': 6
};

},{"randombytes":"cGTQk","create-hash":"jEgSe","create-hmac":"4lnDV","browserify-sign/algos":"7J8vc","pbkdf2":"4zObN","browserify-cipher":"eoMGS","diffie-hellman":"6HHyA","browserify-sign":"1GbX1","create-ecdh":"gRgrl","public-encrypt":"gPyCQ","randomfill":"3X4Qp"}],"cGTQk":[function(require,module,exports) {
var process = require("process");
var global = arguments[3];
'use strict';
// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536;
// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295;
function oldBrowser() {
    throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11');
}
var Buffer = require('safe-buffer').Buffer;
var crypto = global.crypto || global.msCrypto;
if (crypto && crypto.getRandomValues) module.exports = randomBytes;
else module.exports = oldBrowser;
function randomBytes(size, cb) {
    // phantomjs needs to throw
    if (size > MAX_UINT32) throw new RangeError('requested too many random bytes');
    var bytes = Buffer.allocUnsafe(size);
    if (size > 0) {
        if (size > MAX_BYTES) // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
        for(var generated = 0; generated < size; generated += MAX_BYTES)// buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
        else crypto.getRandomValues(bytes);
    }
    if (typeof cb === 'function') return process.nextTick(function() {
        cb(null, bytes);
    });
    return bytes;
}

},{"process":"6Upk8","safe-buffer":"8BeU0"}],"8BeU0":[function(require,module,exports) {
/* eslint-disable node/no-deprecated-api */ var buffer = require('buffer');
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') throw new TypeError('Argument must not be a number');
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === 'string') buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return buffer.SlowBuffer(size);
};

},{"buffer":"bpNHw"}],"jEgSe":[function(require,module,exports) {
'use strict';
var inherits = require('inherits');
var MD5 = require('md5.js');
var RIPEMD160 = require('ripemd160');
var sha = require('sha.js');
var Base = require('cipher-base');
function Hash(hash) {
    Base.call(this, 'digest');
    this._hash = hash;
}
inherits(Hash, Base);
Hash.prototype._update = function(data) {
    this._hash.update(data);
};
Hash.prototype._final = function() {
    return this._hash.digest();
};
module.exports = function createHash(alg) {
    alg = alg.toLowerCase();
    if (alg === 'md5') return new MD5();
    if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160();
    return new Hash(sha(alg));
};

},{"inherits":"bYMAq","md5.js":"8YRsN","ripemd160":"9vaxW","sha.js":"7XSB5","cipher-base":"981bP"}],"bYMAq":[function(require,module,exports) {
if (typeof Object.create === 'function') // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits1(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"8YRsN":[function(require,module,exports) {
'use strict';
var inherits = require('inherits');
var HashBase = require('hash-base');
var Buffer = require('safe-buffer').Buffer;
var ARRAY16 = new Array(16);
function MD5() {
    HashBase.call(this, 64);
    // state
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
}
inherits(MD5, HashBase);
MD5.prototype._update = function() {
    var M = ARRAY16;
    for(var i = 0; i < 16; ++i)M[i] = this._block.readInt32LE(i * 4);
    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;
    a = fnF(a, b, c, d, M[0], 3614090360, 7);
    d = fnF(d, a, b, c, M[1], 3905402710, 12);
    c = fnF(c, d, a, b, M[2], 606105819, 17);
    b = fnF(b, c, d, a, M[3], 3250441966, 22);
    a = fnF(a, b, c, d, M[4], 4118548399, 7);
    d = fnF(d, a, b, c, M[5], 1200080426, 12);
    c = fnF(c, d, a, b, M[6], 2821735955, 17);
    b = fnF(b, c, d, a, M[7], 4249261313, 22);
    a = fnF(a, b, c, d, M[8], 1770035416, 7);
    d = fnF(d, a, b, c, M[9], 2336552879, 12);
    c = fnF(c, d, a, b, M[10], 4294925233, 17);
    b = fnF(b, c, d, a, M[11], 2304563134, 22);
    a = fnF(a, b, c, d, M[12], 1804603682, 7);
    d = fnF(d, a, b, c, M[13], 4254626195, 12);
    c = fnF(c, d, a, b, M[14], 2792965006, 17);
    b = fnF(b, c, d, a, M[15], 1236535329, 22);
    a = fnG(a, b, c, d, M[1], 4129170786, 5);
    d = fnG(d, a, b, c, M[6], 3225465664, 9);
    c = fnG(c, d, a, b, M[11], 643717713, 14);
    b = fnG(b, c, d, a, M[0], 3921069994, 20);
    a = fnG(a, b, c, d, M[5], 3593408605, 5);
    d = fnG(d, a, b, c, M[10], 38016083, 9);
    c = fnG(c, d, a, b, M[15], 3634488961, 14);
    b = fnG(b, c, d, a, M[4], 3889429448, 20);
    a = fnG(a, b, c, d, M[9], 568446438, 5);
    d = fnG(d, a, b, c, M[14], 3275163606, 9);
    c = fnG(c, d, a, b, M[3], 4107603335, 14);
    b = fnG(b, c, d, a, M[8], 1163531501, 20);
    a = fnG(a, b, c, d, M[13], 2850285829, 5);
    d = fnG(d, a, b, c, M[2], 4243563512, 9);
    c = fnG(c, d, a, b, M[7], 1735328473, 14);
    b = fnG(b, c, d, a, M[12], 2368359562, 20);
    a = fnH(a, b, c, d, M[5], 4294588738, 4);
    d = fnH(d, a, b, c, M[8], 2272392833, 11);
    c = fnH(c, d, a, b, M[11], 1839030562, 16);
    b = fnH(b, c, d, a, M[14], 4259657740, 23);
    a = fnH(a, b, c, d, M[1], 2763975236, 4);
    d = fnH(d, a, b, c, M[4], 1272893353, 11);
    c = fnH(c, d, a, b, M[7], 4139469664, 16);
    b = fnH(b, c, d, a, M[10], 3200236656, 23);
    a = fnH(a, b, c, d, M[13], 681279174, 4);
    d = fnH(d, a, b, c, M[0], 3936430074, 11);
    c = fnH(c, d, a, b, M[3], 3572445317, 16);
    b = fnH(b, c, d, a, M[6], 76029189, 23);
    a = fnH(a, b, c, d, M[9], 3654602809, 4);
    d = fnH(d, a, b, c, M[12], 3873151461, 11);
    c = fnH(c, d, a, b, M[15], 530742520, 16);
    b = fnH(b, c, d, a, M[2], 3299628645, 23);
    a = fnI(a, b, c, d, M[0], 4096336452, 6);
    d = fnI(d, a, b, c, M[7], 1126891415, 10);
    c = fnI(c, d, a, b, M[14], 2878612391, 15);
    b = fnI(b, c, d, a, M[5], 4237533241, 21);
    a = fnI(a, b, c, d, M[12], 1700485571, 6);
    d = fnI(d, a, b, c, M[3], 2399980690, 10);
    c = fnI(c, d, a, b, M[10], 4293915773, 15);
    b = fnI(b, c, d, a, M[1], 2240044497, 21);
    a = fnI(a, b, c, d, M[8], 1873313359, 6);
    d = fnI(d, a, b, c, M[15], 4264355552, 10);
    c = fnI(c, d, a, b, M[6], 2734768916, 15);
    b = fnI(b, c, d, a, M[13], 1309151649, 21);
    a = fnI(a, b, c, d, M[4], 4149444226, 6);
    d = fnI(d, a, b, c, M[11], 3174756917, 10);
    c = fnI(c, d, a, b, M[2], 718787259, 15);
    b = fnI(b, c, d, a, M[9], 3951481745, 21);
    this._a = this._a + a | 0;
    this._b = this._b + b | 0;
    this._c = this._c + c | 0;
    this._d = this._d + d | 0;
};
MD5.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fnF(a, b, c, d, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}
function fnG(a, b, c, d, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}
function fnH(a, b, c, d, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}
function fnI(a, b, c, d, m, k, s) {
    return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}
module.exports = MD5;

},{"inherits":"bYMAq","hash-base":"5vsIr","safe-buffer":"8BeU0"}],"5vsIr":[function(require,module,exports) {
'use strict';
var Buffer = require('safe-buffer').Buffer;
var Transform = require('readable-stream').Transform;
var inherits = require('inherits');
function throwIfNotStringOrBuffer(val, prefix) {
    if (!Buffer.isBuffer(val) && typeof val !== 'string') throw new TypeError(prefix + ' must be a string or a buffer');
}
function HashBase(blockSize) {
    Transform.call(this);
    this._block = Buffer.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [
        0,
        0,
        0,
        0
    ];
    this._finalized = false;
}
inherits(HashBase, Transform);
HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
        this.update(chunk, encoding);
    } catch (err) {
        error = err;
    }
    callback(error);
};
HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
        this.push(this.digest());
    } catch (err) {
        error = err;
    }
    callback(error);
};
HashBase.prototype.update = function(data, encoding) {
    throwIfNotStringOrBuffer(data, 'Data');
    if (this._finalized) throw new Error('Digest already called');
    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);
    // consume data
    var block = this._block;
    var offset = 0;
    while(this._blockOffset + data.length - offset >= this._blockSize){
        for(var i = this._blockOffset; i < this._blockSize;)block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
    }
    while(offset < data.length)block[this._blockOffset++] = data[offset++];
    // update length
    for(var j = 0, carry = data.length * 8; carry > 0; ++j){
        this._length[j] += carry;
        carry = this._length[j] / 4294967296 | 0;
        if (carry > 0) this._length[j] -= 4294967296 * carry;
    }
    return this;
};
HashBase.prototype._update = function() {
    throw new Error('_update is not implemented');
};
HashBase.prototype.digest = function(encoding) {
    if (this._finalized) throw new Error('Digest already called');
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);
    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for(var i = 0; i < 4; ++i)this._length[i] = 0;
    return digest;
};
HashBase.prototype._digest = function() {
    throw new Error('_digest is not implemented');
};
module.exports = HashBase;

},{"safe-buffer":"3ySis","readable-stream":"ldawG","inherits":"bYMAq"}],"3ySis":[function(require,module,exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = require('buffer');
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') throw new TypeError('Argument must not be a number');
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === 'string') buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return buffer.SlowBuffer(size);
};

},{"buffer":"bpNHw"}],"ldawG":[function(require,module,exports) {
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_readable.js":"8jOvE","./lib/_stream_writable.js":"6xQ2w","./lib/_stream_duplex.js":"2tNsP","./lib/_stream_transform.js":"jyyo2","./lib/_stream_passthrough.js":"kj2t2","./lib/internal/streams/end-of-stream.js":"lHITK","./lib/internal/streams/pipeline.js":"8lMEP"}],"8jOvE":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
module.exports = Readable;
/*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require('events').EventEmitter;
var EElistenerCount = function EElistenerCount1(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require('./internal/streams/stream');
/*</replacement>*/ var Buffer = require('buffer').Buffer;
var OurUint8Array = global.Uint8Array || function() {
};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/ var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog('stream');
else debug = function debug1() {
};
/*</replacement>*/ var BufferList = require('./internal/streams/buffer_list');
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require('inherits')(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = [
    'error',
    'close',
    'destroy',
    'pause',
    'resume'
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require('./_stream_duplex');
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require('./_stream_duplex');
    if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = '';
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug('readableAddChunk', chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer',
        'Uint8Array'
    ], chunk);
    return er;
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = '';
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== '') this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var MAX_HWM = 1073741824;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
    } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit('data', ret);
    return ret;
};
function onEofChunk(stream, state) {
    debug('onEofChunk');
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    debug('emitReadable', state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
    }
}
function emitReadable_(stream) {
    var state = stream._readableState;
    debug('emitReadable_', state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);
    else src.once('end', endFn);
    dest.on('unpipe', onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug('onunpipe');
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug('onend');
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug('cleanup'); // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on('data', ondata);
    function ondata(chunk) {
        debug('ondata');
        var ret = dest.write(chunk);
        debug('dest.write', ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
    }
    dest.once('finish', onfinish);
    function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit('pipe', src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug('pipe resume');
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit('unpipe', this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug('on readable', state.length, state.reading);
            if (state.length) emitReadable(this);
            else if (!state.reading) process.nextTick(nReadingNextTick, this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === 'readable') // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === 'readable' || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
function updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount('readable') > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount('data') > 0) self.resume();
}
function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug('resume'); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
    }
    state.paused = false;
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    debug('resume', state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
    }
    this._readableState.paused = true;
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on('end', function() {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on('data', function(chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === 'function') this[i] = (function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    })(i);
     // proxy certain important events.
    for(var n = 0; n < kProxyEvents.length; n++)stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n1) {
        debug('wrapped _read', n1);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
if (typeof Symbol === 'function') Readable.prototype[Symbol.asyncIterator] = function() {
    if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    return createReadableStreamAsyncIterator(this);
};
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    debug('endReadable', state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}
if (typeof Symbol === 'function') Readable.from = function(iterable, opts) {
    if (from === undefined) from = require('./internal/streams/from');
    return from(Readable, iterable, opts);
};
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"process":"6Upk8","events":"jVtdj","./internal/streams/stream":"7Pu7n","buffer":"bpNHw","util":"8VSUO","./internal/streams/buffer_list":"f15BW","./internal/streams/destroy":"5wfBJ","./internal/streams/state":"lm75j","../errors":"s2Ab3","inherits":"bYMAq","./_stream_duplex":"2tNsP","string_decoder/":"kKuVQ","./internal/streams/async_iterator":"lUGOI","./internal/streams/from":"9vZtI"}],"jVtdj":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply1(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys1(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys2(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN1(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once1;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== 'function') throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === 'function') ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit('newListener', type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === 'function') // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if ((--this._eventsCount) === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
    } else if (typeof list !== 'function') {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if ((--this._eventsCount) === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === 'function') this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === 'function') return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once1(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === 'function') emitter.removeListener('error', errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== 'error') addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === 'function') // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"7Pu7n":[function(require,module,exports) {
module.exports = require('events').EventEmitter;

},{"events":"jVtdj"}],"f15BW":[function(require,module,exports) {
'use strict';
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var _require = require('buffer'), Buffer = _require.Buffer;
var _require2 = require('util'), inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ (function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    _createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: custom,
            value: function value(_, options) {
                return inspect(this, _objectSpread({
                }, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
})();

},{"buffer":"bpNHw","util":"8VSUO"}],"5wfBJ":[function(require,module,exports) {
var process = require("process");
'use strict'; // undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) process.nextTick(emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err1) {
        if (!cb && err1) {
            if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err1);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err1);
            } else process.nextTick(emitCloseNT, _this);
        } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err1);
        } else process.nextTick(emitCloseNT, _this);
    });
    return this;
}
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit('close');
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit('error', err);
}
function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit('error', err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
};

},{"process":"6Upk8"}],"lm75j":[function(require,module,exports) {
'use strict';
var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : 'highWaterMark';
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: getHighWaterMark
};

},{"../../../errors":"s2Ab3"}],"s2Ab3":[function(require,module,exports) {
'use strict';
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var codes = {
};
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        _inheritsLoose(NodeError2, _Base);
        function NodeError2(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError2;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== 'number') start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType('ERR_INVALID_OPT_VALUE', function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === 'string' && startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
    } else determiner = 'must be';
    var msg;
    if (endsWith(name, ' argument')) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    else {
        var type = includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function(name) {
    return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function(name) {
    return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function(arg) {
    return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],"2tNsP":[function(require,module,exports) {
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = Duplex;
var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');
require('inherits')(Duplex, Readable);
// Allow the keys array to be GC'ed.
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once('end', onend);
        }
    }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

},{"process":"6Upk8","./_stream_readable":"8jOvE","./_stream_writable":"6xQ2w","inherits":"bYMAq"}],"6xQ2w":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';
module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var internalUtil = {
    deprecate: require('util-deprecate')
};
/*</replacement>*/ /*<replacement>*/ var Stream = require('./internal/streams/stream');
/*</replacement>*/ var Buffer = require('buffer').Buffer;
var OurUint8Array = global.Uint8Array || function() {
};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require('inherits')(Writable, Stream);
function nop() {
}
function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require('./_stream_duplex');
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, 'buffer', {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
        });
    } catch (_) {
    }
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function realHasInstance1(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
    }
    Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== 'string' && !state.objectMode) er = new ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer'
    ], chunk);
    if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
    }
    return true;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = 'buffer';
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = nop;
    if (state.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    this._writableState.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!([
        'hex',
        'utf8',
        'utf-8',
        'ascii',
        'binary',
        'base64',
        'ucs2',
        'ucs-2',
        'utf16le',
        'utf-16le',
        'raw'
    ].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = 'buffer';
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
    }
} // if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
    return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit('prefinish');
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit('prefinish');
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit('finish');
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

},{"process":"6Upk8","util-deprecate":"i99jb","./internal/streams/stream":"7Pu7n","buffer":"bpNHw","./internal/streams/destroy":"5wfBJ","./internal/streams/state":"lm75j","../errors":"s2Ab3","inherits":"bYMAq","./_stream_duplex":"2tNsP"}],"i99jb":[function(require,module,exports) {
var global = arguments[3];
/**
 * Module exports.
 */ module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function deprecate(fn, msg) {
    if (config('noDeprecation')) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (config('throwDeprecation')) throw new Error(msg);
            else if (config('traceDeprecation')) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === 'true';
}

},{}],"kKuVQ":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
/*<replacement>*/ var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = '' + encoding;
    switch(encoding && encoding.toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
            return true;
        default:
            return false;
    }
};
function _normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while(true)switch(enc){
        case 'utf8':
        case 'utf-8':
            return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return 'utf16le';
        case 'latin1':
        case 'binary':
            return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
            return enc;
        default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case 'utf16le':
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
        case 'utf8':
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
        case 'base64':
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
        default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
    if (byte <= 127) return 0;
    else if (byte >> 5 === 6) return 2;
    else if (byte >> 4 === 14) return 3;
    else if (byte >> 3 === 30) return 4;
    return byte >> 6 === 2 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if ((--j) < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if ((--j) < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 192) !== 128) {
        self.lastNeed = 0;
        return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
            self.lastNeed = 1;
            return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
                self.lastNeed = 2;
                return '\ufffd';
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 55296 && c <= 56319) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
}
function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
}
function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
}

},{"safe-buffer":"8BeU0"}],"lUGOI":[function(require,module,exports) {
var process = require("process");
'use strict';
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var finished = require('./end-of-stream');
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
        var data = iter[kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
        }
    }
}
function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve, reject);
        }, reject);
    };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream () {
        return this[kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) return Promise.reject(error);
        if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
        if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            process.nextTick(function() {
                if (_this[kError]) reject(_this[kError]);
                else resolve(createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[kStream].read();
            if (data !== null) return Promise.resolve(createIterResult(data, false));
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve(createIterResult(undefined, true));
        });
    });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator1(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {
    }, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
            } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
            var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on('readable', onReadable.bind(null, iterator));
    return iterator;
};
module.exports = createReadableStreamAsyncIterator;

},{"process":"6Upk8","./end-of-stream":"lHITK"}],"lHITK":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function noop() {
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
    if (typeof opts === 'function') return eos(stream, null, opts);
    if (!opts) opts = {
    };
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish1() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish1() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend1() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror1(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose1() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest1() {
        stream.req.on('finish', onfinish);
    };
    if (isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();
        else stream.on('request', onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
    }
    stream.on('end', onend);
    stream.on('finish', onfinish);
    if (opts.error !== false) stream.on('error', onerror);
    stream.on('close', onclose);
    return function() {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
    };
}
module.exports = eos;

},{"../../../errors":"s2Ab3"}],"9vZtI":[function(require,module,exports) {
module.exports = function() {
    throw new Error('Readable.from is not available in the browser');
};

},{}],"jyyo2":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';
module.exports = Transform;
var _require$codes = require('../errors').codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require('./_stream_duplex');
require('inherits')(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit('error', new ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === 'function' && !this._readableState.destroyed) this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

},{"../errors":"s2Ab3","./_stream_duplex":"2tNsP","inherits":"bYMAq"}],"kj2t2":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';
module.exports = PassThrough;
var Transform = require('./_stream_transform');
require('inherits')(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"./_stream_transform":"jyyo2","inherits":"bYMAq"}],"8lMEP":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var eos;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
var _require$codes = require('../../../errors').codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on('close', function() {
        closed = true;
    });
    if (eos === undefined) eos = require('./end-of-stream');
    eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED('pipe'));
    };
}
function call(fn) {
    fn();
}
function pipe(from, to) {
    return from.pipe(to);
}
function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== 'function') return noop;
    return streams.pop();
}
function pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new ERR_MISSING_ARGS('streams');
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
        });
    });
    return streams.reduce(pipe);
}
module.exports = pipeline;

},{"../../../errors":"s2Ab3","./end-of-stream":"lHITK"}],"9vaxW":[function(require,module,exports) {
'use strict';
var Buffer = require('buffer').Buffer;
var inherits = require('inherits');
var HashBase = require('hash-base');
var ARRAY16 = new Array(16);
var zl = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var zr = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var sl = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sr = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];
var hl = [
    0,
    1518500249,
    1859775393,
    2400959708,
    2840853838
];
var hr = [
    1352829926,
    1548603684,
    1836072691,
    2053994217,
    0
];
function RIPEMD160() {
    HashBase.call(this, 64);
    // state
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
}
inherits(RIPEMD160, HashBase);
RIPEMD160.prototype._update = function() {
    var words = ARRAY16;
    for(var j = 0; j < 16; ++j)words[j] = this._block.readInt32LE(j * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    // computation
    for(var i = 0; i < 80; i += 1){
        var tl;
        var tr;
        if (i < 16) {
            tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
            tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
            tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
            tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
            tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
            tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
            tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
            tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
        } else {
            tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
            tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
    }
    // update state
    var t = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t;
};
RIPEMD160.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fn1(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}
function fn2(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}
function fn3(a, b, c, d, e, m, k, s) {
    return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}
function fn4(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}
function fn5(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}
module.exports = RIPEMD160;

},{"buffer":"bpNHw","inherits":"bYMAq","hash-base":"5vsIr"}],"7XSB5":[function(require,module,exports) {
var exports = module.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');
    return new Algorithm();
};
exports.sha = require('./sha');
exports.sha1 = require('./sha1');
exports.sha224 = require('./sha224');
exports.sha256 = require('./sha256');
exports.sha384 = require('./sha384');
exports.sha512 = require('./sha512');

},{"./sha":"rclgA","./sha1":"cGvTc","./sha224":"bvjRY","./sha256":"juEIA","./sha384":"4IFYk","./sha512":"8QQJv"}],"rclgA":[function(require,module,exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */ var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var K = [
    1518500249,
    1859775393,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha, Hash);
Sha.prototype.init = function() {
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
    return this;
};
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha.prototype._update = function(M) {
    var W1 = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W1[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W1[i] = W1[i - 3] ^ W1[i - 8] ^ W1[i - 14] ^ W1[i - 16];
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W1[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha;

},{"inherits":"bYMAq","./hash":"fNd6z","safe-buffer":"8BeU0"}],"fNd6z":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
// prototype class for hash functions
function Hash(blockSize, finalSize) {
    this._block = Buffer.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
}
Hash.prototype.update = function(data, enc) {
    if (typeof data === 'string') {
        enc = enc || 'utf8';
        data = Buffer.from(data, enc);
    }
    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;
    for(var offset = 0; offset < length;){
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for(var i = 0; i < remainder; i++)block[assigned + i] = data[offset + i];
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) this._update(block);
    }
    this._len += length;
    return this;
};
Hash.prototype.digest = function(enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 128;
    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);
    if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
    }
    var bits = this._len * 8;
    // uint32
    if (bits <= 4294967295) this._block.writeUInt32BE(bits, this._blockSize - 4);
    else {
        var lowBits = (bits & 4294967295) >>> 0;
        var highBits = (bits - lowBits) / 4294967296;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }
    this._update(this._block);
    var hash = this._hash();
    return enc ? hash.toString(enc) : hash;
};
Hash.prototype._update = function() {
    throw new Error('_update must be implemented by subclass');
};
module.exports = Hash;

},{"safe-buffer":"8BeU0"}],"cGvTc":[function(require,module,exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */ var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var K = [
    1518500249,
    1859775393,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha1() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha1, Hash);
Sha1.prototype.init = function() {
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
    return this;
};
function rotl1(num) {
    return num << 1 | num >>> 31;
}
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha1.prototype._update = function(M) {
    var W1 = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W1[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W1[i] = rotl1(W1[i - 3] ^ W1[i - 8] ^ W1[i - 14] ^ W1[i - 16]);
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W1[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha1.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha1;

},{"inherits":"bYMAq","./hash":"fNd6z","safe-buffer":"8BeU0"}],"bvjRY":[function(require,module,exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require('inherits');
var Sha256 = require('./sha256');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var W = new Array(64);
function Sha224() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha224, Sha256);
Sha224.prototype.init = function() {
    this._a = 3238371032;
    this._b = 914150663;
    this._c = 812702999;
    this._d = 4144912697;
    this._e = 4290775857;
    this._f = 1750603025;
    this._g = 1694076839;
    this._h = 3204075428;
    return this;
};
Sha224.prototype._hash = function() {
    var H = Buffer.allocUnsafe(28);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    return H;
};
module.exports = Sha224;

},{"inherits":"bYMAq","./sha256":"juEIA","./hash":"fNd6z","safe-buffer":"8BeU0"}],"juEIA":[function(require,module,exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
];
var W = new Array(64);
function Sha256() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha256, Hash);
Sha256.prototype.init = function() {
    this._a = 1779033703;
    this._b = 3144134277;
    this._c = 1013904242;
    this._d = 2773480762;
    this._e = 1359893119;
    this._f = 2600822924;
    this._g = 528734635;
    this._h = 1541459225;
    return this;
};
function ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}
function sigma1(x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}
function gamma0(x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}
function gamma1(x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}
Sha256.prototype._update = function(M) {
    var W1 = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;
    for(var i = 0; i < 16; ++i)W1[i] = M.readInt32BE(i * 4);
    for(; i < 64; ++i)W1[i] = gamma1(W1[i - 2]) + W1[i - 7] + gamma0(W1[i - 15]) + W1[i - 16] | 0;
    for(var j = 0; j < 64; ++j){
        var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W1[j] | 0;
        var T2 = sigma0(a) + maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
    this._f = f + this._f | 0;
    this._g = g + this._g | 0;
    this._h = h + this._h | 0;
};
Sha256.prototype._hash = function() {
    var H = Buffer.allocUnsafe(32);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);
    return H;
};
module.exports = Sha256;

},{"inherits":"bYMAq","./hash":"fNd6z","safe-buffer":"8BeU0"}],"4IFYk":[function(require,module,exports) {
var inherits = require('inherits');
var SHA512 = require('./sha512');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var W = new Array(160);
function Sha384() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha384, SHA512);
Sha384.prototype.init = function() {
    this._ah = 3418070365;
    this._bh = 1654270250;
    this._ch = 2438529370;
    this._dh = 355462360;
    this._eh = 1731405415;
    this._fh = 2394180231;
    this._gh = 3675008525;
    this._hh = 1203062813;
    this._al = 3238371032;
    this._bl = 914150663;
    this._cl = 812702999;
    this._dl = 4144912697;
    this._el = 4290775857;
    this._fl = 1750603025;
    this._gl = 1694076839;
    this._hl = 3204075428;
    return this;
};
Sha384.prototype._hash = function() {
    var H = Buffer.allocUnsafe(48);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H;
};
module.exports = Sha384;

},{"inherits":"bYMAq","./sha512":"8QQJv","./hash":"fNd6z","safe-buffer":"8BeU0"}],"8QQJv":[function(require,module,exports) {
var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
];
var W = new Array(160);
function Sha512() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha512, Hash);
Sha512.prototype.init = function() {
    this._ah = 1779033703;
    this._bh = 3144134277;
    this._ch = 1013904242;
    this._dh = 2773480762;
    this._eh = 1359893119;
    this._fh = 2600822924;
    this._gh = 528734635;
    this._hh = 1541459225;
    this._al = 4089235720;
    this._bl = 2227873595;
    this._cl = 4271175723;
    this._dl = 1595750129;
    this._el = 2917565137;
    this._fl = 725511199;
    this._gl = 4215389547;
    this._hl = 327033209;
    return this;
};
function Ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}
function sigma1(x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}
function Gamma0(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}
function Gamma0l(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}
function Gamma1(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}
function Gamma1l(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}
function getCarry(a, b) {
    return a >>> 0 < b >>> 0 ? 1 : 0;
}
Sha512.prototype._update = function(M) {
    var W1 = this._w;
    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;
    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;
    for(var i = 0; i < 32; i += 2){
        W1[i] = M.readInt32BE(i * 4);
        W1[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for(; i < 160; i += 2){
        var xh = W1[i - 30];
        var xl = W1[i - 30 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);
        xh = W1[i - 4];
        xl = W1[i - 4 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh);
        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W1[i - 14];
        var Wi7l = W1[i - 14 + 1];
        var Wi16h = W1[i - 32];
        var Wi16l = W1[i - 32 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
        W1[i] = Wih;
        W1[i + 1] = Wil;
    }
    for(var j = 0; j < 160; j += 2){
        Wih = W1[j];
        Wil = W1[j + 1];
        var majh = maj(ah, bh, ch);
        var majl = maj(al, bl, cl);
        var sigma0h = sigma0(ah, al);
        var sigma0l = sigma0(al, ah);
        var sigma1h = sigma1(eh, el);
        var sigma1l = sigma1(el, eh);
        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = K[j];
        var Kil = K[j + 1];
        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
        // t2 = sigma0 + maj
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + getCarry(al, t1l) | 0;
    }
    this._al = this._al + al | 0;
    this._bl = this._bl + bl | 0;
    this._cl = this._cl + cl | 0;
    this._dl = this._dl + dl | 0;
    this._el = this._el + el | 0;
    this._fl = this._fl + fl | 0;
    this._gl = this._gl + gl | 0;
    this._hl = this._hl + hl | 0;
    this._ah = this._ah + ah + getCarry(this._al, al) | 0;
    this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
    this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
    this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
    this._eh = this._eh + eh + getCarry(this._el, el) | 0;
    this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
    this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
    this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
};
Sha512.prototype._hash = function() {
    var H = Buffer.allocUnsafe(64);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H;
};
module.exports = Sha512;

},{"inherits":"bYMAq","./hash":"fNd6z","safe-buffer":"8BeU0"}],"981bP":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
var Transform = require('stream').Transform;
var StringDecoder = require('string_decoder').StringDecoder;
var inherits = require('inherits');
function CipherBase(hashMode) {
    Transform.call(this);
    this.hashMode = typeof hashMode === 'string';
    if (this.hashMode) this[hashMode] = this._finalOrDigest;
    else this.final = this._finalOrDigest;
    if (this._final) {
        this.__final = this._final;
        this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
}
inherits(CipherBase, Transform);
CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    if (typeof data === 'string') data = Buffer.from(data, inputEnc);
    var outData = this._update(data);
    if (this.hashMode) return this;
    if (outputEnc) outData = this._toString(outData, outputEnc);
    return outData;
};
CipherBase.prototype.setAutoPadding = function() {
};
CipherBase.prototype.getAuthTag = function() {
    throw new Error('trying to get auth tag in unsupported state');
};
CipherBase.prototype.setAuthTag = function() {
    throw new Error('trying to set auth tag in unsupported state');
};
CipherBase.prototype.setAAD = function() {
    throw new Error('trying to set aad in unsupported state');
};
CipherBase.prototype._transform = function(data, _, next) {
    var err;
    try {
        if (this.hashMode) this._update(data);
        else this.push(this._update(data));
    } catch (e) {
        err = e;
    } finally{
        next(err);
    }
};
CipherBase.prototype._flush = function(done) {
    var err;
    try {
        this.push(this.__final());
    } catch (e) {
        err = e;
    }
    done(err);
};
CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || Buffer.alloc(0);
    if (outputEnc) outData = this._toString(outData, outputEnc, true);
    return outData;
};
CipherBase.prototype._toString = function(value, enc, fin) {
    if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
    }
    if (this._encoding !== enc) throw new Error('can\'t switch encodings');
    var out = this._decoder.write(value);
    if (fin) out += this._decoder.end();
    return out;
};
module.exports = CipherBase;

},{"safe-buffer":"8BeU0","stream":"4QPGO","string_decoder":"byB6G","inherits":"bYMAq"}],"4QPGO":[function(require,module,exports) {
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_readable.js":"9y1QE","./lib/_stream_writable.js":"6aTAN","./lib/_stream_duplex.js":"faMzn","./lib/_stream_transform.js":"3e7SC","./lib/_stream_passthrough.js":"12jth","./lib/internal/streams/end-of-stream.js":"kNLKx","./lib/internal/streams/pipeline.js":"hixw3"}],"9y1QE":[function(require,module,exports) {
var process = require("process");
var global = arguments[3];
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
module.exports = Readable;
/*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require('events').EventEmitter;
var EElistenerCount = function EElistenerCount1(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require('./internal/streams/stream');
/*</replacement>*/ var Buffer = require('buffer').Buffer;
var OurUint8Array = global.Uint8Array || function() {
};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/ var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog('stream');
else debug = function debug1() {
};
/*</replacement>*/ var BufferList = require('./internal/streams/buffer_list');
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require('inherits')(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = [
    'error',
    'close',
    'destroy',
    'pause',
    'resume'
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require('./_stream_duplex');
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require('./_stream_duplex');
    if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = '';
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug('readableAddChunk', chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer',
        'Uint8Array'
    ], chunk);
    return er;
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = '';
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== '') this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var MAX_HWM = 1073741824;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
    } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit('data', ret);
    return ret;
};
function onEofChunk(stream, state) {
    debug('onEofChunk');
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    debug('emitReadable', state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
    }
}
function emitReadable_(stream) {
    var state = stream._readableState;
    debug('emitReadable_', state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);
    else src.once('end', endFn);
    dest.on('unpipe', onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug('onunpipe');
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug('onend');
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug('cleanup'); // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on('data', ondata);
    function ondata(chunk) {
        debug('ondata');
        var ret = dest.write(chunk);
        debug('dest.write', ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
    }
    dest.once('finish', onfinish);
    function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit('pipe', src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug('pipe resume');
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit('unpipe', this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug('on readable', state.length, state.reading);
            if (state.length) emitReadable(this);
            else if (!state.reading) process.nextTick(nReadingNextTick, this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === 'readable') // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === 'readable' || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
function updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount('readable') > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount('data') > 0) self.resume();
}
function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug('resume'); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
    }
    state.paused = false;
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    debug('resume', state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
    }
    this._readableState.paused = true;
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on('end', function() {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on('data', function(chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === 'function') this[i] = (function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    })(i);
     // proxy certain important events.
    for(var n = 0; n < kProxyEvents.length; n++)stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n1) {
        debug('wrapped _read', n1);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
if (typeof Symbol === 'function') Readable.prototype[Symbol.asyncIterator] = function() {
    if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    return createReadableStreamAsyncIterator(this);
};
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    debug('endReadable', state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}
if (typeof Symbol === 'function') Readable.from = function(iterable, opts) {
    if (from === undefined) from = require('./internal/streams/from');
    return from(Readable, iterable, opts);
};
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"process":"6Upk8","events":"jVtdj","./internal/streams/stream":"akrW1","buffer":"bpNHw","util":"8VSUO","./internal/streams/buffer_list":"4Yhdw","./internal/streams/destroy":"68J7y","./internal/streams/state":"83QOI","../errors":"guAa6","inherits":"bYMAq","./_stream_duplex":"faMzn","string_decoder/":"byB6G","./internal/streams/async_iterator":"d60rs","./internal/streams/from":"nX26I"}],"akrW1":[function(require,module,exports) {
module.exports = require('events').EventEmitter;

},{"events":"jVtdj"}],"4Yhdw":[function(require,module,exports) {
'use strict';
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var _require = require('buffer'), Buffer = _require.Buffer;
var _require2 = require('util'), inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ (function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    _createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: custom,
            value: function value(_, options) {
                return inspect(this, _objectSpread({
                }, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
})();

},{"buffer":"bpNHw","util":"8VSUO"}],"68J7y":[function(require,module,exports) {
var process = require("process");
'use strict'; // undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) process.nextTick(emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err1) {
        if (!cb && err1) {
            if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err1);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err1);
            } else process.nextTick(emitCloseNT, _this);
        } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err1);
        } else process.nextTick(emitCloseNT, _this);
    });
    return this;
}
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit('close');
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit('error', err);
}
function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit('error', err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
};

},{"process":"6Upk8"}],"83QOI":[function(require,module,exports) {
'use strict';
var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : 'highWaterMark';
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: getHighWaterMark
};

},{"../../../errors":"guAa6"}],"guAa6":[function(require,module,exports) {
'use strict';
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var codes = {
};
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        _inheritsLoose(NodeError2, _Base);
        function NodeError2(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError2;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== 'number') start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType('ERR_INVALID_OPT_VALUE', function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === 'string' && startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
    } else determiner = 'must be';
    var msg;
    if (endsWith(name, ' argument')) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    else {
        var type = includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function(name) {
    return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function(name) {
    return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function(arg) {
    return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],"faMzn":[function(require,module,exports) {
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = Duplex;
var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');
require('inherits')(Duplex, Readable);
// Allow the keys array to be GC'ed.
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once('end', onend);
        }
    }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

},{"process":"6Upk8","./_stream_readable":"9y1QE","./_stream_writable":"6aTAN","inherits":"bYMAq"}],"6aTAN":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';
module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var internalUtil = {
    deprecate: require('util-deprecate')
};
/*</replacement>*/ /*<replacement>*/ var Stream = require('./internal/streams/stream');
/*</replacement>*/ var Buffer = require('buffer').Buffer;
var OurUint8Array = global.Uint8Array || function() {
};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require('inherits')(Writable, Stream);
function nop() {
}
function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require('./_stream_duplex');
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, 'buffer', {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
        });
    } catch (_) {
    }
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function realHasInstance1(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
    }
    Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== 'string' && !state.objectMode) er = new ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer'
    ], chunk);
    if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
    }
    return true;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = 'buffer';
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = nop;
    if (state.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    this._writableState.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!([
        'hex',
        'utf8',
        'utf-8',
        'ascii',
        'binary',
        'base64',
        'ucs2',
        'ucs-2',
        'utf16le',
        'utf-16le',
        'raw'
    ].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = 'buffer';
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
    }
} // if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
    return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit('prefinish');
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit('prefinish');
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit('finish');
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

},{"process":"6Upk8","util-deprecate":"i99jb","./internal/streams/stream":"akrW1","buffer":"bpNHw","./internal/streams/destroy":"68J7y","./internal/streams/state":"83QOI","../errors":"guAa6","inherits":"bYMAq","./_stream_duplex":"faMzn"}],"byB6G":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
/*<replacement>*/ var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = '' + encoding;
    switch(encoding && encoding.toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
            return true;
        default:
            return false;
    }
};
function _normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while(true)switch(enc){
        case 'utf8':
        case 'utf-8':
            return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return 'utf16le';
        case 'latin1':
        case 'binary':
            return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
            return enc;
        default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case 'utf16le':
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
        case 'utf8':
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
        case 'base64':
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
        default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
    if (byte <= 127) return 0;
    else if (byte >> 5 === 6) return 2;
    else if (byte >> 4 === 14) return 3;
    else if (byte >> 3 === 30) return 4;
    return byte >> 6 === 2 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if ((--j) < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if ((--j) < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 192) !== 128) {
        self.lastNeed = 0;
        return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
            self.lastNeed = 1;
            return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
                self.lastNeed = 2;
                return '\ufffd';
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 55296 && c <= 56319) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
}
function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
}
function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
}

},{"safe-buffer":"l0SdC"}],"l0SdC":[function(require,module,exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = require('buffer');
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') throw new TypeError('Argument must not be a number');
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === 'string') buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return buffer.SlowBuffer(size);
};

},{"buffer":"bpNHw"}],"d60rs":[function(require,module,exports) {
var process = require("process");
'use strict';
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var finished = require('./end-of-stream');
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
        var data = iter[kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
        }
    }
}
function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve, reject);
        }, reject);
    };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream () {
        return this[kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) return Promise.reject(error);
        if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
        if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            process.nextTick(function() {
                if (_this[kError]) reject(_this[kError]);
                else resolve(createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[kStream].read();
            if (data !== null) return Promise.resolve(createIterResult(data, false));
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve(createIterResult(undefined, true));
        });
    });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator1(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {
    }, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
            } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
            var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on('readable', onReadable.bind(null, iterator));
    return iterator;
};
module.exports = createReadableStreamAsyncIterator;

},{"process":"6Upk8","./end-of-stream":"kNLKx"}],"kNLKx":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function noop() {
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
    if (typeof opts === 'function') return eos(stream, null, opts);
    if (!opts) opts = {
    };
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish1() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish1() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend1() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror1(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose1() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest1() {
        stream.req.on('finish', onfinish);
    };
    if (isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();
        else stream.on('request', onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
    }
    stream.on('end', onend);
    stream.on('finish', onfinish);
    if (opts.error !== false) stream.on('error', onerror);
    stream.on('close', onclose);
    return function() {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
    };
}
module.exports = eos;

},{"../../../errors":"guAa6"}],"nX26I":[function(require,module,exports) {
module.exports = function() {
    throw new Error('Readable.from is not available in the browser');
};

},{}],"3e7SC":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';
module.exports = Transform;
var _require$codes = require('../errors').codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require('./_stream_duplex');
require('inherits')(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit('error', new ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === 'function' && !this._readableState.destroyed) this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

},{"../errors":"guAa6","./_stream_duplex":"faMzn","inherits":"bYMAq"}],"12jth":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';
module.exports = PassThrough;
var Transform = require('./_stream_transform');
require('inherits')(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"./_stream_transform":"3e7SC","inherits":"bYMAq"}],"hixw3":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var eos;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
var _require$codes = require('../../../errors').codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on('close', function() {
        closed = true;
    });
    if (eos === undefined) eos = require('./end-of-stream');
    eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED('pipe'));
    };
}
function call(fn) {
    fn();
}
function pipe(from, to) {
    return from.pipe(to);
}
function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== 'function') return noop;
    return streams.pop();
}
function pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new ERR_MISSING_ARGS('streams');
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
        });
    });
    return streams.reduce(pipe);
}
module.exports = pipeline;

},{"../../../errors":"guAa6","./end-of-stream":"kNLKx"}],"4lnDV":[function(require,module,exports) {
'use strict';
var inherits = require('inherits');
var Legacy = require('./legacy');
var Base = require('cipher-base');
var Buffer = require('safe-buffer').Buffer;
var md5 = require('create-hash/md5');
var RIPEMD160 = require('ripemd160');
var sha = require('sha.js');
var ZEROS = Buffer.alloc(128);
function Hmac(alg, key) {
    Base.call(this, 'digest');
    if (typeof key === 'string') key = Buffer.from(key);
    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
        var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
        key = hash.update(key).digest();
    } else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
    }
    this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
    this._hash.update(ipad);
}
inherits(Hmac, Base);
Hmac.prototype._update = function(data) {
    this._hash.update(data);
};
Hmac.prototype._final = function() {
    var h = this._hash.digest();
    var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg);
    return hash.update(this._opad).update(h).digest();
};
module.exports = function createHmac(alg, key) {
    alg = alg.toLowerCase();
    if (alg === 'rmd160' || alg === 'ripemd160') return new Hmac('rmd160', key);
    if (alg === 'md5') return new Legacy(md5, key);
    return new Hmac(alg, key);
};

},{"inherits":"bYMAq","./legacy":"12ncN","cipher-base":"981bP","safe-buffer":"8BeU0","create-hash/md5":"2TOik","ripemd160":"9vaxW","sha.js":"7XSB5"}],"12ncN":[function(require,module,exports) {
'use strict';
var inherits = require('inherits');
var Buffer = require('safe-buffer').Buffer;
var Base = require('cipher-base');
var ZEROS = Buffer.alloc(128);
var blocksize = 64;
function Hmac(alg, key) {
    Base.call(this, 'digest');
    if (typeof key === 'string') key = Buffer.from(key);
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) key = alg(key);
    else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
    }
    this._hash = [
        ipad
    ];
}
inherits(Hmac, Base);
Hmac.prototype._update = function(data) {
    this._hash.push(data);
};
Hmac.prototype._final = function() {
    var h = this._alg(Buffer.concat(this._hash));
    return this._alg(Buffer.concat([
        this._opad,
        h
    ]));
};
module.exports = Hmac;

},{"inherits":"bYMAq","safe-buffer":"8BeU0","cipher-base":"981bP"}],"2TOik":[function(require,module,exports) {
var MD5 = require('md5.js');
module.exports = function(buffer) {
    return new MD5().update(buffer).digest();
};

},{"md5.js":"8YRsN"}],"7J8vc":[function(require,module,exports) {
module.exports = require('./browser/algorithms.json');

},{"./browser/algorithms.json":"6Ny00"}],"6Ny00":[function(require,module,exports) {
module.exports = JSON.parse("{\"sha224WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"RSA-SHA224\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"sha256WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"RSA-SHA256\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"sha384WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"RSA-SHA384\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"sha512WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA512\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA1\":{\"sign\":\"rsa\",\"hash\":\"sha1\",\"id\":\"3021300906052b0e03021a05000414\"},\"ecdsa-with-SHA1\":{\"sign\":\"ecdsa\",\"hash\":\"sha1\",\"id\":\"\"},\"sha256\":{\"sign\":\"ecdsa\",\"hash\":\"sha256\",\"id\":\"\"},\"sha224\":{\"sign\":\"ecdsa\",\"hash\":\"sha224\",\"id\":\"\"},\"sha384\":{\"sign\":\"ecdsa\",\"hash\":\"sha384\",\"id\":\"\"},\"sha512\":{\"sign\":\"ecdsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-SHA1\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-WITH-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-WITH-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-WITH-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-WITH-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-RIPEMD160\":{\"sign\":\"dsa\",\"hash\":\"rmd160\",\"id\":\"\"},\"ripemd160WithRSA\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"RSA-RIPEMD160\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"md5WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"},\"RSA-MD5\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"}}");

},{}],"4zObN":[function(require,module,exports) {
exports.pbkdf2 = require('./lib/async');
exports.pbkdf2Sync = require('./lib/sync');

},{"./lib/async":"2d87x","./lib/sync":"425Rm"}],"2d87x":[function(require,module,exports) {
var global = arguments[3];
var Buffer = require('safe-buffer').Buffer;
var checkParameters = require('./precondition');
var defaultEncoding = require('./default-encoding');
var sync = require('./sync');
var toBuffer = require('./to-buffer');
var ZERO_BUF;
var subtle = global.crypto && global.crypto.subtle;
var toBrowser = {
    sha: 'SHA-1',
    'sha-1': 'SHA-1',
    sha1: 'SHA-1',
    sha256: 'SHA-256',
    'sha-256': 'SHA-256',
    sha384: 'SHA-384',
    'sha-384': 'SHA-384',
    'sha-512': 'SHA-512',
    sha512: 'SHA-512'
};
var checks = [];
function checkNative(algo) {
    if (global.process && !global.process.browser) return Promise.resolve(false);
    if (!subtle || !subtle.importKey || !subtle.deriveBits) return Promise.resolve(false);
    if (checks[algo] !== undefined) return checks[algo];
    ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
        return true;
    }).catch(function() {
        return false;
    });
    checks[algo] = prom;
    return prom;
}
var nextTick;
function getNextTick() {
    if (nextTick) return nextTick;
    if (global.process && global.process.nextTick) nextTick = global.process.nextTick;
    else if (global.queueMicrotask) nextTick = global.queueMicrotask;
    else if (global.setImmediate) nextTick = global.setImmediate;
    else nextTick = global.setTimeout;
    return nextTick;
}
function browserPbkdf2(password, salt, iterations, length, algo) {
    return subtle.importKey('raw', password, {
        name: 'PBKDF2'
    }, false, [
        'deriveBits'
    ]).then(function(key) {
        return subtle.deriveBits({
            name: 'PBKDF2',
            salt: salt,
            iterations: iterations,
            hash: {
                name: algo
            }
        }, key, length << 3);
    }).then(function(res) {
        return Buffer.from(res);
    });
}
function resolvePromise(promise, callback) {
    promise.then(function(out) {
        getNextTick()(function() {
            callback(null, out);
        });
    }, function(e) {
        getNextTick()(function() {
            callback(e);
        });
    });
}
module.exports = function(password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === 'function') {
        callback = digest;
        digest = undefined;
    }
    digest = digest || 'sha1';
    var algo = toBrowser[digest.toLowerCase()];
    if (!algo || typeof global.Promise !== 'function') {
        getNextTick()(function() {
            var out;
            try {
                out = sync(password, salt, iterations, keylen, digest);
            } catch (e) {
                return callback(e);
            }
            callback(null, out);
        });
        return;
    }
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, 'Password');
    salt = toBuffer(salt, defaultEncoding, 'Salt');
    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');
    resolvePromise(checkNative(algo).then(function(resp) {
        if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
        return sync(password, salt, iterations, keylen, digest);
    }), callback);
};

},{"safe-buffer":"8BeU0","./precondition":"9KmOe","./default-encoding":"6mpWq","./sync":"425Rm","./to-buffer":"kjsqj"}],"9KmOe":[function(require,module,exports) {
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
;
module.exports = function(iterations, keylen) {
    if (typeof iterations !== 'number') throw new TypeError('Iterations not a number');
    if (iterations < 0) throw new TypeError('Bad iterations');
    if (typeof keylen !== 'number') throw new TypeError('Key length not a number');
    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) throw new TypeError('Bad key length');
};

},{}],"6mpWq":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
var defaultEncoding;
/* istanbul ignore next */ if (global.process && global.process.browser) defaultEncoding = 'utf-8';
else if (global.process && global.process.version) {
    var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);
    defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
} else defaultEncoding = 'utf-8';
module.exports = defaultEncoding;

},{"process":"6Upk8"}],"425Rm":[function(require,module,exports) {
var md5 = require('create-hash/md5');
var RIPEMD160 = require('ripemd160');
var sha = require('sha.js');
var Buffer = require('safe-buffer').Buffer;
var checkParameters = require('./precondition');
var defaultEncoding = require('./default-encoding');
var toBuffer = require('./to-buffer');
var ZEROS = Buffer.alloc(128);
var sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
};
function Hmac(alg, key, saltLen) {
    var hash = getDigest(alg);
    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
    if (key.length > blocksize) key = hash(key);
    else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
    var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
    }
    var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    this.ipad1 = ipad1;
    this.ipad2 = ipad;
    this.opad = opad;
    this.alg = alg;
    this.blocksize = blocksize;
    this.hash = hash;
    this.size = sizes[alg];
}
Hmac.prototype.run = function(data, ipad) {
    data.copy(ipad, this.blocksize);
    var h = this.hash(ipad);
    h.copy(this.opad, this.blocksize);
    return this.hash(this.opad);
};
function getDigest(alg) {
    function shaFunc(data) {
        return sha(alg).update(data).digest();
    }
    function rmd160Func(data) {
        return new RIPEMD160().update(data).digest();
    }
    if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func;
    if (alg === 'md5') return md5;
    return shaFunc;
}
function pbkdf2(password, salt, iterations, keylen, digest) {
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, 'Password');
    salt = toBuffer(salt, defaultEncoding, 'Salt');
    digest = digest || 'sha1';
    var hmac = new Hmac(digest, password, salt.length);
    var DK = Buffer.allocUnsafe(keylen);
    var block1 = Buffer.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);
    var destPos = 0;
    var hLen = sizes[digest];
    var l = Math.ceil(keylen / hLen);
    for(var i = 1; i <= l; i++){
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;
        for(var j = 1; j < iterations; j++){
            U = hmac.run(U, hmac.ipad2);
            for(var k = 0; k < hLen; k++)T[k] ^= U[k];
        }
        T.copy(DK, destPos);
        destPos += hLen;
    }
    return DK;
}
module.exports = pbkdf2;

},{"create-hash/md5":"2TOik","ripemd160":"9vaxW","sha.js":"7XSB5","safe-buffer":"8BeU0","./precondition":"9KmOe","./default-encoding":"6mpWq","./to-buffer":"kjsqj"}],"kjsqj":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
module.exports = function(thing, encoding, name) {
    if (Buffer.isBuffer(thing)) return thing;
    else if (typeof thing === 'string') return Buffer.from(thing, encoding);
    else if (ArrayBuffer.isView(thing)) return Buffer.from(thing.buffer);
    else throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView');
};

},{"safe-buffer":"8BeU0"}],"eoMGS":[function(require,module,exports) {
var DES = require('browserify-des');
var aes = require('browserify-aes/browser');
var aesModes = require('browserify-aes/modes');
var desModes = require('browserify-des/modes');
var ebtk = require('evp_bytestokey');
function createCipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
    } else throw new TypeError('invalid suite type');
    var keys = ebtk(password, false, keyLen, ivLen);
    return createCipheriv(suite, keys.key, keys.iv);
}
function createDecipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
    } else throw new TypeError('invalid suite type');
    var keys = ebtk(password, false, keyLen, ivLen);
    return createDecipheriv(suite, keys.key, keys.iv);
}
function createCipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite]) return aes.createCipheriv(suite, key, iv);
    if (desModes[suite]) return new DES({
        key: key,
        iv: iv,
        mode: suite
    });
    throw new TypeError('invalid suite type');
}
function createDecipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv);
    if (desModes[suite]) return new DES({
        key: key,
        iv: iv,
        mode: suite,
        decrypt: true
    });
    throw new TypeError('invalid suite type');
}
function getCiphers() {
    return Object.keys(desModes).concat(aes.getCiphers());
}
exports.createCipher = exports.Cipher = createCipher;
exports.createCipheriv = exports.Cipheriv = createCipheriv;
exports.createDecipher = exports.Decipher = createDecipher;
exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

},{"browserify-des":"1TxJo","browserify-aes/browser":"RRNBY","browserify-aes/modes":"i3iIe","browserify-des/modes":"tpKq7","evp_bytestokey":"6rOUs"}],"1TxJo":[function(require,module,exports) {
var CipherBase = require('cipher-base');
var des = require('des.js');
var inherits = require('inherits');
var Buffer = require('safe-buffer').Buffer;
var modes = {
    'des-ede3-cbc': des.CBC.instantiate(des.EDE),
    'des-ede3': des.EDE,
    'des-ede-cbc': des.CBC.instantiate(des.EDE),
    'des-ede': des.EDE,
    'des-cbc': des.CBC.instantiate(des.DES),
    'des-ecb': des.DES
};
modes.des = modes['des-cbc'];
modes.des3 = modes['des-ede3-cbc'];
module.exports = DES;
inherits(DES, CipherBase);
function DES(opts) {
    CipherBase.call(this);
    var modeName = opts.mode.toLowerCase();
    var mode = modes[modeName];
    var type;
    if (opts.decrypt) type = 'decrypt';
    else type = 'encrypt';
    var key = opts.key;
    if (!Buffer.isBuffer(key)) key = Buffer.from(key);
    if (modeName === 'des-ede' || modeName === 'des-ede-cbc') key = Buffer.concat([
        key,
        key.slice(0, 8)
    ]);
    var iv = opts.iv;
    if (!Buffer.isBuffer(iv)) iv = Buffer.from(iv);
    this._des = mode.create({
        key: key,
        iv: iv,
        type: type
    });
}
DES.prototype._update = function(data) {
    return Buffer.from(this._des.update(data));
};
DES.prototype._final = function() {
    return Buffer.from(this._des.final());
};

},{"cipher-base":"981bP","des.js":"4Y54P","inherits":"bYMAq","safe-buffer":"8BeU0"}],"4Y54P":[function(require,module,exports) {
'use strict';
exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/utils":"cPIzk","./des/cipher":"eimTU","./des/des":"66Mea","./des/cbc":"b6Cmm","./des/ede":"akpd1"}],"cPIzk":[function(require,module,exports) {
'use strict';
exports.readUInt32BE = function readUInt32BE(bytes, off) {
    var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
    return res >>> 0;
};
exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
    bytes[0 + off] = value >>> 24;
    bytes[1 + off] = value >>> 16 & 255;
    bytes[2 + off] = value >>> 8 & 255;
    bytes[3 + off] = value & 255;
};
exports.ip = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >>> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >>> j + i & 1;
        }
    }
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inR >>> j + i & 1;
        }
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inL >>> j + i & 1;
        }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.rip = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 0; i < 4; i++)for(var j = 24; j >= 0; j -= 8){
        outL <<= 1;
        outL |= inR >>> j + i & 1;
        outL <<= 1;
        outL |= inL >>> j + i & 1;
    }
    for(var i = 4; i < 8; i++)for(var j = 24; j >= 0; j -= 8){
        outR <<= 1;
        outR |= inR >>> j + i & 1;
        outR <<= 1;
        outR |= inL >>> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.pc1 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    // 7, 15, 23, 31, 39, 47, 55, 63
    // 6, 14, 22, 30, 39, 47, 55, 63
    // 5, 13, 21, 29, 39, 47, 55, 63
    // 4, 12, 20, 28
    for(var i = 7; i >= 5; i--){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outL <<= 1;
        outL |= inR >> j + i & 1;
    }
    // 1, 9, 17, 25, 33, 41, 49, 57
    // 2, 10, 18, 26, 34, 42, 50, 58
    // 3, 11, 19, 27, 35, 43, 51, 59
    // 36, 44, 52, 60
    for(var i = 1; i <= 3; i++){
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outR <<= 1;
        outR |= inL >> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.r28shl = function r28shl(num, shift) {
    return num << shift & 268435455 | num >>> 28 - shift;
};
var pc2table = [
    // inL => outL
    14,
    11,
    17,
    4,
    27,
    23,
    25,
    0,
    13,
    22,
    7,
    18,
    5,
    9,
    16,
    24,
    2,
    20,
    12,
    21,
    1,
    8,
    15,
    26,
    // inR => outR
    15,
    4,
    25,
    19,
    9,
    1,
    26,
    16,
    5,
    11,
    23,
    8,
    12,
    7,
    17,
    0,
    22,
    3,
    10,
    14,
    6,
    20,
    27,
    24
];
exports.pc2 = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    var len = pc2table.length >>> 1;
    for(var i = 0; i < len; i++){
        outL <<= 1;
        outL |= inL >>> pc2table[i] & 1;
    }
    for(var i = len; i < pc2table.length; i++){
        outR <<= 1;
        outR |= inR >>> pc2table[i] & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.expand = function expand(r, out, off) {
    var outL = 0;
    var outR = 0;
    outL = (r & 1) << 5 | r >>> 27;
    for(var i = 23; i >= 15; i -= 4){
        outL <<= 6;
        outL |= r >>> i & 63;
    }
    for(var i = 11; i >= 3; i -= 4){
        outR |= r >>> i & 63;
        outR <<= 6;
    }
    outR |= (r & 31) << 1 | r >>> 31;
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
var sTable = [
    14,
    0,
    4,
    15,
    13,
    7,
    1,
    4,
    2,
    14,
    15,
    2,
    11,
    13,
    8,
    1,
    3,
    10,
    10,
    6,
    6,
    12,
    12,
    11,
    5,
    9,
    9,
    5,
    0,
    3,
    7,
    8,
    4,
    15,
    1,
    12,
    14,
    8,
    8,
    2,
    13,
    4,
    6,
    9,
    2,
    1,
    11,
    7,
    15,
    5,
    12,
    11,
    9,
    3,
    7,
    14,
    3,
    10,
    10,
    0,
    5,
    6,
    0,
    13,
    15,
    3,
    1,
    13,
    8,
    4,
    14,
    7,
    6,
    15,
    11,
    2,
    3,
    8,
    4,
    14,
    9,
    12,
    7,
    0,
    2,
    1,
    13,
    10,
    12,
    6,
    0,
    9,
    5,
    11,
    10,
    5,
    0,
    13,
    14,
    8,
    7,
    10,
    11,
    1,
    10,
    3,
    4,
    15,
    13,
    4,
    1,
    2,
    5,
    11,
    8,
    6,
    12,
    7,
    6,
    12,
    9,
    0,
    3,
    5,
    2,
    14,
    15,
    9,
    10,
    13,
    0,
    7,
    9,
    0,
    14,
    9,
    6,
    3,
    3,
    4,
    15,
    6,
    5,
    10,
    1,
    2,
    13,
    8,
    12,
    5,
    7,
    14,
    11,
    12,
    4,
    11,
    2,
    15,
    8,
    1,
    13,
    1,
    6,
    10,
    4,
    13,
    9,
    0,
    8,
    6,
    15,
    9,
    3,
    8,
    0,
    7,
    11,
    4,
    1,
    15,
    2,
    14,
    12,
    3,
    5,
    11,
    10,
    5,
    14,
    2,
    7,
    12,
    7,
    13,
    13,
    8,
    14,
    11,
    3,
    5,
    0,
    6,
    6,
    15,
    9,
    0,
    10,
    3,
    1,
    4,
    2,
    7,
    8,
    2,
    5,
    12,
    11,
    1,
    12,
    10,
    4,
    14,
    15,
    9,
    10,
    3,
    6,
    15,
    9,
    0,
    0,
    6,
    12,
    10,
    11,
    1,
    7,
    13,
    13,
    8,
    15,
    9,
    1,
    4,
    3,
    5,
    14,
    11,
    5,
    12,
    2,
    7,
    8,
    2,
    4,
    14,
    2,
    14,
    12,
    11,
    4,
    2,
    1,
    12,
    7,
    4,
    10,
    7,
    11,
    13,
    6,
    1,
    8,
    5,
    5,
    0,
    3,
    15,
    15,
    10,
    13,
    3,
    0,
    9,
    14,
    8,
    9,
    6,
    4,
    11,
    2,
    8,
    1,
    12,
    11,
    7,
    10,
    1,
    13,
    14,
    7,
    2,
    8,
    13,
    15,
    6,
    9,
    15,
    12,
    0,
    5,
    9,
    6,
    10,
    3,
    4,
    0,
    5,
    14,
    3,
    12,
    10,
    1,
    15,
    10,
    4,
    15,
    2,
    9,
    7,
    2,
    12,
    6,
    9,
    8,
    5,
    0,
    6,
    13,
    1,
    3,
    13,
    4,
    14,
    14,
    0,
    7,
    11,
    5,
    3,
    11,
    8,
    9,
    4,
    14,
    3,
    15,
    2,
    5,
    12,
    2,
    9,
    8,
    5,
    12,
    15,
    3,
    10,
    7,
    11,
    0,
    14,
    4,
    1,
    10,
    7,
    1,
    6,
    13,
    0,
    11,
    8,
    6,
    13,
    4,
    13,
    11,
    0,
    2,
    11,
    14,
    7,
    15,
    4,
    0,
    9,
    8,
    1,
    13,
    10,
    3,
    14,
    12,
    3,
    9,
    5,
    7,
    12,
    5,
    2,
    10,
    15,
    6,
    8,
    1,
    6,
    1,
    6,
    4,
    11,
    11,
    13,
    13,
    8,
    12,
    1,
    3,
    4,
    7,
    10,
    14,
    7,
    10,
    9,
    15,
    5,
    6,
    0,
    8,
    15,
    0,
    14,
    5,
    2,
    9,
    3,
    2,
    12,
    13,
    1,
    2,
    15,
    8,
    13,
    4,
    8,
    6,
    10,
    15,
    3,
    11,
    7,
    1,
    4,
    10,
    12,
    9,
    5,
    3,
    6,
    14,
    11,
    5,
    0,
    0,
    14,
    12,
    9,
    7,
    2,
    7,
    2,
    11,
    1,
    4,
    14,
    1,
    7,
    9,
    4,
    12,
    10,
    14,
    8,
    2,
    13,
    0,
    15,
    6,
    12,
    10,
    9,
    13,
    0,
    15,
    3,
    3,
    5,
    5,
    6,
    8,
    11
];
exports.substitute = function substitute(inL, inR) {
    var out = 0;
    for(var i = 0; i < 4; i++){
        var b = inL >>> 18 - i * 6 & 63;
        var sb = sTable[i * 64 + b];
        out <<= 4;
        out |= sb;
    }
    for(var i = 0; i < 4; i++){
        var b = inR >>> 18 - i * 6 & 63;
        var sb = sTable[256 + i * 64 + b];
        out <<= 4;
        out |= sb;
    }
    return out >>> 0;
};
var permuteTable = [
    16,
    25,
    12,
    11,
    3,
    20,
    4,
    15,
    31,
    17,
    9,
    6,
    27,
    14,
    1,
    22,
    30,
    24,
    8,
    18,
    0,
    5,
    29,
    23,
    13,
    19,
    2,
    26,
    10,
    21,
    28,
    7
];
exports.permute = function permute(num) {
    var out = 0;
    for(var i = 0; i < permuteTable.length; i++){
        out <<= 1;
        out |= num >>> permuteTable[i] & 1;
    }
    return out >>> 0;
};
exports.padSplit = function padSplit(num, size, group) {
    var str = num.toString(2);
    while(str.length < size)str = '0' + str;
    var out = [];
    for(var i = 0; i < size; i += group)out.push(str.slice(i, i + group));
    return out.join(' ');
};

},{}],"eimTU":[function(require,module,exports) {
'use strict';
var assert = require('minimalistic-assert');
function Cipher(options) {
    this.options = options;
    this.type = this.options.type;
    this.blockSize = 8;
    this._init();
    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
}
module.exports = Cipher;
Cipher.prototype._init = function _init() {
// Might be overrided
};
Cipher.prototype.update = function update(data) {
    if (data.length === 0) return [];
    if (this.type === 'decrypt') return this._updateDecrypt(data);
    else return this._updateEncrypt(data);
};
Cipher.prototype._buffer = function _buffer(data, off) {
    // Append data to buffer
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
    for(var i = 0; i < min; i++)this.buffer[this.bufferOff + i] = data[off + i];
    this.bufferOff += min;
    // Shift next
    return min;
};
Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
    this._update(this.buffer, 0, out, off);
    this.bufferOff = 0;
    return this.blockSize;
};
Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = (this.bufferOff + data.length) / this.blockSize | 0;
    var out = new Array(count * this.blockSize);
    if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
    }
    // Write blocks
    var max = data.length - (data.length - inputOff) % this.blockSize;
    for(; inputOff < max; inputOff += this.blockSize){
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
    }
    // Queue rest
    for(; inputOff < data.length; inputOff++, this.bufferOff++)this.buffer[this.bufferOff] = data[inputOff];
    return out;
};
Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);
    // TODO(indutny): optimize it, this is far from optimal
    for(; count > 0; count--){
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
    }
    // Buffer rest of the input
    inputOff += this._buffer(data, inputOff);
    return out;
};
Cipher.prototype.final = function final(buffer) {
    var first;
    if (buffer) first = this.update(buffer);
    var last;
    if (this.type === 'encrypt') last = this._finalEncrypt();
    else last = this._finalDecrypt();
    if (first) return first.concat(last);
    else return last;
};
Cipher.prototype._pad = function _pad(buffer, off) {
    if (off === 0) return false;
    while(off < buffer.length)buffer[off++] = 0;
    return true;
};
Cipher.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff)) return [];
    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
};
Cipher.prototype._unpad = function _unpad(buffer) {
    return buffer;
};
Cipher.prototype._finalDecrypt = function _finalDecrypt() {
    assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);
    return this._unpad(out);
};

},{"minimalistic-assert":"cHdm7"}],"cHdm7":[function(require,module,exports) {
module.exports = assert;
function assert(val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
}
assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

},{}],"66Mea":[function(require,module,exports) {
'use strict';
var assert = require('minimalistic-assert');
var inherits = require('inherits');
var utils = require('./utils');
var Cipher = require('./cipher');
function DESState() {
    this.tmp = new Array(2);
    this.keys = null;
}
function DES(options) {
    Cipher.call(this, options);
    var state = new DESState();
    this._desState = state;
    this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;
DES.create = function create(options) {
    return new DES(options);
};
var shiftTable = [
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1
];
DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(32);
    assert.equal(key.length, this.blockSize, 'Invalid key length');
    var kL = utils.readUInt32BE(key, 0);
    var kR = utils.readUInt32BE(key, 4);
    utils.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for(var i = 0; i < state.keys.length; i += 2){
        var shift = shiftTable[i >>> 1];
        kL = utils.r28shl(kL, shift);
        kR = utils.r28shl(kR, shift);
        utils.pc2(kL, kR, state.keys, i);
    }
};
DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;
    var l = utils.readUInt32BE(inp, inOff);
    var r = utils.readUInt32BE(inp, inOff + 4);
    // Initial Permutation
    utils.ip(l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    if (this.type === 'encrypt') this._encrypt(state, l, r, state.tmp, 0);
    else this._decrypt(state, l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    utils.writeUInt32BE(out, l, outOff);
    utils.writeUInt32BE(out, r, outOff + 4);
};
DES.prototype._pad = function _pad(buffer, off) {
    var value = buffer.length - off;
    for(var i = off; i < buffer.length; i++)buffer[i] = value;
    return true;
};
DES.prototype._unpad = function _unpad(buffer) {
    var pad = buffer[buffer.length - 1];
    for(var i = buffer.length - pad; i < buffer.length; i++)assert.equal(buffer[i], pad);
    return buffer.slice(0, buffer.length - pad);
};
DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
    var l = lStart;
    var r = rStart;
    // Apply f() x16 times
    for(var i = 0; i < state.keys.length; i += 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        utils.expand(r, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
    }
    // Reverse Initial Permutation
    utils.rip(r, l, out, off);
};
DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
    var l = rStart;
    var r = lStart;
    // Apply f() x16 times
    for(var i = state.keys.length - 2; i >= 0; i -= 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        utils.expand(l, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
    }
    // Reverse Initial Permutation
    utils.rip(l, r, out, off);
};

},{"minimalistic-assert":"cHdm7","inherits":"bYMAq","./utils":"cPIzk","./cipher":"eimTU"}],"b6Cmm":[function(require,module,exports) {
'use strict';
var assert = require('minimalistic-assert');
var inherits = require('inherits');
var proto = {
};
function CBCState(iv) {
    assert.equal(iv.length, 8, 'Invalid IV length');
    this.iv = new Array(8);
    for(var i = 0; i < this.iv.length; i++)this.iv[i] = iv[i];
}
function instantiate(Base) {
    function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
    }
    inherits(CBC, Base);
    var keys = Object.keys(proto);
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        CBC.prototype[key] = proto[key];
    }
    CBC.create = function create(options) {
        return new CBC(options);
    };
    return CBC;
}
exports.instantiate = instantiate;
proto._cbcInit = function _cbcInit() {
    var state = new CBCState(this.options.iv);
    this._cbcState = state;
};
proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;
    var iv = state.iv;
    if (this.type === 'encrypt') {
        for(var i = 0; i < this.blockSize; i++)iv[i] ^= inp[inOff + i];
        superProto._update.call(this, iv, 0, out, outOff);
        for(var i = 0; i < this.blockSize; i++)iv[i] = out[outOff + i];
    } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for(var i = 0; i < this.blockSize; i++)out[outOff + i] ^= iv[i];
        for(var i = 0; i < this.blockSize; i++)iv[i] = inp[inOff + i];
    }
};

},{"minimalistic-assert":"cHdm7","inherits":"bYMAq"}],"akpd1":[function(require,module,exports) {
'use strict';
var assert = require('minimalistic-assert');
var inherits = require('inherits');
var Cipher = require('./cipher');
var DES = require('./des');
function EDEState(type, key) {
    assert.equal(key.length, 24, 'Invalid key length');
    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    var k3 = key.slice(16, 24);
    if (type === 'encrypt') this.ciphers = [
        DES.create({
            type: 'encrypt',
            key: k1
        }),
        DES.create({
            type: 'decrypt',
            key: k2
        }),
        DES.create({
            type: 'encrypt',
            key: k3
        })
    ];
    else this.ciphers = [
        DES.create({
            type: 'decrypt',
            key: k3
        }),
        DES.create({
            type: 'encrypt',
            key: k2
        }),
        DES.create({
            type: 'decrypt',
            key: k1
        })
    ];
}
function EDE(options) {
    Cipher.call(this, options);
    var state = new EDEState(this.type, this.options.key);
    this._edeState = state;
}
inherits(EDE, Cipher);
module.exports = EDE;
EDE.create = function create(options) {
    return new EDE(options);
};
EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;
    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
};
EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"minimalistic-assert":"cHdm7","inherits":"bYMAq","./cipher":"eimTU","./des":"66Mea"}],"RRNBY":[function(require,module,exports) {
var ciphers = require('./encrypter');
var deciphers = require('./decrypter');
var modes = require('./modes/list.json');
function getCiphers() {
    return Object.keys(modes);
}
exports.createCipher = exports.Cipher = ciphers.createCipher;
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
exports.createDecipher = exports.Decipher = deciphers.createDecipher;
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

},{"./encrypter":"aWByx","./decrypter":"azoBf","./modes/list.json":"eT5QD"}],"aWByx":[function(require,module,exports) {
var MODES = require('./modes');
var AuthCipher = require('./authCipher');
var Buffer = require('safe-buffer').Buffer;
var StreamCipher = require('./streamCipher');
var Transform = require('cipher-base');
var aes = require('./aes');
var ebtk = require('evp_bytestokey');
var inherits = require('inherits');
function Cipher(mode, key, iv) {
    Transform.call(this);
    this._cache = new Splitter();
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
inherits(Cipher, Transform);
Cipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get()){
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
    }
    return Buffer.concat(out);
};
var PADDING = Buffer.alloc(16, 16);
Cipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
    }
    if (!chunk.equals(PADDING)) {
        this._cipher.scrub();
        throw new Error('data not multiple of block length');
    }
};
Cipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function Splitter() {
    this.cache = Buffer.allocUnsafe(0);
}
Splitter.prototype.add = function(data) {
    this.cache = Buffer.concat([
        this.cache,
        data
    ]);
};
Splitter.prototype.get = function() {
    if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
Splitter.prototype.flush = function() {
    var len = 16 - this.cache.length;
    var padBuff = Buffer.allocUnsafe(len);
    var i = -1;
    while((++i) < len)padBuff.writeUInt8(len, i);
    return Buffer.concat([
        this.cache,
        padBuff
    ]);
};
function createCipheriv(suite, password, iv) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    if (typeof password === 'string') password = Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
    if (typeof iv === 'string') iv = Buffer.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
    if (config.type === 'stream') return new StreamCipher(config.module, password, iv);
    else if (config.type === 'auth') return new AuthCipher(config.module, password, iv);
    return new Cipher(config.module, password, iv);
}
function createCipher(suite, password) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    var keys = ebtk(password, false, config.key, config.iv);
    return createCipheriv(suite, keys.key, keys.iv);
}
exports.createCipheriv = createCipheriv;
exports.createCipher = createCipher;

},{"./modes":"i3iIe","./authCipher":"hChgT","safe-buffer":"8BeU0","./streamCipher":"l25Pw","cipher-base":"981bP","./aes":"3dTIW","evp_bytestokey":"6rOUs","inherits":"bYMAq"}],"i3iIe":[function(require,module,exports) {
var modeModules = {
    ECB: require('./ecb'),
    CBC: require('./cbc'),
    CFB: require('./cfb'),
    CFB8: require('./cfb8'),
    CFB1: require('./cfb1'),
    OFB: require('./ofb'),
    CTR: require('./ctr'),
    GCM: require('./ctr')
};
var modes = require('./list.json');
for(var key in modes)modes[key].module = modeModules[modes[key].mode];
module.exports = modes;

},{"./ecb":"bT8wX","./cbc":"kYrdr","./cfb":"2A85T","./cfb8":"jzEGv","./cfb1":"kPEj3","./ofb":"jvXEx","./ctr":"6nejD","./list.json":"eT5QD"}],"bT8wX":[function(require,module,exports) {
exports.encrypt = function(self, block) {
    return self._cipher.encryptBlock(block);
};
exports.decrypt = function(self, block) {
    return self._cipher.decryptBlock(block);
};

},{}],"kYrdr":[function(require,module,exports) {
var xor = require('buffer-xor');
exports.encrypt = function(self, block) {
    var data = xor(block, self._prev);
    self._prev = self._cipher.encryptBlock(data);
    return self._prev;
};
exports.decrypt = function(self, block) {
    var pad = self._prev;
    self._prev = block;
    var out = self._cipher.decryptBlock(block);
    return xor(out, pad);
};

},{"buffer-xor":"1StZY"}],"1StZY":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
module.exports = function xor(a, b) {
    var length = Math.min(a.length, b.length);
    var buffer = new Buffer(length);
    for(var i = 0; i < length; ++i)buffer[i] = a[i] ^ b[i];
    return buffer;
};

},{"buffer":"bpNHw"}],"2A85T":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
var xor = require('buffer-xor');
function encryptStart(self, data, decrypt) {
    var len = data.length;
    var out = xor(data, self._cache);
    self._cache = self._cache.slice(len);
    self._prev = Buffer.concat([
        self._prev,
        decrypt ? data : out
    ]);
    return out;
}
exports.encrypt = function(self, data, decrypt) {
    var out = Buffer.allocUnsafe(0);
    var len;
    while(data.length){
        if (self._cache.length === 0) {
            self._cache = self._cipher.encryptBlock(self._prev);
            self._prev = Buffer.allocUnsafe(0);
        }
        if (self._cache.length <= data.length) {
            len = self._cache.length;
            out = Buffer.concat([
                out,
                encryptStart(self, data.slice(0, len), decrypt)
            ]);
            data = data.slice(len);
        } else {
            out = Buffer.concat([
                out,
                encryptStart(self, data, decrypt)
            ]);
            break;
        }
    }
    return out;
};

},{"safe-buffer":"8BeU0","buffer-xor":"1StZY"}],"jzEGv":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
function encryptByte(self, byteParam, decrypt) {
    var pad = self._cipher.encryptBlock(self._prev);
    var out = pad[0] ^ byteParam;
    self._prev = Buffer.concat([
        self._prev.slice(1),
        Buffer.from([
            decrypt ? byteParam : out
        ])
    ]);
    return out;
}
exports.encrypt = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer.allocUnsafe(len);
    var i = -1;
    while((++i) < len)out[i] = encryptByte(self, chunk[i], decrypt);
    return out;
};

},{"safe-buffer":"8BeU0"}],"kPEj3":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
function encryptByte(self, byteParam, decrypt) {
    var pad;
    var i = -1;
    var len = 8;
    var out = 0;
    var bit, value;
    while((++i) < len){
        pad = self._cipher.encryptBlock(self._prev);
        bit = byteParam & 1 << 7 - i ? 128 : 0;
        value = pad[0] ^ bit;
        out += (value & 128) >> i % 8;
        self._prev = shiftIn(self._prev, decrypt ? bit : value);
    }
    return out;
}
function shiftIn(buffer, value) {
    var len = buffer.length;
    var i = -1;
    var out = Buffer.allocUnsafe(buffer.length);
    buffer = Buffer.concat([
        buffer,
        Buffer.from([
            value
        ])
    ]);
    while((++i) < len)out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
    return out;
}
exports.encrypt = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer.allocUnsafe(len);
    var i = -1;
    while((++i) < len)out[i] = encryptByte(self, chunk[i], decrypt);
    return out;
};

},{"safe-buffer":"8BeU0"}],"jvXEx":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var xor = require('buffer-xor');
function getBlock(self) {
    self._prev = self._cipher.encryptBlock(self._prev);
    return self._prev;
}
exports.encrypt = function(self, chunk) {
    while(self._cache.length < chunk.length)self._cache = Buffer.concat([
        self._cache,
        getBlock(self)
    ]);
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return xor(chunk, pad);
};

},{"buffer":"bpNHw","buffer-xor":"1StZY"}],"6nejD":[function(require,module,exports) {
var xor = require('buffer-xor');
var Buffer = require('safe-buffer').Buffer;
var incr32 = require('../incr32');
function getBlock(self) {
    var out = self._cipher.encryptBlockRaw(self._prev);
    incr32(self._prev);
    return out;
}
var blockSize = 16;
exports.encrypt = function(self, chunk) {
    var chunkNum = Math.ceil(chunk.length / blockSize);
    var start = self._cache.length;
    self._cache = Buffer.concat([
        self._cache,
        Buffer.allocUnsafe(chunkNum * blockSize)
    ]);
    for(var i = 0; i < chunkNum; i++){
        var out = getBlock(self);
        var offset = start + i * blockSize;
        self._cache.writeUInt32BE(out[0], offset + 0);
        self._cache.writeUInt32BE(out[1], offset + 4);
        self._cache.writeUInt32BE(out[2], offset + 8);
        self._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return xor(chunk, pad);
};

},{"buffer-xor":"1StZY","safe-buffer":"8BeU0","../incr32":"6JKNy"}],"6JKNy":[function(require,module,exports) {
function incr32(iv) {
    var len = iv.length;
    var item;
    while(len--){
        item = iv.readUInt8(len);
        if (item === 255) iv.writeUInt8(0, len);
        else {
            item++;
            iv.writeUInt8(item, len);
            break;
        }
    }
}
module.exports = incr32;

},{}],"eT5QD":[function(require,module,exports) {
module.exports = JSON.parse("{\"aes-128-ecb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-192-ecb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-256-ecb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-128-cbc\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-192-cbc\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-256-cbc\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes128\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes192\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes256\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-128-cfb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-192-cfb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-256-cfb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-128-cfb8\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-192-cfb8\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-256-cfb8\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-128-cfb1\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-192-cfb1\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-256-cfb1\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-128-ofb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-192-ofb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-256-ofb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-128-ctr\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-192-ctr\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-256-ctr\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-128-gcm\":{\"cipher\":\"AES\",\"key\":128,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-192-gcm\":{\"cipher\":\"AES\",\"key\":192,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-256-gcm\":{\"cipher\":\"AES\",\"key\":256,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"}}");

},{}],"hChgT":[function(require,module,exports) {
var aes = require('./aes');
var Buffer = require('safe-buffer').Buffer;
var Transform = require('cipher-base');
var inherits = require('inherits');
var GHASH = require('./ghash');
var xor = require('buffer-xor');
var incr32 = require('./incr32');
function xorTest(a, b) {
    var out = 0;
    if (a.length !== b.length) out++;
    var len = Math.min(a.length, b.length);
    for(var i = 0; i < len; ++i)out += a[i] ^ b[i];
    return out;
}
function calcIv(self, iv, ck) {
    if (iv.length === 12) {
        self._finID = Buffer.concat([
            iv,
            Buffer.from([
                0,
                0,
                0,
                1
            ])
        ]);
        return Buffer.concat([
            iv,
            Buffer.from([
                0,
                0,
                0,
                2
            ])
        ]);
    }
    var ghash = new GHASH(ck);
    var len = iv.length;
    var toPad = len % 16;
    ghash.update(iv);
    if (toPad) {
        toPad = 16 - toPad;
        ghash.update(Buffer.alloc(toPad, 0));
    }
    ghash.update(Buffer.alloc(8, 0));
    var ivBits = len * 8;
    var tail = Buffer.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash.update(tail);
    self._finID = ghash.state;
    var out = Buffer.from(self._finID);
    incr32(out);
    return out;
}
function StreamCipher(mode, key, iv, decrypt) {
    Transform.call(this);
    var h = Buffer.alloc(4, 0);
    this._cipher = new aes.AES(key);
    var ck = this._cipher.encryptBlock(h);
    this._ghash = new GHASH(ck);
    iv = calcIv(this, iv, ck);
    this._prev = Buffer.from(iv);
    this._cache = Buffer.allocUnsafe(0);
    this._secCache = Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._alen = 0;
    this._len = 0;
    this._mode = mode;
    this._authTag = null;
    this._called = false;
}
inherits(StreamCipher, Transform);
StreamCipher.prototype._update = function(chunk) {
    if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
            rump = Buffer.alloc(rump, 0);
            this._ghash.update(rump);
        }
    }
    this._called = true;
    var out = this._mode.encrypt(this, chunk);
    if (this._decrypt) this._ghash.update(chunk);
    else this._ghash.update(out);
    this._len += chunk.length;
    return out;
};
StreamCipher.prototype._final = function() {
    if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data');
    var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data');
    this._authTag = tag;
    this._cipher.scrub();
};
StreamCipher.prototype.getAuthTag = function getAuthTag() {
    if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state');
    return this._authTag;
};
StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
    if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state');
    this._authTag = tag;
};
StreamCipher.prototype.setAAD = function setAAD(buf) {
    if (this._called) throw new Error('Attempting to set AAD in unsupported state');
    this._ghash.update(buf);
    this._alen += buf.length;
};
module.exports = StreamCipher;

},{"./aes":"3dTIW","safe-buffer":"8BeU0","cipher-base":"981bP","inherits":"bYMAq","./ghash":"6IUI1","buffer-xor":"1StZY","./incr32":"6JKNy"}],"3dTIW":[function(require,module,exports) {
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/
var Buffer = require('safe-buffer').Buffer;
function asUInt32Array(buf) {
    if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
    var len = buf.length / 4 | 0;
    var out = new Array(len);
    for(var i = 0; i < len; i++)out[i] = buf.readUInt32BE(i * 4);
    return out;
}
function scrubVec(v) {
    for(var i = 0; i < v.length; v++)v[i] = 0;
}
function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];
    var s0 = M[0] ^ keySchedule[0];
    var s1 = M[1] ^ keySchedule[1];
    var s2 = M[2] ^ keySchedule[2];
    var s3 = M[3] ^ keySchedule[3];
    var t0, t1, t2, t3;
    var ksRow = 4;
    for(var round = 1; round < nRounds; round++){
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 255] ^ SUB_MIX2[s2 >>> 8 & 255] ^ SUB_MIX3[s3 & 255] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 255] ^ SUB_MIX2[s3 >>> 8 & 255] ^ SUB_MIX3[s0 & 255] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 255] ^ SUB_MIX2[s0 >>> 8 & 255] ^ SUB_MIX3[s1 & 255] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 255] ^ SUB_MIX2[s1 >>> 8 & 255] ^ SUB_MIX3[s2 & 255] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
    }
    t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[s3 & 255]) ^ keySchedule[ksRow++];
    t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];
    t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];
    t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s2 & 255]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t2 = t2 >>> 0;
    t3 = t3 >>> 0;
    return [
        t0,
        t1,
        t2,
        t3
    ];
}
// AES constants
var RCON = [
    0,
    1,
    2,
    4,
    8,
    16,
    32,
    64,
    128,
    27,
    54
];
var G = function() {
    // Compute double table
    var d = new Array(256);
    for(var j = 0; j < 256; j++)if (j < 128) d[j] = j << 1;
    else d[j] = j << 1 ^ 283;
    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    var INV_SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    // Walk GF(2^8)
    var x = 0;
    var xi = 0;
    for(var i = 0; i < 256; ++i){
        // Compute sbox
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 255 ^ 99;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;
        // Compute multiplication
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];
        // Compute sub bytes, mix columns tables
        var t = d[sx] * 257 ^ sx * 16843008;
        SUB_MIX[0][x] = t << 24 | t >>> 8;
        SUB_MIX[1][x] = t << 16 | t >>> 16;
        SUB_MIX[2][x] = t << 8 | t >>> 24;
        SUB_MIX[3][x] = t;
        // Compute inv sub bytes, inv mix columns tables
        t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
        INV_SUB_MIX[3][sx] = t;
        if (x === 0) x = xi = 1;
        else {
            x = x2 ^ d[d[d[x8 ^ x2]]];
            xi ^= d[d[xi]];
        }
    }
    return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
    };
}();
function AES(key) {
    this._key = asUInt32Array(key);
    this._reset();
}
AES.blockSize = 16;
AES.keySize = 32;
AES.prototype.blockSize = AES.blockSize;
AES.prototype.keySize = AES.keySize;
AES.prototype._reset = function() {
    var keyWords = this._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;
    var keySchedule = [];
    for(var k = 0; k < keySize; k++)keySchedule[k] = keyWords[k];
    for(k = keySize; k < ksRows; k++){
        var t = keySchedule[k - 1];
        if (k % keySize === 0) {
            t = t << 8 | t >>> 24;
            t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[t & 255];
            t ^= RCON[k / keySize | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[t & 255];
        keySchedule[k] = keySchedule[k - keySize] ^ t;
    }
    var invKeySchedule = [];
    for(var ik = 0; ik < ksRows; ik++){
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        if (ik < 4 || ksR <= 4) invKeySchedule[ik] = tt;
        else invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 255]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 255]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 255]];
    }
    this._nRounds = nRounds;
    this._keySchedule = keySchedule;
    this._invKeySchedule = invKeySchedule;
};
AES.prototype.encryptBlockRaw = function(M) {
    M = asUInt32Array(M);
    return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
};
AES.prototype.encryptBlock = function(M) {
    var out = this.encryptBlockRaw(M);
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf;
};
AES.prototype.decryptBlock = function(M) {
    M = asUInt32Array(M);
    // swap
    var m1 = M[1];
    M[1] = M[3];
    M[3] = m1;
    var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf;
};
AES.prototype.scrub = function() {
    scrubVec(this._keySchedule);
    scrubVec(this._invKeySchedule);
    scrubVec(this._key);
};
module.exports.AES = AES;

},{"safe-buffer":"8BeU0"}],"6IUI1":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
var ZEROES = Buffer.alloc(16, 0);
function toArray(buf) {
    return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
    ];
}
function fromArray(out) {
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf;
}
function GHASH(key) {
    this.h = key;
    this.state = Buffer.alloc(16, 0);
    this.cache = Buffer.allocUnsafe(0);
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function(block) {
    var i = -1;
    while((++i) < block.length)this.state[i] ^= block[i];
    this._multiply();
};
GHASH.prototype._multiply = function() {
    var Vi = toArray(this.h);
    var Zi = [
        0,
        0,
        0,
        0
    ];
    var j, xi, lsbVi;
    var i = -1;
    while((++i) < 128){
        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
        if (xi) {
            // Z_i+1 = Z_i ^ V_i
            Zi[0] ^= Vi[0];
            Zi[1] ^= Vi[1];
            Zi[2] ^= Vi[2];
            Zi[3] ^= Vi[3];
        }
        // Store the value of LSB(V_i)
        lsbVi = (Vi[3] & 1) !== 0;
        // V_i+1 = V_i >> 1
        for(j = 3; j > 0; j--)Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
        Vi[0] = Vi[0] >>> 1;
        // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
        if (lsbVi) Vi[0] = Vi[0] ^ -520093696;
    }
    this.state = fromArray(Zi);
};
GHASH.prototype.update = function(buf) {
    this.cache = Buffer.concat([
        this.cache,
        buf
    ]);
    var chunk;
    while(this.cache.length >= 16){
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
    }
};
GHASH.prototype.final = function(abl, bl) {
    if (this.cache.length) this.ghash(Buffer.concat([
        this.cache,
        ZEROES
    ], 16));
    this.ghash(fromArray([
        0,
        abl,
        0,
        bl
    ]));
    return this.state;
};
module.exports = GHASH;

},{"safe-buffer":"8BeU0"}],"l25Pw":[function(require,module,exports) {
var aes = require('./aes');
var Buffer = require('safe-buffer').Buffer;
var Transform = require('cipher-base');
var inherits = require('inherits');
function StreamCipher(mode, key, iv, decrypt) {
    Transform.call(this);
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._cache = Buffer.allocUnsafe(0);
    this._secCache = Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._mode = mode;
}
inherits(StreamCipher, Transform);
StreamCipher.prototype._update = function(chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt);
};
StreamCipher.prototype._final = function() {
    this._cipher.scrub();
};
module.exports = StreamCipher;

},{"./aes":"3dTIW","safe-buffer":"8BeU0","cipher-base":"981bP","inherits":"bYMAq"}],"6rOUs":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
var MD5 = require('md5.js');
/* eslint-disable camelcase */ function EVP_BytesToKey(password, salt, keyBits, ivLen) {
    if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary');
    if (salt) {
        if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary');
        if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length');
    }
    var keyLen = keyBits / 8;
    var key = Buffer.alloc(keyLen);
    var iv = Buffer.alloc(ivLen || 0);
    var tmp = Buffer.alloc(0);
    while(keyLen > 0 || ivLen > 0){
        var hash = new MD5();
        hash.update(tmp);
        hash.update(password);
        if (salt) hash.update(salt);
        tmp = hash.digest();
        var used = 0;
        if (keyLen > 0) {
            var keyStart = key.length - keyLen;
            used = Math.min(keyLen, tmp.length);
            tmp.copy(key, keyStart, 0, used);
            keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
            var ivStart = iv.length - ivLen;
            var length = Math.min(ivLen, tmp.length - used);
            tmp.copy(iv, ivStart, used, used + length);
            ivLen -= length;
        }
    }
    tmp.fill(0);
    return {
        key: key,
        iv: iv
    };
}
module.exports = EVP_BytesToKey;

},{"safe-buffer":"8BeU0","md5.js":"8YRsN"}],"azoBf":[function(require,module,exports) {
var AuthCipher = require('./authCipher');
var Buffer = require('safe-buffer').Buffer;
var MODES = require('./modes');
var StreamCipher = require('./streamCipher');
var Transform = require('cipher-base');
var aes = require('./aes');
var ebtk = require('evp_bytestokey');
var inherits = require('inherits');
function Decipher(mode, key, iv) {
    Transform.call(this);
    this._cache = new Splitter();
    this._last = void 0;
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
inherits(Decipher, Transform);
Decipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get(this._autopadding)){
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
    }
    return Buffer.concat(out);
};
Decipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) return unpad(this._mode.decrypt(this, chunk));
    else if (chunk) throw new Error('data not multiple of block length');
};
Decipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function Splitter() {
    this.cache = Buffer.allocUnsafe(0);
}
Splitter.prototype.add = function(data) {
    this.cache = Buffer.concat([
        this.cache,
        data
    ]);
};
Splitter.prototype.get = function(autoPadding) {
    var out;
    if (autoPadding) {
        if (this.cache.length > 16) {
            out = this.cache.slice(0, 16);
            this.cache = this.cache.slice(16);
            return out;
        }
    } else if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
Splitter.prototype.flush = function() {
    if (this.cache.length) return this.cache;
};
function unpad(last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) throw new Error('unable to decrypt data');
    var i = -1;
    while((++i) < padded){
        if (last[i + (16 - padded)] !== padded) throw new Error('unable to decrypt data');
    }
    if (padded === 16) return;
    return last.slice(0, 16 - padded);
}
function createDecipheriv(suite, password, iv) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    if (typeof iv === 'string') iv = Buffer.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
    if (typeof password === 'string') password = Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
    if (config.type === 'stream') return new StreamCipher(config.module, password, iv, true);
    else if (config.type === 'auth') return new AuthCipher(config.module, password, iv, true);
    return new Decipher(config.module, password, iv);
}
function createDecipher(suite, password) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    var keys = ebtk(password, false, config.key, config.iv);
    return createDecipheriv(suite, keys.key, keys.iv);
}
exports.createDecipher = createDecipher;
exports.createDecipheriv = createDecipheriv;

},{"./authCipher":"hChgT","safe-buffer":"8BeU0","./modes":"i3iIe","./streamCipher":"l25Pw","cipher-base":"981bP","./aes":"3dTIW","evp_bytestokey":"6rOUs","inherits":"bYMAq"}],"tpKq7":[function(require,module,exports) {
exports['des-ecb'] = {
    key: 8,
    iv: 0
};
exports['des-cbc'] = exports.des = {
    key: 8,
    iv: 8
};
exports['des-ede3-cbc'] = exports.des3 = {
    key: 24,
    iv: 8
};
exports['des-ede3'] = {
    key: 24,
    iv: 0
};
exports['des-ede-cbc'] = {
    key: 16,
    iv: 8
};
exports['des-ede'] = {
    key: 16,
    iv: 0
};

},{}],"6HHyA":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var generatePrime = require('./lib/generatePrime');
var primes = require('./lib/primes.json');
var DH = require('./lib/dh');
function getDiffieHellman(mod) {
    var prime = new Buffer(primes[mod].prime, 'hex');
    var gen = new Buffer(primes[mod].gen, 'hex');
    return new DH(prime, gen);
}
var ENCODINGS = {
    'binary': true,
    'hex': true,
    'base64': true
};
function createDiffieHellman(prime, enc, generator, genc) {
    if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) return createDiffieHellman(prime, 'binary', enc, generator);
    enc = enc || 'binary';
    genc = genc || 'binary';
    generator = generator || new Buffer([
        2
    ]);
    if (!Buffer.isBuffer(generator)) generator = new Buffer(generator, genc);
    if (typeof prime === 'number') return new DH(generatePrime(prime, generator), generator, true);
    if (!Buffer.isBuffer(prime)) prime = new Buffer(prime, enc);
    return new DH(prime, generator, true);
}
exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;

},{"buffer":"bpNHw","./lib/generatePrime":"g07hE","./lib/primes.json":"13Uak","./lib/dh":"jMhYw"}],"g07hE":[function(require,module,exports) {
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;
function _getPrimes() {
    if (primes !== null) return primes;
    var limit = 1048576;
    var res = [];
    res[0] = 2;
    for(var i = 1, k = 3; k < limit; k += 2){
        var sqrt = Math.ceil(Math.sqrt(k));
        for(var j = 0; j < i && res[j] <= sqrt; j++)if (k % res[j] === 0) break;
        if (i !== j && res[j] <= sqrt) continue;
        res[i++] = k;
    }
    primes = res;
    return res;
}
function simpleSieve(p) {
    var primes1 = _getPrimes();
    for(var i = 0; i < primes1.length; i++)if (p.modn(primes1[i]) === 0) {
        if (p.cmpn(primes1[i]) === 0) return true;
        else return false;
    }
    return true;
}
function fermatTest(p) {
    var red = BN.mont(p);
    return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}
function findPrime(bits, gen) {
    if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) return new BN([
            140,
            123
        ]);
        else return new BN([
            140,
            39
        ]);
    }
    gen = new BN(gen);
    var num, n2;
    while(true){
        num = new BN(randomBytes(Math.ceil(bits / 8)));
        while(num.bitLength() > bits)num.ishrn(1);
        if (num.isEven()) num.iadd(ONE);
        if (!num.testn(1)) num.iadd(TWO);
        if (!gen.cmp(TWO)) while(num.mod(TWENTYFOUR).cmp(ELEVEN))num.iadd(FOUR);
        else if (!gen.cmp(FIVE)) while(num.mod(TEN).cmp(THREE))num.iadd(FOUR);
        n2 = num.shrn(1);
        if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) return num;
    }
}

},{"randombytes":"cGTQk","bn.js":"k9xVm","miller-rabin":"7h9v9"}],"k9xVm":[function(require,module,exports) {
(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require('buffer').Buffer;
    } catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 15;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 10;
            else if (c >= 17) r += c - 17 + 10;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits1(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo1(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if ((++i) < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul1, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul1;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod1 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod1.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while((i--) > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while((j--) > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while((i--) > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while((j--) > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp1 = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp1 === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp1 > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split1(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK1(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK2(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime1 = BN._prime(m);
            this.m = prime1.p;
            this.prime = prime1;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg1(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add1(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd1(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub1(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub1(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr1(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr1(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow1 = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow1);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm1(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow2(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo1(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom1(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul2(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul2(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm2(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(typeof module === 'undefined' || module, this);

},{"buffer":"8VSUO"}],"7h9v9":[function(require,module,exports) {
var bn = require('bn.js');
var brorand = require('brorand');
function MillerRabin(rand) {
    this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;
MillerRabin.create = function create(rand) {
    return new MillerRabin(rand);
};
MillerRabin.prototype._randbelow = function _randbelow(n) {
    var len = n.bitLength();
    var min_bytes = Math.ceil(len / 8);
    // Generage random bytes until a number less than n is found.
    // This ensures that 0..n-1 have an equal probability of being selected.
    do var a = new bn(this.rand.generate(min_bytes));
    while (a.cmp(n) >= 0)
    return a;
};
MillerRabin.prototype._randrange = function _randrange(start, stop) {
    // Generate a random number greater than or equal to start and less than stop.
    var size = stop.sub(start);
    return start.add(this._randbelow(size));
};
MillerRabin.prototype.test = function test(n, k, cb) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    var prime = true;
    for(; k > 0; k--){
        var a = this._randrange(new bn(2), n1);
        if (cb) cb(a);
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return false;
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) return false;
    }
    return prime;
};
MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    for(; k > 0; k--){
        var a = this._randrange(new bn(2), n1);
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0) return g;
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) {
            x = x.redSqr();
            return x.fromRed().subn(1).gcd(n);
        }
    }
    return false;
};

},{"bn.js":"j1QU2","brorand":"9mmMS"}],"j1QU2":[function(require,module,exports) {
(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require('buffer').Buffer;
    } catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 15;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 10;
            else if (c >= 17) r += c - 17 + 10;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits1(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo1(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if ((++i) < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul1, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul1;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod1 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod1.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while((i--) > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while((j--) > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while((i--) > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while((j--) > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp1 = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp1 === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp1 > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split1(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK1(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK2(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime1 = BN._prime(m);
            this.m = prime1.p;
            this.prime = prime1;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg1(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add1(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd1(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub1(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub1(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr1(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr1(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow1 = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow1);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm1(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow2(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo1(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom1(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul2(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul2(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm2(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(typeof module === 'undefined' || module, this);

},{"buffer":"8VSUO"}],"9mmMS":[function(require,module,exports) {
var r;
module.exports = function rand(len) {
    if (!r) r = new Rand(null);
    return r.generate(len);
};
function Rand(rand1) {
    this.rand = rand1;
}
module.exports.Rand = Rand;
Rand.prototype.generate = function generate(len) {
    return this._rand(len);
};
// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes) return this.rand.getBytes(n);
    var res = new Uint8Array(n);
    for(var i = 0; i < res.length; i++)res[i] = this.rand.getByte();
    return res;
};
if (typeof self === 'object') {
    if (self.crypto && self.crypto.getRandomValues) // Modern browsers
    Rand.prototype._rand = function _rand1(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
    };
    else if (self.msCrypto && self.msCrypto.getRandomValues) // IE
    Rand.prototype._rand = function _rand2(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
    };
    else if (typeof window === 'object') // Old junk
    Rand.prototype._rand = function() {
        throw new Error('Not implemented yet');
    };
} else // Node.js or Web worker with no crypto support
try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function') throw new Error('Not supported');
    Rand.prototype._rand = function _rand1(n) {
        return crypto.randomBytes(n);
    };
} catch (e) {
}

},{"crypto":"8VSUO"}],"13Uak":[function(require,module,exports) {
module.exports = JSON.parse("{\"modp1\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff\"},\"modp2\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff\"},\"modp5\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff\"},\"modp14\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\"},\"modp15\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff\"},\"modp16\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff\"},\"modp17\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff\"},\"modp18\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff\"}}");

},{}],"jMhYw":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;
function setPublicKey(pub, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(pub)) pub = new Buffer(pub, enc);
    this._pub = new BN(pub);
    return this;
}
function setPrivateKey(priv, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(priv)) priv = new Buffer(priv, enc);
    this._priv = new BN(priv);
    return this;
}
var primeCache = {
};
function checkPrime(prime, generator) {
    var gen = generator.toString('hex');
    var hex = [
        gen,
        prime.toString(16)
    ].join('_');
    if (hex in primeCache) return primeCache[hex];
    var error = 0;
    if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
        //not a prime so +1
        error += 1;
        if (gen === '02' || gen === '05') // we'd be able to check the generator
        // it would fail so +8
        error += 8;
        else //we wouldn't be able to test the generator
        // so +4
        error += 4;
        primeCache[hex] = error;
        return error;
    }
    if (!millerRabin.test(prime.shrn(1))) //not a safe prime
    error += 2;
    var rem;
    switch(gen){
        case '02':
            if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) // unsuidable generator
            error += 8;
            break;
        case '05':
            rem = prime.mod(TEN);
            if (rem.cmp(THREE) && rem.cmp(SEVEN)) // prime mod 10 needs to equal 3 or 7
            error += 8;
            break;
        default:
            error += 4;
    }
    primeCache[hex] = error;
    return error;
}
function DH(prime, generator, malleable) {
    this.setGenerator(generator);
    this.__prime = new BN(prime);
    this._prime = BN.mont(this.__prime);
    this._primeLen = prime.length;
    this._pub = undefined;
    this._priv = undefined;
    this._primeCode = undefined;
    if (malleable) {
        this.setPublicKey = setPublicKey;
        this.setPrivateKey = setPrivateKey;
    } else this._primeCode = 8;
}
Object.defineProperty(DH.prototype, 'verifyError', {
    enumerable: true,
    get: function() {
        if (typeof this._primeCode !== 'number') this._primeCode = checkPrime(this.__prime, this.__gen);
        return this._primeCode;
    }
});
DH.prototype.generateKeys = function() {
    if (!this._priv) this._priv = new BN(randomBytes(this._primeLen));
    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
    return this.getPublicKey();
};
DH.prototype.computeSecret = function(other) {
    other = new BN(other);
    other = other.toRed(this._prime);
    var secret = other.redPow(this._priv).fromRed();
    var out = new Buffer(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
        var front = new Buffer(prime.length - out.length);
        front.fill(0);
        out = Buffer.concat([
            front,
            out
        ]);
    }
    return out;
};
DH.prototype.getPublicKey = function getPublicKey(enc) {
    return formatReturnValue(this._pub, enc);
};
DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return formatReturnValue(this._priv, enc);
};
DH.prototype.getPrime = function(enc) {
    return formatReturnValue(this.__prime, enc);
};
DH.prototype.getGenerator = function(enc) {
    return formatReturnValue(this._gen, enc);
};
DH.prototype.setGenerator = function(gen, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(gen)) gen = new Buffer(gen, enc);
    this.__gen = gen;
    this._gen = new BN(gen);
    return this;
};
function formatReturnValue(bn, enc) {
    var buf = new Buffer(bn.toArray());
    if (!enc) return buf;
    else return buf.toString(enc);
}

},{"buffer":"bpNHw","bn.js":"k9xVm","miller-rabin":"7h9v9","./generatePrime":"g07hE","randombytes":"cGTQk"}],"1GbX1":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
var createHash = require('create-hash');
var stream = require('readable-stream');
var inherits = require('inherits');
var sign = require('./sign');
var verify = require('./verify');
var algorithms = require('./algorithms.json');
Object.keys(algorithms).forEach(function(key) {
    algorithms[key].id = Buffer.from(algorithms[key].id, 'hex');
    algorithms[key.toLowerCase()] = algorithms[key];
});
function Sign(algorithm) {
    stream.Writable.call(this);
    var data = algorithms[algorithm];
    if (!data) throw new Error('Unknown message digest');
    this._hashType = data.hash;
    this._hash = createHash(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
inherits(Sign, stream.Writable);
Sign.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
Sign.prototype.update = function update(data, enc) {
    if (typeof data === 'string') data = Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
Sign.prototype.sign = function signMethod(key, enc) {
    this.end();
    var hash = this._hash.digest();
    var sig = sign(hash, key, this._hashType, this._signType, this._tag);
    return enc ? sig.toString(enc) : sig;
};
function Verify(algorithm) {
    stream.Writable.call(this);
    var data = algorithms[algorithm];
    if (!data) throw new Error('Unknown message digest');
    this._hash = createHash(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
inherits(Verify, stream.Writable);
Verify.prototype._write = function _write1(data, _, done) {
    this._hash.update(data);
    done();
};
Verify.prototype.update = function update1(data, enc) {
    if (typeof data === 'string') data = Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
Verify.prototype.verify = function verifyMethod(key, sig, enc) {
    if (typeof sig === 'string') sig = Buffer.from(sig, enc);
    this.end();
    var hash = this._hash.digest();
    return verify(sig, hash, key, this._signType, this._tag);
};
function createSign(algorithm) {
    return new Sign(algorithm);
}
function createVerify(algorithm) {
    return new Verify(algorithm);
}
module.exports = {
    Sign: createSign,
    Verify: createVerify,
    createSign: createSign,
    createVerify: createVerify
};

},{"safe-buffer":"QVErX","create-hash":"jEgSe","readable-stream":"cLAJ1","inherits":"bYMAq","./sign":"iEU4e","./verify":"8hZaS","./algorithms.json":"6Ny00"}],"QVErX":[function(require,module,exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = require('buffer');
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') throw new TypeError('Argument must not be a number');
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === 'string') buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return buffer.SlowBuffer(size);
};

},{"buffer":"bpNHw"}],"cLAJ1":[function(require,module,exports) {
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_readable.js":"i4PgZ","./lib/_stream_writable.js":"7Ch7W","./lib/_stream_duplex.js":"39Mph","./lib/_stream_transform.js":"eY9C8","./lib/_stream_passthrough.js":"1fTD1","./lib/internal/streams/end-of-stream.js":"89P8A","./lib/internal/streams/pipeline.js":"iqgG3"}],"i4PgZ":[function(require,module,exports) {
var process = require("process");
var global = arguments[3];
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
module.exports = Readable;
/*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require('events').EventEmitter;
var EElistenerCount = function EElistenerCount1(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require('./internal/streams/stream');
/*</replacement>*/ var Buffer = require('buffer').Buffer;
var OurUint8Array = global.Uint8Array || function() {
};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/ var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog('stream');
else debug = function debug1() {
};
/*</replacement>*/ var BufferList = require('./internal/streams/buffer_list');
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require('inherits')(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = [
    'error',
    'close',
    'destroy',
    'pause',
    'resume'
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require('./_stream_duplex');
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require('./_stream_duplex');
    if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = '';
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug('readableAddChunk', chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer',
        'Uint8Array'
    ], chunk);
    return er;
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = '';
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== '') this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var MAX_HWM = 1073741824;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
    } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit('data', ret);
    return ret;
};
function onEofChunk(stream, state) {
    debug('onEofChunk');
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    debug('emitReadable', state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
    }
}
function emitReadable_(stream) {
    var state = stream._readableState;
    debug('emitReadable_', state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);
    else src.once('end', endFn);
    dest.on('unpipe', onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug('onunpipe');
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug('onend');
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug('cleanup'); // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on('data', ondata);
    function ondata(chunk) {
        debug('ondata');
        var ret = dest.write(chunk);
        debug('dest.write', ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
    }
    dest.once('finish', onfinish);
    function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit('pipe', src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug('pipe resume');
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit('unpipe', this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug('on readable', state.length, state.reading);
            if (state.length) emitReadable(this);
            else if (!state.reading) process.nextTick(nReadingNextTick, this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === 'readable') // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === 'readable' || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
function updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount('readable') > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount('data') > 0) self.resume();
}
function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug('resume'); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
    }
    state.paused = false;
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    debug('resume', state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
    }
    this._readableState.paused = true;
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on('end', function() {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on('data', function(chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === 'function') this[i] = (function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    })(i);
     // proxy certain important events.
    for(var n = 0; n < kProxyEvents.length; n++)stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n1) {
        debug('wrapped _read', n1);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
if (typeof Symbol === 'function') Readable.prototype[Symbol.asyncIterator] = function() {
    if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    return createReadableStreamAsyncIterator(this);
};
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    debug('endReadable', state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}
if (typeof Symbol === 'function') Readable.from = function(iterable, opts) {
    if (from === undefined) from = require('./internal/streams/from');
    return from(Readable, iterable, opts);
};
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"process":"6Upk8","events":"jVtdj","./internal/streams/stream":"kdopW","buffer":"bpNHw","util":"8VSUO","./internal/streams/buffer_list":"3t1su","./internal/streams/destroy":"6NrdF","./internal/streams/state":"dobg4","../errors":"YVonJ","inherits":"bYMAq","./_stream_duplex":"39Mph","string_decoder/":"kKuVQ","./internal/streams/async_iterator":"9LaZL","./internal/streams/from":"cijv2"}],"kdopW":[function(require,module,exports) {
module.exports = require('events').EventEmitter;

},{"events":"jVtdj"}],"3t1su":[function(require,module,exports) {
'use strict';
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var _require = require('buffer'), Buffer = _require.Buffer;
var _require2 = require('util'), inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ (function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    _createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: custom,
            value: function value(_, options) {
                return inspect(this, _objectSpread({
                }, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
})();

},{"buffer":"bpNHw","util":"8VSUO"}],"6NrdF":[function(require,module,exports) {
var process = require("process");
'use strict'; // undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) process.nextTick(emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err1) {
        if (!cb && err1) {
            if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err1);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err1);
            } else process.nextTick(emitCloseNT, _this);
        } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err1);
        } else process.nextTick(emitCloseNT, _this);
    });
    return this;
}
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit('close');
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit('error', err);
}
function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit('error', err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
};

},{"process":"6Upk8"}],"dobg4":[function(require,module,exports) {
'use strict';
var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : 'highWaterMark';
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: getHighWaterMark
};

},{"../../../errors":"YVonJ"}],"YVonJ":[function(require,module,exports) {
'use strict';
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var codes = {
};
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        _inheritsLoose(NodeError2, _Base);
        function NodeError2(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError2;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== 'number') start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType('ERR_INVALID_OPT_VALUE', function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === 'string' && startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
    } else determiner = 'must be';
    var msg;
    if (endsWith(name, ' argument')) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    else {
        var type = includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function(name) {
    return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function(name) {
    return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function(arg) {
    return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],"39Mph":[function(require,module,exports) {
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = Duplex;
var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');
require('inherits')(Duplex, Readable);
// Allow the keys array to be GC'ed.
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once('end', onend);
        }
    }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

},{"process":"6Upk8","./_stream_readable":"i4PgZ","./_stream_writable":"7Ch7W","inherits":"bYMAq"}],"7Ch7W":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';
module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var internalUtil = {
    deprecate: require('util-deprecate')
};
/*</replacement>*/ /*<replacement>*/ var Stream = require('./internal/streams/stream');
/*</replacement>*/ var Buffer = require('buffer').Buffer;
var OurUint8Array = global.Uint8Array || function() {
};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require('inherits')(Writable, Stream);
function nop() {
}
function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require('./_stream_duplex');
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, 'buffer', {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
        });
    } catch (_) {
    }
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function realHasInstance1(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
    }
    Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== 'string' && !state.objectMode) er = new ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer'
    ], chunk);
    if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
    }
    return true;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = 'buffer';
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = nop;
    if (state.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    this._writableState.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!([
        'hex',
        'utf8',
        'utf-8',
        'ascii',
        'binary',
        'base64',
        'ucs2',
        'ucs-2',
        'utf16le',
        'utf-16le',
        'raw'
    ].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = 'buffer';
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
    }
} // if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
    return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit('prefinish');
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit('prefinish');
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit('finish');
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

},{"process":"6Upk8","util-deprecate":"i99jb","./internal/streams/stream":"kdopW","buffer":"bpNHw","./internal/streams/destroy":"6NrdF","./internal/streams/state":"dobg4","../errors":"YVonJ","inherits":"bYMAq","./_stream_duplex":"39Mph"}],"9LaZL":[function(require,module,exports) {
var process = require("process");
'use strict';
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var finished = require('./end-of-stream');
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
        var data = iter[kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
        }
    }
}
function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve, reject);
        }, reject);
    };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream () {
        return this[kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) return Promise.reject(error);
        if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
        if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            process.nextTick(function() {
                if (_this[kError]) reject(_this[kError]);
                else resolve(createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[kStream].read();
            if (data !== null) return Promise.resolve(createIterResult(data, false));
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve(createIterResult(undefined, true));
        });
    });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator1(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {
    }, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
            } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
            var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on('readable', onReadable.bind(null, iterator));
    return iterator;
};
module.exports = createReadableStreamAsyncIterator;

},{"process":"6Upk8","./end-of-stream":"89P8A"}],"89P8A":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function noop() {
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
    if (typeof opts === 'function') return eos(stream, null, opts);
    if (!opts) opts = {
    };
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish1() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish1() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend1() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror1(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose1() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest1() {
        stream.req.on('finish', onfinish);
    };
    if (isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();
        else stream.on('request', onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
    }
    stream.on('end', onend);
    stream.on('finish', onfinish);
    if (opts.error !== false) stream.on('error', onerror);
    stream.on('close', onclose);
    return function() {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
    };
}
module.exports = eos;

},{"../../../errors":"YVonJ"}],"cijv2":[function(require,module,exports) {
module.exports = function() {
    throw new Error('Readable.from is not available in the browser');
};

},{}],"eY9C8":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';
module.exports = Transform;
var _require$codes = require('../errors').codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require('./_stream_duplex');
require('inherits')(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit('error', new ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === 'function' && !this._readableState.destroyed) this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

},{"../errors":"YVonJ","./_stream_duplex":"39Mph","inherits":"bYMAq"}],"1fTD1":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';
module.exports = PassThrough;
var Transform = require('./_stream_transform');
require('inherits')(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"./_stream_transform":"eY9C8","inherits":"bYMAq"}],"iqgG3":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var eos;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
var _require$codes = require('../../../errors').codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on('close', function() {
        closed = true;
    });
    if (eos === undefined) eos = require('./end-of-stream');
    eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED('pipe'));
    };
}
function call(fn) {
    fn();
}
function pipe(from, to) {
    return from.pipe(to);
}
function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== 'function') return noop;
    return streams.pop();
}
function pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new ERR_MISSING_ARGS('streams');
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
        });
    });
    return streams.reduce(pipe);
}
module.exports = pipeline;

},{"../../../errors":"YVonJ","./end-of-stream":"89P8A"}],"iEU4e":[function(require,module,exports) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer;
var createHmac = require('create-hmac');
var crt = require('browserify-rsa');
var EC = require('elliptic').ec;
var BN = require('bn.js');
var parseKeys = require('parse-asn1');
var curves = require('./curves.json');
function sign(hash, key, hashType, signType, tag) {
    var priv = parseKeys(key);
    if (priv.curve) {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
        return ecSign(hash, priv);
    } else if (priv.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong private key type');
        return dsaSign(hash, priv, hashType);
    } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
    }
    hash = Buffer.concat([
        tag,
        hash
    ]);
    var len = priv.modulus.byteLength();
    var pad = [
        0,
        1
    ];
    while(hash.length + pad.length + 1 < len)pad.push(255);
    pad.push(0);
    var i = -1;
    while((++i) < hash.length)pad.push(hash[i]);
    var out = crt(pad, priv);
    return out;
}
function ecSign(hash, priv) {
    var curveId = curves[priv.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'));
    var curve = new EC(curveId);
    var key = curve.keyFromPrivate(priv.privateKey);
    var out = key.sign(hash);
    return Buffer.from(out.toDER());
}
function dsaSign(hash, priv, algo) {
    var x = priv.params.priv_key;
    var p = priv.params.p;
    var q = priv.params.q;
    var g = priv.params.g;
    var r = new BN(0);
    var k;
    var H = bits2int(hash, q).mod(q);
    var s = false;
    var kv = getKey(x, q, hash, algo);
    while(s === false){
        k = makeKey(q, kv, algo);
        r = makeR(g, k, p, q);
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
        if (s.cmpn(0) === 0) {
            s = false;
            r = new BN(0);
        }
    }
    return toDER(r, s);
}
function toDER(r, s) {
    r = r.toArray();
    s = s.toArray();
    // Pad values
    if (r[0] & 128) r = [
        0
    ].concat(r);
    if (s[0] & 128) s = [
        0
    ].concat(s);
    var total = r.length + s.length + 4;
    var res = [
        48,
        total,
        2,
        r.length
    ];
    res = res.concat(r, [
        2,
        s.length
    ], s);
    return Buffer.from(res);
}
function getKey(x, q, hash, algo) {
    x = Buffer.from(x.toArray());
    if (x.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - x.length);
        x = Buffer.concat([
            zeros,
            x
        ]);
    }
    var hlen = hash.length;
    var hbits = bits2octets(hash, q);
    var v = Buffer.alloc(hlen);
    v.fill(1);
    var k = Buffer.alloc(hlen);
    k = createHmac(algo, k).update(v).update(Buffer.from([
        0
    ])).update(x).update(hbits).digest();
    v = createHmac(algo, k).update(v).digest();
    k = createHmac(algo, k).update(v).update(Buffer.from([
        1
    ])).update(x).update(hbits).digest();
    v = createHmac(algo, k).update(v).digest();
    return {
        k: k,
        v: v
    };
}
function bits2int(obits, q) {
    var bits = new BN(obits);
    var shift = (obits.length << 3) - q.bitLength();
    if (shift > 0) bits.ishrn(shift);
    return bits;
}
function bits2octets(bits, q) {
    bits = bits2int(bits, q);
    bits = bits.mod(q);
    var out = Buffer.from(bits.toArray());
    if (out.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - out.length);
        out = Buffer.concat([
            zeros,
            out
        ]);
    }
    return out;
}
function makeKey(q, kv, algo) {
    var t;
    var k;
    do {
        t = Buffer.alloc(0);
        while(t.length * 8 < q.bitLength()){
            kv.v = createHmac(algo, kv.k).update(kv.v).digest();
            t = Buffer.concat([
                t,
                kv.v
            ]);
        }
        k = bits2int(t, q);
        kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([
            0
        ])).digest();
        kv.v = createHmac(algo, kv.k).update(kv.v).digest();
    }while (k.cmp(q) !== -1)
    return k;
}
function makeR(g, k, p, q) {
    return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
}
module.exports = sign;
module.exports.getKey = getKey;
module.exports.makeKey = makeKey;

},{"safe-buffer":"QVErX","create-hmac":"4lnDV","browserify-rsa":"8V5oq","elliptic":"jJrzK","bn.js":"9iLnt","parse-asn1":"66H2P","./curves.json":"eBbUF"}],"8V5oq":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var BN = require('bn.js');
var randomBytes = require('randombytes');
function blind(priv) {
    var r = getr(priv);
    var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed();
    return {
        blinder: blinder,
        unblinder: r.invm(priv.modulus)
    };
}
function getr(priv) {
    var len = priv.modulus.byteLength();
    var r;
    do r = new BN(randomBytes(len));
    while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2))
    return r;
}
function crt(msg, priv) {
    var blinds = blind(priv);
    var len = priv.modulus.byteLength();
    var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed(BN.mont(priv.prime1));
    var c2 = blinded.toRed(BN.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p = priv.prime1;
    var q = priv.prime2;
    var m1 = c1.redPow(priv.exponent1).fromRed();
    var m2 = c2.redPow(priv.exponent2).fromRed();
    var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
    return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, 'be', len);
}
crt.getr = getr;
module.exports = crt;

},{"buffer":"bpNHw","bn.js":"9iLnt","randombytes":"cGTQk"}],"9iLnt":[function(require,module,exports) {
(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require('buffer').Buffer;
    } catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, 'Invalid character in ' + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 10;
            else if (c >= 17) b = c - 17 + 10;
            else b = c;
            assert(c >= 0 && b < mul, 'Invalid character');
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') try {
        BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate1(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) res[position++] = word >> 8 & 255;
            if (position < res.length) res[position++] = word >> 16 & 255;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) res[position--] = word >> 8 & 255;
            if (position >= 0) res[position--] = word >> 16 & 255;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits1(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo1(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if ((++i) < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul1, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul1;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod1 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod1.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while((i--) > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while((j--) > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while((i--) > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while((j--) > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp1 = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp1 === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp1 > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split1(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK1(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK2(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime1 = BN._prime(m);
            this.m = prime1.p;
            this.prime = prime1;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg1(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add1(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd1(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub1(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub1(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr1(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr1(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow1 = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow1);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm1(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow2(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo1(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom1(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul2(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul2(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm2(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(typeof module === 'undefined' || module, this);

},{"buffer":"8VSUO"}],"jJrzK":[function(require,module,exports) {
'use strict';
var elliptic = exports;
elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');
// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":"2Ihx3","./elliptic/utils":"9xvuw","brorand":"9mmMS","./elliptic/curve":"doA7W","./elliptic/curves":"4dfsI","./elliptic/ec":"ewx7w","./elliptic/eddsa":"6oFts"}],"2Ihx3":[function(require,module,exports) {
module.exports = JSON.parse("{\"_from\":\"elliptic@^6.5.3\",\"_id\":\"elliptic@6.5.4\",\"_inBundle\":false,\"_integrity\":\"sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==\",\"_location\":\"/elliptic\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"range\",\"registry\":true,\"raw\":\"elliptic@^6.5.3\",\"name\":\"elliptic\",\"escapedName\":\"elliptic\",\"rawSpec\":\"^6.5.3\",\"saveSpec\":null,\"fetchSpec\":\"^6.5.3\"},\"_requiredBy\":[\"/browserify-sign\",\"/create-ecdh\"],\"_resolved\":\"https://registry.npmjs.org/elliptic/-/elliptic-6.5.4.tgz\",\"_shasum\":\"da37cebd31e79a1367e941b592ed1fbebd58abbb\",\"_spec\":\"elliptic@^6.5.3\",\"_where\":\"C:\\\\Users\\\\CAROLYN\\\\Desktop\\\\Main Folder\\\\ITLA\\\\Tareas C2 - 2021\\\\Programación III\\\\Aplicacion_Reconocimiento_Facial\\\\node_modules\\\\browserify-sign\",\"author\":{\"name\":\"Fedor Indutny\",\"email\":\"fedor@indutny.com\"},\"bugs\":{\"url\":\"https://github.com/indutny/elliptic/issues\"},\"bundleDependencies\":false,\"dependencies\":{\"bn.js\":\"^4.11.9\",\"brorand\":\"^1.1.0\",\"hash.js\":\"^1.0.0\",\"hmac-drbg\":\"^1.0.1\",\"inherits\":\"^2.0.4\",\"minimalistic-assert\":\"^1.0.1\",\"minimalistic-crypto-utils\":\"^1.0.1\"},\"deprecated\":false,\"description\":\"EC cryptography\",\"devDependencies\":{\"brfs\":\"^2.0.2\",\"coveralls\":\"^3.1.0\",\"eslint\":\"^7.6.0\",\"grunt\":\"^1.2.1\",\"grunt-browserify\":\"^5.3.0\",\"grunt-cli\":\"^1.3.2\",\"grunt-contrib-connect\":\"^3.0.0\",\"grunt-contrib-copy\":\"^1.0.0\",\"grunt-contrib-uglify\":\"^5.0.0\",\"grunt-mocha-istanbul\":\"^5.0.2\",\"grunt-saucelabs\":\"^9.0.1\",\"istanbul\":\"^0.4.5\",\"mocha\":\"^8.0.1\"},\"files\":[\"lib\"],\"homepage\":\"https://github.com/indutny/elliptic\",\"keywords\":[\"EC\",\"Elliptic\",\"curve\",\"Cryptography\"],\"license\":\"MIT\",\"main\":\"lib/elliptic.js\",\"name\":\"elliptic\",\"repository\":{\"type\":\"git\",\"url\":\"git+ssh://git@github.com/indutny/elliptic.git\"},\"scripts\":{\"lint\":\"eslint lib test\",\"lint:fix\":\"npm run lint -- --fix\",\"test\":\"npm run lint && npm run unit\",\"unit\":\"istanbul test _mocha --reporter=spec test/index.js\",\"version\":\"grunt dist && git add dist/\"},\"version\":\"6.5.4\"}");

},{}],"9xvuw":[function(require,module,exports) {
'use strict';
var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');
utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;
// Represent num in a w-NAF form
function getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w + 1;
    var k = num.clone();
    for(var i = 0; i < naf.length; i++){
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
            else z = mod;
            k.isubn(z);
        } else z = 0;
        naf[i] = z;
        k.iushrn(1);
    }
    return naf;
}
utils.getNAF = getNAF;
// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
    var jsf = [
        [],
        [], 
    ];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
        // First phase
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;
        if ((m14 & 1) === 0) u1 = 0;
        else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
            else u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) u2 = 0;
        else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
            else u2 = m24;
        }
        jsf[1].push(u2);
        // Second phase
        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
    }
    return jsf;
}
utils.getJSF = getJSF;
function cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty1() {
        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
}
utils.cachedProperty = cachedProperty;
function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
}
utils.parseBytes = parseBytes;
function intFromLE(bytes) {
    return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;

},{"bn.js":"fQTeA","minimalistic-assert":"cHdm7","minimalistic-crypto-utils":"dKqAm"}],"fQTeA":[function(require,module,exports) {
(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require('buffer').Buffer;
    } catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 15;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 10;
            else if (c >= 17) r += c - 17 + 10;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits1(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo1(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if ((++i) < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul1, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul1;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod1 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod1.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while((i--) > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while((j--) > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while((i--) > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while((j--) > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp1 = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp1 === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp1 > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split1(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK1(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK2(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime1 = BN._prime(m);
            this.m = prime1.p;
            this.prime = prime1;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg1(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add1(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd1(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub1(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub1(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr1(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr1(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow1 = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow1);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm1(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow2(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo1(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom1(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul2(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul2(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm2(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(typeof module === 'undefined' || module, this);

},{"buffer":"8VSUO"}],"dKqAm":[function(require,module,exports) {
'use strict';
var utils = exports;
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg !== 'string') {
        for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
        return res;
    }
    if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0) msg = '0' + msg;
        for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else for(var i = 0; i < msg.length; i++){
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 255;
        if (hi) res.push(hi, lo);
        else res.push(lo);
    }
    return res;
}
utils.toArray = toArray;
function zero2(word) {
    if (word.length === 1) return '0' + word;
    else return word;
}
utils.zero2 = zero2;
function toHex(msg) {
    var res = '';
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
utils.toHex = toHex;
utils.encode = function encode(arr, enc) {
    if (enc === 'hex') return toHex(arr);
    else return arr;
};

},{}],"doA7W":[function(require,module,exports) {
'use strict';
var curve = exports;
curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":"6iwaP","./short":"dV72C","./mont":"epALV","./edwards":"5u2Co"}],"6iwaP":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var utils = require('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;
function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN(conf.p, 16);
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    // Useful for many curves
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    // Curve configuration, optional
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
    else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
module.exports = BaseCurve;
BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
};
BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
};
BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for(j = 0; j < naf.length; j += doubles.step){
        nafW = 0;
        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for(var i = I; i > 0; i--){
        for(j = 0; j < repr.length; j++){
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    // Get NAF form
    var naf = getNAF(k, w, this._bitLength);
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for(var i = naf.length - 1; i >= 0; i--){
        // Count zeroes
        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);
        if (i < 0) break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === 'affine') {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else // J +- J
        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
        else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
    return p.type === 'affine' ? acc.toP() : acc;
};
BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for(i = 0; i < len; i++){
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    // Comb small window NAFs
    for(i = len - 1; i >= 1; i -= 2){
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            /* 1 */ null,
            /* 3 */ null,
            /* 5 */ points[b]
        ];
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            /* -1 -1 */ -1,
            /* -1 0 */ -5,
            /* -1 1 */ -7,
            /* 0 -1 */ 0,
            /* 0 0 */ 7,
            /* 0 1 */ 5,
            /* 1 -1 */ 1,
            /* 1 0 */ 3
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for(j = 0; j < max; j++){
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for(i = max; i >= 0; i--){
        var k = 0;
        while(i >= 0){
            var zero = true;
            for(j = 0; j < len; j++){
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for(j = 0; j < len; j++){
            var z = tmp[j];
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][z - 1 >> 1];
            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === 'affine') acc = acc.mixedAdd(p);
            else acc = acc.add(p);
        }
    }
    // Zeroify references
    for(i = 0; i < len; i++)wnd[i] = null;
    if (jacobianResult) return acc;
    else return acc.toP();
};
function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;
BasePoint.prototype.eq = function eq() {
    throw new Error('Not implemented');
};
BasePoint.prototype.validate = function validate1() {
    return this.curve.validate(this);
};
BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils.toArray(bytes, enc);
    var len = this.p.byteLength();
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6) assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7) assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
    } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
    throw new Error('Unknown point format');
};
BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);
    if (compact) return [
        this.getY().isEven() ? 2 : 3
    ].concat(x);
    return [
        4
    ].concat(x, this.getY().toArray('be', len));
};
BasePoint.prototype.encode = function encode(enc, compact) {
    return utils.encode(this._encode(compact), enc);
};
BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;
    var doubles = this.precomputed.doubles;
    if (!doubles) return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var doubles = [
        this
    ];
    var acc = this;
    for(var i = 0; i < power; i += step){
        for(var j = 0; j < step; j++)acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles
    };
};
BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var res = [
        this
    ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res
    };
};
BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for(var i = 0; i < k; i++)r = r.dbl();
    return r;
};

},{"bn.js":"fQTeA","../utils":"9xvuw"}],"dV72C":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');
var assert = utils.assert;
function ShortCurve(conf) {
    Base.call(this, 'short', conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;
ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) beta = new BN(conf.beta, 16).toRed(this.red);
    else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) lambda = new BN(conf.lambda, 16);
    else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
        else {
            lambda = lambdas[1];
            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) basis = conf.basis.map(function(vec) {
        return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
        };
    });
    else basis = this._getEndoBasis(lambda);
    return {
        beta: beta,
        lambda: lambda,
        basis: basis
    };
};
ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [
        l1,
        l2
    ];
};
ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x2 = new BN(0);
    var y2 = new BN(1);
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while(u.cmpn(0) !== 0){
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        } else if (a1 && (++i) === 2) break;
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        {
            a: a1,
            b: b1
        },
        {
            a: a2,
            b: b2
        }, 
    ];
};
ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
        k1: k1,
        k2: k2
    };
};
ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
ShortCurve.prototype.validate = function validate(point) {
    if (point.inf) return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for(var i = 0; i < points.length; i++){
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
        }
        if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    // Clean-up references to points and coefficients
    for(var j = 0; j < i * 2; j++){
        npoints[j] = null;
        ncoeffs[j] = null;
    }
    return res;
};
function Point(curve, x, y, isRed) {
    Base.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
inherits(Point, Base.BasePoint);
ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
};
ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
};
Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo) return;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [
        this.x,
        this.y
    ];
    return [
        this.x,
        this.y,
        this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }
    ];
};
Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === 'string') obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2]) return res;
    function obj2point(obj1) {
        return curve.point(obj1[0], obj1[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [
                res
            ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [
                res
            ].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf) return p;
    // P + O = P
    if (p.inf) return this;
    // P + P = 2P
    if (this.eq(p)) return this.dbl();
    // P + (-P) = O
    if (this.neg().eq(p)) return this.curve.point(null, null);
    // P + Q = O
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.dbl = function dbl() {
    if (this.inf) return this;
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
Point.prototype.mul = function mul(k) {
    k = new BN(k, 16);
    if (this.isInfinity()) return this;
    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
        this
    ], [
        k
    ]);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
Point.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
Point.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
Point.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function JPoint(curve, x, y, z) {
    Base.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);
ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
};
JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
JPoint.prototype.neg = function neg1() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint.prototype.add = function add1(p) {
    // O + P = P
    if (this.isInfinity()) return p;
    // P + O = P
    if (p.isInfinity()) return this;
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity()) return p.toJ();
    // P + O = P
    if (p.isInfinity()) return this;
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for(i = 0; i < pow; i++)r = r.dbl();
        return r;
    }
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    // Reuse results
    var jyd = jy.redAdd(jy);
    for(i = 0; i < pow; i++){
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
JPoint.prototype.dbl = function dbl1() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();
    else if (this.curve.threeA) return this._threeDbl();
    else return this._dbl();
};
JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mul = function mul1(k, kbase) {
    k = new BN(k, kbase);
    return this.curve._wnafMul(this, k);
};
JPoint.prototype.eq = function eq1(p) {
    if (p.type === 'affine') return this.eq(p.toJ());
    if (this === p) return true;
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
JPoint.prototype.inspect = function inspect1() {
    if (this.isInfinity()) return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
};
JPoint.prototype.isInfinity = function isInfinity1() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

},{"../utils":"9xvuw","bn.js":"fQTeA","inherits":"bYMAq","./base":"6iwaP"}],"epALV":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');
var utils = require('../utils');
function MontCurve(conf) {
    Base.call(this, 'mont', conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.i4 = new BN(4).toRed(this.red).redInvm();
    this.two = new BN(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;
MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
};
function Point(curve, x, z) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
    } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    }
}
inherits(Point, Base.BasePoint);
MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils.toArray(bytes, enc), 1);
};
MontCurve.prototype.point = function point(x, z) {
    return new Point(this, x, z);
};
MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
Point.prototype.precompute = function precompute() {
// No-op
};
Point.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1] || curve.one);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};
Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
};
Point.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
};
Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q
    for(var bits = []; t.cmpn(0) !== 0; t.iushrn(1))bits.push(t.andln(1));
    for(var i = bits.length - 1; i >= 0; i--)if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
    } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
    }
    return b;
};
Point.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
};
Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
};
Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();
    return this.x.fromRed();
};

},{"bn.js":"fQTeA","inherits":"bYMAq","./base":"6iwaP","../utils":"9xvuw"}],"5u2Co":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');
var assert = utils.assert;
function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, 'edwards', conf);
    this.a = new BN(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;
EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA) return num.redNeg();
    else return this.a.redMul(num);
};
EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC) return num;
    else return this.c.redMul(num);
};
// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
};
EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN(y, 16);
    if (!y.red) y = y.toRed(this.red);
    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error('invalid point');
        else return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');
    if (x.fromRed().isOdd() !== odd) x = x.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity()) return true;
    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
};
function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
    }
}
inherits(Point, Base.BasePoint);
EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};
Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
        } else {
            // H = Z1^2
            h = this.z.redSqr();
            // J = F - 2 * H
            j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
        }
    } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    // Double in extended coordinates
    if (this.curve.extended) return this._extDbl();
    else return this._projDbl();
};
Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
    } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.add = function add(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    if (this.curve.extended) return this._extAdd(p);
    else return this._projAdd(p);
};
Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, false);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, true);
};
Point.prototype.normalize = function normalize() {
    if (this.zOne) return this;
    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t) this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
};
Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};
Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
};
Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};
Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":"9xvuw","bn.js":"fQTeA","inherits":"bYMAq","./base":"6iwaP"}],"4dfsI":[function(require,module,exports) {
'use strict';
var curves = exports;
var hash = require('hash.js');
var curve = require('./curve');
var utils = require('./utils');
var assert = utils.assert;
function PresetCurve(options) {
    if (options.type === 'short') this.curve = new curve.short(options);
    else if (options.type === 'edwards') this.curve = new curve.edwards(options);
    else this.curve = new curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;
function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
            var curve1 = new PresetCurve(options);
            Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                value: curve1
            });
            return curve1;
        }
    });
}
defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: hash.sha256,
    gRed: false,
    g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811', 
    ]
});
defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: hash.sha256,
    gRed: false,
    g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34', 
    ]
});
defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: hash.sha256,
    gRed: false,
    g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5', 
    ]
});
defineCurve('p384', {
    type: 'short',
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: hash.sha384,
    gRed: false,
    g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f", 
    ]
});
defineCurve('p521', {
    type: 'short',
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: hash.sha512,
    gRed: false,
    g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650", 
    ]
});
defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
        '9', 
    ]
});
defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658', 
    ]
});
var pre;
try {
    pre = require('./precomputed/secp256k1');
} catch (e) {
    pre = undefined;
}
defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: hash.sha256,
    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
        {
            a: '3086d221a7d46bcde86c90e49284eb15',
            b: '-e4437ed6010e88286f547fa90abfe4c3'
        },
        {
            a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
            b: '3086d221a7d46bcde86c90e49284eb15'
        }, 
    ],
    gRed: false,
    g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        pre, 
    ]
});

},{"hash.js":"4mRtQ","./curve":"doA7W","./utils":"9xvuw","./precomputed/secp256k1":"9BRef"}],"4mRtQ":[function(require,module,exports) {
var hash = exports;
hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');
// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/utils":"jWPra","./hash/common":"fEOFh","./hash/sha":"hxvyz","./hash/ripemd":"ku39k","./hash/hmac":"cxNF7"}],"jWPra":[function(require,module,exports) {
'use strict';
var assert = require('minimalistic-assert');
var inherits = require('inherits');
exports.inherits = inherits;
function isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 64512) !== 55296) return false;
    if (i < 0 || i + 1 >= msg.length) return false;
    return (msg.charCodeAt(i + 1) & 64512) === 56320;
}
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg === 'string') {
        if (!enc) {
            // Inspired by stringToUtf8ByteArray() in closure-library by Google
            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
            // Apache License 2.0
            // https://github.com/google/closure-library/blob/master/LICENSE
            var p = 0;
            for(var i = 0; i < msg.length; i++){
                var c = msg.charCodeAt(i);
                if (c < 128) res[p++] = c;
                else if (c < 2048) {
                    res[p++] = c >> 6 | 192;
                    res[p++] = c & 63 | 128;
                } else if (isSurrogatePair(msg, i)) {
                    c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
                    res[p++] = c >> 18 | 240;
                    res[p++] = c >> 12 & 63 | 128;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                } else {
                    res[p++] = c >> 12 | 224;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                }
            }
        } else if (enc === 'hex') {
            msg = msg.replace(/[^a-z0-9]+/ig, '');
            if (msg.length % 2 !== 0) msg = '0' + msg;
            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
    } else for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
    return res;
}
exports.toArray = toArray;
function toHex(msg) {
    var res = '';
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
exports.toHex = toHex;
function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
    return res >>> 0;
}
exports.htonl = htonl;
function toHex32(msg, endian) {
    var res = '';
    for(var i = 0; i < msg.length; i++){
        var w = msg[i];
        if (endian === 'little') w = htonl(w);
        res += zero8(w.toString(16));
    }
    return res;
}
exports.toHex32 = toHex32;
function zero2(word) {
    if (word.length === 1) return '0' + word;
    else return word;
}
exports.zero2 = zero2;
function zero8(word) {
    if (word.length === 7) return '0' + word;
    else if (word.length === 6) return '00' + word;
    else if (word.length === 5) return '000' + word;
    else if (word.length === 4) return '0000' + word;
    else if (word.length === 3) return '00000' + word;
    else if (word.length === 2) return '000000' + word;
    else if (word.length === 1) return '0000000' + word;
    else return word;
}
exports.zero8 = zero8;
function join32(msg, start, end, endian) {
    var len = end - start;
    assert(len % 4 === 0);
    var res = new Array(len / 4);
    for(var i = 0, k = start; i < res.length; i++, k += 4){
        var w;
        if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
    }
    return res;
}
exports.join32 = join32;
function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for(var i = 0, k = 0; i < msg.length; i++, k += 4){
        var m = msg[i];
        if (endian === 'big') {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 255;
            res[k + 2] = m >>> 8 & 255;
            res[k + 3] = m & 255;
        } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 255;
            res[k + 1] = m >>> 8 & 255;
            res[k] = m & 255;
        }
    }
    return res;
}
exports.split32 = split32;
function rotr32(w, b) {
    return w >>> b | w << 32 - b;
}
exports.rotr32 = rotr32;
function rotl32(w, b) {
    return w << b | w >>> 32 - b;
}
exports.rotl32 = rotl32;
function sum32(a, b) {
    return a + b >>> 0;
}
exports.sum32 = sum32;
function sum32_3(a, b, c) {
    return a + b + c >>> 0;
}
exports.sum32_3 = sum32_3;
function sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
}
exports.sum32_4 = sum32_4;
function sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
}
exports.sum32_5 = sum32_5;
function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
}
exports.sum64 = sum64;
function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
}
exports.sum64_hi = sum64_hi;
function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
}
exports.sum64_lo = sum64_lo;
function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;
function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;
function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;
function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;
function rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;
function rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;
function shr64_hi(ah, al, num) {
    return ah >>> num;
}
exports.shr64_hi = shr64_hi;
function shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"minimalistic-assert":"cHdm7","inherits":"bYMAq"}],"fEOFh":[function(require,module,exports) {
'use strict';
var utils = require('./utils');
var assert = require('minimalistic-assert');
function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;
BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils.toArray(msg, enc);
    if (!this.pending) this.pending = msg;
    else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
        msg = this.pending;
        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
    }
    return this;
};
BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert(this.pending === null);
    return this._digest(enc);
};
BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 128;
    for(var i = 1; i < k; i++)res[i] = 0;
    // Append length
    len <<= 3;
    if (this.endian === 'big') {
        for(var t = 8; t < this.padLength; t++)res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len & 255;
    } else {
        res[i++] = len & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 24 & 255;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for(t = 8; t < this.padLength; t++)res[i++] = 0;
    }
    return res;
};

},{"./utils":"jWPra","minimalistic-assert":"cHdm7"}],"hxvyz":[function(require,module,exports) {
'use strict';
exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":"2zzG8","./sha/224":"jxeAF","./sha/256":"jkrHp","./sha/384":"3gTma","./sha/512":"dqwXH"}],"2zzG8":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;
var sha1_K = [
    1518500249,
    1859775393,
    2400959708,
    3395469782
];
function SHA1() {
    if (!(this instanceof SHA1)) return new SHA1();
    BlockHash.call(this);
    this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
    ];
    this.W = new Array(80);
}
utils.inherits(SHA1, BlockHash);
module.exports = SHA1;
SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;
SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for(i = 0; i < W.length; i++){
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
};
SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'big');
    else return utils.split32(this.h, 'big');
};

},{"../utils":"jWPra","../common":"fEOFh","./common":"6ABem"}],"6ABem":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var rotr32 = utils.rotr32;
function ft_1(s, x, y, z) {
    if (s === 0) return ch32(x, y, z);
    if (s === 1 || s === 3) return p32(x, y, z);
    if (s === 2) return maj32(x, y, z);
}
exports.ft_1 = ft_1;
function ch32(x, y, z) {
    return x & y ^ ~x & z;
}
exports.ch32 = ch32;
function maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
}
exports.maj32 = maj32;
function p32(x, y, z) {
    return x ^ y ^ z;
}
exports.p32 = p32;
function s0_256(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;
function s1_256(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;
function g0_256(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
}
exports.g0_256 = g0_256;
function g1_256(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
}
exports.g1_256 = g1_256;

},{"../utils":"jWPra"}],"jxeAF":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var SHA256 = require('./256');
function SHA224() {
    if (!(this instanceof SHA224)) return new SHA224();
    SHA256.call(this);
    this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
    ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;
SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;
SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');
    else return utils.split32(this.h.slice(0, 7), 'big');
};

},{"../utils":"jWPra","./256":"jkrHp"}],"jkrHp":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;
var BlockHash = common.BlockHash;
var sha256_K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
];
function SHA256() {
    if (!(this instanceof SHA256)) return new SHA256();
    BlockHash.call(this);
    this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
    ];
    this.k = sha256_K;
    this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;
SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;
SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    assert(this.k.length === W.length);
    for(i = 0; i < W.length; i++){
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
    this.h[5] = sum32(this.h[5], f);
    this.h[6] = sum32(this.h[6], g);
    this.h[7] = sum32(this.h[7], h);
};
SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'big');
    else return utils.split32(this.h, 'big');
};

},{"../utils":"jWPra","../common":"fEOFh","./common":"6ABem","minimalistic-assert":"cHdm7"}],"3gTma":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var SHA512 = require('./512');
function SHA384() {
    if (!(this instanceof SHA384)) return new SHA384();
    SHA512.call(this);
    this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
    ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;
SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;
SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');
    else return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":"jWPra","./512":"dqwXH"}],"dqwXH":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = common.BlockHash;
var sha512_K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
];
function SHA512() {
    if (!(this instanceof SHA512)) return new SHA512();
    BlockHash.call(this);
    this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
    ];
    this.k = sha512_K;
    this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;
SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;
SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    // 32 x 32bit words
    for(var i = 0; i < 32; i++)W[i] = msg[start + i];
    for(; i < W.length; i += 2){
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
};
SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    assert(this.k.length === W.length);
    for(var i = 0; i < W.length; i += 2){
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
};
SHA512.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'big');
    else return utils.split32(this.h, 'big');
};
function ch64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ ~xh & zh;
    if (r < 0) r += 4294967296;
    return r;
}
function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ ~xl & zl;
    if (r < 0) r += 4294967296;
    return r;
}
function maj64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ xh & zh ^ yh & zh;
    if (r < 0) r += 4294967296;
    return r;
}
function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ xl & zl ^ yl & zl;
    if (r < 0) r += 4294967296;
    return r;
}
function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2); // 34
    var c2_hi = rotr64_hi(xl, xh, 7); // 39
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2); // 34
    var c2_lo = rotr64_lo(xl, xh, 7); // 39
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}
function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9); // 41
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9); // 41
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}
function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}
function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29); // 61
    var c2_hi = shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29); // 61
    var c2_lo = shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}

},{"../utils":"jWPra","../common":"fEOFh","minimalistic-assert":"cHdm7"}],"ku39k":[function(require,module,exports) {
'use strict';
var utils = require('./utils');
var common = require('./common');
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;
function RIPEMD160() {
    if (!(this instanceof RIPEMD160)) return new RIPEMD160();
    BlockHash.call(this);
    this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
    ];
    this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;
RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;
RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for(var j = 0; j < 80; j++){
        var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
};
RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'little');
    else return utils.split32(this.h, 'little');
};
function f(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;
    else if (j <= 31) return x & y | ~x & z;
    else if (j <= 47) return (x | ~y) ^ z;
    else if (j <= 63) return x & z | y & ~z;
    else return x ^ (y | ~z);
}
function K(j) {
    if (j <= 15) return 0;
    else if (j <= 31) return 1518500249;
    else if (j <= 47) return 1859775393;
    else if (j <= 63) return 2400959708;
    else return 2840853838;
}
function Kh(j) {
    if (j <= 15) return 1352829926;
    else if (j <= 31) return 1548603684;
    else if (j <= 47) return 1836072691;
    else if (j <= 63) return 2053994217;
    else return 0;
}
var r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];

},{"./utils":"jWPra","./common":"fEOFh"}],"cxNF7":[function(require,module,exports) {
'use strict';
var utils = require('./utils');
var assert = require('minimalistic-assert');
function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils.toArray(key, enc));
}
module.exports = Hmac;
Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    assert(key.length <= this.blockSize);
    // Add padding to key
    for(var i = key.length; i < this.blockSize; i++)key.push(0);
    for(i = 0; i < key.length; i++)key[i] ^= 54;
    this.inner = new this.Hash().update(key);
    // 0x36 ^ 0x5c = 0x6a
    for(i = 0; i < key.length; i++)key[i] ^= 106;
    this.outer = new this.Hash().update(key);
};
Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
};
Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
};

},{"./utils":"jWPra","minimalistic-assert":"cHdm7"}],"9BRef":[function(require,module,exports) {
module.exports = {
    doubles: {
        step: 4,
        points: [
            [
                'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821', 
            ],
            [
                '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf', 
            ],
            [
                '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695', 
            ],
            [
                '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9', 
            ],
            [
                '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36', 
            ],
            [
                '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f', 
            ],
            [
                'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999', 
            ],
            [
                '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09', 
            ],
            [
                'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d', 
            ],
            [
                'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088', 
            ],
            [
                'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d', 
            ],
            [
                '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8', 
            ],
            [
                '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a', 
            ],
            [
                '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453', 
            ],
            [
                '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160', 
            ],
            [
                '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0', 
            ],
            [
                '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6', 
            ],
            [
                '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589', 
            ],
            [
                '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17', 
            ],
            [
                'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda', 
            ],
            [
                'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd', 
            ],
            [
                '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2', 
            ],
            [
                '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6', 
            ],
            [
                'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f', 
            ],
            [
                '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01', 
            ],
            [
                'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3', 
            ],
            [
                'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f', 
            ],
            [
                'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7', 
            ],
            [
                'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78', 
            ],
            [
                'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1', 
            ],
            [
                '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150', 
            ],
            [
                '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82', 
            ],
            [
                'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc', 
            ],
            [
                '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b', 
            ],
            [
                'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51', 
            ],
            [
                'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45', 
            ],
            [
                'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120', 
            ],
            [
                '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84', 
            ],
            [
                '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d', 
            ],
            [
                '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d', 
            ],
            [
                '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8', 
            ],
            [
                'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8', 
            ],
            [
                '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac', 
            ],
            [
                '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f', 
            ],
            [
                '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962', 
            ],
            [
                'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907', 
            ],
            [
                '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec', 
            ],
            [
                'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d', 
            ],
            [
                'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414', 
            ],
            [
                '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd', 
            ],
            [
                '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0', 
            ],
            [
                'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811', 
            ],
            [
                'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1', 
            ],
            [
                'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c', 
            ],
            [
                '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73', 
            ],
            [
                '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd', 
            ],
            [
                'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405', 
            ],
            [
                '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589', 
            ],
            [
                '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e', 
            ],
            [
                '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27', 
            ],
            [
                'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1', 
            ],
            [
                '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482', 
            ],
            [
                '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945', 
            ],
            [
                'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573', 
            ],
            [
                'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82', 
            ], 
        ]
    },
    naf: {
        wnd: 7,
        points: [
            [
                'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672', 
            ],
            [
                '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6', 
            ],
            [
                '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da', 
            ],
            [
                'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37', 
            ],
            [
                '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b', 
            ],
            [
                'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81', 
            ],
            [
                'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58', 
            ],
            [
                'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77', 
            ],
            [
                '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a', 
            ],
            [
                '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c', 
            ],
            [
                '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67', 
            ],
            [
                '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402', 
            ],
            [
                'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55', 
            ],
            [
                'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482', 
            ],
            [
                '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82', 
            ],
            [
                '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396', 
            ],
            [
                '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49', 
            ],
            [
                '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf', 
            ],
            [
                '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a', 
            ],
            [
                '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7', 
            ],
            [
                'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933', 
            ],
            [
                '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a', 
            ],
            [
                '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6', 
            ],
            [
                'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37', 
            ],
            [
                '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e', 
            ],
            [
                'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6', 
            ],
            [
                'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476', 
            ],
            [
                '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40', 
            ],
            [
                '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61', 
            ],
            [
                '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683', 
            ],
            [
                'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5', 
            ],
            [
                '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b', 
            ],
            [
                'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417', 
            ],
            [
                '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868', 
            ],
            [
                '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a', 
            ],
            [
                'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6', 
            ],
            [
                '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996', 
            ],
            [
                '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e', 
            ],
            [
                'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d', 
            ],
            [
                '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2', 
            ],
            [
                '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e', 
            ],
            [
                '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437', 
            ],
            [
                '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311', 
            ],
            [
                'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4', 
            ],
            [
                '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575', 
            ],
            [
                '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d', 
            ],
            [
                '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d', 
            ],
            [
                'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629', 
            ],
            [
                'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06', 
            ],
            [
                '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374', 
            ],
            [
                '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee', 
            ],
            [
                'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1', 
            ],
            [
                'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b', 
            ],
            [
                '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661', 
            ],
            [
                '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6', 
            ],
            [
                'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e', 
            ],
            [
                '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d', 
            ],
            [
                'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc', 
            ],
            [
                '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4', 
            ],
            [
                '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c', 
            ],
            [
                'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b', 
            ],
            [
                'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913', 
            ],
            [
                '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154', 
            ],
            [
                '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865', 
            ],
            [
                '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc', 
            ],
            [
                '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224', 
            ],
            [
                '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e', 
            ],
            [
                '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6', 
            ],
            [
                '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511', 
            ],
            [
                '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b', 
            ],
            [
                'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2', 
            ],
            [
                '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c', 
            ],
            [
                'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3', 
            ],
            [
                'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d', 
            ],
            [
                'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700', 
            ],
            [
                'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4', 
            ],
            [
                '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196', 
            ],
            [
                '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4', 
            ],
            [
                '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257', 
            ],
            [
                'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13', 
            ],
            [
                'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096', 
            ],
            [
                'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38', 
            ],
            [
                'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f', 
            ],
            [
                '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448', 
            ],
            [
                'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a', 
            ],
            [
                'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4', 
            ],
            [
                '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437', 
            ],
            [
                '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7', 
            ],
            [
                'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d', 
            ],
            [
                'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a', 
            ],
            [
                'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54', 
            ],
            [
                '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77', 
            ],
            [
                'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517', 
            ],
            [
                '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10', 
            ],
            [
                'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125', 
            ],
            [
                'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e', 
            ],
            [
                '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1', 
            ],
            [
                'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2', 
            ],
            [
                'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423', 
            ],
            [
                'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8', 
            ],
            [
                '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758', 
            ],
            [
                '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375', 
            ],
            [
                'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d', 
            ],
            [
                '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec', 
            ],
            [
                '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0', 
            ],
            [
                '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c', 
            ],
            [
                'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4', 
            ],
            [
                '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f', 
            ],
            [
                '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649', 
            ],
            [
                '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826', 
            ],
            [
                '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5', 
            ],
            [
                'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87', 
            ],
            [
                '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b', 
            ],
            [
                'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc', 
            ],
            [
                '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c', 
            ],
            [
                'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f', 
            ],
            [
                'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a', 
            ],
            [
                'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46', 
            ],
            [
                '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f', 
            ],
            [
                '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03', 
            ],
            [
                '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08', 
            ],
            [
                '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8', 
            ],
            [
                '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373', 
            ],
            [
                '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3', 
            ],
            [
                '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8', 
            ],
            [
                '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1', 
            ],
            [
                '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9', 
            ], 
        ]
    }
};

},{}],"ewx7w":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var utils = require('../utils');
var curves = require('../curves');
var rand = require('brorand');
var assert = utils.assert;
var KeyPair = require('./key');
var Signature = require('./signature');
function EC(options) {
    if (!(this instanceof EC)) return new EC(options);
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === 'string') {
        assert(Object.prototype.hasOwnProperty.call(curves, options), 'Unknown curve ' + options);
        options = curves[options];
    }
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof curves.PresetCurve) options = {
        curve: options
    };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
module.exports = EC;
EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
};
EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
};
EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
};
EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {
    };
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    for(;;){
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    }
};
EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
    else return msg;
};
EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
        options = enc;
        enc = null;
    }
    if (!options) options = {
    };
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new BN(msg, 16));
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray('be', bytes);
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray('be', bytes);
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8'
    });
    // Number of bytes to generate
    var ns1 = this.n.sub(new BN(1));
    for(var iter = 0;; iter++){
        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new Signature({
            r: r,
            s: s,
            recoveryParam: recoveryParam
        });
    }
};
EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new BN(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature(signature, 'hex');
    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};
EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
    assert((3 & j) === j, 'The recovery param is more than two bits');
    signature = new Signature(signature, enc);
    var n = this.n;
    var e = new BN(msg);
    var r = signature.r;
    var s = signature.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate');
    // 1.1. Let x = r + jn.
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};
EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new Signature(signature, enc);
    if (signature.recoveryParam !== null) return signature.recoveryParam;
    for(var i = 0; i < 4; i++){
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature, i);
        } catch (e1) {
            continue;
        }
        if (Qprime.eq(Q)) return i;
    }
    throw new Error('Unable to find valid recovery factor');
};

},{"bn.js":"fQTeA","hmac-drbg":"2VLUu","../utils":"9xvuw","../curves":"4dfsI","brorand":"9mmMS","./key":"e3N4b","./signature":"h6Occ"}],"2VLUu":[function(require,module,exports) {
'use strict';
var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');
function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
    var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
    var pers = utils.toArray(options.pers, options.persEnc || 'hex');
    assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;
HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for(var i = 0; i < this.V.length; i++){
        this.K[i] = 0;
        this.V[i] = 1;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 281474976710656; // 2^48
};
HmacDRBG.prototype._hmac = function hmac() {
    return new hash.hmac(this.hash, this.K);
};
HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([
        0
    ]);
    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;
    this.K = this._hmac().update(this.V).update([
        1
    ]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
};
HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
    }
    entropy = utils.toArray(entropy, entropyEnc);
    add = utils.toArray(add, addEnc);
    assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._update(entropy.concat(add || []));
    this._reseed = 1;
};
HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error('Reseed is required');
    // Optional encoding
    if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
    }
    // Optional additional data
    if (add) {
        add = utils.toArray(add, addEnc || 'hex');
        this._update(add);
    }
    var temp = [];
    while(temp.length < len){
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils.encode(res, enc);
};

},{"hash.js":"4mRtQ","minimalistic-crypto-utils":"dKqAm","minimalistic-assert":"cHdm7"}],"e3N4b":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;
KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc
    });
};
KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair) return priv;
    return new KeyPair(ec, {
        priv: priv,
        privEnc: enc
    });
};
KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity()) return {
        result: false,
        reason: 'Invalid public key'
    };
    if (!pub.validate()) return {
        result: false,
        reason: 'Public key is not a point'
    };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: 'Public key * N != O'
    };
    return {
        result: true,
        reason: null
    };
};
KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === 'string') {
        enc = compact;
        compact = null;
    }
    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
    if (!enc) return this.pub;
    return this.pub.encode(enc, compact);
};
KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex') return this.priv.toString(16, 2);
    else return this.priv;
};
KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN(key, enc || 16);
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') assert(key.x, 'Need x coordinate');
        else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') assert(key.x && key.y, 'Need both x and y coordinate');
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
};
// ECDH
KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) assert(pub.validate(), 'public point not validated');
    return pub.mul(this.priv).getX();
};
// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
};
KeyPair.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"bn.js":"fQTeA","../utils":"9xvuw"}],"h6Occ":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
function Signature(options, enc) {
    if (options instanceof Signature) return options;
    if (this._importDER(options, enc)) return;
    assert(options.r && options.s, 'Signature without r or s');
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === undefined) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;
function Position() {
    this.place = 0;
}
function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 128)) return initial;
    var octetLen = initial & 15;
    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) return false;
    var val = 0;
    for(var i = 0, off = p.place; i < octetLen; i++, off++){
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
    }
    // Leading zeroes
    if (val <= 127) return false;
    p.place = off;
    return val;
}
function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while(!buf[i] && !(buf[i + 1] & 128) && i < len)i++;
    if (i === 0) return buf;
    return buf.slice(i);
}
Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 48) return false;
    var len = getLength(data, p);
    if (len === false) return false;
    if (len + p.place !== data.length) return false;
    if (data[p.place++] !== 2) return false;
    var rlen = getLength(data, p);
    if (rlen === false) return false;
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 2) return false;
    var slen = getLength(data, p);
    if (slen === false) return false;
    if (data.length !== slen + p.place) return false;
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
        if (r[1] & 128) r = r.slice(1);
        else // Leading zeroes
        return false;
    }
    if (s[0] === 0) {
        if (s[1] & 128) s = s.slice(1);
        else // Leading zeroes
        return false;
    }
    this.r = new BN(r);
    this.s = new BN(s);
    this.recoveryParam = null;
    return true;
};
function constructLength(arr, len) {
    if (len < 128) {
        arr.push(len);
        return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 128);
    while(--octets)arr.push(len >>> (octets << 3) & 255);
    arr.push(len);
}
Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    // Pad values
    if (r[0] & 128) r = [
        0
    ].concat(r);
    // Pad values
    if (s[0] & 128) s = [
        0
    ].concat(s);
    r = rmPadding(r);
    s = rmPadding(s);
    while(!s[0] && !(s[1] & 128))s = s.slice(1);
    var arr = [
        2
    ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(2);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [
        48
    ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils.encode(res, enc);
};

},{"bn.js":"fQTeA","../utils":"9xvuw"}],"6oFts":[function(require,module,exports) {
'use strict';
var hash = require('hash.js');
var curves = require('../curves');
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');
function EDDSA(curve) {
    assert(curve === 'ed25519', 'only tested with ed25519 so far');
    if (!(this instanceof EDDSA)) return new EDDSA(curve);
    curve = curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash.sha512;
}
module.exports = EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/ EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({
        R: R,
        S: S,
        Rencoded: Rencoded
    });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/ EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
};
EDDSA.prototype.hashInt = function hashInt() {
    var hash1 = this.hash();
    for(var i = 0; i < arguments.length; i++)hash1.update(arguments[i]);
    return utils.intFromLE(hash1.digest()).umod(this.curve.n);
};
EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
};
EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
};
EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature) return sig;
    return new Signature(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/ EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
    return enc;
};
EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
    var xIsOdd = (bytes[lastIx] & 128) !== 0;
    var y = utils.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
};
EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
};
EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils.intFromLE(bytes);
};
EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
};

},{"hash.js":"4mRtQ","../curves":"4dfsI","../utils":"9xvuw","./key":"ow0nx","./signature":"aUu2u"}],"ow0nx":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/ function KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes(params.secret);
    if (eddsa.isPoint(params.pub)) this._pub = params.pub;
    else this._pubBytes = parseBytes(params.pub);
}
KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(eddsa, {
        pub: pub
    });
};
KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair) return secret;
    return new KeyPair(eddsa, {
        secret: secret
    });
};
KeyPair.prototype.secret = function secret() {
    return this._secret;
};
cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
});
cachedProperty(KeyPair, 'pub', function pub() {
    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
});
cachedProperty(KeyPair, 'privBytes', function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
});
cachedProperty(KeyPair, 'priv', function priv() {
    return this.eddsa.decodeInt(this.privBytes());
});
cachedProperty(KeyPair, 'hash', function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
});
cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
});
KeyPair.prototype.sign = function sign(message) {
    assert(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
};
KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
};
KeyPair.prototype.getSecret = function getSecret(enc) {
    assert(this._secret, 'KeyPair is public only');
    return utils.encode(this.secret(), enc);
};
KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils.encode(this.pubBytes(), enc);
};
module.exports = KeyPair;

},{"../utils":"9xvuw"}],"aUu2u":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/ function Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== 'object') sig = parseBytes(sig);
    if (Array.isArray(sig)) sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
    };
    assert(sig.R && sig.S, 'Signature without R or S');
    if (eddsa.isPoint(sig.R)) this._R = sig.R;
    if (sig.S instanceof BN) this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}
cachedProperty(Signature, 'S', function S() {
    return this.eddsa.decodeInt(this.Sencoded());
});
cachedProperty(Signature, 'R', function R() {
    return this.eddsa.decodePoint(this.Rencoded());
});
cachedProperty(Signature, 'Rencoded', function Rencoded() {
    return this.eddsa.encodePoint(this.R());
});
cachedProperty(Signature, 'Sencoded', function Sencoded() {
    return this.eddsa.encodeInt(this.S());
});
Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
};
Signature.prototype.toHex = function toHex() {
    return utils.encode(this.toBytes(), 'hex').toUpperCase();
};
module.exports = Signature;

},{"bn.js":"fQTeA","../utils":"9xvuw"}],"66H2P":[function(require,module,exports) {
var asn1 = require('./asn1');
var aesid = require('./aesid.json');
var fixProc = require('./fixProc');
var ciphers = require('browserify-aes');
var compat = require('pbkdf2');
var Buffer = require('safe-buffer').Buffer;
module.exports = parseKeys;
function parseKeys(buffer) {
    var password;
    if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
    }
    if (typeof buffer === 'string') buffer = Buffer.from(buffer);
    var stripped = fixProc(buffer, password);
    var type = stripped.tag;
    var data = stripped.data;
    var subtype, ndata;
    switch(type){
        case 'CERTIFICATE':
            ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
        // falls through
        case 'PUBLIC KEY':
            if (!ndata) ndata = asn1.PublicKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch(subtype){
                case '1.2.840.113549.1.1.1':
                    return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
                case '1.2.840.10045.2.1':
                    ndata.subjectPrivateKey = ndata.subjectPublicKey;
                    return {
                        type: 'ec',
                        data: ndata
                    };
                case '1.2.840.10040.4.1':
                    ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
                    return {
                        type: 'dsa',
                        data: ndata.algorithm.params
                    };
                default:
                    throw new Error('unknown key id ' + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case 'ENCRYPTED PRIVATE KEY':
            data = asn1.EncryptedPrivateKey.decode(data, 'der');
            data = decrypt(data, password);
        // falls through
        case 'PRIVATE KEY':
            ndata = asn1.PrivateKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch(subtype){
                case '1.2.840.113549.1.1.1':
                    return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
                case '1.2.840.10045.2.1':
                    return {
                        curve: ndata.algorithm.curve,
                        privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
                    };
                case '1.2.840.10040.4.1':
                    ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
                    return {
                        type: 'dsa',
                        params: ndata.algorithm.params
                    };
                default:
                    throw new Error('unknown key id ' + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case 'RSA PUBLIC KEY':
            return asn1.RSAPublicKey.decode(data, 'der');
        case 'RSA PRIVATE KEY':
            return asn1.RSAPrivateKey.decode(data, 'der');
        case 'DSA PRIVATE KEY':
            return {
                type: 'dsa',
                params: asn1.DSAPrivateKey.decode(data, 'der')
            };
        case 'EC PRIVATE KEY':
            data = asn1.ECPrivateKey.decode(data, 'der');
            return {
                curve: data.parameters.value,
                privateKey: data.privateKey
            };
        default:
            throw new Error('unknown key type ' + type);
    }
}
parseKeys.signature = asn1.signature;
function decrypt(data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
    var iv = data.algorithm.decrypt.cipher.iv;
    var cipherText = data.subjectPrivateKey;
    var keylen = parseInt(algo.split('-')[1], 10) / 8;
    var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1');
    var cipher = ciphers.createDecipheriv(algo, key, iv);
    var out = [];
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    return Buffer.concat(out);
}

},{"./asn1":"hWkCW","./aesid.json":"4Fp9R","./fixProc":"5YsBZ","browserify-aes":"RRNBY","pbkdf2":"4zObN","safe-buffer":"8BeU0"}],"hWkCW":[function(require,module,exports) {
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict';
var asn1 = require('asn1.js');
exports.certificate = require('./certificate');
var RSAPrivateKey = asn1.define('RSAPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());
});
exports.RSAPrivateKey = RSAPrivateKey;
var RSAPublicKey = asn1.define('RSAPublicKey', function() {
    this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());
});
exports.RSAPublicKey = RSAPublicKey;
var PublicKey = asn1.define('SubjectPublicKeyInfo', function() {
    this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
exports.PublicKey = PublicKey;
var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function() {
    this.seq().obj(this.key('algorithm').objid(), this.key('none').null_().optional(), this.key('curve').objid().optional(), this.key('params').seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()).optional());
});
var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function() {
    this.seq().obj(this.key('version').int(), this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPrivateKey').octstr());
});
exports.PrivateKey = PrivateKeyInfo;
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function() {
    this.seq().obj(this.key('algorithm').seq().obj(this.key('id').objid(), this.key('decrypt').seq().obj(this.key('kde').seq().obj(this.key('id').objid(), this.key('kdeparams').seq().obj(this.key('salt').octstr(), this.key('iters').int())), this.key('cipher').seq().obj(this.key('algo').objid(), this.key('iv').octstr()))), this.key('subjectPrivateKey').octstr());
});
exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
var DSAPrivateKey = asn1.define('DSAPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('p').int(), this.key('q').int(), this.key('g').int(), this.key('pub_key').int(), this.key('priv_key').int());
});
exports.DSAPrivateKey = DSAPrivateKey;
exports.DSAparam = asn1.define('DSAparam', function() {
    this.int();
});
var ECPrivateKey = asn1.define('ECPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).use(ECParameters), this.key('publicKey').optional().explicit(1).bitstr());
});
exports.ECPrivateKey = ECPrivateKey;
var ECParameters = asn1.define('ECParameters', function() {
    this.choice({
        namedCurve: this.objid()
    });
});
exports.signature = asn1.define('signature', function() {
    this.seq().obj(this.key('r').int(), this.key('s').int());
});

},{"asn1.js":"5D6Ru","./certificate":"g4S2F"}],"5D6Ru":[function(require,module,exports) {
'use strict';
const asn1 = exports;
asn1.bignum = require('bn.js');
asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"bn.js":"7d9wV","./asn1/api":"4T0Bf","./asn1/base":"3NeSq","./asn1/constants":"6eIrm","./asn1/decoders":"jLpoo","./asn1/encoders":"jPI2l"}],"7d9wV":[function(require,module,exports) {
(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require('buffer').Buffer;
    } catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 15;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 10;
            else if (c >= 17) r += c - 17 + 10;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits1(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo1(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if ((++i) < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul1, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul1;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod1 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod1.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while((i--) > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while((j--) > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while((i--) > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while((j--) > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp1 = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp1 === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp1 > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split1(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK1(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK2(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime1 = BN._prime(m);
            this.m = prime1.p;
            this.prime = prime1;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg1(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add1(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd1(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub1(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub1(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr1(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr1(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow1 = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow1);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm1(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow2(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo1(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom1(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul2(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul2(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm2(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(typeof module === 'undefined' || module, this);

},{"buffer":"8VSUO"}],"4T0Bf":[function(require,module,exports) {
'use strict';
const encoders = require('./encoders');
const decoders = require('./decoders');
const inherits = require('inherits');
const api = exports;
api.define = function define(name, body) {
    return new Entity(name, body);
};
function Entity(name, body) {
    this.name = name;
    this.body = body;
    this.decoders = {
    };
    this.encoders = {
    };
}
Entity.prototype._createNamed = function createNamed(Base) {
    const name = this.name;
    function Generated(entity) {
        this._initNamed(entity, name);
    }
    inherits(Generated, Base);
    Generated.prototype._initNamed = function _initNamed(entity, name1) {
        Base.call(this, entity, name1);
    };
    return new Generated(this);
};
Entity.prototype._getDecoder = function _getDecoder(enc) {
    enc = enc || 'der';
    // Lazily create decoder
    if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(decoders[enc]);
    return this.decoders[enc];
};
Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
};
Entity.prototype._getEncoder = function _getEncoder(enc) {
    enc = enc || 'der';
    // Lazily create encoder
    if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(encoders[enc]);
    return this.encoders[enc];
};
Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
    return this._getEncoder(enc).encode(data, reporter);
};

},{"./encoders":"jPI2l","./decoders":"jLpoo","inherits":"bYMAq"}],"jPI2l":[function(require,module,exports) {
'use strict';
const encoders = exports;
encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":"2gMGU","./pem":"jtElj"}],"2gMGU":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;
const Node1 = require('../base/node');
// Import DER constants
const der = require('../constants/der');
function DEREncoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new DERNode();
    this.tree._init(entity.body);
}
module.exports = DEREncoder;
DEREncoder.prototype.encode = function encode(data, reporter) {
    return this.tree._encode(data, reporter).join();
};
// Tree methods
function DERNode(parent) {
    Node1.call(this, 'der', parent);
}
inherits(DERNode, Node1);
DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
    const encodedTag = encodeTag(tag, primitive, cls, this.reporter);
    // Short form
    if (content.length < 128) {
        const header = Buffer.alloc(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([
            header,
            content
        ]);
    }
    // Long form
    // Count octets required to store length
    let lenOctets = 1;
    for(let i = content.length; i >= 256; i >>= 8)lenOctets++;
    const header = Buffer.alloc(2 + lenOctets);
    header[0] = encodedTag;
    header[1] = 128 | lenOctets;
    for(let i1 = 1 + lenOctets, j = content.length; j > 0; i1--, j >>= 8)header[i1] = j & 255;
    return this._createEncoderBuffer([
        header,
        content
    ]);
};
DERNode.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === 'bitstr') return this._createEncoderBuffer([
        str.unused | 0,
        str.data
    ]);
    else if (tag === 'bmpstr') {
        const buf = Buffer.alloc(str.length * 2);
        for(let i = 0; i < str.length; i++)buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        return this._createEncoderBuffer(buf);
    } else if (tag === 'numstr') {
        if (!this._isNumstr(str)) return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        return this._createEncoderBuffer(str);
    } else if (tag === 'printstr') {
        if (!this._isPrintstr(str)) return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) return this._createEncoderBuffer(str);
    else if (tag === 'objDesc') return this._createEncoderBuffer(str);
    else return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
};
DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === 'string') {
        if (!values) return this.reporter.error('string objid given, but no values map found');
        if (!values.hasOwnProperty(id)) return this.reporter.error('objid not found in values map');
        id = values[id].split(/[\s.]+/g);
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    } else if (Array.isArray(id)) {
        id = id.slice();
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    }
    if (!Array.isArray(id)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
    if (!relative) {
        if (id[1] >= 40) return this.reporter.error('Second objid identifier OOB');
        id.splice(0, 2, id[0] * 40 + id[1]);
    }
    // Count number of octets
    let size = 0;
    for(let i = 0; i < id.length; i++){
        let ident = id[i];
        for(size++; ident >= 128; ident >>= 7)size++;
    }
    const objid = Buffer.alloc(size);
    let offset = objid.length - 1;
    for(let i1 = id.length - 1; i1 >= 0; i1--){
        let ident = id[i1];
        objid[offset--] = ident & 127;
        while((ident >>= 7) > 0)objid[offset--] = 128 | ident & 127;
    }
    return this._createEncoderBuffer(objid);
};
function two(num) {
    if (num < 10) return '0' + num;
    else return num;
}
DERNode.prototype._encodeTime = function encodeTime(time, tag) {
    let str;
    const date = new Date(time);
    if (tag === 'gentime') str = [
        two(date.getUTCFullYear()),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        'Z'
    ].join('');
    else if (tag === 'utctime') str = [
        two(date.getUTCFullYear() % 100),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        'Z'
    ].join('');
    else this.reporter.error('Encoding ' + tag + ' time is not supported yet');
    return this._encodeStr(str, 'octstr');
};
DERNode.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer('');
};
DERNode.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === 'string') {
        if (!values) return this.reporter.error('String int or enum given, but no values map');
        if (!values.hasOwnProperty(num)) return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
        num = values[num];
    }
    // Bignum, assume big endian
    if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
        const numArray = num.toArray();
        if (!num.sign && numArray[0] & 128) numArray.unshift(0);
        num = Buffer.from(numArray);
    }
    if (Buffer.isBuffer(num)) {
        let size = num.length;
        if (num.length === 0) size++;
        const out = Buffer.alloc(size);
        num.copy(out);
        if (num.length === 0) out[0] = 0;
        return this._createEncoderBuffer(out);
    }
    if (num < 128) return this._createEncoderBuffer(num);
    if (num < 256) return this._createEncoderBuffer([
        0,
        num
    ]);
    let size = 1;
    for(let i = num; i >= 256; i >>= 8)size++;
    const out = new Array(size);
    for(let i1 = out.length - 1; i1 >= 0; i1--){
        out[i1] = num & 255;
        num >>= 8;
    }
    if (out[0] & 128) out.unshift(0);
    return this._createEncoderBuffer(Buffer.from(out));
};
DERNode.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 255 : 0);
};
DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function') entity = entity(obj);
    return entity._getEncoder('der').tree;
};
DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
    const state = this._baseState;
    let i;
    if (state['default'] === null) return false;
    const data = dataBuffer.join();
    if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
    if (data.length !== state.defaultBuffer.length) return false;
    for(i = 0; i < data.length; i++)if (data[i] !== state.defaultBuffer[i]) return false;
    return true;
};
// Utility methods
function encodeTag(tag, primitive, cls, reporter) {
    let res;
    if (tag === 'seqof') tag = 'seq';
    else if (tag === 'setof') tag = 'set';
    if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];
    else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;
    else return reporter.error('Unknown tag: ' + tag);
    if (res >= 31) return reporter.error('Multi-octet tag encoding unsupported');
    if (!primitive) res |= 32;
    res |= der.tagClassByName[cls || 'universal'] << 6;
    return res;
}

},{"inherits":"bYMAq","safer-buffer":"6PB24","../base/node":"7JhXt","../constants/der":"2e6in"}],"6PB24":[function(require,module,exports) {
var process = require("process");
/* eslint-disable node/no-deprecated-api */ 'use strict';
var buffer = require('buffer');
var Buffer = buffer.Buffer;
var safer = {
};
var key;
for(key in buffer){
    if (!buffer.hasOwnProperty(key)) continue;
    if (key === 'SlowBuffer' || key === 'Buffer') continue;
    safer[key] = buffer[key];
}
var Safer = safer.Buffer = {
};
for(key in Buffer){
    if (!Buffer.hasOwnProperty(key)) continue;
    if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue;
    Safer[key] = Buffer[key];
}
safer.Buffer.prototype = Buffer.prototype;
if (!Safer.from || Safer.from === Uint8Array.from) Safer.from = function(value, encodingOrOffset, length) {
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
    if (value && typeof value.length === 'undefined') throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value);
    return Buffer(value, encodingOrOffset, length);
};
if (!Safer.alloc) Safer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
    if (size < 0 || size >= 2147483648) throw new RangeError('The value "' + size + '" is invalid for option "size"');
    var buf = Buffer(size);
    if (!fill || fill.length === 0) buf.fill(0);
    else if (typeof encoding === 'string') buf.fill(fill, encoding);
    else buf.fill(fill);
    return buf;
};
if (!safer.kStringMaxLength) try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;
} catch (e) {
// we can't determine kStringMaxLength in environments where process.binding
// is unsupported, so let's not set it
}
if (!safer.constants) {
    safer.constants = {
        MAX_LENGTH: safer.kMaxLength
    };
    if (safer.kStringMaxLength) safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
}
module.exports = safer;

},{"process":"6Upk8","buffer":"bpNHw"}],"7JhXt":[function(require,module,exports) {
'use strict';
const Reporter = require('../base/reporter').Reporter;
const EncoderBuffer = require('../base/buffer').EncoderBuffer;
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const assert = require('minimalistic-assert');
// Supported tags
const tags = [
    'seq',
    'seqof',
    'set',
    'setof',
    'objid',
    'bool',
    'gentime',
    'utctime',
    'null_',
    'enum',
    'int',
    'objDesc',
    'bitstr',
    'bmpstr',
    'charstr',
    'genstr',
    'graphstr',
    'ia5str',
    'iso646str',
    'numstr',
    'octstr',
    'printstr',
    't61str',
    'unistr',
    'utf8str',
    'videostr'
];
// Public methods list
const methods = [
    'key',
    'obj',
    'use',
    'optional',
    'explicit',
    'implicit',
    'def',
    'choice',
    'any',
    'contains'
].concat(tags);
// Overrided methods list
const overrided = [
    '_peekTag',
    '_decodeTag',
    '_use',
    '_decodeStr',
    '_decodeObjid',
    '_decodeTime',
    '_decodeNull',
    '_decodeInt',
    '_decodeBool',
    '_decodeList',
    '_encodeComposite',
    '_encodeStr',
    '_encodeObjid',
    '_encodeTime',
    '_encodeNull',
    '_encodeInt',
    '_encodeBool'
];
function Node1(enc, parent, name) {
    const state = {
    };
    this._baseState = state;
    state.name = name;
    state.enc = enc;
    state.parent = parent || null;
    state.children = null;
    // State
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state['default'] = null;
    state.explicit = null;
    state.implicit = null;
    state.contains = null;
    // Should create new instance on each method
    if (!state.parent) {
        state.children = [];
        this._wrap();
    }
}
module.exports = Node1;
const stateProps = [
    'enc',
    'parent',
    'children',
    'tag',
    'args',
    'reverseArgs',
    'choice',
    'optional',
    'any',
    'obj',
    'use',
    'alteredUse',
    'key',
    'default',
    'explicit',
    'implicit',
    'contains'
];
Node1.prototype.clone = function clone() {
    const state = this._baseState;
    const cstate = {
    };
    stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
    });
    const res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
};
Node1.prototype._wrap = function wrap() {
    const state = this._baseState;
    methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
            const clone1 = new this.constructor(this);
            state.children.push(clone1);
            return clone1[method].apply(clone1, arguments);
        };
    }, this);
};
Node1.prototype._init = function init(body) {
    const state = this._baseState;
    assert(state.parent === null);
    body.call(this);
    // Filter children
    state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
    }, this);
    assert.equal(state.children.length, 1, 'Root node can have only one child');
};
Node1.prototype._useArgs = function useArgs(args) {
    const state = this._baseState;
    // Filter children and args
    const children = args.filter(function(arg) {
        return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
    }, this);
    if (children.length !== 0) {
        assert(state.children === null);
        state.children = children;
        // Replace parent to maintain backward link
        children.forEach(function(child) {
            child._baseState.parent = this;
        }, this);
    }
    if (args.length !== 0) {
        assert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
            if (typeof arg !== 'object' || arg.constructor !== Object) return arg;
            const res = {
            };
            Object.keys(arg).forEach(function(key) {
                if (key == (key | 0)) key |= 0;
                const value = arg[key];
                res[value] = key;
            });
            return res;
        });
    }
};
//
// Overrided methods
//
overrided.forEach(function(method) {
    Node1.prototype[method] = function _overrided() {
        const state = this._baseState;
        throw new Error(method + ' not implemented for encoding: ' + state.enc);
    };
});
//
// Public methods
//
tags.forEach(function(tag) {
    Node1.prototype[tag] = function _tagMethod() {
        const state = this._baseState;
        const args = Array.prototype.slice.call(arguments);
        assert(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
        return this;
    };
});
Node1.prototype.use = function use(item) {
    assert(item);
    const state = this._baseState;
    assert(state.use === null);
    state.use = item;
    return this;
};
Node1.prototype.optional = function optional() {
    const state = this._baseState;
    state.optional = true;
    return this;
};
Node1.prototype.def = function def(val) {
    const state = this._baseState;
    assert(state['default'] === null);
    state['default'] = val;
    state.optional = true;
    return this;
};
Node1.prototype.explicit = function explicit(num) {
    const state = this._baseState;
    assert(state.explicit === null && state.implicit === null);
    state.explicit = num;
    return this;
};
Node1.prototype.implicit = function implicit(num) {
    const state = this._baseState;
    assert(state.explicit === null && state.implicit === null);
    state.implicit = num;
    return this;
};
Node1.prototype.obj = function obj() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);
    state.obj = true;
    if (args.length !== 0) this._useArgs(args);
    return this;
};
Node1.prototype.key = function key(newKey) {
    const state = this._baseState;
    assert(state.key === null);
    state.key = newKey;
    return this;
};
Node1.prototype.any = function any() {
    const state = this._baseState;
    state.any = true;
    return this;
};
Node1.prototype.choice = function choice(obj1) {
    const state = this._baseState;
    assert(state.choice === null);
    state.choice = obj1;
    this._useArgs(Object.keys(obj1).map(function(key1) {
        return obj1[key1];
    }));
    return this;
};
Node1.prototype.contains = function contains(item) {
    const state = this._baseState;
    assert(state.use === null);
    state.contains = item;
    return this;
};
//
// Decoding
//
Node1.prototype._decode = function decode(input, options) {
    const state = this._baseState;
    // Decode root node
    if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
    let result = state['default'];
    let present = true;
    let prevKey = null;
    if (state.key !== null) prevKey = input.enterKey(state.key);
    // Check if tag is there
    if (state.optional) {
        let tag = null;
        if (state.explicit !== null) tag = state.explicit;
        else if (state.implicit !== null) tag = state.implicit;
        else if (state.tag !== null) tag = state.tag;
        if (tag === null && !state.any) {
            // Trial and Error
            const save = input.save();
            try {
                if (state.choice === null) this._decodeGeneric(state.tag, input, options);
                else this._decodeChoice(input, options);
                present = true;
            } catch (e) {
                present = false;
            }
            input.restore(save);
        } else {
            present = this._peekTag(input, tag, state.any);
            if (input.isError(present)) return present;
        }
    }
    // Push object on stack
    let prevObj;
    if (state.obj && present) prevObj = input.enterObject();
    if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
            const explicit1 = this._decodeTag(input, state.explicit);
            if (input.isError(explicit1)) return explicit1;
            input = explicit1;
        }
        const start = input.offset;
        // Unwrap implicit and normal values
        if (state.use === null && state.choice === null) {
            let save;
            if (state.any) save = input.save();
            const body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
            if (input.isError(body)) return body;
            if (state.any) result = input.raw(save);
            else input = body;
        }
        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');
        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content');
        // Select proper method for tag
        if (state.any) ;
        else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);
        else result = this._decodeChoice(input, options);
        if (input.isError(result)) return result;
        // Decode children
        if (!state.any && state.choice === null && state.children !== null) state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
        });
        // Decode contained/encoded by schema, only in bit or octet strings
        if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
            const data = new DecoderBuffer(result);
            result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
    }
    // Pop object
    if (state.obj && present) result = input.leaveObject(prevObj);
    // Set key
    if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);
    else if (prevKey !== null) input.exitKey(prevKey);
    return result;
};
Node1.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    const state = this._baseState;
    if (tag === 'seq' || tag === 'set') return null;
    if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options);
    else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);
    else if (tag === 'objid' && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);
    else if (tag === 'objid') return this._decodeObjid(input, null, null, options);
    else if (tag === 'gentime' || tag === 'utctime') return this._decodeTime(input, tag, options);
    else if (tag === 'null_') return this._decodeNull(input, options);
    else if (tag === 'bool') return this._decodeBool(input, options);
    else if (tag === 'objDesc') return this._decodeStr(input, tag, options);
    else if (tag === 'int' || tag === 'enum') return this._decodeInt(input, state.args && state.args[0], options);
    if (state.use !== null) return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
    else return input.error('unknown tag: ' + tag);
};
Node1.prototype._getUse = function _getUse(entity, obj1) {
    const state = this._baseState;
    // Create altered use decoder if implicit is set
    state.useDecoder = this._use(entity, obj1);
    assert(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
};
Node1.prototype._decodeChoice = function decodeChoice(input, options) {
    const state = this._baseState;
    let result = null;
    let match = false;
    Object.keys(state.choice).some(function(key1) {
        const save = input.save();
        const node = state.choice[key1];
        try {
            const value = node._decode(input, options);
            if (input.isError(value)) return false;
            result = {
                type: key1,
                value: value
            };
            match = true;
        } catch (e) {
            input.restore(save);
            return false;
        }
        return true;
    }, this);
    if (!match) return input.error('Choice not matched');
    return result;
};
//
// Encoding
//
Node1.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new EncoderBuffer(data, this.reporter);
};
Node1.prototype._encode = function encode(data, reporter, parent) {
    const state = this._baseState;
    if (state['default'] !== null && state['default'] === data) return;
    const result = this._encodeValue(data, reporter, parent);
    if (result === undefined) return;
    if (this._skipDefault(result, reporter, parent)) return;
    return result;
};
Node1.prototype._encodeValue = function encode1(data, reporter, parent) {
    const state = this._baseState;
    // Decode root node
    if (state.parent === null) return state.children[0]._encode(data, reporter || new Reporter());
    let result = null;
    // Set reporter to share it with a child class
    this.reporter = reporter;
    // Check if data is there
    if (state.optional && data === undefined) {
        if (state['default'] !== null) data = state['default'];
        else return;
    }
    // Encode children first
    let content = null;
    let primitive = false;
    if (state.any) // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
    else if (state.choice) result = this._encodeChoice(data, reporter);
    else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
    } else if (state.children) {
        content = state.children.map(function(child) {
            if (child._baseState.tag === 'null_') return child._encode(null, reporter, data);
            if (child._baseState.key === null) return reporter.error('Child should have a key');
            const prevKey = reporter.enterKey(child._baseState.key);
            if (typeof data !== 'object') return reporter.error('Child expected, but input is not object');
            const res = child._encode(data[child._baseState.key], reporter, data);
            reporter.leaveKey(prevKey);
            return res;
        }, this).filter(function(child) {
            return child;
        });
        content = this._createEncoderBuffer(content);
    } else {
        if (state.tag === 'seqof' || state.tag === 'setof') {
            // TODO(indutny): this should be thrown on DSL level
            if (!(state.args && state.args.length === 1)) return reporter.error('Too many args for : ' + state.tag);
            if (!Array.isArray(data)) return reporter.error('seqof/setof, but data is not Array');
            const child = this.clone();
            child._baseState.implicit = null;
            content = this._createEncoderBuffer(data.map(function(item) {
                const state1 = this._baseState;
                return this._getUse(state1.args[0], data)._encode(item, reporter);
            }, child));
        } else if (state.use !== null) result = this._getUse(state.use, parent)._encode(data, reporter);
        else {
            content = this._encodePrimitive(state.tag, data);
            primitive = true;
        }
    }
    // Encode data itself
    if (!state.any && state.choice === null) {
        const tag = state.implicit !== null ? state.implicit : state.tag;
        const cls = state.implicit === null ? 'universal' : 'context';
        if (tag === null) {
            if (state.use === null) reporter.error('Tag could be omitted only for .use()');
        } else if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
    // Wrap in explicit
    if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, 'context', result);
    return result;
};
Node1.prototype._encodeChoice = function encodeChoice(data, reporter) {
    const state = this._baseState;
    const node = state.choice[data.type];
    if (!node) assert(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
    return node._encode(data.value, reporter);
};
Node1.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    const state = this._baseState;
    if (/str$/.test(tag)) return this._encodeStr(data, tag);
    else if (tag === 'objid' && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === 'objid') return this._encodeObjid(data, null, null);
    else if (tag === 'gentime' || tag === 'utctime') return this._encodeTime(data, tag);
    else if (tag === 'null_') return this._encodeNull();
    else if (tag === 'int' || tag === 'enum') return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === 'bool') return this._encodeBool(data);
    else if (tag === 'objDesc') return this._encodeStr(data, tag);
    else throw new Error('Unsupported tag: ' + tag);
};
Node1.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
};
Node1.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

},{"../base/reporter":"7QbEp","../base/buffer":"aXFXS","minimalistic-assert":"cHdm7"}],"7QbEp":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
function Reporter(options) {
    this._reporterState = {
        obj: null,
        path: [],
        options: options || {
        },
        errors: []
    };
}
exports.Reporter = Reporter;
Reporter.prototype.isError = function isError(obj) {
    return obj instanceof ReporterError;
};
Reporter.prototype.save = function save() {
    const state = this._reporterState;
    return {
        obj: state.obj,
        pathLen: state.path.length
    };
};
Reporter.prototype.restore = function restore(data) {
    const state = this._reporterState;
    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
};
Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
};
Reporter.prototype.exitKey = function exitKey(index) {
    const state = this._reporterState;
    state.path = state.path.slice(0, index - 1);
};
Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    const state = this._reporterState;
    this.exitKey(index);
    if (state.obj !== null) state.obj[key] = value;
};
Reporter.prototype.path = function path() {
    return this._reporterState.path.join('/');
};
Reporter.prototype.enterObject = function enterObject() {
    const state = this._reporterState;
    const prev = state.obj;
    state.obj = {
    };
    return prev;
};
Reporter.prototype.leaveObject = function leaveObject(prev) {
    const state = this._reporterState;
    const now = state.obj;
    state.obj = prev;
    return now;
};
Reporter.prototype.error = function error(msg) {
    let err;
    const state = this._reporterState;
    const inherited = msg instanceof ReporterError;
    if (inherited) err = msg;
    else err = new ReporterError(state.path.map(function(elem) {
        return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
    if (!state.options.partial) throw err;
    if (!inherited) state.errors.push(err);
    return err;
};
Reporter.prototype.wrapResult = function wrapResult(result) {
    const state = this._reporterState;
    if (!state.options.partial) return result;
    return {
        result: this.isError(result) ? null : result,
        errors: state.errors
    };
};
function ReporterError(path1, msg) {
    this.path = path1;
    this.rethrow(msg);
}
inherits(ReporterError, Error);
ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + ' at: ' + (this.path || '(shallow)');
    if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);
    if (!this.stack) try {
        // IE only adds stack when thrown
        throw new Error(this.message);
    } catch (e) {
        this.stack = e.stack;
    }
    return this;
};

},{"inherits":"bYMAq"}],"aXFXS":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
const Reporter = require('../base/reporter').Reporter;
const Buffer = require('safer-buffer').Buffer;
function DecoderBuffer(base, options) {
    Reporter.call(this, options);
    if (!Buffer.isBuffer(base)) {
        this.error('Input not Buffer');
        return;
    }
    this.base = base;
    this.offset = 0;
    this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;
DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
    if (data instanceof DecoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === 'object' && Buffer.isBuffer(data.base) && data.constructor.name === 'DecoderBuffer' && typeof data.offset === 'number' && typeof data.length === 'number' && typeof data.save === 'function' && typeof data.restore === 'function' && typeof data.isEmpty === 'function' && typeof data.readUInt8 === 'function' && typeof data.skip === 'function' && typeof data.raw === 'function';
    return isCompatible;
};
DecoderBuffer.prototype.save = function save() {
    return {
        offset: this.offset,
        reporter: Reporter.prototype.save.call(this)
    };
};
DecoderBuffer.prototype.restore = function restore(save1) {
    // Return skipped data
    const res = new DecoderBuffer(this.base);
    res.offset = save1.offset;
    res.length = this.offset;
    this.offset = save1.offset;
    Reporter.prototype.restore.call(this, save1.reporter);
    return res;
};
DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
};
DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);
    else return this.error(fail || 'DecoderBuffer overrun');
};
DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');
    const res = new DecoderBuffer(this.base);
    // Share reporter state
    res._reporterState = this._reporterState;
    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
};
DecoderBuffer.prototype.raw = function raw(save1) {
    return this.base.slice(save1 ? save1.offset : this.offset, this.length);
};
function EncoderBuffer(value, reporter) {
    if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
            if (!EncoderBuffer.isEncoderBuffer(item)) item = new EncoderBuffer(item, reporter);
            this.length += item.length;
            return item;
        }, this);
    } else if (typeof value === 'number') {
        if (!(0 <= value && value <= 255)) return reporter.error('non-byte EncoderBuffer value');
        this.value = value;
        this.length = 1;
    } else if (typeof value === 'string') {
        this.value = value;
        this.length = Buffer.byteLength(value);
    } else if (Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
    } else return reporter.error('Unsupported type: ' + typeof value);
}
exports.EncoderBuffer = EncoderBuffer;
EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
    if (data instanceof EncoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === 'object' && data.constructor.name === 'EncoderBuffer' && typeof data.length === 'number' && typeof data.join === 'function';
    return isCompatible;
};
EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out) out = Buffer.alloc(this.length);
    if (!offset) offset = 0;
    if (this.length === 0) return out;
    if (Array.isArray(this.value)) this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
    });
    else {
        if (typeof this.value === 'number') out[offset] = this.value;
        else if (typeof this.value === 'string') out.write(this.value, offset);
        else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
        offset += this.length;
    }
    return out;
};

},{"inherits":"bYMAq","../base/reporter":"7QbEp","safer-buffer":"6PB24"}],"2e6in":[function(require,module,exports) {
'use strict';
// Helper
function reverse(map) {
    const res = {
    };
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
}
exports.tagClass = {
    0: 'universal',
    1: 'application',
    2: 'context',
    3: 'private'
};
exports.tagClassByName = reverse(exports.tagClass);
exports.tag = {
    0: 'end',
    1: 'bool',
    2: 'int',
    3: 'bitstr',
    4: 'octstr',
    5: 'null_',
    6: 'objid',
    7: 'objDesc',
    8: 'external',
    9: 'real',
    10: 'enum',
    11: 'embed',
    12: 'utf8str',
    13: 'relativeOid',
    16: 'seq',
    17: 'set',
    18: 'numstr',
    19: 'printstr',
    20: 't61str',
    21: 'videostr',
    22: 'ia5str',
    23: 'utctime',
    24: 'gentime',
    25: 'graphstr',
    26: 'iso646str',
    27: 'genstr',
    28: 'unistr',
    29: 'charstr',
    30: 'bmpstr'
};
exports.tagByName = reverse(exports.tag);

},{}],"jtElj":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
const DEREncoder = require('./der');
function PEMEncoder(entity) {
    DEREncoder.call(this, entity);
    this.enc = 'pem';
}
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;
PEMEncoder.prototype.encode = function encode(data, options) {
    const buf = DEREncoder.prototype.encode.call(this, data);
    const p = buf.toString('base64');
    const out = [
        '-----BEGIN ' + options.label + '-----'
    ];
    for(let i = 0; i < p.length; i += 64)out.push(p.slice(i, i + 64));
    out.push('-----END ' + options.label + '-----');
    return out.join('\n');
};

},{"inherits":"bYMAq","./der":"2gMGU"}],"jLpoo":[function(require,module,exports) {
'use strict';
const decoders = exports;
decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":"3UZ36","./pem":"6aVr3"}],"3UZ36":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
const bignum = require('bn.js');
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const Node1 = require('../base/node');
// Import DER constants
const der = require('../constants/der');
function DERDecoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new DERNode();
    this.tree._init(entity.body);
}
module.exports = DERDecoder;
DERDecoder.prototype.decode = function decode(data, options) {
    if (!DecoderBuffer.isDecoderBuffer(data)) data = new DecoderBuffer(data, options);
    return this.tree._decode(data, options);
};
// Tree methods
function DERNode(parent) {
    Node1.call(this, 'der', parent);
}
inherits(DERNode, Node1);
DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
    if (buffer.isEmpty()) return false;
    const state = buffer.save();
    const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    buffer.restore(state);
    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
};
DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
    const decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    let len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
    // Failure
    if (buffer.isError(len)) return len;
    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) return buffer.error('Failed to match tag: "' + tag + '"');
    if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    // Indefinite length... find END tag
    const state = buffer.save();
    const res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer.isError(res)) return res;
    len = buffer.offset - state.offset;
    buffer.restore(state);
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};
DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
    for(;;){
        const tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag)) return tag;
        const len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len)) return len;
        let res;
        if (tag.primitive || len !== null) res = buffer.skip(len);
        else res = this._skipUntilEnd(buffer, fail);
        // Failure
        if (buffer.isError(res)) return res;
        if (tag.tagStr === 'end') break;
    }
};
DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
    const result = [];
    while(!buffer.isEmpty()){
        const possibleEnd = this._peekTag(buffer, 'end');
        if (buffer.isError(possibleEnd)) return possibleEnd;
        const res = decoder.decode(buffer, 'der', options);
        if (buffer.isError(res) && possibleEnd) break;
        result.push(res);
    }
    return result;
};
DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
    if (tag === 'bitstr') {
        const unused = buffer.readUInt8();
        if (buffer.isError(unused)) return unused;
        return {
            unused: unused,
            data: buffer.raw()
        };
    } else if (tag === 'bmpstr') {
        const raw = buffer.raw();
        if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');
        let str = '';
        for(let i = 0; i < raw.length / 2; i++)str += String.fromCharCode(raw.readUInt16BE(i * 2));
        return str;
    } else if (tag === 'numstr') {
        const numstr = buffer.raw().toString('ascii');
        if (!this._isNumstr(numstr)) return buffer.error("Decoding of string type: numstr unsupported characters");
        return numstr;
    } else if (tag === 'octstr') return buffer.raw();
    else if (tag === 'objDesc') return buffer.raw();
    else if (tag === 'printstr') {
        const printstr = buffer.raw().toString('ascii');
        if (!this._isPrintstr(printstr)) return buffer.error("Decoding of string type: printstr unsupported characters");
        return printstr;
    } else if (/str$/.test(tag)) return buffer.raw().toString();
    else return buffer.error('Decoding of string type: ' + tag + ' unsupported');
};
DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
    let result;
    const identifiers = [];
    let ident = 0;
    let subident = 0;
    while(!buffer.isEmpty()){
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 127;
        if ((subident & 128) === 0) {
            identifiers.push(ident);
            ident = 0;
        }
    }
    if (subident & 128) identifiers.push(ident);
    const first = identifiers[0] / 40 | 0;
    const second = identifiers[0] % 40;
    if (relative) result = identifiers;
    else result = [
        first,
        second
    ].concat(identifiers.slice(1));
    if (values) {
        let tmp = values[result.join(' ')];
        if (tmp === undefined) tmp = values[result.join('.')];
        if (tmp !== undefined) result = tmp;
    }
    return result;
};
DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
    const str = buffer.raw().toString();
    let year;
    let mon;
    let day;
    let hour;
    let min;
    let sec;
    if (tag === 'gentime') {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
    } else if (tag === 'utctime') {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70) year = 2000 + year;
        else year = 1900 + year;
    } else return buffer.error('Decoding ' + tag + ' time is not supported yet');
    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};
DERNode.prototype._decodeNull = function decodeNull() {
    return null;
};
DERNode.prototype._decodeBool = function decodeBool(buffer) {
    const res = buffer.readUInt8();
    if (buffer.isError(res)) return res;
    else return res !== 0;
};
DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
    // Bigint, return as it is (assume big endian)
    const raw = buffer.raw();
    let res = new bignum(raw);
    if (values) res = values[res.toString(10)] || res;
    return res;
};
DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function') entity = entity(obj);
    return entity._getDecoder('der').tree;
};
// Utility methods
function derDecodeTag(buf, fail) {
    let tag = buf.readUInt8(fail);
    if (buf.isError(tag)) return tag;
    const cls = der.tagClass[tag >> 6];
    const primitive = (tag & 32) === 0;
    // Multi-octet tag - load
    if ((tag & 31) === 31) {
        let oct = tag;
        tag = 0;
        while((oct & 128) === 128){
            oct = buf.readUInt8(fail);
            if (buf.isError(oct)) return oct;
            tag <<= 7;
            tag |= oct & 127;
        }
    } else tag &= 31;
    const tagStr = der.tag[tag];
    return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
    };
}
function derDecodeLen(buf, primitive, fail) {
    let len = buf.readUInt8(fail);
    if (buf.isError(len)) return len;
    // Indefinite form
    if (!primitive && len === 128) return null;
    // Definite form
    if ((len & 128) === 0) // Short form
    return len;
    // Long form
    const num = len & 127;
    if (num > 4) return buf.error('length octect is too long');
    len = 0;
    for(let i = 0; i < num; i++){
        len <<= 8;
        const j = buf.readUInt8(fail);
        if (buf.isError(j)) return j;
        len |= j;
    }
    return len;
}

},{"inherits":"bYMAq","bn.js":"7d9wV","../base/buffer":"aXFXS","../base/node":"7JhXt","../constants/der":"2e6in"}],"6aVr3":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;
const DERDecoder = require('./der');
function PEMDecoder(entity) {
    DERDecoder.call(this, entity);
    this.enc = 'pem';
}
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;
PEMDecoder.prototype.decode = function decode(data, options) {
    const lines = data.toString().split(/[\r\n]+/g);
    const label = options.label.toUpperCase();
    const re = /^-----(BEGIN|END) ([^-]+)-----$/;
    let start = -1;
    let end = -1;
    for(let i = 0; i < lines.length; i++){
        const match = lines[i].match(re);
        if (match === null) continue;
        if (match[2] !== label) continue;
        if (start === -1) {
            if (match[1] !== 'BEGIN') break;
            start = i;
        } else {
            if (match[1] !== 'END') break;
            end = i;
            break;
        }
    }
    if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);
    const base64 = lines.slice(start + 1, end).join('');
    // Remove excessive symbols
    base64.replace(/[^a-z0-9+/=]+/gi, '');
    const input = Buffer.from(base64, 'base64');
    return DERDecoder.prototype.decode.call(this, input, options);
};

},{"inherits":"bYMAq","safer-buffer":"6PB24","./der":"3UZ36"}],"3NeSq":[function(require,module,exports) {
'use strict';
const base = exports;
base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./reporter":"7QbEp","./buffer":"aXFXS","./node":"7JhXt"}],"6eIrm":[function(require,module,exports) {
'use strict';
const constants = exports;
// Helper
constants._reverse = function reverse(map) {
    const res = {
    };
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
};
constants.der = require('./der');

},{"./der":"2e6in"}],"g4S2F":[function(require,module,exports) {
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen
'use strict';
var asn = require('asn1.js');
var Time = asn.define('Time', function() {
    this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
    });
});
var AttributeTypeValue = asn.define('AttributeTypeValue', function() {
    this.seq().obj(this.key('type').objid(), this.key('value').any());
});
var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function() {
    this.seq().obj(this.key('algorithm').objid(), this.key('parameters').optional(), this.key('curve').objid().optional());
});
var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function() {
    this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function() {
    this.setof(AttributeTypeValue);
});
var RDNSequence = asn.define('RDNSequence', function() {
    this.seqof(RelativeDistinguishedName);
});
var Name = asn.define('Name', function() {
    this.choice({
        rdnSequence: this.use(RDNSequence)
    });
});
var Validity = asn.define('Validity', function() {
    this.seq().obj(this.key('notBefore').use(Time), this.key('notAfter').use(Time));
});
var Extension = asn.define('Extension', function() {
    this.seq().obj(this.key('extnID').objid(), this.key('critical').bool().def(false), this.key('extnValue').octstr());
});
var TBSCertificate = asn.define('TBSCertificate', function() {
    this.seq().obj(this.key('version').explicit(0).int().optional(), this.key('serialNumber').int(), this.key('signature').use(AlgorithmIdentifier), this.key('issuer').use(Name), this.key('validity').use(Validity), this.key('subject').use(Name), this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo), this.key('issuerUniqueID').implicit(1).bitstr().optional(), this.key('subjectUniqueID').implicit(2).bitstr().optional(), this.key('extensions').explicit(3).seqof(Extension).optional());
});
var X509Certificate = asn.define('X509Certificate', function() {
    this.seq().obj(this.key('tbsCertificate').use(TBSCertificate), this.key('signatureAlgorithm').use(AlgorithmIdentifier), this.key('signatureValue').bitstr());
});
module.exports = X509Certificate;

},{"asn1.js":"5D6Ru"}],"4Fp9R":[function(require,module,exports) {
module.exports = JSON.parse("{\"2.16.840.1.101.3.4.1.1\":\"aes-128-ecb\",\"2.16.840.1.101.3.4.1.2\":\"aes-128-cbc\",\"2.16.840.1.101.3.4.1.3\":\"aes-128-ofb\",\"2.16.840.1.101.3.4.1.4\":\"aes-128-cfb\",\"2.16.840.1.101.3.4.1.21\":\"aes-192-ecb\",\"2.16.840.1.101.3.4.1.22\":\"aes-192-cbc\",\"2.16.840.1.101.3.4.1.23\":\"aes-192-ofb\",\"2.16.840.1.101.3.4.1.24\":\"aes-192-cfb\",\"2.16.840.1.101.3.4.1.41\":\"aes-256-ecb\",\"2.16.840.1.101.3.4.1.42\":\"aes-256-cbc\",\"2.16.840.1.101.3.4.1.43\":\"aes-256-ofb\",\"2.16.840.1.101.3.4.1.44\":\"aes-256-cfb\"}");

},{}],"5YsBZ":[function(require,module,exports) {
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
var evp = require('evp_bytestokey');
var ciphers = require('browserify-aes');
var Buffer = require('safe-buffer').Buffer;
module.exports = function(okey, password) {
    var key = okey.toString();
    var match = key.match(findProc);
    var decrypted;
    if (!match) {
        var match2 = key.match(fullRegex);
        decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64');
    } else {
        var suite = 'aes' + match[1];
        var iv = Buffer.from(match[2], 'hex');
        var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64');
        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        decrypted = Buffer.concat(out);
    }
    var tag = key.match(startRegex)[1];
    return {
        tag: tag,
        data: decrypted
    };
};

},{"evp_bytestokey":"6rOUs","browserify-aes":"RRNBY","safe-buffer":"8BeU0"}],"eBbUF":[function(require,module,exports) {
module.exports = JSON.parse("{\"1.3.132.0.10\":\"secp256k1\",\"1.3.132.0.33\":\"p224\",\"1.2.840.10045.3.1.1\":\"p192\",\"1.2.840.10045.3.1.7\":\"p256\",\"1.3.132.0.34\":\"p384\",\"1.3.132.0.35\":\"p521\"}");

},{}],"8hZaS":[function(require,module,exports) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer;
var BN = require('bn.js');
var EC = require('elliptic').ec;
var parseKeys = require('parse-asn1');
var curves = require('./curves.json');
function verify(sig, hash, key, signType, tag) {
    var pub = parseKeys(key);
    if (pub.type === 'ec') {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
        return ecVerify(sig, hash, pub);
    } else if (pub.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong public key type');
        return dsaVerify(sig, hash, pub);
    } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
    }
    hash = Buffer.concat([
        tag,
        hash
    ]);
    var len = pub.modulus.byteLength();
    var pad = [
        1
    ];
    var padNum = 0;
    while(hash.length + pad.length + 2 < len){
        pad.push(255);
        padNum++;
    }
    pad.push(0);
    var i = -1;
    while((++i) < hash.length)pad.push(hash[i]);
    pad = Buffer.from(pad);
    var red = BN.mont(pub.modulus);
    sig = new BN(sig).toRed(red);
    sig = sig.redPow(new BN(pub.publicExponent));
    sig = Buffer.from(sig.fromRed().toArray());
    var out = padNum < 8 ? 1 : 0;
    len = Math.min(sig.length, pad.length);
    if (sig.length !== pad.length) out = 1;
    i = -1;
    while((++i) < len)out |= sig[i] ^ pad[i];
    return out === 0;
}
function ecVerify(sig, hash, pub) {
    var curveId = curves[pub.data.algorithm.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));
    var curve = new EC(curveId);
    var pubkey = pub.data.subjectPrivateKey.data;
    return curve.verify(hash, sig, pubkey);
}
function dsaVerify(sig, hash, pub) {
    var p = pub.data.p;
    var q = pub.data.q;
    var g = pub.data.g;
    var y = pub.data.pub_key;
    var unpacked = parseKeys.signature.decode(sig, 'der');
    var s = unpacked.s;
    var r = unpacked.r;
    checkValue(s, q);
    checkValue(r, q);
    var montp = BN.mont(p);
    var w = s.invm(q);
    var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
    return v.cmp(r) === 0;
}
function checkValue(b, q) {
    if (b.cmpn(0) <= 0) throw new Error('invalid sig');
    if (b.cmp(q) >= q) throw new Error('invalid sig');
}
module.exports = verify;

},{"safe-buffer":"QVErX","bn.js":"9iLnt","elliptic":"jJrzK","parse-asn1":"66H2P","./curves.json":"eBbUF"}],"gRgrl":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var elliptic = require('elliptic');
var BN = require('bn.js');
module.exports = function createECDH(curve) {
    return new ECDH(curve);
};
var aliases = {
    secp256k1: {
        name: 'secp256k1',
        byteLength: 32
    },
    secp224r1: {
        name: 'p224',
        byteLength: 28
    },
    prime256v1: {
        name: 'p256',
        byteLength: 32
    },
    prime192v1: {
        name: 'p192',
        byteLength: 24
    },
    ed25519: {
        name: 'ed25519',
        byteLength: 32
    },
    secp384r1: {
        name: 'p384',
        byteLength: 48
    },
    secp521r1: {
        name: 'p521',
        byteLength: 66
    }
};
aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
aliases.p384 = aliases.secp384r1;
aliases.p521 = aliases.secp521r1;
function ECDH(curve) {
    this.curveType = aliases[curve];
    if (!this.curveType) this.curveType = {
        name: curve
    };
    this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
    ;
    this.keys = void 0;
}
ECDH.prototype.generateKeys = function(enc, format) {
    this.keys = this.curve.genKeyPair();
    return this.getPublicKey(enc, format);
};
ECDH.prototype.computeSecret = function(other, inenc, enc) {
    inenc = inenc || 'utf8';
    if (!Buffer.isBuffer(other)) other = new Buffer(other, inenc);
    var otherPub = this.curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul(this.keys.getPrivate()).getX();
    return formatReturnValue(out, enc, this.curveType.byteLength);
};
ECDH.prototype.getPublicKey = function(enc, format) {
    var key = this.keys.getPublic(format === 'compressed', true);
    if (format === 'hybrid') {
        if (key[key.length - 1] % 2) key[0] = 7;
        else key[0] = 6;
    }
    return formatReturnValue(key, enc);
};
ECDH.prototype.getPrivateKey = function(enc) {
    return formatReturnValue(this.keys.getPrivate(), enc);
};
ECDH.prototype.setPublicKey = function(pub, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(pub)) pub = new Buffer(pub, enc);
    this.keys._importPublic(pub);
    return this;
};
ECDH.prototype.setPrivateKey = function(priv, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(priv)) priv = new Buffer(priv, enc);
    var _priv = new BN(priv);
    _priv = _priv.toString(16);
    this.keys = this.curve.genKeyPair();
    this.keys._importPrivate(_priv);
    return this;
};
function formatReturnValue(bn, enc, len) {
    if (!Array.isArray(bn)) bn = bn.toArray();
    var buf = new Buffer(bn);
    if (len && buf.length < len) {
        var zeros = new Buffer(len - buf.length);
        zeros.fill(0);
        buf = Buffer.concat([
            zeros,
            buf
        ]);
    }
    if (!enc) return buf;
    else return buf.toString(enc);
}

},{"buffer":"bpNHw","elliptic":"jJrzK","bn.js":"hbaH7"}],"hbaH7":[function(require,module,exports) {
(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require('buffer').Buffer;
    } catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 15;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 10;
            else if (c >= 17) r += c - 17 + 10;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits1(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo1(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if ((++i) < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul1, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul1;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod1 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod1.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while((i--) > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while((j--) > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while((i--) > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while((j--) > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp1 = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp1 === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp1 > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split1(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK1(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK2(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime1 = BN._prime(m);
            this.m = prime1.p;
            this.prime = prime1;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg1(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add1(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd1(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub1(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub1(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr1(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr1(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow1 = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow1);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm1(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow2(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo1(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom1(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul2(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul2(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm2(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(typeof module === 'undefined' || module, this);

},{"buffer":"8VSUO"}],"gPyCQ":[function(require,module,exports) {
exports.publicEncrypt = require('./publicEncrypt');
exports.privateDecrypt = require('./privateDecrypt');
exports.privateEncrypt = function privateEncrypt(key, buf) {
    return exports.publicEncrypt(key, buf, true);
};
exports.publicDecrypt = function publicDecrypt(key, buf) {
    return exports.privateDecrypt(key, buf, true);
};

},{"./publicEncrypt":"fmCEA","./privateDecrypt":"6UDwF"}],"fmCEA":[function(require,module,exports) {
var parseKeys = require('parse-asn1');
var randomBytes = require('randombytes');
var createHash = require('create-hash');
var mgf = require('./mgf');
var xor = require('./xor');
var BN = require('bn.js');
var withPublic = require('./withPublic');
var crt = require('browserify-rsa');
var Buffer = require('safe-buffer').Buffer;
module.exports = function publicEncrypt(publicKey, msg, reverse) {
    var padding;
    if (publicKey.padding) padding = publicKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = parseKeys(publicKey);
    var paddedMsg;
    if (padding === 4) paddedMsg = oaep(key, msg);
    else if (padding === 1) paddedMsg = pkcs1(key, msg, reverse);
    else if (padding === 3) {
        paddedMsg = new BN(msg);
        if (paddedMsg.cmp(key.modulus) >= 0) throw new Error('data too long for modulus');
    } else throw new Error('unknown padding');
    if (reverse) return crt(paddedMsg, key);
    else return withPublic(paddedMsg, key);
};
function oaep(key, msg) {
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = createHash('sha1').update(Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k - hLen2 - 2) throw new Error('message too long');
    var ps = Buffer.alloc(k - mLen - hLen2 - 2);
    var dblen = k - hLen - 1;
    var seed = randomBytes(hLen);
    var maskedDb = xor(Buffer.concat([
        iHash,
        ps,
        Buffer.alloc(1, 1),
        msg
    ], dblen), mgf(seed, dblen));
    var maskedSeed = xor(seed, mgf(maskedDb, hLen));
    return new BN(Buffer.concat([
        Buffer.alloc(1),
        maskedSeed,
        maskedDb
    ], k));
}
function pkcs1(key, msg, reverse) {
    var mLen = msg.length;
    var k = key.modulus.byteLength();
    if (mLen > k - 11) throw new Error('message too long');
    var ps;
    if (reverse) ps = Buffer.alloc(k - mLen - 3, 255);
    else ps = nonZero(k - mLen - 3);
    return new BN(Buffer.concat([
        Buffer.from([
            0,
            reverse ? 1 : 2
        ]),
        ps,
        Buffer.alloc(1),
        msg
    ], k));
}
function nonZero(len) {
    var out = Buffer.allocUnsafe(len);
    var i = 0;
    var cache = randomBytes(len * 2);
    var cur = 0;
    var num;
    while(i < len){
        if (cur === cache.length) {
            cache = randomBytes(len * 2);
            cur = 0;
        }
        num = cache[cur++];
        if (num) out[i++] = num;
    }
    return out;
}

},{"parse-asn1":"66H2P","randombytes":"cGTQk","create-hash":"jEgSe","./mgf":"1lsV8","./xor":"6XMo9","bn.js":"dDlrY","./withPublic":"7P2Or","browserify-rsa":"8V5oq","safe-buffer":"8BeU0"}],"1lsV8":[function(require,module,exports) {
var createHash = require('create-hash');
var Buffer = require('safe-buffer').Buffer;
module.exports = function(seed, len) {
    var t = Buffer.alloc(0);
    var i = 0;
    var c;
    while(t.length < len){
        c = i2ops(i++);
        t = Buffer.concat([
            t,
            createHash('sha1').update(seed).update(c).digest()
        ]);
    }
    return t.slice(0, len);
};
function i2ops(c) {
    var out = Buffer.allocUnsafe(4);
    out.writeUInt32BE(c, 0);
    return out;
}

},{"create-hash":"jEgSe","safe-buffer":"8BeU0"}],"6XMo9":[function(require,module,exports) {
module.exports = function xor(a, b) {
    var len = a.length;
    var i = -1;
    while((++i) < len)a[i] ^= b[i];
    return a;
};

},{}],"dDlrY":[function(require,module,exports) {
(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require('buffer').Buffer;
    } catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 15;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 10;
            else if (c >= 17) r += c - 17 + 10;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits1(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo1(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if ((++i) < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul1, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul1;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod1 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod1.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while((i--) > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while((j--) > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while((i--) > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while((j--) > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp1 = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp1 === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp1 > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split1(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK1(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK2(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime1 = BN._prime(m);
            this.m = prime1.p;
            this.prime = prime1;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg1(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add1(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd1(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub1(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub1(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr1(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr1(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow1 = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow1);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm1(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow2(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo1(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom1(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul2(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul2(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm2(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(typeof module === 'undefined' || module, this);

},{"buffer":"8VSUO"}],"7P2Or":[function(require,module,exports) {
var BN = require('bn.js');
var Buffer = require('safe-buffer').Buffer;
function withPublic(paddedMsg, key) {
    return Buffer.from(paddedMsg.toRed(BN.mont(key.modulus)).redPow(new BN(key.publicExponent)).fromRed().toArray());
}
module.exports = withPublic;

},{"bn.js":"dDlrY","safe-buffer":"8BeU0"}],"6UDwF":[function(require,module,exports) {
var parseKeys = require('parse-asn1');
var mgf = require('./mgf');
var xor = require('./xor');
var BN = require('bn.js');
var crt = require('browserify-rsa');
var createHash = require('create-hash');
var withPublic = require('./withPublic');
var Buffer = require('safe-buffer').Buffer;
module.exports = function privateDecrypt(privateKey, enc, reverse) {
    var padding;
    if (privateKey.padding) padding = privateKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = parseKeys(privateKey);
    var k = key.modulus.byteLength();
    if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) throw new Error('decryption error');
    var msg;
    if (reverse) msg = withPublic(new BN(enc), key);
    else msg = crt(enc, key);
    var zBuffer = Buffer.alloc(k - msg.length);
    msg = Buffer.concat([
        zBuffer,
        msg
    ], k);
    if (padding === 4) return oaep(key, msg);
    else if (padding === 1) return pkcs1(key, msg, reverse);
    else if (padding === 3) return msg;
    else throw new Error('unknown padding');
};
function oaep(key, msg) {
    var k = key.modulus.byteLength();
    var iHash = createHash('sha1').update(Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) throw new Error('decryption error');
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb = msg.slice(hLen + 1);
    var seed = xor(maskedSeed, mgf(maskedDb, hLen));
    var db = xor(maskedDb, mgf(seed, k - hLen - 1));
    if (compare(iHash, db.slice(0, hLen))) throw new Error('decryption error');
    var i = hLen;
    while(db[i] === 0)i++;
    if (db[i++] !== 1) throw new Error('decryption error');
    return db.slice(i);
}
function pkcs1(key, msg, reverse) {
    var p1 = msg.slice(0, 2);
    var i = 2;
    var status = 0;
    while(msg[i++] !== 0)if (i >= msg.length) {
        status++;
        break;
    }
    var ps = msg.slice(2, i - 1);
    if (p1.toString('hex') !== '0002' && !reverse || p1.toString('hex') !== '0001' && reverse) status++;
    if (ps.length < 8) status++;
    if (status) throw new Error('decryption error');
    return msg.slice(i);
}
function compare(a, b) {
    a = Buffer.from(a);
    b = Buffer.from(b);
    var dif = 0;
    var len = a.length;
    if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
    }
    var i = -1;
    while((++i) < len)dif += a[i] ^ b[i];
    return dif;
}

},{"parse-asn1":"66H2P","./mgf":"1lsV8","./xor":"6XMo9","bn.js":"dDlrY","browserify-rsa":"8V5oq","create-hash":"jEgSe","./withPublic":"7P2Or","safe-buffer":"8BeU0"}],"3X4Qp":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
'use strict';
function oldBrowser() {
    throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11');
}
var safeBuffer = require('safe-buffer');
var randombytes = require('randombytes');
var Buffer = safeBuffer.Buffer;
var kBufferMaxLength = safeBuffer.kMaxLength;
var crypto = global.crypto || global.msCrypto;
var kMaxUint32 = Math.pow(2, 32) - 1;
function assertOffset(offset, length) {
    if (typeof offset !== 'number' || offset !== offset) throw new TypeError('offset must be a number');
    if (offset > kMaxUint32 || offset < 0) throw new TypeError('offset must be a uint32');
    if (offset > kBufferMaxLength || offset > length) throw new RangeError('offset out of range');
}
function assertSize(size, offset, length) {
    if (typeof size !== 'number' || size !== size) throw new TypeError('size must be a number');
    if (size > kMaxUint32 || size < 0) throw new TypeError('size must be a uint32');
    if (size + offset > length || size > kBufferMaxLength) throw new RangeError('buffer too small');
}
if (crypto && crypto.getRandomValues || false) {
    exports.randomFill = randomFill;
    exports.randomFillSync = randomFillSync;
} else {
    exports.randomFill = oldBrowser;
    exports.randomFillSync = oldBrowser;
}
function randomFill(buf, offset, size, cb) {
    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    if (typeof offset === 'function') {
        cb = offset;
        offset = 0;
        size = buf.length;
    } else if (typeof size === 'function') {
        cb = size;
        size = buf.length - offset;
    } else if (typeof cb !== 'function') throw new TypeError('"cb" argument must be a function');
    assertOffset(offset, buf.length);
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size, cb);
}
function actualFill(buf, offset, size, cb) {
    var ourBuf = buf.buffer;
    var uint = new Uint8Array(ourBuf, offset, size);
    crypto.getRandomValues(uint);
    if (cb) {
        process.nextTick(function() {
            cb(null, buf);
        });
        return;
    }
    return buf;
    if (cb) {
        randombytes(size, function(err, bytes) {
            if (err) return cb(err);
            bytes.copy(buf, offset);
            cb(null, buf);
        });
        return;
    }
    var bytes = randombytes(size);
    bytes.copy(buf, offset);
    return buf;
}
function randomFillSync(buf, offset, size) {
    if (typeof offset === 'undefined') offset = 0;
    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    assertOffset(offset, buf.length);
    if (size === undefined) size = buf.length - offset;
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size);
}

},{"process":"6Upk8","safe-buffer":"8BeU0","randombytes":"cGTQk"}],"gRcLX":[function(require,module,exports) {
module.exports = exports = window.fetch;
// Needed for TypeScript and Webpack.
exports.default = window.fetch.bind(window);
exports.Headers = window.Headers;
exports.Request = window.Request;
exports.Response = window.Response;

},{}],"jtUga":[function(require,module,exports) {
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors1(obj) {
    var keys = Object.keys(obj);
    var descriptors = {
    };
    for(var i = 0; i < keys.length; i++)descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    return descriptors;
};
var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
    if (!isString(f)) {
        var objects = [];
        for(var i = 0; i < arguments.length; i++)objects.push(inspect(arguments[i]));
        return objects.join(' ');
    }
    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
        if (x === '%%') return '%';
        if (i >= len) return x;
        switch(x){
            case '%s':
                return String(args[i++]);
            case '%d':
                return Number(args[i++]);
            case '%j':
                try {
                    return JSON.stringify(args[i++]);
                } catch (_) {
                    return '[Circular]';
                }
            default:
                return x;
        }
    });
    for(var x = args[i]; i < len; x = args[++i])if (isNull(x) || !isObject(x)) str += ' ' + x;
    else str += ' ' + inspect(x);
    return str;
};
// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
    if (typeof process !== 'undefined' && process.noDeprecation === true) return fn;
    // Allow for deprecating things in the process of starting up.
    if (typeof process === 'undefined') return function() {
        return exports.deprecate(fn, msg).apply(this, arguments);
    };
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (process.throwDeprecation) throw new Error(msg);
            else if (process.traceDeprecation) console.trace(msg);
            else console.error(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
};
var debugs = {
};
var debugEnvRegex = /^$/;
var debugEnv;
exports.debuglog = function(set) {
    set = set.toUpperCase();
    if (!debugs[set]) {
        if (debugEnvRegex.test(set)) {
            var pid = process.pid;
            debugs[set] = function() {
                var msg = exports.format.apply(exports, arguments);
                console.error('%s %d: %s', set, pid, msg);
            };
        } else debugs[set] = function() {
        };
    }
    return debugs[set];
};
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */ /* legacy: obj, showHidden, depth, colors*/ function inspect(obj, opts) {
    // default options
    var ctx = {
        seen: [],
        stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) // legacy...
    ctx.showHidden = opts;
    else if (opts) // got an "options" object
    exports._extend(ctx, opts);
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;
// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
    'bold': [
        1,
        22
    ],
    'italic': [
        3,
        23
    ],
    'underline': [
        4,
        24
    ],
    'inverse': [
        7,
        27
    ],
    'white': [
        37,
        39
    ],
    'grey': [
        90,
        39
    ],
    'black': [
        30,
        39
    ],
    'blue': [
        34,
        39
    ],
    'cyan': [
        36,
        39
    ],
    'green': [
        32,
        39
    ],
    'magenta': [
        35,
        39
    ],
    'red': [
        31,
        39
    ],
    'yellow': [
        33,
        39
    ]
};
// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
};
function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];
    if (style) return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
    else return str;
}
function stylizeNoColor(str, styleType) {
    return str;
}
function arrayToHash(array) {
    var hash = {
    };
    array.forEach(function(val, idx) {
        hash[val] = true;
    });
    return hash;
}
function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
    value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) ret = formatValue(ctx, ret, recurseTimes);
        return ret;
    }
    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) return primitive;
    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);
    if (ctx.showHidden) keys = Object.getOwnPropertyNames(value);
    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) return formatError(value);
    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
        if (isFunction(value)) {
            var name = value.name ? ': ' + value.name : '';
            return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        if (isDate(value)) return ctx.stylize(Date.prototype.toString.call(value), 'date');
        if (isError(value)) return formatError(value);
    }
    var base = '', array = false, braces = [
        '{',
        '}'
    ];
    // Make Array say that they are Array
    if (isArray(value)) {
        array = true;
        braces = [
            '[',
            ']'
        ];
    }
    // Make functions say that they are functions
    if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
    }
    // Make RegExps say that they are RegExps
    if (isRegExp(value)) base = ' ' + RegExp.prototype.toString.call(value);
    // Make dates with properties first say the date
    if (isDate(value)) base = ' ' + Date.prototype.toUTCString.call(value);
    // Make error with message first say the error
    if (isError(value)) base = ' ' + formatError(value);
    if (keys.length === 0 && (!array || value.length == 0)) return braces[0] + base + braces[1];
    if (recurseTimes < 0) {
        if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        else return ctx.stylize('[Object]', 'special');
    }
    ctx.seen.push(value);
    var output;
    if (array) output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    else output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
    ctx.seen.pop();
    return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
    if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
    }
    if (isNumber(value)) return ctx.stylize('' + value, 'number');
    if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value)) return ctx.stylize('null', 'null');
}
function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for(var i = 0, l = value.length; i < l; ++i)if (hasOwnProperty(value, String(i))) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    else output.push('');
    keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    });
    return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
    };
    if (desc.get) {
        if (desc.set) str = ctx.stylize('[Getter/Setter]', 'special');
        else str = ctx.stylize('[Getter]', 'special');
    } else if (desc.set) str = ctx.stylize('[Setter]', 'special');
    if (!hasOwnProperty(visibleKeys, key)) name = '[' + key + ']';
    if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
            if (isNull(recurseTimes)) str = formatValue(ctx, desc.value, null);
            else str = formatValue(ctx, desc.value, recurseTimes - 1);
            if (str.indexOf('\n') > -1) {
                if (array) str = str.split('\n').map(function(line) {
                    return '  ' + line;
                }).join('\n').substr(2);
                else str = '\n' + str.split('\n').map(function(line) {
                    return '   ' + line;
                }).join('\n');
            }
        } else str = ctx.stylize('[Circular]', 'special');
    }
    if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) return str;
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.substr(1, name.length - 2);
            name = ctx.stylize(name, 'name');
        } else {
            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
            name = ctx.stylize(name, 'string');
        }
    }
    return name + ': ' + str;
}
function reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);
    if (length > 60) return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}
// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = require('./support/types');
function isArray(ar) {
    return Array.isArray(ar);
}
exports.isArray = isArray;
function isBoolean(arg) {
    return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;
function isNull(arg) {
    return arg === null;
}
exports.isNull = isNull;
function isNullOrUndefined(arg) {
    return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function isNumber(arg) {
    return typeof arg === 'number';
}
exports.isNumber = isNumber;
function isString(arg) {
    return typeof arg === 'string';
}
exports.isString = isString;
function isSymbol(arg) {
    return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;
function isUndefined(arg) {
    return arg === void 0;
}
exports.isUndefined = isUndefined;
function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;
function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;
function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;
function isError(e) {
    return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;
function isFunction(arg) {
    return typeof arg === 'function';
}
exports.isFunction = isFunction;
function isPrimitive(arg) {
    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;
exports.isBuffer = require('./support/isBuffer');
function objectToString(o) {
    return Object.prototype.toString.call(o);
}
function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
}
var months = [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec'
];
// 26 Feb 16:19:34
function timestamp() {
    var d = new Date();
    var time = [
        pad(d.getHours()),
        pad(d.getMinutes()),
        pad(d.getSeconds())
    ].join(':');
    return [
        d.getDate(),
        months[d.getMonth()],
        time
    ].join(' ');
}
// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};
/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */ exports.inherits = require('inherits');
exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;
    var keys = Object.keys(add);
    var i = keys.length;
    while(i--)origin[keys[i]] = add[keys[i]];
    return origin;
};
function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;
exports.promisify = function promisify(original) {
    if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');
    if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== 'function') throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
        });
        return fn;
    }
    function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
            promiseResolve = resolve;
            promiseReject = reject;
        });
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        args.push(function(err, value) {
            if (err) promiseReject(err);
            else promiseResolve(value);
        });
        try {
            original.apply(this, args);
        } catch (err) {
            promiseReject(err);
        }
        return promise;
    }
    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
    if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
    });
    return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
};
exports.promisify.custom = kCustomPromisifiedSymbol;
function callbackifyOnRejected(reason, cb) {
    // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
    // Because `null` is a special error value in callbacks which means "no error
    // occurred", we error-wrap so the callback consumer can distinguish between
    // "the promise rejected with null" or "the promise fulfilled with undefined".
    if (!reason) {
        var newReason = new Error('Promise was rejected with a falsy value');
        newReason.reason = reason;
        reason = newReason;
    }
    return cb(reason);
}
function callbackify(original) {
    if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');
    // We DO NOT return the promise as it gives the user a false sense that
    // the promise is actually somehow related to the callback's execution
    // and that the callback throwing will reject the promise.
    function callbackified() {
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        var maybeCb = args.pop();
        if (typeof maybeCb !== 'function') throw new TypeError('The last argument must be of type Function');
        var self = this;
        var cb = function() {
            return maybeCb.apply(self, arguments);
        };
        // In true node style we process the callback on `nextTick` with all the
        // implications (stack, `uncaughtException`, `async_hooks`)
        original.apply(this, args).then(function(ret) {
            process.nextTick(cb.bind(null, null, ret));
        }, function(rej) {
            process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
        });
    }
    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
    Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
    return callbackified;
}
exports.callbackify = callbackify;

},{"process":"6Upk8","./support/types":"gUmka","./support/isBuffer":"gwQDs","inherits":"bYMAq"}],"gUmka":[function(require,module,exports) {
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
'use strict';
var isArgumentsObject = require('is-arguments');
var isGeneratorFunction = require('is-generator-function');
var whichTypedArray = require('which-typed-array');
var isTypedArray = require('is-typed-array');
function uncurryThis(f) {
    return f.call.bind(f);
}
var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';
var ObjectToString = uncurryThis(Object.prototype.toString);
var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);
if (BigIntSupported) var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
if (SymbolSupported) var symbolValue = uncurryThis(Symbol.prototype.valueOf);
function checkBoxedPrimitive(value, prototypeValueOf) {
    if (typeof value !== 'object') return false;
    try {
        prototypeValueOf(value);
        return true;
    } catch (e) {
        return false;
    }
}
exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;
// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
    return typeof Promise !== 'undefined' && input instanceof Promise || input !== null && typeof input === 'object' && typeof input.then === 'function' && typeof input.catch === 'function';
}
exports.isPromise = isPromise;
function isArrayBufferView(value) {
    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) return ArrayBuffer.isView(value);
    return isTypedArray(value) || isDataView(value);
}
exports.isArrayBufferView = isArrayBufferView;
function isUint8Array(value) {
    return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;
function isUint8ClampedArray(value) {
    return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;
function isUint16Array(value) {
    return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;
function isUint32Array(value) {
    return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;
function isInt8Array(value) {
    return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;
function isInt16Array(value) {
    return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;
function isInt32Array(value) {
    return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;
function isFloat32Array(value) {
    return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;
function isFloat64Array(value) {
    return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;
function isBigInt64Array(value) {
    return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;
function isBigUint64Array(value) {
    return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;
function isMapToString(value) {
    return ObjectToString(value) === '[object Map]';
}
isMapToString.working = typeof Map !== 'undefined' && isMapToString(new Map());
function isMap(value) {
    if (typeof Map === 'undefined') return false;
    return isMapToString.working ? isMapToString(value) : value instanceof Map;
}
exports.isMap = isMap;
function isSetToString(value) {
    return ObjectToString(value) === '[object Set]';
}
isSetToString.working = typeof Set !== 'undefined' && isSetToString(new Set());
function isSet(value) {
    if (typeof Set === 'undefined') return false;
    return isSetToString.working ? isSetToString(value) : value instanceof Set;
}
exports.isSet = isSet;
function isWeakMapToString(value) {
    return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = typeof WeakMap !== 'undefined' && isWeakMapToString(new WeakMap());
function isWeakMap(value) {
    if (typeof WeakMap === 'undefined') return false;
    return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;
function isWeakSetToString(value) {
    return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = typeof WeakSet !== 'undefined' && isWeakSetToString(new WeakSet());
function isWeakSet(value) {
    return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;
function isArrayBufferToString(value) {
    return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = typeof ArrayBuffer !== 'undefined' && isArrayBufferToString(new ArrayBuffer());
function isArrayBuffer(value) {
    if (typeof ArrayBuffer === 'undefined') return false;
    return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;
function isDataViewToString(value) {
    return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined' && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
function isDataView(value) {
    if (typeof DataView === 'undefined') return false;
    return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
}
exports.isDataView = isDataView;
// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
    return ObjectToString(value) === '[object SharedArrayBuffer]';
}
function isSharedArrayBuffer(value) {
    if (typeof SharedArrayBufferCopy === 'undefined') return false;
    if (typeof isSharedArrayBufferToString.working === 'undefined') isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
    return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;
function isAsyncFunction(value) {
    return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;
function isMapIterator(value) {
    return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;
function isSetIterator(value) {
    return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;
function isGeneratorObject(value) {
    return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;
function isWebAssemblyCompiledModule(value) {
    return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
function isNumberObject(value) {
    return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;
function isStringObject(value) {
    return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;
function isBooleanObject(value) {
    return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;
function isBigIntObject(value) {
    return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;
function isSymbolObject(value) {
    return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;
function isBoxedPrimitive(value) {
    return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
}
exports.isBoxedPrimitive = isBoxedPrimitive;
function isAnyArrayBuffer(value) {
    return typeof Uint8Array !== 'undefined' && (isArrayBuffer(value) || isSharedArrayBuffer(value));
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;
[
    'isProxy',
    'isExternal',
    'isModuleNamespaceObject'
].forEach(function(method) {
    Object.defineProperty(exports, method, {
        enumerable: false,
        value: function() {
            throw new Error(method + ' is not supported in userland');
        }
    });
});

},{"is-arguments":"euLry","is-generator-function":"5IU6N","which-typed-array":"6jnMr","is-typed-array":"9fLxg"}],"euLry":[function(require,module,exports) {
'use strict';
var hasToStringTag = require('has-tostringtag/shams')();
var callBound = require('call-bind/callBound');
var $toString = callBound('Object.prototype.toString');
var isStandardArguments = function isArguments(value) {
    if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) return false;
    return $toString(value) === '[object Arguments]';
};
var isLegacyArguments = function isArguments1(value) {
    if (isStandardArguments(value)) return true;
    return value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && $toString(value) !== '[object Array]' && $toString(value.callee) === '[object Function]';
};
var supportsStandardArguments = function() {
    return isStandardArguments(arguments);
}();
isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests
module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

},{"has-tostringtag/shams":"0rynY","call-bind/callBound":"b3tPn"}],"0rynY":[function(require,module,exports) {
'use strict';
var hasSymbols = require('has-symbols/shams');
module.exports = function hasToStringTagShams() {
    return hasSymbols() && !!Symbol.toStringTag;
};

},{"has-symbols/shams":"cyjEK"}],"cyjEK":[function(require,module,exports) {
'use strict';
/* eslint complexity: [2, 18], max-statements: [2, 33] */ module.exports = function hasSymbols() {
    if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') return false;
    if (typeof Symbol.iterator === 'symbol') return true;
    var obj = {
    };
    var sym = Symbol('test');
    var symObj = Object(sym);
    if (typeof sym === 'string') return false;
    if (Object.prototype.toString.call(sym) !== '[object Symbol]') return false;
    if (Object.prototype.toString.call(symObj) !== '[object Symbol]') return false;
    // temp disabled per https://github.com/ljharb/object.assign/issues/17
    // if (sym instanceof Symbol) { return false; }
    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    // if (!(symObj instanceof Symbol)) { return false; }
    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
    var symVal = 42;
    obj[sym] = symVal;
    for(sym in obj)return false;
     // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) return false;
    if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) return false;
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) return false;
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) return false;
    if (typeof Object.getOwnPropertyDescriptor === 'function') {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) return false;
    }
    return true;
};

},{}],"b3tPn":[function(require,module,exports) {
'use strict';
var GetIntrinsic = require('get-intrinsic');
var callBind = require('./');
var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));
module.exports = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = GetIntrinsic(name, !!allowMissing);
    if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) return callBind(intrinsic);
    return intrinsic;
};

},{"get-intrinsic":"lKFh5","./":"5uKNL"}],"lKFh5":[function(require,module,exports) {
'use strict';
var undefined;
var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;
// eslint-disable-next-line consistent-return
var getEvalledConstructor = function(expressionSyntax) {
    try {
        return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
    } catch (e) {
    }
};
var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) try {
    $gOPD({
    }, '');
} catch (e) {
    $gOPD = null; // this is IE 8, which has a broken gOPD
}
var throwTypeError = function() {
    throw new $TypeError();
};
var ThrowTypeError = $gOPD ? function() {
    try {
        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
        arguments.callee; // IE 8 does not throw here
        return throwTypeError;
    } catch (calleeThrows) {
        try {
            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
            return $gOPD(arguments, 'callee').get;
        } catch (gOPDthrows) {
            return throwTypeError;
        }
    }
}() : throwTypeError;
var hasSymbols = require('has-symbols')();
var getProto = Object.getPrototypeOf || function(x) {
    return x.__proto__;
}; // eslint-disable-line no-proto
var needsEval = {
};
var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);
var INTRINSICS = {
    '%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
    '%Array%': Array,
    '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
    '%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
    '%AsyncFromSyncIteratorPrototype%': undefined,
    '%AsyncFunction%': needsEval,
    '%AsyncGenerator%': needsEval,
    '%AsyncGeneratorFunction%': needsEval,
    '%AsyncIteratorPrototype%': needsEval,
    '%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
    '%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
    '%Boolean%': Boolean,
    '%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
    '%Date%': Date,
    '%decodeURI%': decodeURI,
    '%decodeURIComponent%': decodeURIComponent,
    '%encodeURI%': encodeURI,
    '%encodeURIComponent%': encodeURIComponent,
    '%Error%': Error,
    '%eval%': eval,
    '%EvalError%': EvalError,
    '%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
    '%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
    '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
    '%Function%': $Function,
    '%GeneratorFunction%': needsEval,
    '%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
    '%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
    '%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
    '%isFinite%': isFinite,
    '%isNaN%': isNaN,
    '%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
    '%JSON%': typeof JSON === 'object' ? JSON : undefined,
    '%Map%': typeof Map === 'undefined' ? undefined : Map,
    '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
    '%Math%': Math,
    '%Number%': Number,
    '%Object%': Object,
    '%parseFloat%': parseFloat,
    '%parseInt%': parseInt,
    '%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
    '%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
    '%RangeError%': RangeError,
    '%ReferenceError%': ReferenceError,
    '%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
    '%RegExp%': RegExp,
    '%Set%': typeof Set === 'undefined' ? undefined : Set,
    '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
    '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
    '%String%': String,
    '%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
    '%Symbol%': hasSymbols ? Symbol : undefined,
    '%SyntaxError%': $SyntaxError,
    '%ThrowTypeError%': ThrowTypeError,
    '%TypedArray%': TypedArray,
    '%TypeError%': $TypeError,
    '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
    '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
    '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
    '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
    '%URIError%': URIError,
    '%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
    '%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
    '%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};
var doEval = function doEval1(name) {
    var value;
    if (name === '%AsyncFunction%') value = getEvalledConstructor('async function () {}');
    else if (name === '%GeneratorFunction%') value = getEvalledConstructor('function* () {}');
    else if (name === '%AsyncGeneratorFunction%') value = getEvalledConstructor('async function* () {}');
    else if (name === '%AsyncGenerator%') {
        var fn = doEval1('%AsyncGeneratorFunction%');
        if (fn) value = fn.prototype;
    } else if (name === '%AsyncIteratorPrototype%') {
        var gen = doEval1('%AsyncGenerator%');
        if (gen) value = getProto(gen.prototype);
    }
    INTRINSICS[name] = value;
    return value;
};
var LEGACY_ALIASES = {
    '%ArrayBufferPrototype%': [
        'ArrayBuffer',
        'prototype'
    ],
    '%ArrayPrototype%': [
        'Array',
        'prototype'
    ],
    '%ArrayProto_entries%': [
        'Array',
        'prototype',
        'entries'
    ],
    '%ArrayProto_forEach%': [
        'Array',
        'prototype',
        'forEach'
    ],
    '%ArrayProto_keys%': [
        'Array',
        'prototype',
        'keys'
    ],
    '%ArrayProto_values%': [
        'Array',
        'prototype',
        'values'
    ],
    '%AsyncFunctionPrototype%': [
        'AsyncFunction',
        'prototype'
    ],
    '%AsyncGenerator%': [
        'AsyncGeneratorFunction',
        'prototype'
    ],
    '%AsyncGeneratorPrototype%': [
        'AsyncGeneratorFunction',
        'prototype',
        'prototype'
    ],
    '%BooleanPrototype%': [
        'Boolean',
        'prototype'
    ],
    '%DataViewPrototype%': [
        'DataView',
        'prototype'
    ],
    '%DatePrototype%': [
        'Date',
        'prototype'
    ],
    '%ErrorPrototype%': [
        'Error',
        'prototype'
    ],
    '%EvalErrorPrototype%': [
        'EvalError',
        'prototype'
    ],
    '%Float32ArrayPrototype%': [
        'Float32Array',
        'prototype'
    ],
    '%Float64ArrayPrototype%': [
        'Float64Array',
        'prototype'
    ],
    '%FunctionPrototype%': [
        'Function',
        'prototype'
    ],
    '%Generator%': [
        'GeneratorFunction',
        'prototype'
    ],
    '%GeneratorPrototype%': [
        'GeneratorFunction',
        'prototype',
        'prototype'
    ],
    '%Int8ArrayPrototype%': [
        'Int8Array',
        'prototype'
    ],
    '%Int16ArrayPrototype%': [
        'Int16Array',
        'prototype'
    ],
    '%Int32ArrayPrototype%': [
        'Int32Array',
        'prototype'
    ],
    '%JSONParse%': [
        'JSON',
        'parse'
    ],
    '%JSONStringify%': [
        'JSON',
        'stringify'
    ],
    '%MapPrototype%': [
        'Map',
        'prototype'
    ],
    '%NumberPrototype%': [
        'Number',
        'prototype'
    ],
    '%ObjectPrototype%': [
        'Object',
        'prototype'
    ],
    '%ObjProto_toString%': [
        'Object',
        'prototype',
        'toString'
    ],
    '%ObjProto_valueOf%': [
        'Object',
        'prototype',
        'valueOf'
    ],
    '%PromisePrototype%': [
        'Promise',
        'prototype'
    ],
    '%PromiseProto_then%': [
        'Promise',
        'prototype',
        'then'
    ],
    '%Promise_all%': [
        'Promise',
        'all'
    ],
    '%Promise_reject%': [
        'Promise',
        'reject'
    ],
    '%Promise_resolve%': [
        'Promise',
        'resolve'
    ],
    '%RangeErrorPrototype%': [
        'RangeError',
        'prototype'
    ],
    '%ReferenceErrorPrototype%': [
        'ReferenceError',
        'prototype'
    ],
    '%RegExpPrototype%': [
        'RegExp',
        'prototype'
    ],
    '%SetPrototype%': [
        'Set',
        'prototype'
    ],
    '%SharedArrayBufferPrototype%': [
        'SharedArrayBuffer',
        'prototype'
    ],
    '%StringPrototype%': [
        'String',
        'prototype'
    ],
    '%SymbolPrototype%': [
        'Symbol',
        'prototype'
    ],
    '%SyntaxErrorPrototype%': [
        'SyntaxError',
        'prototype'
    ],
    '%TypedArrayPrototype%': [
        'TypedArray',
        'prototype'
    ],
    '%TypeErrorPrototype%': [
        'TypeError',
        'prototype'
    ],
    '%Uint8ArrayPrototype%': [
        'Uint8Array',
        'prototype'
    ],
    '%Uint8ClampedArrayPrototype%': [
        'Uint8ClampedArray',
        'prototype'
    ],
    '%Uint16ArrayPrototype%': [
        'Uint16Array',
        'prototype'
    ],
    '%Uint32ArrayPrototype%': [
        'Uint32Array',
        'prototype'
    ],
    '%URIErrorPrototype%': [
        'URIError',
        'prototype'
    ],
    '%WeakMapPrototype%': [
        'WeakMap',
        'prototype'
    ],
    '%WeakSetPrototype%': [
        'WeakSet',
        'prototype'
    ]
};
var bind = require('function-bind');
var hasOwn = require('has');
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */ 
var stringToPath = function stringToPath1(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
    if (first === '%' && last !== '%') throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
    else if (last === '%' && first !== '%') throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
    var result = [];
    $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
    });
    return result;
};
/* end adaptation */ var getBaseIntrinsic = function getBaseIntrinsic1(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = '%' + alias[0] + '%';
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) value = doEval(intrinsicName);
        if (typeof value === 'undefined' && !allowMissing) throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
        return {
            alias: alias,
            name: intrinsicName,
            value: value
        };
    }
    throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};
module.exports = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== 'string' || name.length === 0) throw new $TypeError('intrinsic name must be a non-empty string');
    if (arguments.length > 1 && typeof allowMissing !== 'boolean') throw new $TypeError('"allowMissing" argument must be a boolean');
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
    var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([
            0,
            1
        ], alias));
    }
    for(var i = 1, isOwn = true; i < parts.length; i += 1){
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) throw new $SyntaxError('property names with quotes must have matching quotes');
        if (part === 'constructor' || !isOwn) skipFurtherCaching = true;
        intrinsicBaseName += '.' + part;
        intrinsicRealName = '%' + intrinsicBaseName + '%';
        if (hasOwn(INTRINSICS, intrinsicRealName)) value = INTRINSICS[intrinsicRealName];
        else if (value != null) {
            if (!(part in value)) {
                if (!allowMissing) throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
                return void 0;
            }
            if ($gOPD && i + 1 >= parts.length) {
                var desc = $gOPD(value, part);
                isOwn = !!desc;
                // By convention, when a data property is converted to an accessor
                // property to emulate a data property that does not suffer from
                // the override mistake, that accessor's getter is marked with
                // an `originalValue` property. Here, when we detect this, we
                // uphold the illusion by pretending to see that original data
                // property, i.e., returning the value rather than the getter
                // itself.
                if (isOwn && 'get' in desc && !('originalValue' in desc.get)) value = desc.get;
                else value = value[part];
            } else {
                isOwn = hasOwn(value, part);
                value = value[part];
            }
            if (isOwn && !skipFurtherCaching) INTRINSICS[intrinsicRealName] = value;
        }
    }
    return value;
};

},{"has-symbols":"5opm2","function-bind":"a1J00","has":"kSgez"}],"5opm2":[function(require,module,exports) {
'use strict';
var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = require('./shams');
module.exports = function hasNativeSymbols() {
    if (typeof origSymbol !== 'function') return false;
    if (typeof Symbol !== 'function') return false;
    if (typeof origSymbol('foo') !== 'symbol') return false;
    if (typeof Symbol('bar') !== 'symbol') return false;
    return hasSymbolSham();
};

},{"./shams":"cyjEK"}],"a1J00":[function(require,module,exports) {
'use strict';
var implementation = require('./implementation');
module.exports = Function.prototype.bind || implementation;

},{"./implementation":"k5PZZ"}],"k5PZZ":[function(require,module,exports) {
'use strict';
/* eslint no-invalid-this: 1 */ var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';
module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) throw new TypeError(ERROR_MESSAGE + target);
    var args = slice.call(arguments, 1);
    var bound;
    var binder = function() {
        if (this instanceof bound) {
            var result = target.apply(this, args.concat(slice.call(arguments)));
            if (Object(result) === result) return result;
            return this;
        } else return target.apply(that, args.concat(slice.call(arguments)));
    };
    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for(var i = 0; i < boundLength; i++)boundArgs.push('$' + i);
    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);
    if (target.prototype) {
        var Empty = function Empty1() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }
    return bound;
};

},{}],"kSgez":[function(require,module,exports) {
'use strict';
var bind = require('function-bind');
module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":"a1J00"}],"5uKNL":[function(require,module,exports) {
'use strict';
var bind = require('function-bind');
var GetIntrinsic = require('get-intrinsic');
var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');
if ($defineProperty) try {
    $defineProperty({
    }, 'a', {
        value: 1
    });
} catch (e) {
    // IE 8 has a broken defineProperty
    $defineProperty = null;
}
module.exports = function callBind(originalFunction) {
    var func = $reflectApply(bind, $call, arguments);
    if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, 'length');
        if (desc.configurable) // original length, plus the receiver, minus any additional arguments (after the receiver)
        $defineProperty(func, 'length', {
            value: 1 + $max(0, originalFunction.length - (arguments.length - 1))
        });
    }
    return func;
};
var applyBind = function applyBind1() {
    return $reflectApply(bind, $apply, arguments);
};
if ($defineProperty) $defineProperty(module.exports, 'apply', {
    value: applyBind
});
else module.exports.apply = applyBind;

},{"function-bind":"a1J00","get-intrinsic":"lKFh5"}],"5IU6N":[function(require,module,exports) {
'use strict';
var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = require('has-tostringtag/shams')();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function() {
    if (!hasToStringTag) return false;
    try {
        return Function('return function*() {}')();
    } catch (e) {
    }
};
var GeneratorFunction;
module.exports = function isGeneratorFunction(fn) {
    if (typeof fn !== 'function') return false;
    if (isFnRegex.test(fnToStr.call(fn))) return true;
    if (!hasToStringTag) {
        var str = toStr.call(fn);
        return str === '[object GeneratorFunction]';
    }
    if (!getProto) return false;
    if (typeof GeneratorFunction === 'undefined') {
        var generatorFunc = getGeneratorFunc();
        GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
    }
    return getProto(fn) === GeneratorFunction;
};

},{"has-tostringtag/shams":"0rynY"}],"6jnMr":[function(require,module,exports) {
var global = arguments[3];
'use strict';
var forEach = require('foreach');
var availableTypedArrays = require('available-typed-arrays');
var callBound = require('call-bind/callBound');
var $toString = callBound('Object.prototype.toString');
var hasToStringTag = require('has-tostringtag/shams')();
var typedArrays = availableTypedArrays();
var $slice = callBound('String.prototype.slice');
var toStrTags = {
};
var gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) forEach(typedArrays, function(typedArray) {
    if (typeof global[typedArray] === 'function') {
        var arr = new global[typedArray]();
        if (Symbol.toStringTag in arr) {
            var proto = getPrototypeOf(arr);
            var descriptor = gOPD(proto, Symbol.toStringTag);
            if (!descriptor) {
                var superProto = getPrototypeOf(proto);
                descriptor = gOPD(superProto, Symbol.toStringTag);
            }
            toStrTags[typedArray] = descriptor.get;
        }
    }
});
var tryTypedArrays = function tryAllTypedArrays(value) {
    var foundName = false;
    forEach(toStrTags, function(getter, typedArray) {
        if (!foundName) try {
            var name = getter.call(value);
            if (name === typedArray) foundName = name;
        } catch (e) {
        }
    });
    return foundName;
};
var isTypedArray = require('is-typed-array');
module.exports = function whichTypedArray(value) {
    if (!isTypedArray(value)) return false;
    if (!hasToStringTag || !(Symbol.toStringTag in value)) return $slice($toString(value), 8, -1);
    return tryTypedArrays(value);
};

},{"foreach":"ln4LW","available-typed-arrays":"42Uwq","call-bind/callBound":"b3tPn","has-tostringtag/shams":"0rynY","es-abstract/helpers/getOwnPropertyDescriptor":"9BvVW","is-typed-array":"9fLxg"}],"ln4LW":[function(require,module,exports) {
var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;
module.exports = function forEach(obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') throw new TypeError('iterator must be a function');
    var l = obj.length;
    if (l === +l) for(var i = 0; i < l; i++)fn.call(ctx, obj[i], i, obj);
    else {
        for(var k in obj)if (hasOwn.call(obj, k)) fn.call(ctx, obj[k], k, obj);
    }
};

},{}],"42Uwq":[function(require,module,exports) {
var global = arguments[3];
'use strict';
var possibleNames = [
    'BigInt64Array',
    'BigUint64Array',
    'Float32Array',
    'Float64Array',
    'Int16Array',
    'Int32Array',
    'Int8Array',
    'Uint16Array',
    'Uint32Array',
    'Uint8Array',
    'Uint8ClampedArray'
];
module.exports = function availableTypedArrays() {
    var out = [];
    for(var i = 0; i < possibleNames.length; i++)if (typeof global[possibleNames[i]] === 'function') out[out.length] = possibleNames[i];
    return out;
};

},{}],"9BvVW":[function(require,module,exports) {
'use strict';
var GetIntrinsic = require('get-intrinsic');
var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%');
if ($gOPD) try {
    $gOPD([], 'length');
} catch (e) {
    // IE 8 has a broken gOPD
    $gOPD = null;
}
module.exports = $gOPD;

},{"get-intrinsic":"lKFh5"}],"9fLxg":[function(require,module,exports) {
var global = arguments[3];
'use strict';
var forEach = require('foreach');
var availableTypedArrays = require('available-typed-arrays');
var callBound = require('call-bind/callBound');
var $toString = callBound('Object.prototype.toString');
var hasToStringTag = require('has-tostringtag/shams')();
var typedArrays = availableTypedArrays();
var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
    for(var i = 0; i < array.length; i += 1){
        if (array[i] === value) return i;
    }
    return -1;
};
var $slice = callBound('String.prototype.slice');
var toStrTags = {
};
var gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) forEach(typedArrays, function(typedArray) {
    var arr = new global[typedArray]();
    if (Symbol.toStringTag in arr) {
        var proto = getPrototypeOf(arr);
        var descriptor = gOPD(proto, Symbol.toStringTag);
        if (!descriptor) {
            var superProto = getPrototypeOf(proto);
            descriptor = gOPD(superProto, Symbol.toStringTag);
        }
        toStrTags[typedArray] = descriptor.get;
    }
});
var tryTypedArrays = function tryAllTypedArrays(value) {
    var anyTrue = false;
    forEach(toStrTags, function(getter, typedArray) {
        if (!anyTrue) try {
            anyTrue = getter.call(value) === typedArray;
        } catch (e) {
        }
    });
    return anyTrue;
};
module.exports = function isTypedArray(value) {
    if (!value || typeof value !== 'object') return false;
    if (!hasToStringTag || !(Symbol.toStringTag in value)) {
        var tag = $slice($toString(value), 8, -1);
        return $indexOf(typedArrays, tag) > -1;
    }
    if (!gOPD) return false;
    return tryTypedArrays(value);
};

},{"foreach":"ln4LW","available-typed-arrays":"42Uwq","call-bind/callBound":"b3tPn","has-tostringtag/shams":"0rynY","es-abstract/helpers/getOwnPropertyDescriptor":"9BvVW"}],"gwQDs":[function(require,module,exports) {
module.exports = function isBuffer(arg) {
    return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
};

},{}]},["fZl0R","7sr9x"], "7sr9x", "parcelRequire99b6")

//# sourceMappingURL=index.6116d660.js.map
